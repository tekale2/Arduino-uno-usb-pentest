
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001e56  00001eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080012a  0080012a  00001f14  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000059ab  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  000059bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f252  00000000  00000000  00006254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003702  00000000  00000000  000154a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055aa  00000000  00000000  00018ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001808  00000000  00000000  0001e154  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f4e  00000000  00000000  0001f95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac24  00000000  00000000  000248aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f4ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
       2:	00 00       	nop
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c6       	rjmp	.+3198   	; 0xca8 <__vector_10>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4565>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4558>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4553>:
     11d:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     12d:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     13d:	00                                                  .

0000013e <__c.4551>:
     13e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     14e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15e:	6f 6e 2e 0d 0a 00                                   on....

00000164 <__c.4549>:
				ReportSize     -= 2;
     164:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     174:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     194:	76 69 63 65 2e 0d 0a 00                             vice....

0000019c <__c.4547>:
     19c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ac:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1bc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001c9 <__c.4540>:
     1c9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d9:	68 65 64 2e 0d 0a 00                                hed....

000001e0 <__c.4535>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f0:	0d 0a 00                                            ...

000001f3 <__c.4530>:
     1f3:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     203:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000213 <__c.4528>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     213:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     223:	2e 2e 0d 0a 00                                      .....

00000228 <__c.4526>:
     228:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

00000236 <__c.4524>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     236:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     246:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

00000253 <__c.4522>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     253:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     263:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000026b <__c.4520>:
     26b:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27b:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

0000028a <__c.4518>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28a:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     29a:	2e 2e 0d 0a 00                                      .....

0000029f <__c.4509>:
     29f:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2af:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2bf:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
				break;
     2cc:	1f be       	out	0x3f, r1	; 63
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
				break;
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1

				if (ParserData->UsingReportIDs)
     2dc:	e6 e5       	ldi	r30, 0x56	; 86
     2de:	fe e1       	ldi	r31, 0x1E	; 30
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	aa 32       	cpi	r26, 0x2A	; 42
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	aa e2       	ldi	r26, 0x2A	; 42
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	ac 34       	cpi	r26, 0x4C	; 76
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	76 d0       	rcall	.+236    	; 0x3ee <main>
     302:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <_exit>

00000306 <__bad_interrupt>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <LEDs_SetAllLEDs>:
     308:	9b b1       	in	r25, 0x0b	; 11
     30a:	9f 70       	andi	r25, 0x0F	; 15
     30c:	98 2b       	or	r25, r24
     30e:	9b b9       	out	0x0b, r25	; 11
     310:	08 95       	ret

00000312 <SetupHardware>:
     312:	84 b7       	in	r24, 0x34	; 52
     314:	87 7f       	andi	r24, 0xF7	; 247
     316:	84 bf       	out	0x34, r24	; 52
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	88 e1       	ldi	r24, 0x18	; 24
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	80 93 60 00 	sts	0x0060, r24
     322:	10 92 60 00 	sts	0x0060, r1
     326:	0f be       	out	0x3f, r0	; 63
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	80 e8       	ldi	r24, 0x80	; 128
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	80 93 61 00 	sts	0x0061, r24
     334:	90 93 61 00 	sts	0x0061, r25
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	0f be       	out	0x3f, r0	; 63
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	90 e0       	ldi	r25, 0x00	; 0
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	90 93 cd 00 	sts	0x00CD, r25
     342:	80 93 cc 00 	sts	0x00CC, r24
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	80 93 ca 00 	sts	0x00CA, r24
     34c:	10 92 c8 00 	sts	0x00C8, r1
     350:	88 e1       	ldi	r24, 0x18	; 24
     352:	80 93 c9 00 	sts	0x00C9, r24
     356:	53 9a       	sbi	0x0a, 3	; 10
     358:	5a 9a       	sbi	0x0b, 2	; 11
     35a:	8a b1       	in	r24, 0x0a	; 10
     35c:	80 6f       	ori	r24, 0xF0	; 240
     35e:	8a b9       	out	0x0a, r24	; 10
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 70       	andi	r24, 0x0F	; 15
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	8b b9       	out	0x0b, r24	; 11
     366:	85 d4       	rcall	.+2314   	; 0xc72 <USB_Init>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <Serial_CreateStream>

00000370 <StillImageHost_Task>:
     370:	80 91 37 01 	lds	r24, 0x0137
     374:	8b 30       	cpi	r24, 0x0B	; 11
     376:	d1 f5       	brne	.+116    	; 0x3ec <StillImageHost_Task+0x7c>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	8a e8       	ldi	r24, 0x8A	; 138
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 bc 0a 	call	0x1578	; 0x1578 <SI_Host_OpenSession>
				break;
     388:	88 23       	and	r24, r24

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	19 f0       	breq	.+6      	; 0x392 <StillImageHost_Task+0x22>
     38c:	8b e6       	ldi	r24, 0x6B	; 107
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	15 c0       	rjmp	.+42     	; 0x3bc <StillImageHost_Task+0x4c>
     392:	83 e5       	ldi	r24, 0x53	; 83
     394:	92 e0       	ldi	r25, 0x02	; 2
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	63 e1       	ldi	r22, 0x13	; 19
     3a2:	70 e1       	ldi	r23, 0x10	; 16
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 81 0b 	call	0x1702	; 0x1702 <SI_Host_SendCommand>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	91 e0       	ldi	r25, 0x01	; 1
				break;
     3b0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <SI_Host_ReceiveResponse>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b4:	88 23       	and	r24, r24
     3b6:	29 f0       	breq	.+10     	; 0x3c2 <StillImageHost_Task+0x52>
     3b8:	86 e3       	ldi	r24, 0x36	; 54
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <StillImageHost_Task+0x78>
     3c2:	88 e2       	ldi	r24, 0x28	; 40
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     3ca:	83 e1       	ldi	r24, 0x13	; 19
     3cc:	92 e0       	ldi	r25, 0x02	; 2
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     3d2:	80 e0       	ldi	r24, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 22 0b 	call	0x1644	; 0x1644 <SI_Host_CloseSession>
     3da:	88 23       	and	r24, r24
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	19 f0       	breq	.+6      	; 0x3e4 <StillImageHost_Task+0x74>
     3de:	83 ef       	ldi	r24, 0xF3	; 243
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	ec cf       	rjmp	.-40     	; 0x3bc <StillImageHost_Task+0x4c>
     3e4:	80 e6       	ldi	r24, 0x60	; 96
     3e6:	90 df       	rcall	.-224    	; 0x308 <LEDs_SetAllLEDs>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	bc c6       	rjmp	.+3448   	; 0x1164 <USB_Host_SetDeviceConfiguration>
     3ec:	08 95       	ret

000003ee <main>:
     3ee:	91 df       	rcall	.-222    	; 0x312 <SetupHardware>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	8f e9       	ldi	r24, 0x9F	; 159
     3f2:	92 e0       	ldi	r25, 0x02	; 2
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     3f8:	80 e1       	ldi	r24, 0x10	; 16
     3fa:	86 df       	rcall	.-244    	; 0x308 <LEDs_SetAllLEDs>
     3fc:	78 94       	sei
     3fe:	b8 df       	rcall	.-144    	; 0x370 <StillImageHost_Task>
     400:	f0 d6       	rcall	.+3552   	; 0x11e2 <USB_USBTask>
     402:	fd cf       	rjmp	.-6      	; 0x3fe <main+0x10>

00000404 <EVENT_USB_Host_DeviceAttached>:
     404:	80 ee       	ldi	r24, 0xE0	; 224
     406:	91 e0       	ldi	r25, 0x01	; 1
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     40c:	80 ea       	ldi	r24, 0xA0	; 160
     40e:	7c cf       	rjmp	.-264    	; 0x308 <LEDs_SetAllLEDs>

00000410 <EVENT_USB_Host_DeviceUnattached>:
     410:	89 ec       	ldi	r24, 0xC9	; 201
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	76 cf       	rjmp	.-276    	; 0x308 <LEDs_SetAllLEDs>

0000041c <EVENT_USB_Host_DeviceEnumerationComplete>:
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29

				if (UsageListSize)
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	c2 50       	subi	r28, 0x02	; 2
     426:	d2 40       	sbci	r29, 0x02	; 2
     428:	0f b6       	in	r0, 0x3f	; 63
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	80 ea       	ldi	r24, 0xA0	; 160
     434:	69 df       	rcall	.-302    	; 0x308 <LEDs_SetAllLEDs>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	32 e0       	ldi	r19, 0x02	; 2
     43a:	ae 01       	movw	r20, r28
     43c:	4f 5f       	subi	r20, 0xFF	; 255
     43e:	5f 4f       	sbci	r21, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	be 01       	movw	r22, r28
     442:	6f 5f       	subi	r22, 0xFF	; 255
     444:	7d 4f       	sbci	r23, 0xFD	; 253
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	de d4       	rcall	.+2492   	; 0xe06 <USB_Host_GetDeviceConfigDescriptor>
     44a:	88 23       	and	r24, r24
					  UsageList[i - 1] = UsageList[i];
     44c:	19 f0       	breq	.+6      	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     44e:	8c e9       	ldi	r24, 0x9C	; 156
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	17 c0       	rjmp	.+46     	; 0x482 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	cf 5f       	subi	r28, 0xFF	; 255
     456:	dd 4f       	sbci	r29, 0xFD	; 253
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	68 81       	ld	r22, Y
     45a:	79 81       	ldd	r23, Y+1	; 0x01
     45c:	c1 50       	subi	r28, 0x01	; 1
     45e:	d2 40       	sbci	r29, 0x02	; 2
     460:	ae 01       	movw	r20, r28
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	4f 5f       	subi	r20, 0xFF	; 255
     464:	5f 4f       	sbci	r21, 0xFF	; 255
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	ef d6       	rcall	.+3550   	; 0x124a <SI_Host_ConfigurePipes>
     46c:	88 23       	and	r24, r24
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	19 f0       	breq	.+6      	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     470:	84 e6       	ldi	r24, 0x64	; 100
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	06 c0       	rjmp	.+12     	; 0x482 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	75 d6       	rcall	.+3306   	; 0x1164 <USB_Host_SetDeviceConfiguration>
     47a:	88 23       	and	r24, r24
     47c:	31 f0       	breq	.+12     	; 0x48a <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     47e:	8e e3       	ldi	r24, 0x3E	; 62
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     486:	80 e9       	ldi	r24, 0x90	; 144
     488:	05 c0       	rjmp	.+10     	; 0x494 <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	8d e1       	ldi	r24, 0x1D	; 29
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <puts_P>
     492:	80 e6       	ldi	r24, 0x60	; 96
     494:	39 df       	rcall	.-398    	; 0x308 <LEDs_SetAllLEDs>
     496:	ce 5f       	subi	r28, 0xFE	; 254
     498:	dd 4f       	sbci	r29, 0xFD	; 253
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <EVENT_USB_Host_HostError>:
     4aa:	cf 93       	push	r28
				break;
     4ac:	df 93       	push	r29
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	1f 92       	push	r1
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	75 d3       	rcall	.+1770   	; 0xba2 <USB_Disable>
     4b8:	1f 92       	push	r1
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	8f 93       	push	r24
     4be:	8e ee       	ldi	r24, 0xEE	; 238
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	0e 94 43 0c 	call	0x1886	; 0x1886 <printf_P>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	80 e9       	ldi	r24, 0x90	; 144
     4cc:	1d df       	rcall	.-454    	; 0x308 <LEDs_SetAllLEDs>
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <EVENT_USB_Host_HostError+0x2c>

000004d8 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4d8:	90 91 37 01 	lds	r25, 0x0137
     4dc:	1f 92       	push	r1
     4de:	9f 93       	push	r25
     4e0:	1f 92       	push	r1
     4e2:	6f 93       	push	r22
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	1f 92       	push	r1
     4e6:	8f 93       	push	r24
     4e8:	88 e9       	ldi	r24, 0x98	; 152
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	0e 94 43 0c 	call	0x1886	; 0x1886 <printf_P>
     4f4:	8d b7       	in	r24, 0x3d	; 61
     4f6:	9e b7       	in	r25, 0x3e	; 62
     4f8:	08 96       	adiw	r24, 0x08	; 8
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	9e bf       	out	0x3e, r25	; 62
     500:	0f be       	out	0x3f, r0	; 63
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	8d bf       	out	0x3d, r24	; 61
     504:	80 e9       	ldi	r24, 0x90	; 144
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	00 cf       	rjmp	.-512    	; 0x308 <LEDs_SetAllLEDs>

00000508 <USB_Host_ResetDevice>:
     508:	80 91 9e 00 	lds	r24, 0x009E
     50c:	81 70       	andi	r24, 0x01	; 1
     50e:	90 91 a0 00 	lds	r25, 0x00A0
     512:	9d 7f       	andi	r25, 0xFD	; 253
     514:	90 93 a0 00 	sts	0x00A0, r25
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     518:	90 91 9e 00 	lds	r25, 0x009E
     51c:	92 60       	ori	r25, 0x02	; 2

					if (UsageListSize)
     51e:	90 93 9e 00 	sts	0x009E, r25
     522:	90 91 9e 00 	lds	r25, 0x009E
     526:	91 fd       	sbrc	r25, 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	fc cf       	rjmp	.-8      	; 0x522 <USB_Host_ResetDevice+0x1a>
     52a:	90 91 9e 00 	lds	r25, 0x009E
     52e:	91 60       	ori	r25, 0x01	; 1
     530:	90 93 9e 00 	sts	0x009E, r25
     534:	10 92 2d 01 	sts	0x012D, r1
     538:	90 91 a0 00 	lds	r25, 0x00A0
     53c:	90 72       	andi	r25, 0x20	; 32

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	20 91 a0 00 	lds	r18, 0x00A0
     542:	2f 7d       	andi	r18, 0xDF	; 223
     544:	20 93 a0 00 	sts	0x00A0, r18
     548:	20 91 9f 00 	lds	r18, 0x009F
						  UsageList[i - 1] = UsageList[i];
     54c:	2f 7d       	andi	r18, 0xDF	; 223
     54e:	20 93 9f 00 	sts	0x009F, r18

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	2a e0       	ldi	r18, 0x0A	; 10
     554:	30 91 9f 00 	lds	r19, 0x009F
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	35 ff       	sbrs	r19, 5
     55a:	0b c0       	rjmp	.+22     	; 0x572 <USB_Host_ResetDevice+0x6a>
     55c:	20 91 9f 00 	lds	r18, 0x009F
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	2f 7d       	andi	r18, 0xDF	; 223
     562:	20 93 9f 00 	sts	0x009F, r18
     566:	20 91 9f 00 	lds	r18, 0x009F
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	2d 7f       	andi	r18, 0xFD	; 253
     56c:	20 93 9f 00 	sts	0x009F, r18
     570:	08 c0       	rjmp	.+16     	; 0x582 <USB_Host_ResetDevice+0x7a>
     572:	ef ec       	ldi	r30, 0xCF	; 207
     574:	f7 e0       	ldi	r31, 0x07	; 7
     576:	31 97       	sbiw	r30, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <USB_Host_ResetDevice+0x6e>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <USB_Host_ResetDevice+0x74>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	00 00       	nop
     57e:	21 50       	subi	r18, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	49 f7       	brne	.-46     	; 0x554 <USB_Host_ResetDevice+0x4c>
     582:	99 23       	and	r25, r25
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	29 f0       	breq	.+10     	; 0x590 <USB_Host_ResetDevice+0x88>
     586:	90 91 a0 00 	lds	r25, 0x00A0
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	90 62       	ori	r25, 0x20	; 32
     58c:	90 93 a0 00 	sts	0x00A0, r25
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     590:	81 11       	cpse	r24, r1

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	05 c0       	rjmp	.+10     	; 0x59e <USB_Host_ResetDevice+0x96>
     594:	80 91 9e 00 	lds	r24, 0x009E
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	80 93 9e 00 	sts	0x009E, r24
     59e:	80 91 a0 00 	lds	r24, 0x00A0
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	80 93 a0 00 	sts	0x00A0, r24
     5a8:	08 95       	ret

000005aa <USB_Host_WaitMS>:
     5aa:	20 91 9e 00 	lds	r18, 0x009E

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	21 70       	andi	r18, 0x01	; 1
     5b0:	90 91 a0 00 	lds	r25, 0x00A0
     5b4:	90 72       	andi	r25, 0x20	; 32
     5b6:	30 91 a0 00 	lds	r19, 0x00A0
     5ba:	3f 7d       	andi	r19, 0xDF	; 223

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	30 93 a0 00 	sts	0x00A0, r19
     5c0:	30 91 9f 00 	lds	r19, 0x009F
     5c4:	3f 7d       	andi	r19, 0xDF	; 223
     5c6:	30 93 9f 00 	sts	0x009F, r19
     5ca:	30 91 9e 00 	lds	r19, 0x009E
     5ce:	31 60       	ori	r19, 0x01	; 1
     5d0:	30 93 9e 00 	sts	0x009E, r19
     5d4:	88 23       	and	r24, r24
     5d6:	39 f1       	breq	.+78     	; 0x626 <USB_Host_WaitMS+0x7c>
     5d8:	30 91 9f 00 	lds	r19, 0x009F
     5dc:	35 ff       	sbrs	r19, 5
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <USB_Host_WaitMS+0x42>
     5e0:	30 91 9f 00 	lds	r19, 0x009F
     5e4:	3f 7d       	andi	r19, 0xDF	; 223
     5e6:	30 93 9f 00 	sts	0x009F, r19
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	30 91 37 01 	lds	r19, 0x0137
     5f0:	31 30       	cpi	r19, 0x01	; 1
     5f2:	c1 f0       	breq	.+48     	; 0x624 <USB_Host_WaitMS+0x7a>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	30 91 a6 00 	lds	r19, 0x00A6
     5f8:	34 ff       	sbrs	r19, 4
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <USB_Host_WaitMS+0x64>
     5fc:	10 92 f5 00 	sts	0x00F5, r1
					  return HID_PARSE_InsufficientReportItems;
     600:	80 91 a6 00 	lds	r24, 0x00A6

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	8f 7e       	andi	r24, 0xEF	; 239
     606:	80 93 a6 00 	sts	0x00A6, r24
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	0c c0       	rjmp	.+24     	; 0x626 <USB_Host_WaitMS+0x7c>
     60e:	30 91 a6 00 	lds	r19, 0x00A6
     612:	31 ff       	sbrs	r19, 1
     614:	df cf       	rjmp	.-66     	; 0x5d4 <USB_Host_WaitMS+0x2a>
     616:	80 91 a6 00 	lds	r24, 0x00A6
     61a:	8d 7f       	andi	r24, 0xFD	; 253
     61c:	80 93 a6 00 	sts	0x00A6, r24
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	01 c0       	rjmp	.+2      	; 0x626 <USB_Host_WaitMS+0x7c>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	21 11       	cpse	r18, r1
     628:	05 c0       	rjmp	.+10     	; 0x634 <USB_Host_WaitMS+0x8a>
     62a:	20 91 9e 00 	lds	r18, 0x009E
     62e:	2e 7f       	andi	r18, 0xFE	; 254
     630:	20 93 9e 00 	sts	0x009E, r18
     634:	99 23       	and	r25, r25
     636:	29 f0       	breq	.+10     	; 0x642 <USB_Host_WaitMS+0x98>
     638:	90 91 a0 00 	lds	r25, 0x00A0
     63c:	90 62       	ori	r25, 0x20	; 32
     63e:	90 93 a0 00 	sts	0x00A0, r25
     642:	08 95       	ret

00000644 <USB_Host_ProcessNextHostState>:
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	28 97       	sbiw	r28, 0x08	; 8
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	80 91 37 01 	lds	r24, 0x0137
     660:	85 30       	cpi	r24, 0x05	; 5
     662:	09 f4       	brne	.+2      	; 0x666 <USB_Host_ProcessNextHostState+0x22>
     664:	9c c0       	rjmp	.+312    	; 0x79e <USB_Host_ProcessNextHostState+0x15a>
     666:	68 f4       	brcc	.+26     	; 0x682 <USB_Host_ProcessNextHostState+0x3e>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	e1 f1       	breq	.+120    	; 0x6e4 <USB_Host_ProcessNextHostState+0xa0>
     66c:	18 f4       	brcc	.+6      	; 0x674 <USB_Host_ProcessNextHostState+0x30>
     66e:	88 23       	and	r24, r24
     670:	d9 f0       	breq	.+54     	; 0x6a8 <USB_Host_ProcessNextHostState+0x64>
     672:	ff c0       	rjmp	.+510    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     674:	83 30       	cpi	r24, 0x03	; 3
     676:	09 f4       	brne	.+2      	; 0x67a <USB_Host_ProcessNextHostState+0x36>
     678:	3f c0       	rjmp	.+126    	; 0x6f8 <USB_Host_ProcessNextHostState+0xb4>
     67a:	84 30       	cpi	r24, 0x04	; 4
     67c:	09 f4       	brne	.+2      	; 0x680 <USB_Host_ProcessNextHostState+0x3c>
     67e:	67 c0       	rjmp	.+206    	; 0x74e <USB_Host_ProcessNextHostState+0x10a>
     680:	f8 c0       	rjmp	.+496    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     682:	87 30       	cpi	r24, 0x07	; 7
     684:	09 f4       	brne	.+2      	; 0x688 <USB_Host_ProcessNextHostState+0x44>
     686:	a6 c0       	rjmp	.+332    	; 0x7d4 <USB_Host_ProcessNextHostState+0x190>
					  ParserData->TotalReportItems++;
     688:	08 f4       	brcc	.+2      	; 0x68c <USB_Host_ProcessNextHostState+0x48>
     68a:	96 c0       	rjmp	.+300    	; 0x7b8 <USB_Host_ProcessNextHostState+0x174>
     68c:	88 30       	cpi	r24, 0x08	; 8
     68e:	09 f4       	brne	.+2      	; 0x692 <USB_Host_ProcessNextHostState+0x4e>
     690:	bf c0       	rjmp	.+382    	; 0x810 <USB_Host_ProcessNextHostState+0x1cc>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	89 30       	cpi	r24, 0x09	; 9
     694:	09 f0       	breq	.+2      	; 0x698 <USB_Host_ProcessNextHostState+0x54>
     696:	ed c0       	rjmp	.+474    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 a1 00 	sts	0x00A1, r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	8a e0       	ldi	r24, 0x0A	; 10
     6a0:	80 93 37 01 	sts	0x0137, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	bb de       	rcall	.-650    	; 0x41c <EVENT_USB_Host_DeviceEnumerationComplete>
     6a6:	e5 c0       	rjmp	.+458    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     6a8:	00 91 2b 01 	lds	r16, 0x012B
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6ac:	10 91 2c 01 	lds	r17, 0x012C
     6b0:	01 15       	cp	r16, r1
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	11 05       	cpc	r17, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <USB_Host_ProcessNextHostState+0x74>
     6b6:	dd c0       	rjmp	.+442    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	77 df       	rcall	.-274    	; 0x5aa <USB_Host_WaitMS>
     6bc:	88 23       	and	r24, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	31 f0       	breq	.+12     	; 0x6cc <USB_Host_ProcessNextHostState+0x88>
     6c0:	90 91 2a 01 	lds	r25, 0x012A
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	90 93 37 01 	sts	0x0137, r25
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c8:	91 e0       	ldi	r25, 0x01	; 1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	c5 c0       	rjmp	.+394    	; 0x856 <USB_Host_ProcessNextHostState+0x212>
     6cc:	01 50       	subi	r16, 0x01	; 1

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	11 09       	sbc	r17, r1
     6d0:	10 93 2c 01 	sts	0x012C, r17
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d4:	00 93 2b 01 	sts	0x012B, r16
}
     6d8:	01 2b       	or	r16, r17
     6da:	09 f0       	breq	.+2      	; 0x6de <USB_Host_ProcessNextHostState+0x9a>
     6dc:	ca c0       	rjmp	.+404    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     6de:	80 91 2a 01 	lds	r24, 0x012A
     6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <USB_Host_ProcessNextHostState+0xae>
     6e4:	88 ee       	ldi	r24, 0xE8	; 232
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	90 93 2c 01 	sts	0x012C, r25
     6ec:	80 93 2b 01 	sts	0x012B, r24
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	80 93 37 01 	sts	0x0137, r24
     6f6:	bd c0       	rjmp	.+378    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     6f8:	80 91 2b 01 	lds	r24, 0x012B
     6fc:	90 91 2c 01 	lds	r25, 0x012C
     700:	9c 01       	movw	r18, r24
     702:	21 50       	subi	r18, 0x01	; 1
     704:	31 09       	sbc	r19, r1
     706:	30 93 2c 01 	sts	0x012C, r19
     70a:	20 93 2b 01 	sts	0x012B, r18
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     70e:	89 2b       	or	r24, r25
     710:	39 f0       	breq	.+14     	; 0x720 <USB_Host_ProcessNextHostState+0xdc>
     712:	8f ec       	ldi	r24, 0xCF	; 207
     714:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <USB_Host_ProcessNextHostState+0xd2>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <USB_Host_ProcessNextHostState+0xd8>
     71c:	00 00       	nop
     71e:	a9 c0       	rjmp	.+338    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     720:	77 98       	cbi	0x0e, 7	; 14
     722:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     726:	80 61       	ori	r24, 0x10	; 16
     728:	80 93 d8 00 	sts	0x00D8, r24
     72c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     730:	8b 7f       	andi	r24, 0xFB	; 251
     732:	80 93 dd 00 	sts	0x00DD, r24
     736:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     73a:	80 61       	ori	r24, 0x10	; 16
     73c:	80 93 d7 00 	sts	0x00D7, r24
     740:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     744:	82 60       	ori	r24, 0x02	; 2
     746:	80 93 dd 00 	sts	0x00DD, r24
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	d2 cf       	rjmp	.-92     	; 0x6f2 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     74e:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     752:	80 ff       	sbrs	r24, 0
     754:	8e c0       	rjmp	.+284    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     756:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     75a:	8e 7f       	andi	r24, 0xFE	; 254
     75c:	80 93 9f 00 	sts	0x009F, r24
     760:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     764:	8d 7f       	andi	r24, 0xFD	; 253
     766:	80 93 9f 00 	sts	0x009F, r24
     76a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     76e:	8d 7f       	andi	r24, 0xFD	; 253
     770:	80 93 df 00 	sts	0x00DF, r24
     774:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	80 93 de 00 	sts	0x00DE, r24
     77e:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     782:	81 60       	ori	r24, 0x01	; 1
     784:	80 93 9e 00 	sts	0x009E, r24
     788:	a0 d1       	rcall	.+832    	; 0xaca <Pipe_ClearPipes>
     78a:	10 92 37 01 	sts	0x0137, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     78e:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	90 93 2c 01 	sts	0x012C, r25
     796:	80 93 2b 01 	sts	0x012B, r24
     79a:	85 e0       	ldi	r24, 0x05	; 5
     79c:	0a c0       	rjmp	.+20     	; 0x7b2 <USB_Host_ProcessNextHostState+0x16e>
     79e:	b4 de       	rcall	.-664    	; 0x508 <USB_Host_ResetDevice>
     7a0:	10 92 37 01 	sts	0x0137, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7a4:	88 ec       	ldi	r24, 0xC8	; 200
     7a6:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7a8:	90 93 2c 01 	sts	0x012C, r25
     7ac:	80 93 2b 01 	sts	0x012B, r24
     7b0:	86 e0       	ldi	r24, 0x06	; 6
     7b2:	80 93 2a 01 	sts	0x012A, r24
     7b6:	5d c0       	rjmp	.+186    	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     7b8:	01 e0       	ldi	r16, 0x01	; 1
     7ba:	20 e4       	ldi	r18, 0x40	; 64
     7bc:	30 e0       	ldi	r19, 0x00	; 0
			break;
     7be:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	fb d0       	rcall	.+502    	; 0x9bc <Pipe_ConfigurePipe>
     7c6:	81 11       	cpse	r24, r1
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <USB_Host_ProcessNextHostState+0x18c>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	43 c0       	rjmp	.+134    	; 0x856 <USB_Host_ProcessNextHostState+0x212>
     7d0:	87 e0       	ldi	r24, 0x07	; 7
     7d2:	8f cf       	rjmp	.-226    	; 0x6f2 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     7d4:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     7d6:	ea e1       	ldi	r30, 0x1A	; 26
     7d8:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7da:	af e2       	ldi	r26, 0x2F	; 47
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	8a 95       	dec	r24
     7e4:	e1 f7       	brne	.-8      	; 0x7de <USB_Host_ProcessNextHostState+0x19a>
     7e6:	10 92 a7 00 	sts	0x00A7, r1
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	bf d3       	rcall	.+1918   	; 0xf6e <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7f0:	81 11       	cpse	r24, r1
     7f2:	30 c0       	rjmp	.+96     	; 0x854 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7f4:	88 85       	ldd	r24, Y+8	; 0x08
     7f6:	80 93 19 01 	sts	0x0119, r24
     7fa:	86 de       	rcall	.-756    	; 0x508 <USB_Host_ResetDevice>
     7fc:	10 92 37 01 	sts	0x0137, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     800:	88 ec       	ldi	r24, 0xC8	; 200
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 2c 01 	sts	0x012C, r25

			USB_Host_ResetDevice();
     808:	80 93 2b 01 	sts	0x012B, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     80c:	88 e0       	ldi	r24, 0x08	; 8
     80e:	d1 cf       	rjmp	.-94     	; 0x7b2 <USB_Host_ProcessNextHostState+0x16e>
     810:	20 91 19 01 	lds	r18, 0x0119
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	01 e0       	ldi	r16, 0x01	; 1
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     81e:	ce d0       	rcall	.+412    	; 0x9bc <Pipe_ConfigurePipe>
     820:	88 23       	and	r24, r24
     822:	99 f2       	breq	.-90     	; 0x7ca <USB_Host_ProcessNextHostState+0x186>
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	e2 e2       	ldi	r30, 0x22	; 34
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	af e2       	ldi	r26, 0x2F	; 47
     82c:	b1 e0       	ldi	r27, 0x01	; 1
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     834:	e1 f7       	brne	.-8      	; 0x82e <USB_Host_ProcessNextHostState+0x1ea>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	99 d3       	rcall	.+1842   	; 0xf6e <USB_Host_SendControlRequest>
     83c:	81 11       	cpse	r24, r1
     83e:	0a c0       	rjmp	.+20     	; 0x854 <USB_Host_ProcessNextHostState+0x210>
     840:	10 92 37 01 	sts	0x0137, r1
     844:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 2c 01 	sts	0x012C, r25
     84c:	80 93 2b 01 	sts	0x012B, r24
     850:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     852:	af cf       	rjmp	.-162    	; 0x7b2 <USB_Host_ProcessNextHostState+0x16e>
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	20 91 37 01 	lds	r18, 0x0137
     85a:	21 30       	cpi	r18, 0x01	; 1
     85c:	51 f0       	breq	.+20     	; 0x872 <USB_Host_ProcessNextHostState+0x22e>
     85e:	68 2f       	mov	r22, r24
     860:	89 2f       	mov	r24, r25
     862:	3a de       	rcall	.-908    	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationFailed>
     864:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     868:	81 60       	ori	r24, 0x01	; 1
     86a:	80 93 dd 00 	sts	0x00DD, r24
     86e:	d0 dd       	rcall	.-1120   	; 0x410 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     870:	b0 d1       	rcall	.+864    	; 0xbd2 <USB_ResetInterface>
     872:	28 96       	adiw	r28, 0x08	; 8
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16

		USB_ResetInterface();
     886:	08 95       	ret

00000888 <Pipe_Write_Stream_LE>:
     888:	cf 92       	push	r12
	}
}
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	7c 01       	movw	r14, r24
     89a:	8b 01       	movw	r16, r22
     89c:	ea 01       	movw	r28, r20
     89e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     8a2:	8f 7c       	andi	r24, 0xCF	; 207
     8a4:	80 62       	ori	r24, 0x20	; 32
     8a6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     8aa:	4d d1       	rcall	.+666    	; 0xb46 <Pipe_WaitUntilReady>
     8ac:	81 11       	cpse	r24, r1
     8ae:	30 c0       	rjmp	.+96     	; 0x910 <Pipe_Write_Stream_LE+0x88>
     8b0:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <Pipe_Write_Stream_LE+0x38>
     8b4:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     8b6:	99 81       	ldd	r25, Y+1	; 0x01
     8b8:	08 1b       	sub	r16, r24
     8ba:	19 0b       	sbc	r17, r25
     8bc:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     8be:	f9 1e       	adc	r15, r25
     8c0:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8c2:	d1 2c       	mov	r13, r1
     8c4:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     8c6:	11 05       	cpc	r17, r1
     8c8:	11 f1       	breq	.+68     	; 0x90e <Pipe_Write_Stream_LE+0x86>
     8ca:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     8ce:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     8d0:	13 c0       	rjmp	.+38     	; 0x8f8 <Pipe_Write_Stream_LE+0x70>
     8d2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     8d6:	8b 77       	andi	r24, 0x7B	; 123
     8d8:	80 93 a6 00 	sts	0x00A6, r24
     8dc:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     8de:	41 f0       	breq	.+16     	; 0x8f0 <Pipe_Write_Stream_LE+0x68>
     8e0:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     8e2:	99 81       	ldd	r25, Y+1	; 0x01
     8e4:	8c 0d       	add	r24, r12
     8e6:	9d 1d       	adc	r25, r13
     8e8:	99 83       	std	Y+1, r25	; 0x01
     8ea:	88 83       	st	Y, r24
     8ec:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     8ee:	10 c0       	rjmp	.+32     	; 0x910 <Pipe_Write_Stream_LE+0x88>
     8f0:	2a d1       	rcall	.+596    	; 0xb46 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     8f2:	88 23       	and	r24, r24
     8f4:	39 f3       	breq	.-50     	; 0x8c4 <Pipe_Write_Stream_LE+0x3c>
     8f6:	0c c0       	rjmp	.+24     	; 0x910 <Pipe_Write_Stream_LE+0x88>
     8f8:	f7 01       	movw	r30, r14
     8fa:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     8fc:	7f 01       	movw	r14, r30
     8fe:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     902:	01 50       	subi	r16, 0x01	; 1
     904:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     906:	ff ef       	ldi	r31, 0xFF	; 255
     908:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     90a:	df 0a       	sbc	r13, r31
     90c:	db cf       	rjmp	.-74     	; 0x8c4 <Pipe_Write_Stream_LE+0x3c>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     912:	cf 91       	pop	r28
}
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <Pipe_Read_Stream_LE>:
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	7c 01       	movw	r14, r24
     934:	8b 01       	movw	r16, r22
     936:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     938:	80 91 aa 00 	lds	r24, 0x00AA
     93c:	8f 7c       	andi	r24, 0xCF	; 207
     93e:	80 61       	ori	r24, 0x10	; 16
     940:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     944:	00 d1       	rcall	.+512    	; 0xb46 <Pipe_WaitUntilReady>
     946:	81 11       	cpse	r24, r1
     948:	30 c0       	rjmp	.+96     	; 0x9aa <Pipe_Read_Stream_LE+0x88>
     94a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     94c:	31 f0       	breq	.+12     	; 0x95a <Pipe_Read_Stream_LE+0x38>
     94e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     950:	99 81       	ldd	r25, Y+1	; 0x01
     952:	08 1b       	sub	r16, r24
     954:	19 0b       	sbc	r17, r25
     956:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     958:	f9 1e       	adc	r15, r25
     95a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     95c:	d1 2c       	mov	r13, r1
     95e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     960:	11 05       	cpc	r17, r1
     962:	11 f1       	breq	.+68     	; 0x9a8 <Pipe_Read_Stream_LE+0x86>
     964:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     968:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     96a:	13 c0       	rjmp	.+38     	; 0x992 <Pipe_Read_Stream_LE+0x70>
     96c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     970:	8e 77       	andi	r24, 0x7E	; 126
     972:	80 93 a6 00 	sts	0x00A6, r24
     976:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     978:	41 f0       	breq	.+16     	; 0x98a <Pipe_Read_Stream_LE+0x68>
     97a:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     97c:	99 81       	ldd	r25, Y+1	; 0x01
     97e:	8c 0d       	add	r24, r12
     980:	9d 1d       	adc	r25, r13
     982:	99 83       	std	Y+1, r25	; 0x01
     984:	88 83       	st	Y, r24
     986:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     988:	10 c0       	rjmp	.+32     	; 0x9aa <Pipe_Read_Stream_LE+0x88>
     98a:	dd d0       	rcall	.+442    	; 0xb46 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     98c:	88 23       	and	r24, r24
     98e:	39 f3       	breq	.-50     	; 0x95e <Pipe_Read_Stream_LE+0x3c>
     990:	0c c0       	rjmp	.+24     	; 0x9aa <Pipe_Read_Stream_LE+0x88>
     992:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     996:	f7 01       	movw	r30, r14
     998:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     99a:	7f 01       	movw	r14, r30
     99c:	01 50       	subi	r16, 0x01	; 1
     99e:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     9a0:	ff ef       	ldi	r31, 0xFF	; 255
     9a2:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     9a4:	df 0a       	sbc	r13, r31
     9a6:	db cf       	rjmp	.-74     	; 0x95e <Pipe_Read_Stream_LE+0x3c>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     9ac:	cf 91       	pop	r28
}
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	08 95       	ret

000009bc <Pipe_ConfigurePipe>:
     9bc:	0f 93       	push	r16
     9be:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     9c0:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9c2:	87 ff       	sbrs	r24, 7
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <Pipe_ConfigurePipe+0xe>
     9c6:	80 e1       	ldi	r24, 0x10	; 16
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <Pipe_ConfigurePipe+0x10>
     9ca:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     9cc:	e7 30       	cpi	r30, 0x07	; 7
     9ce:	10 f0       	brcs	.+4      	; 0x9d4 <Pipe_ConfigurePipe+0x18>
	  return false;
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	5a c0       	rjmp	.+180    	; 0xa88 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     9d4:	61 11       	cpse	r22, r1
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     9d8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9da:	90 e4       	ldi	r25, 0x40	; 64
     9dc:	69 9f       	mul	r22, r25
     9de:	b0 01       	movw	r22, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	4f 70       	andi	r20, 0x0F	; 15
     9e4:	46 2b       	or	r20, r22
     9e6:	48 2b       	or	r20, r24
     9e8:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9ea:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9ee:	5e 13       	cpse	r21, r30
     9f0:	19 c0       	rjmp	.+50     	; 0xa24 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     9f2:	02 30       	cpi	r16, 0x02	; 2
     9f4:	10 f0       	brcs	.+4      	; 0x9fa <Pipe_ConfigurePipe+0x3e>
     9f6:	76 e0       	ldi	r23, 0x06	; 6
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <Pipe_ConfigurePipe+0x40>
     9fa:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     a00:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a02:	82 17       	cp	r24, r18
     a04:	93 07       	cpc	r25, r19
     a06:	40 f0       	brcs	.+16     	; 0xa18 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a08:	86 2f       	mov	r24, r22
     a0a:	82 95       	swap	r24
     a0c:	80 7f       	andi	r24, 0xF0	; 240
     a0e:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a10:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a12:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	0e c0       	rjmp	.+28     	; 0xa34 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a18:	65 30       	cpi	r22, 0x05	; 5
     a1a:	b1 f3       	breq	.-20     	; 0xa08 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	ef cf       	rjmp	.-34     	; 0xa02 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a24:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a28:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a2c:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     a30:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a34:	81 fd       	sbrc	r24, 1
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a38:	5f 5f       	subi	r21, 0xFF	; 255
     a3a:	57 30       	cpi	r21, 0x07	; 7
     a3c:	b1 f6       	brne	.-84     	; 0x9ea <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a3e:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	21 c0       	rjmp	.+66     	; 0xa88 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a46:	90 91 a9 00 	lds	r25, 0x00A9
     a4a:	9e 7f       	andi	r25, 0xFE	; 254
     a4c:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a50:	90 91 ab 00 	lds	r25, 0x00AB
     a54:	9d 7f       	andi	r25, 0xFD	; 253
     a56:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a5a:	90 91 a9 00 	lds	r25, 0x00A9
     a5e:	91 60       	ori	r25, 0x01	; 1
     a60:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a64:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a68:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a6c:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     a70:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a74:	80 91 a9 00 	lds	r24, 0x00A9
     a78:	80 62       	ori	r24, 0x20	; 32
     a7a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a7e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a82:	87 fd       	sbrc	r24, 7
     a84:	d9 cf       	rjmp	.-78     	; 0xa38 <Pipe_ConfigurePipe+0x7c>
     a86:	a4 cf       	rjmp	.-184    	; 0x9d0 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	f6 2e       	mov	r15, r22
     a98:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	1f 15       	cp	r17, r15
     a9e:	71 f0       	breq	.+28     	; 0xabc <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     aa0:	88 81       	ld	r24, Y
     aa2:	88 23       	and	r24, r24
     aa4:	41 f0       	breq	.+16     	; 0xab6 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     aa6:	29 81       	ldd	r18, Y+1	; 0x01
     aa8:	3a 81       	ldd	r19, Y+2	; 0x02
     aaa:	0d 81       	ldd	r16, Y+5	; 0x05
     aac:	4b 81       	ldd	r20, Y+3	; 0x03
     aae:	6c 81       	ldd	r22, Y+4	; 0x04
     ab0:	85 df       	rcall	.-246    	; 0x9bc <Pipe_ConfigurePipe>
     ab2:	88 23       	and	r24, r24
     ab4:	21 f0       	breq	.+8      	; 0xabe <Pipe_ConfigurePipeTable+0x32>
     ab6:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     ab8:	26 96       	adiw	r28, 0x06	; 6
     aba:	f0 cf       	rjmp	.-32     	; 0xa9c <Pipe_ConfigurePipeTable+0x10>
     abc:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     abe:	df 91       	pop	r29
}
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	08 95       	ret

00000aca <Pipe_ClearPipes>:
     aca:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ace:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ad0:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ad4:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ad8:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     adc:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ae0:	90 91 a9 00 	lds	r25, 0x00A9
     ae4:	9e 7f       	andi	r25, 0xFE	; 254
     ae6:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	87 30       	cpi	r24, 0x07	; 7
     aee:	81 f7       	brne	.-32     	; 0xad0 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     af0:	08 95       	ret

00000af2 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     af2:	90 91 a7 00 	lds	r25, 0x00A7
     af6:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     af8:	20 91 aa 00 	lds	r18, 0x00AA
     afc:	20 ff       	sbrs	r18, 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <Pipe_IsEndpointBound+0x12>
     b00:	20 e8       	ldi	r18, 0x80	; 128
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <Pipe_IsEndpointBound+0x14>
     b04:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     b06:	42 2f       	mov	r20, r18
     b08:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b0a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b0c:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b10:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b14:	27 ff       	sbrs	r18, 7
     b16:	0c c0       	rjmp	.+24     	; 0xb30 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     b18:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b1c:	53 2f       	mov	r21, r19
     b1e:	5f 70       	andi	r21, 0x0F	; 15
     b20:	35 ff       	sbrs	r19, 5
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <Pipe_IsEndpointBound+0x36>
     b24:	20 e8       	ldi	r18, 0x80	; 128
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <Pipe_IsEndpointBound+0x38>
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b2c:	28 17       	cp	r18, r24
     b2e:	49 f0       	breq	.+18     	; 0xb42 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b30:	9f 5f       	subi	r25, 0xFF	; 255
     b32:	97 30       	cpi	r25, 0x07	; 7
     b34:	59 f7       	brne	.-42     	; 0xb0c <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b36:	94 2f       	mov	r25, r20
     b38:	9f 70       	andi	r25, 0x0F	; 15
     b3a:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     b42:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b44:	08 95       	ret

00000b46 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b46:	80 91 a2 00 	lds	r24, 0x00A2
     b4a:	90 91 a3 00 	lds	r25, 0x00A3
     b4e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b50:	20 91 aa 00 	lds	r18, 0x00AA
     b54:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b56:	20 31       	cpi	r18, 0x10	; 16
     b58:	29 f4       	brne	.+10     	; 0xb64 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b5a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b5e:	20 ff       	sbrs	r18, 0
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <Pipe_WaitUntilReady+0x26>
     b62:	17 c0       	rjmp	.+46     	; 0xb92 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b64:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b68:	22 fd       	sbrc	r18, 2
     b6a:	13 c0       	rjmp	.+38     	; 0xb92 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b6c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b70:	21 fd       	sbrc	r18, 1
     b72:	11 c0       	rjmp	.+34     	; 0xb96 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b74:	20 91 37 01 	lds	r18, 0x0137
     b78:	21 30       	cpi	r18, 0x01	; 1
     b7a:	79 f0       	breq	.+30     	; 0xb9a <Pipe_WaitUntilReady+0x54>
     b7c:	20 91 a2 00 	lds	r18, 0x00A2
     b80:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	19 f3       	breq	.-58     	; 0xb50 <Pipe_WaitUntilReady+0xa>
     b8a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b8c:	41 f0       	breq	.+16     	; 0xb9e <Pipe_WaitUntilReady+0x58>
     b8e:	c9 01       	movw	r24, r18
     b90:	df cf       	rjmp	.-66     	; 0xb50 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     b9e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     ba0:	08 95       	ret

00000ba2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ba2:	75 d0       	rcall	.+234    	; 0xc8e <USB_INT_DisableAllInterrupts>
     ba4:	7c d0       	rcall	.+248    	; 0xc9e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ba6:	e0 ee       	ldi	r30, 0xE0	; 224
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     baa:	80 81       	ld	r24, Z
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	80 83       	st	Z, r24
     bb0:	e8 ed       	ldi	r30, 0xD8	; 216
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bb4:	80 81       	ld	r24, Z
     bb6:	8f 77       	andi	r24, 0x7F	; 127
     bb8:	80 83       	st	Z, r24
     bba:	19 bc       	out	0x29, r1	; 41
     bbc:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bbe:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     bc0:	8c 91       	ld	r24, X
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	8c 93       	st	X, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bca:	80 83       	st	Z, r24
     bcc:	10 92 2e 01 	sts	0x012E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bd0:	08 95       	ret

00000bd2 <USB_ResetInterface>:
     bd2:	5d d0       	rcall	.+186    	; 0xc8e <USB_INT_DisableAllInterrupts>
     bd4:	64 d0       	rcall	.+200    	; 0xc9e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bd6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	80 93 d8 00 	sts	0x00D8, r24
     be0:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	80 93 d8 00 	sts	0x00D8, r24
     bea:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	80 93 d8 00 	sts	0x00D8, r24
     bf4:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	80 93 d7 00 	sts	0x00D7, r24
     bfe:	8c e0       	ldi	r24, 0x0C	; 12
     c00:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c02:	8e e0       	ldi	r24, 0x0E	; 14
     c04:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c06:	09 b4       	in	r0, 0x29	; 41
     c08:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <USB_ResetInterface+0x34>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 37 01 	sts	0x0137, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c12:	10 92 2d 01 	sts	0x012D, r1
	USB_Host_ConfigurationNumber = 0;
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	80 93 19 01 	sts	0x0119, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c1c:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c20:	80 64       	ori	r24, 0x40	; 64
     c22:	80 93 d8 00 	sts	0x00D8, r24
     c26:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	80 93 dd 00 	sts	0x00DD, r24
     c30:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c34:	84 60       	ori	r24, 0x04	; 4
     c36:	80 93 dd 00 	sts	0x00DD, r24
     c3a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     c3e:	8f 7e       	andi	r24, 0xEF	; 239
     c40:	80 93 d7 00 	sts	0x00D7, r24
     c44:	6f 9a       	sbi	0x0d, 7	; 13
     c46:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c48:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	80 93 de 00 	sts	0x00DE, r24
     c52:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	80 93 de 00 	sts	0x00DE, r24
     c5c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	80 93 e0 00 	sts	0x00E0, r24
     c66:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c6a:	80 61       	ori	r24, 0x10	; 16
     c6c:	80 93 d8 00 	sts	0x00D8, r24
     c70:	08 95       	ret

00000c72 <USB_Init>:
     c72:	e8 ed       	ldi	r30, 0xD8	; 216
     c74:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c76:	80 81       	ld	r24, Z
     c78:	8f 7e       	andi	r24, 0xEF	; 239
     c7a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c7c:	e7 ed       	ldi	r30, 0xD7	; 215
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 2e 01 	sts	0x012E, r24

	USB_ResetInterface();
     c8c:	a2 cf       	rjmp	.-188    	; 0xbd2 <USB_ResetInterface>

00000c8e <USB_INT_DisableAllInterrupts>:
     c8e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	8c 7f       	andi	r24, 0xFC	; 252
     c96:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c98:	10 92 a0 00 	sts	0x00A0, r1
     c9c:	08 95       	ret

00000c9e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c9e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     ca2:	10 92 9f 00 	sts	0x009F, r1
     ca6:	08 95       	ret

00000ca8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cce:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cd2:	85 ff       	sbrs	r24, 5
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cd6:	80 91 a0 00 	lds	r24, 0x00A0
     cda:	85 ff       	sbrs	r24, 5
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cde:	80 91 9f 00 	lds	r24, 0x009F
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ce8:	1a d1       	rcall	.+564    	; 0xf1e <USB_Event_Stub>
     cea:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cee:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cf0:	15 c0       	rjmp	.+42     	; 0xd1c <__vector_10+0x74>
     cf2:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     cf6:	81 ff       	sbrs	r24, 1
     cf8:	11 c0       	rjmp	.+34     	; 0xd1c <__vector_10+0x74>
     cfa:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cfe:	8d 7f       	andi	r24, 0xFD	; 253
     d00:	80 93 9f 00 	sts	0x009F, r24
     d04:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	80 93 9f 00 	sts	0x009F, r24
     d0e:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	80 93 a0 00 	sts	0x00A0, r24
     d18:	7b db       	rcall	.-2314   	; 0x410 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d1a:	5b df       	rcall	.-330    	; 0xbd2 <USB_ResetInterface>
     d1c:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d20:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d22:	15 c0       	rjmp	.+42     	; 0xd4e <__vector_10+0xa6>
     d24:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d28:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d2a:	11 c0       	rjmp	.+34     	; 0xd4e <__vector_10+0xa6>
     d2c:	80 91 df 00 	lds	r24, 0x00DF
     d30:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d32:	80 93 df 00 	sts	0x00DF, r24
     d36:	77 98       	cbi	0x0e, 7	; 14
     d38:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d3c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d3e:	80 93 dd 00 	sts	0x00DD, r24
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	b2 db       	rcall	.-2204   	; 0x4aa <EVENT_USB_Host_HostError>
     d46:	64 db       	rcall	.-2360   	; 0x410 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 37 01 	sts	0x0137, r24
		EVENT_USB_Host_DeviceUnattached();
     d4e:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d52:	80 ff       	sbrs	r24, 0
     d54:	17 c0       	rjmp	.+46     	; 0xd84 <__vector_10+0xdc>
     d56:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d5a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d5c:	13 c0       	rjmp	.+38     	; 0xd84 <__vector_10+0xdc>
     d5e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d68:	80 91 de 00 	lds	r24, 0x00DE
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d72:	48 db       	rcall	.-2416   	; 0x404 <EVENT_USB_Host_DeviceAttached>
     d74:	80 91 a0 00 	lds	r24, 0x00A0
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d7e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d80:	80 93 37 01 	sts	0x0137, r24
     d84:	80 91 df 00 	lds	r24, 0x00DF
     d88:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d8a:	0e c0       	rjmp	.+28     	; 0xda8 <__vector_10+0x100>
     d8c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d90:	82 ff       	sbrs	r24, 2
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d94:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d98:	8b 7f       	andi	r24, 0xFB	; 251
     d9a:	80 93 df 00 	sts	0x00DF, r24
     d9e:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	9a db       	rcall	.-2252   	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationFailed>
     da4:	35 db       	rcall	.-2454   	; 0x410 <EVENT_USB_Host_DeviceUnattached>
     da6:	15 df       	rcall	.-470    	; 0xbd2 <USB_ResetInterface>
     da8:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23

		USB_ResetInterface();
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0b be       	out	0x3b, r0	; 59
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <USB_GetNextDescriptor>:
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	fc 01       	movw	r30, r24
     dd4:	eb 01       	movw	r28, r22
     dd6:	a8 81       	ld	r26, Y
     dd8:	b9 81       	ldd	r27, Y+1	; 0x01
     dda:	8c 91       	ld	r24, X
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     de0:	31 81       	ldd	r19, Z+1	; 0x01
     de2:	82 17       	cp	r24, r18
     de4:	93 07       	cpc	r25, r19
     de6:	08 f4       	brcc	.+2      	; 0xdea <USB_GetNextDescriptor+0x1c>
     de8:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     dea:	a2 0f       	add	r26, r18
     dec:	b3 1f       	adc	r27, r19
     dee:	eb 01       	movw	r28, r22
     df0:	b9 83       	std	Y+1, r27	; 0x01
     df2:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	82 1b       	sub	r24, r18
     dfa:	93 0b       	sbc	r25, r19
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
			}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	29 97       	sbiw	r28, 0x09	; 9
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	7b 01       	movw	r14, r22
     e28:	8a 01       	movw	r16, r20
     e2a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e2c:	90 e8       	ldi	r25, 0x80	; 128
     e2e:	90 93 2f 01 	sts	0x012F, r25
     e32:	96 e0       	ldi	r25, 0x06	; 6
     e34:	90 93 30 01 	sts	0x0130, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e38:	e8 2f       	mov	r30, r24
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e40:	f0 93 32 01 	sts	0x0132, r31
     e44:	e0 93 31 01 	sts	0x0131, r30
     e48:	10 92 34 01 	sts	0x0134, r1
     e4c:	10 92 33 01 	sts	0x0133, r1
     e50:	89 e0       	ldi	r24, 0x09	; 9
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 36 01 	sts	0x0136, r25
     e58:	80 93 35 01 	sts	0x0135, r24
     e5c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	84 d0       	rcall	.+264    	; 0xf6e <USB_Host_SendControlRequest>
     e66:	81 11       	cpse	r24, r1
     e68:	19 c0       	rjmp	.+50     	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
     e6a:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e6c:	fc 81       	ldd	r31, Y+4	; 0x04
     e6e:	d7 01       	movw	r26, r14
     e70:	ed 93       	st	X+, r30
     e72:	fc 93       	st	X, r31
     e74:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     e76:	df 06       	cpc	r13, r31
     e78:	70 f0       	brcs	.+28     	; 0xe96 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e7a:	f0 93 36 01 	sts	0x0136, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e7e:	e0 93 35 01 	sts	0x0135, r30
     e82:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e84:	74 d0       	rcall	.+232    	; 0xf6e <USB_Host_SendControlRequest>
     e86:	81 11       	cpse	r24, r1
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
     e8a:	f8 01       	movw	r30, r16
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	21 f0       	breq	.+8      	; 0xe9a <USB_Host_GetDeviceConfigDescriptor+0x94>
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     e9e:	0f b6       	in	r0, 0x3f	; 63
}
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	08 95       	ret

00000eba <USB_GetNextDescriptorComp>:
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	8c 01       	movw	r16, r24
     ed0:	eb 01       	movw	r28, r22
     ed2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ed4:	f8 01       	movw	r30, r16
     ed6:	e0 80       	ld	r14, Z
     ed8:	f1 80       	ldd	r15, Z+1	; 0x01
     eda:	e1 14       	cp	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	99 f0       	breq	.+38     	; 0xf06 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ee0:	a8 80       	ld	r10, Y
     ee2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     ee4:	be 01       	movw	r22, r28
     ee6:	c8 01       	movw	r24, r16
     ee8:	72 df       	rcall	.-284    	; 0xdce <USB_GetNextDescriptor>
     eea:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eec:	99 81       	ldd	r25, Y+1	; 0x01
     eee:	f6 01       	movw	r30, r12
     ef0:	09 95       	icall
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	79 f3       	breq	.-34     	; 0xed4 <USB_GetNextDescriptorComp+0x1a>
     ef6:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ef8:	39 f4       	brne	.+14     	; 0xf08 <USB_GetNextDescriptorComp+0x4e>
     efa:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     efc:	a8 82       	st	Y, r10
     efe:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     f00:	f1 82       	std	Z+1, r15	; 0x01
     f02:	e0 82       	st	Z, r14
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <USB_GetNextDescriptorComp+0x4e>
     f06:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f08:	df 91       	pop	r29
}
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	08 95       	ret

00000f1e <USB_Event_Stub>:
     f1e:	08 95       	ret

00000f20 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f28:	c9 ee       	ldi	r28, 0xE9	; 233
     f2a:	d3 e0       	ldi	r29, 0x03	; 3
     f2c:	11 11       	cpse	r17, r1
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f30:	80 91 a6 00 	lds	r24, 0x00A6
     f34:	83 fd       	sbrc	r24, 3
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	37 db       	rcall	.-2450   	; 0x5aa <USB_Host_WaitMS>
     f3c:	81 11       	cpse	r24, r1
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <USB_Host_WaitForIOS+0x46>
     f40:	21 97       	sbiw	r28, 0x01	; 1
     f42:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f44:	99 f7       	brne	.-26     	; 0xf2c <USB_Host_WaitForIOS+0xc>
     f46:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <USB_Host_WaitForIOS+0x46>
     f4a:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f4c:	29 f4       	brne	.+10     	; 0xf58 <USB_Host_WaitForIOS+0x38>
     f4e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f52:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f54:	f1 cf       	rjmp	.-30     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <USB_Host_WaitForIOS+0x44>
     f58:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f5a:	71 f7       	brne	.-36     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f5c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f60:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f62:	ea cf       	rjmp	.-44     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f64:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f66:	df 91       	pop	r29
}
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	08 95       	ret

00000f6e <USB_Host_SendControlRequest>:
     f6e:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f7a:	f0 90 9e 00 	lds	r15, 0x009E
     f7e:	8f 2d       	mov	r24, r15
     f80:	81 70       	andi	r24, 0x01	; 1
     f82:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f84:	c0 91 35 01 	lds	r28, 0x0135
     f88:	d0 91 36 01 	lds	r29, 0x0136
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f8c:	80 91 9e 00 	lds	r24, 0x009E
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	08 db       	rcall	.-2544   	; 0x5aa <USB_Host_WaitMS>
     f9a:	81 11       	cpse	r24, r1
     f9c:	cc c0       	rjmp	.+408    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
     f9e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa2:	8f 7c       	andi	r24, 0xCF	; 207
     fa4:	80 93 aa 00 	sts	0x00AA, r24
     fa8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fac:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     fb0:	8f 7e       	andi	r24, 0xEF	; 239
     fb2:	80 93 a6 00 	sts	0x00A6, r24
     fb6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	80 93 a9 00 	sts	0x00A9, r24
     fc0:	ef e2       	ldi	r30, 0x2F	; 47
     fc2:	f1 e0       	ldi	r31, 0x01	; 1
     fc4:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     fc6:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fca:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fcc:	e7 33       	cpi	r30, 0x37	; 55
     fce:	f8 07       	cpc	r31, r24
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <USB_Host_SendControlRequest+0x56>
     fd2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fd6:	87 77       	andi	r24, 0x77	; 119
     fd8:	80 93 a6 00 	sts	0x00A6, r24
     fdc:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fde:	a0 df       	rcall	.-192    	; 0xf20 <USB_Host_WaitForIOS>
     fe0:	81 11       	cpse	r24, r1
     fe2:	a9 c0       	rjmp	.+338    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
     fe4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe8:	80 64       	ori	r24, 0x40	; 64
     fea:	80 93 a9 00 	sts	0x00A9, r24
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	dc da       	rcall	.-2632   	; 0x5aa <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ff2:	81 11       	cpse	r24, r1
     ff4:	a0 c0       	rjmp	.+320    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
     ff6:	80 91 2f 01 	lds	r24, 0x012F
     ffa:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ffc:	4e c0       	rjmp	.+156    	; 0x109a <USB_Host_SendControlRequest+0x12c>
     ffe:	80 91 aa 00 	lds	r24, 0x00AA
    1002:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	80 93 aa 00 	sts	0x00AA, r24
    100a:	01 15       	cp	r16, r1
    100c:	11 05       	cpc	r17, r1
    100e:	09 f0       	breq	.+2      	; 0x1012 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1010:	3a c0       	rjmp	.+116    	; 0x1086 <USB_Host_SendControlRequest+0x118>
    1012:	80 91 aa 00 	lds	r24, 0x00AA
    1016:	8f 7c       	andi	r24, 0xCF	; 207
    1018:	80 62       	ori	r24, 0x20	; 32
    101a:	80 93 aa 00 	sts	0x00AA, r24
    101e:	80 91 a9 00 	lds	r24, 0x00A9
    1022:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1024:	80 93 a9 00 	sts	0x00A9, r24
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	7a df       	rcall	.-268    	; 0xf20 <USB_Host_WaitForIOS>
    102c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    102e:	83 c0       	rjmp	.+262    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1030:	80 91 a6 00 	lds	r24, 0x00A6
    1034:	8b 77       	andi	r24, 0x7B	; 123
    1036:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	71 df       	rcall	.-286    	; 0xf20 <USB_Host_WaitForIOS>
    103e:	7b c0       	rjmp	.+246    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1040:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1044:	8f 7b       	andi	r24, 0xBF	; 191
    1046:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	69 df       	rcall	.-302    	; 0xf20 <USB_Host_WaitForIOS>
    104e:	81 11       	cpse	r24, r1
    1050:	72 c0       	rjmp	.+228    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1052:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1056:	90 91 f7 00 	lds	r25, 0x00F7
    105a:	89 2b       	or	r24, r25
    105c:	11 f4       	brne	.+4      	; 0x1062 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    105e:	c0 e0       	ldi	r28, 0x00	; 0
    1060:	d0 e0       	ldi	r29, 0x00	; 0
    1062:	f8 01       	movw	r30, r16
    1064:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1066:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    106a:	90 91 f7 00 	lds	r25, 0x00F7
    106e:	89 2b       	or	r24, r25
    1070:	69 f4       	brne	.+26     	; 0x108c <USB_Host_SendControlRequest+0x11e>
    1072:	80 91 a9 00 	lds	r24, 0x00A9
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    107c:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1080:	8e 77       	andi	r24, 0x7E	; 126
    1082:	80 93 a6 00 	sts	0x00A6, r24
    1086:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1088:	d9 f6       	brne	.-74     	; 0x1040 <USB_Host_SendControlRequest+0xd2>
    108a:	c3 cf       	rjmp	.-122    	; 0x1012 <USB_Host_SendControlRequest+0xa4>
    108c:	20 97       	sbiw	r28, 0x00	; 0
    108e:	89 f3       	breq	.-30     	; 0x1072 <USB_Host_SendControlRequest+0x104>
    1090:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1094:	81 93       	st	Z+, r24
    1096:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1098:	e5 cf       	rjmp	.-54     	; 0x1064 <USB_Host_SendControlRequest+0xf6>
    109a:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    109c:	11 05       	cpc	r17, r1
    109e:	b1 f1       	breq	.+108    	; 0x110c <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    10a0:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    10a4:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10a6:	80 62       	ori	r24, 0x20	; 32
    10a8:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ac:	80 91 a9 00 	lds	r24, 0x00A9
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	80 93 a9 00 	sts	0x00A9, r24
    10b6:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b8:	20 97       	sbiw	r28, 0x00	; 0
    10ba:	01 f1       	breq	.+64     	; 0x10fc <USB_Host_SendControlRequest+0x18e>
    10bc:	31 df       	rcall	.-414    	; 0xf20 <USB_Host_WaitForIOS>
    10be:	81 11       	cpse	r24, r1
    10c0:	3a c0       	rjmp	.+116    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c2:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10c4:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c8:	30 91 f7 00 	lds	r19, 0x00F7
    10cc:	80 91 19 01 	lds	r24, 0x0119
    10d0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	58 f4       	brcc	.+22     	; 0x10ee <USB_Host_SendControlRequest+0x180>
    10d8:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	8c 01       	movw	r16, r24
    10de:	20 81       	ld	r18, Z
    10e0:	20 93 af 00 	sts	0x00AF, r18
    10e4:	21 97       	sbiw	r28, 0x01	; 1
    10e6:	20 97       	sbiw	r28, 0x00	; 0
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <USB_Host_SendControlRequest+0x182>
    10ea:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    10ec:	eb cf       	rjmp	.-42     	; 0x10c4 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10ee:	8f 01       	movw	r16, r30
    10f0:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10f4:	8b 77       	andi	r24, 0x7B	; 123
    10f6:	80 93 a6 00 	sts	0x00A6, r24
    10fa:	dd cf       	rjmp	.-70     	; 0x10b6 <USB_Host_SendControlRequest+0x148>
    10fc:	11 df       	rcall	.-478    	; 0xf20 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10fe:	81 11       	cpse	r24, r1
    1100:	1a c0       	rjmp	.+52     	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1102:	80 91 a9 00 	lds	r24, 0x00A9
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    110c:	80 91 aa 00 	lds	r24, 0x00AA
    1110:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 93 aa 00 	sts	0x00AA, r24
    1118:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    111c:	8f 7b       	andi	r24, 0xBF	; 191
    111e:	80 93 a9 00 	sts	0x00A9, r24
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	fd de       	rcall	.-518    	; 0xf20 <USB_Host_WaitForIOS>
    1126:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    112a:	80 91 a6 00 	lds	r24, 0x00A6
    112e:	8e 77       	andi	r24, 0x7E	; 126
    1130:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 91 a9 00 	lds	r25, 0x00A9
    113a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    113c:	90 93 a9 00 	sts	0x00A9, r25
    1140:	f1 10       	cpse	r15, r1
    1142:	05 c0       	rjmp	.+10     	; 0x114e <USB_Host_SendControlRequest+0x1e0>
    1144:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1148:	9e 7f       	andi	r25, 0xFE	; 254
    114a:	90 93 9e 00 	sts	0x009E, r25
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1154:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1160:	ff 90       	pop	r15
    1162:	08 95       	ret

00001164 <USB_Host_SetDeviceConfiguration>:
    1164:	cf 93       	push	r28
				UPRST = 0;
    1166:	c8 2f       	mov	r28, r24
    1168:	10 92 2f 01 	sts	0x012F, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    116c:	89 e0       	ldi	r24, 0x09	; 9
    116e:	80 93 30 01 	sts	0x0130, r24
    1172:	2c 2f       	mov	r18, r28
    1174:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1176:	30 93 32 01 	sts	0x0132, r19
    117a:	20 93 31 01 	sts	0x0131, r18
    117e:	10 92 34 01 	sts	0x0134, r1
    1182:	10 92 33 01 	sts	0x0133, r1
    1186:	10 92 36 01 	sts	0x0136, r1
    118a:	10 92 35 01 	sts	0x0135, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    118e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	eb de       	rcall	.-554    	; 0xf6e <USB_Host_SendControlRequest>
    1198:	81 11       	cpse	r24, r1
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <USB_Host_SetDeviceConfiguration+0x4a>
    119c:	c0 93 2d 01 	sts	0x012D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11a0:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <USB_Host_SetDeviceConfiguration+0x44>
    11a4:	9b e0       	ldi	r25, 0x0B	; 11
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <USB_Host_SetDeviceConfiguration+0x46>
    11a8:	9a e0       	ldi	r25, 0x0A	; 10
    11aa:	90 93 37 01 	sts	0x0137, r25
    11ae:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    11b0:	08 95       	ret

000011b2 <USB_Host_ClearEndpointStall>:
    11b2:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11b4:	90 93 2f 01 	sts	0x012F, r25
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	90 93 30 01 	sts	0x0130, r25
    11be:	10 92 32 01 	sts	0x0132, r1
    11c2:	10 92 31 01 	sts	0x0131, r1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	90 93 34 01 	sts	0x0134, r25
    11cc:	80 93 33 01 	sts	0x0133, r24
    11d0:	10 92 36 01 	sts	0x0136, r1
    11d4:	10 92 35 01 	sts	0x0135, r1
    11d8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	c6 ce       	rjmp	.-628    	; 0xf6e <USB_Host_SendControlRequest>

000011e2 <USB_USBTask>:
    11e2:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    11e4:	c0 91 a7 00 	lds	r28, 0x00A7
    11e8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    11ea:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11ee:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11f2:	28 da       	rcall	.-2992   	; 0x644 <USB_Host_ProcessNextHostState>
    11f4:	c0 93 a7 00 	sts	0x00A7, r28
    11f8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11fa:	08 95       	ret

000011fc <DCOMP_SI_Host_NextSIInterface>:
    11fc:	fc 01       	movw	r30, r24

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11fe:	81 81       	ldd	r24, Z+1	; 0x01
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	59 f4       	brne	.+22     	; 0x121a <DCOMP_SI_Host_NextSIInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    1204:	85 81       	ldd	r24, Z+5	; 0x05
    1206:	86 30       	cpi	r24, 0x06	; 6
    1208:	41 f4       	brne	.+16     	; 0x121a <DCOMP_SI_Host_NextSIInterface+0x1e>
    120a:	86 81       	ldd	r24, Z+6	; 0x06
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	29 f4       	brne	.+10     	; 0x121a <DCOMP_SI_Host_NextSIInterface+0x1e>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
    1210:	87 81       	ldd	r24, Z+7	; 0x07
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	11 f4       	brne	.+4      	; 0x121a <DCOMP_SI_Host_NextSIInterface+0x1e>
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    121a:	82 e0       	ldi	r24, 0x02	; 2
}
    121c:	08 95       	ret

0000121e <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    121e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1220:	81 81       	ldd	r24, Z+1	; 0x01
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	51 f4       	brne	.+20     	; 0x123a <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1226:	83 81       	ldd	r24, Z+3	; 0x03
    1228:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    122a:	82 50       	subi	r24, 0x02	; 2
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	48 f4       	brcc	.+18     	; 0x1242 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	5f dc       	rcall	.-1858   	; 0xaf2 <Pipe_IsEndpointBound>
    1234:	81 11       	cpse	r24, r1
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x28>
    123a:	84 30       	cpi	r24, 0x04	; 4
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    123c:	11 f4       	brne	.+4      	; 0x1242 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    123e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1240:	08 95       	ret
    1242:	82 e0       	ldi	r24, 0x02	; 2
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1244:	08 95       	ret
    1246:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    1248:	08 95       	ret

0000124a <SI_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    124a:	8f 92       	push	r8
#include "StillImageClassHost.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <SI_Host_ConfigurePipes+0x1a>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <SI_Host_ConfigurePipes+0x1c>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8c 01       	movw	r16, r24
    126c:	7a 83       	std	Y+2, r23	; 0x02
    126e:	69 83       	std	Y+1, r22	; 0x01
    1270:	5c 83       	std	Y+4, r21	; 0x04
    1272:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    1274:	fc 01       	movw	r30, r24
    1276:	72 96       	adiw	r30, 0x12	; 18
    1278:	87 e0       	ldi	r24, 0x07	; 7
    127a:	df 01       	movw	r26, r30
    127c:	1d 92       	st	X+, r1
    127e:	8a 95       	dec	r24
    1280:	e9 f7       	brne	.-6      	; 0x127c <SI_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1282:	eb 81       	ldd	r30, Y+3	; 0x03
    1284:	fc 81       	ldd	r31, Y+4	; 0x04
    1286:	81 81       	ldd	r24, Z+1	; 0x01
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	09 f0       	breq	.+2      	; 0x128e <SI_Host_ConfigurePipes+0x44>
    128c:	85 c0       	rjmp	.+266    	; 0x1398 <SI_Host_ConfigurePipes+0x14e>
    128e:	81 2c       	mov	r8, r1
    1290:	91 2c       	mov	r9, r1
    1292:	e1 2c       	mov	r14, r1
    1294:	f1 2c       	mov	r15, r1
    1296:	c1 2c       	mov	r12, r1
    1298:	d1 2c       	mov	r13, r1
    129a:	a1 2c       	mov	r10, r1
    129c:	b1 2c       	mov	r11, r1
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    129e:	81 14       	cp	r8, r1
    12a0:	91 04       	cpc	r9, r1
    12a2:	99 f4       	brne	.+38     	; 0x12ca <SI_Host_ConfigurePipes+0x80>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12a4:	4e ef       	ldi	r20, 0xFE	; 254
    12a6:	58 e0       	ldi	r21, 0x08	; 8
    12a8:	be 01       	movw	r22, r28
    12aa:	6d 5f       	subi	r22, 0xFD	; 253
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	ce 01       	movw	r24, r28
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	03 de       	rcall	.-1018   	; 0xeba <USB_GetNextDescriptorComp>
    12b4:	81 11       	cpse	r24, r1
    12b6:	72 c0       	rjmp	.+228    	; 0x139c <SI_Host_ConfigurePipes+0x152>
    12b8:	8b 80       	ldd	r8, Y+3	; 0x03
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12ba:	9c 80       	ldd	r9, Y+4	; 0x04
    12bc:	a1 2c       	mov	r10, r1

			DataINEndpoint  = NULL;
    12be:	b1 2c       	mov	r11, r1
    12c0:	e1 2c       	mov	r14, r1
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
    12c2:	f1 2c       	mov	r15, r1
    12c4:	c1 2c       	mov	r12, r1
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    12c6:	d1 2c       	mov	r13, r1
    12c8:	ea cf       	rjmp	.-44     	; 0x129e <SI_Host_ConfigurePipes+0x54>
    12ca:	4f e0       	ldi	r20, 0x0F	; 15
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12cc:	59 e0       	ldi	r21, 0x09	; 9
    12ce:	be 01       	movw	r22, r28
    12d0:	6d 5f       	subi	r22, 0xFD	; 253
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	ce 01       	movw	r24, r28
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	f0 dd       	rcall	.-1056   	; 0xeba <USB_GetNextDescriptorComp>
    12da:	81 11       	cpse	r24, r1
    12dc:	e3 cf       	rjmp	.-58     	; 0x12a4 <SI_Host_ConfigurePipes+0x5a>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    12de:	eb 81       	ldd	r30, Y+3	; 0x03
    12e0:	fc 81       	ldd	r31, Y+4	; 0x04
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <SI_Host_ConfigurePipes+0xaa>
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	83 70       	andi	r24, 0x03	; 3
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <SI_Host_ConfigurePipes+0xae>
    12f0:	7f 01       	movw	r14, r30
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <SI_Host_ConfigurePipes+0xb0>
			  EventsEndpoint = EndpointData;
    12f4:	6f 01       	movw	r12, r30
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <SI_Host_ConfigurePipes+0xb0>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    12f8:	5f 01       	movw	r10, r30
    12fa:	a1 14       	cp	r10, r1
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    12fc:	b1 04       	cpc	r11, r1
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    12fe:	79 f2       	breq	.-98     	; 0x129e <SI_Host_ConfigurePipes+0x54>
    1300:	c1 14       	cp	r12, r1
    1302:	d1 04       	cpc	r13, r1
    1304:	61 f2       	breq	.-104    	; 0x129e <SI_Host_ConfigurePipes+0x54>
    1306:	e1 14       	cp	r14, r1
    1308:	f1 04       	cpc	r15, r1
    130a:	49 f2       	breq	.-110    	; 0x129e <SI_Host_ConfigurePipes+0x54>
    130c:	f5 01       	movw	r30, r10
    130e:	84 81       	ldd	r24, Z+4	; 0x04
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	SIInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1310:	95 81       	ldd	r25, Z+5	; 0x05
    1312:	d8 01       	movw	r26, r16
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	9c 93       	st	X, r25
    1318:	8e 93       	st	-X, r24
    131a:	11 97       	sbiw	r26, 0x01	; 1
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	13 96       	adiw	r26, 0x03	; 3
	SIInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1320:	8c 93       	st	X, r24
    1322:	13 97       	sbiw	r26, 0x03	; 3
    1324:	22 e0       	ldi	r18, 0x02	; 2
    1326:	14 96       	adiw	r26, 0x04	; 4
	SIInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1328:	2c 93       	st	X, r18
    132a:	14 97       	sbiw	r26, 0x04	; 4
    132c:	f6 01       	movw	r30, r12
    132e:	84 81       	ldd	r24, Z+4	; 0x04

	SIInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1330:	95 81       	ldd	r25, Z+5	; 0x05
    1332:	18 96       	adiw	r26, 0x08	; 8
    1334:	9c 93       	st	X, r25
    1336:	8e 93       	st	-X, r24
    1338:	17 97       	sbiw	r26, 0x07	; 7
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	19 96       	adiw	r26, 0x09	; 9
	SIInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    133e:	8c 93       	st	X, r24
    1340:	19 97       	sbiw	r26, 0x09	; 9
    1342:	1a 96       	adiw	r26, 0x0a	; 10
    1344:	2c 93       	st	X, r18
	SIInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1346:	d7 01       	movw	r26, r14
    1348:	14 96       	adiw	r26, 0x04	; 4

	SIInterfaceInfo->Config.EventsPipe.Size = le16_to_cpu(EventsEndpoint->EndpointSize);
    134a:	8d 91       	ld	r24, X+
    134c:	9c 91       	ld	r25, X
    134e:	15 97       	sbiw	r26, 0x05	; 5
    1350:	f8 01       	movw	r30, r16
    1352:	96 87       	std	Z+14, r25	; 0x0e
    1354:	85 87       	std	Z+13, r24	; 0x0d
    1356:	12 96       	adiw	r26, 0x02	; 2
    1358:	8c 91       	ld	r24, X
	SIInterfaceInfo->Config.EventsPipe.EndpointAddress = EventsEndpoint->EndpointAddress;
    135a:	87 87       	std	Z+15, r24	; 0x0f
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	80 8b       	std	Z+16, r24	; 0x10
	SIInterfaceInfo->Config.EventsPipe.Type = EP_TYPE_INTERRUPT;
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	c8 01       	movw	r24, r16

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataINPipe, 1)))
    1364:	93 db       	rcall	.-2266   	; 0xa8c <Pipe_ConfigurePipeTable>
    1366:	81 11       	cpse	r24, r1
    1368:	02 c0       	rjmp	.+4      	; 0x136e <SI_Host_ConfigurePipes+0x124>
    136a:	83 e0       	ldi	r24, 0x03	; 3
    136c:	18 c0       	rjmp	.+48     	; 0x139e <SI_Host_ConfigurePipes+0x154>
    136e:	61 e0       	ldi	r22, 0x01	; 1
	  return SI_ENUMERROR_PipeConfigurationFailed;
    1370:	c8 01       	movw	r24, r16
    1372:	06 96       	adiw	r24, 0x06	; 6

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataOUTPipe, 1)))
    1374:	8b db       	rcall	.-2282   	; 0xa8c <Pipe_ConfigurePipeTable>
    1376:	88 23       	and	r24, r24
    1378:	c1 f3       	breq	.-16     	; 0x136a <SI_Host_ConfigurePipes+0x120>
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	c8 01       	movw	r24, r16
    137e:	0c 96       	adiw	r24, 0x0c	; 12
    1380:	85 db       	rcall	.-2294   	; 0xa8c <Pipe_ConfigurePipeTable>
	  return SI_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.EventsPipe, 1)))
    1382:	88 23       	and	r24, r24
    1384:	91 f3       	breq	.-28     	; 0x136a <SI_Host_ConfigurePipes+0x120>
    1386:	d4 01       	movw	r26, r8
    1388:	12 96       	adiw	r26, 0x02	; 2
    138a:	8c 91       	ld	r24, X
    138c:	f8 01       	movw	r30, r16
    138e:	83 8b       	std	Z+19, r24	; 0x13
	  return SI_ENUMERROR_PipeConfigurationFailed;

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	82 8b       	std	Z+18, r24	; 0x12
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	03 c0       	rjmp	.+6      	; 0x139e <SI_Host_ConfigurePipes+0x154>
    1398:	81 e0       	ldi	r24, 0x01	; 1
	SIInterfaceInfo->State.IsActive = true;
    139a:	01 c0       	rjmp	.+2      	; 0x139e <SI_Host_ConfigurePipes+0x154>
    139c:	82 e0       	ldi	r24, 0x02	; 2

	return SI_ENUMERROR_NoError;
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
    13a6:	df 91       	pop	r29

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
	SIInterfaceInfo->State.IsActive = true;

	return SI_ENUMERROR_NoError;
}
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	08 95       	ret

000013c0 <SI_Host_SendBlockHeader>:
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	fc 01       	movw	r30, r24
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    13ca:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    13cc:	80 91 37 01 	lds	r24, 0x0137
    13d0:	8b 30       	cpi	r24, 0x0B	; 11
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <SI_Host_SendBlockHeader+0x16>
    13d4:	42 c0       	rjmp	.+132    	; 0x145a <SI_Host_SendBlockHeader+0x9a>
    13d6:	82 89       	ldd	r24, Z+18	; 0x12
    13d8:	88 23       	and	r24, r24
    13da:	09 f4       	brne	.+2      	; 0x13de <SI_Host_SendBlockHeader+0x1e>
    13dc:	3e c0       	rjmp	.+124    	; 0x145a <SI_Host_SendBlockHeader+0x9a>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    13de:	84 89       	ldd	r24, Z+20	; 0x14
    13e0:	88 23       	and	r24, r24
    13e2:	91 f0       	breq	.+36     	; 0x1408 <SI_Host_SendBlockHeader+0x48>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    13e4:	45 89       	ldd	r20, Z+21	; 0x15
    13e6:	56 89       	ldd	r21, Z+22	; 0x16
    13e8:	67 89       	ldd	r22, Z+23	; 0x17
    13ea:	70 8d       	ldd	r23, Z+24	; 0x18
    13ec:	8a 01       	movw	r16, r20
    13ee:	9b 01       	movw	r18, r22
    13f0:	0f 5f       	subi	r16, 0xFF	; 255
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	2f 4f       	sbci	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	05 8b       	std	Z+21, r16	; 0x15
    13fa:	16 8b       	std	Z+22, r17	; 0x16
    13fc:	27 8b       	std	Z+23, r18	; 0x17
    13fe:	30 8f       	std	Z+24, r19	; 0x18
    1400:	48 87       	std	Y+8, r20	; 0x08
    1402:	59 87       	std	Y+9, r21	; 0x09
    1404:	6a 87       	std	Y+10, r22	; 0x0a
    1406:	7b 87       	std	Y+11, r23	; 0x0b
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1408:	86 81       	ldd	r24, Z+6	; 0x06
    140a:	8f 70       	andi	r24, 0x0F	; 15
    140c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1410:	80 91 a9 00 	lds	r24, 0x00A9
    1414:	8f 7b       	andi	r24, 0xBF	; 191
    1416:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	6c e0       	ldi	r22, 0x0C	; 12
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	ce 01       	movw	r24, r28
    1424:	31 da       	rcall	.-2974   	; 0x888 <Pipe_Write_Stream_LE>
    1426:	81 11       	cpse	r24, r1
    1428:	19 c0       	rjmp	.+50     	; 0x145c <SI_Host_SendBlockHeader+0x9c>
    142a:	68 81       	ld	r22, Y
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    142c:	6c 50       	subi	r22, 0x0C	; 12
    142e:	61 f4       	brne	.+24     	; 0x1448 <SI_Host_SendBlockHeader+0x88>

	if (ParamBytes)
    1430:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1434:	8b 77       	andi	r24, 0x7B	; 123
    1436:	80 93 a6 00 	sts	0x00A6, r24
    143a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    143e:	80 64       	ori	r24, 0x40	; 64
    1440:	80 93 a9 00 	sts	0x00A9, r24
    1444:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1446:	0a c0       	rjmp	.+20     	; 0x145c <SI_Host_SendBlockHeader+0x9c>
    1448:	70 e0       	ldi	r23, 0x00	; 0

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));

	if (ParamBytes)
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	ce 01       	movw	r24, r28
    1450:	0c 96       	adiw	r24, 0x0c	; 12
    1452:	1a da       	rcall	.-3020   	; 0x888 <Pipe_Write_Stream_LE>
    1454:	88 23       	and	r24, r24
    1456:	61 f3       	breq	.-40     	; 0x1430 <SI_Host_SendBlockHeader+0x70>
    1458:	01 c0       	rjmp	.+2      	; 0x145c <SI_Host_SendBlockHeader+0x9c>
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	df 91       	pop	r29
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    145e:	cf 91       	pop	r28

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <SI_Host_ReceiveBlockHeader>:
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    146a:	fc 01       	movw	r30, r24
    146c:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    146e:	20 91 a2 00 	lds	r18, 0x00A2
    1472:	30 91 a3 00 	lds	r19, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1476:	80 91 37 01 	lds	r24, 0x0137
    147a:	8b 30       	cpi	r24, 0x0B	; 11
    147c:	11 f0       	breq	.+4      	; 0x1482 <SI_Host_ReceiveBlockHeader+0x1c>
	  return PIPE_RWSTREAM_DeviceDisconnected;
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	78 c0       	rjmp	.+240    	; 0x1572 <SI_Host_ReceiveBlockHeader+0x10c>
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1482:	82 89       	ldd	r24, Z+18	; 0x12
    1484:	88 23       	and	r24, r24
    1486:	d9 f3       	breq	.-10     	; 0x147e <SI_Host_ReceiveBlockHeader+0x18>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1488:	80 81       	ld	r24, Z
    148a:	8f 70       	andi	r24, 0x0F	; 15
    148c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1490:	80 91 a9 00 	lds	r24, 0x00A9
    1494:	8f 7b       	andi	r24, 0xBF	; 191
    1496:	80 93 a9 00 	sts	0x00A9, r24
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
    149a:	80 e1       	ldi	r24, 0x10	; 16
    149c:	97 e2       	ldi	r25, 0x27	; 39
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    149e:	40 91 a6 00 	lds	r20, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    14a2:	40 fd       	sbrc	r20, 0
    14a4:	46 c0       	rjmp	.+140    	; 0x1532 <SI_Host_ReceiveBlockHeader+0xcc>
    14a6:	40 91 a2 00 	lds	r20, 0x00A2
    14aa:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    14ae:	42 17       	cp	r20, r18
    14b0:	53 07       	cpc	r21, r19
    14b2:	41 f0       	breq	.+16     	; 0x14c4 <SI_Host_ReceiveBlockHeader+0x5e>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    14b4:	bc 01       	movw	r22, r24
    14b6:	61 50       	subi	r22, 0x01	; 1
    14b8:	71 09       	sbc	r23, r1
    14ba:	89 2b       	or	r24, r25
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <SI_Host_ReceiveBlockHeader+0x5a>
    14be:	58 c0       	rjmp	.+176    	; 0x1570 <SI_Host_ReceiveBlockHeader+0x10a>
    14c0:	9a 01       	movw	r18, r20
    14c2:	cb 01       	movw	r24, r22

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14c4:	40 91 a9 00 	lds	r20, 0x00A9
    14c8:	40 64       	ori	r20, 0x40	; 64
    14ca:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14ce:	46 81       	ldd	r20, Z+6	; 0x06
    14d0:	4f 70       	andi	r20, 0x0F	; 15
    14d2:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14d6:	40 91 a9 00 	lds	r20, 0x00A9
    14da:	4f 7b       	andi	r20, 0xBF	; 191
    14dc:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    14e0:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    14e4:	41 fd       	sbrc	r20, 1
    14e6:	12 c0       	rjmp	.+36     	; 0x150c <SI_Host_ReceiveBlockHeader+0xa6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14e8:	40 91 a9 00 	lds	r20, 0x00A9
    14ec:	40 64       	ori	r20, 0x40	; 64
    14ee:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14f2:	40 81       	ld	r20, Z
    14f4:	4f 70       	andi	r20, 0x0F	; 15
    14f6:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14fa:	40 91 a9 00 	lds	r20, 0x00A9
    14fe:	4f 7b       	andi	r20, 0xBF	; 191
    1500:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1504:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1508:	41 ff       	sbrs	r20, 1
    150a:	0d c0       	rjmp	.+26     	; 0x1526 <SI_Host_ReceiveBlockHeader+0xc0>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    150c:	90 91 aa 00 	lds	r25, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1510:	29 2f       	mov	r18, r25
    1512:	2f 70       	andi	r18, 0x0F	; 15
    1514:	95 ff       	sbrs	r25, 5
    1516:	02 c0       	rjmp	.+4      	; 0x151c <SI_Host_ReceiveBlockHeader+0xb6>
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	01 c0       	rjmp	.+2      	; 0x151e <SI_Host_ReceiveBlockHeader+0xb8>
    151c:	80 e0       	ldi	r24, 0x00	; 0
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    151e:	82 2b       	or	r24, r18
    1520:	48 de       	rcall	.-880    	; 0x11b2 <USB_Host_ClearEndpointStall>
    1522:	81 e0       	ldi	r24, 0x01	; 1
			return PIPE_RWSTREAM_PipeStalled;
    1524:	26 c0       	rjmp	.+76     	; 0x1572 <SI_Host_ReceiveBlockHeader+0x10c>
    1526:	40 91 37 01 	lds	r20, 0x0137
		}

		if (USB_HostState == HOST_STATE_Unattached)
    152a:	41 30       	cpi	r20, 0x01	; 1
    152c:	09 f0       	breq	.+2      	; 0x1530 <SI_Host_ReceiveBlockHeader+0xca>
    152e:	b7 cf       	rjmp	.-146    	; 0x149e <SI_Host_ReceiveBlockHeader+0x38>
    1530:	a6 cf       	rjmp	.-180    	; 0x147e <SI_Host_ReceiveBlockHeader+0x18>
    1532:	40 e0       	ldi	r20, 0x00	; 0
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	6c e0       	ldi	r22, 0x0C	; 12
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	ce 01       	movw	r24, r28
    153c:	f2 d9       	rcall	.-3100   	; 0x922 <Pipe_Read_Stream_LE>
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    1542:	03 97       	sbiw	r24, 0x03	; 3
    1544:	71 f4       	brne	.+28     	; 0x1562 <SI_Host_ReceiveBlockHeader+0xfc>
    1546:	68 81       	ld	r22, Y
    1548:	6c 50       	subi	r22, 0x0C	; 12
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    154a:	31 f0       	breq	.+12     	; 0x1558 <SI_Host_ReceiveBlockHeader+0xf2>
    154c:	70 e0       	ldi	r23, 0x00	; 0

		if (ParamBytes)
    154e:	40 e0       	ldi	r20, 0x00	; 0
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ce 01       	movw	r24, r28
    1554:	0c 96       	adiw	r24, 0x0c	; 12
    1556:	e5 d9       	rcall	.-3126   	; 0x922 <Pipe_Read_Stream_LE>
    1558:	80 91 a6 00 	lds	r24, 0x00A6
    155c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    155e:	80 93 a6 00 	sts	0x00A6, r24
    1562:	80 91 a9 00 	lds	r24, 0x00A9
    1566:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1568:	80 93 a9 00 	sts	0x00A9, r24
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <SI_Host_ReceiveBlockHeader+0x10c>
    1570:	83 e0       	ldi	r24, 0x03	; 3
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    1576:	08 95       	ret

00001578 <SI_Host_OpenSession>:
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	68 97       	sbiw	r28, 0x18	; 24
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1596:	80 91 37 01 	lds	r24, 0x0137
    159a:	8b 30       	cpi	r24, 0x0B	; 11
    159c:	09 f0       	breq	.+2      	; 0x15a0 <SI_Host_OpenSession+0x28>
    159e:	42 c0       	rjmp	.+132    	; 0x1624 <SI_Host_OpenSession+0xac>
    15a0:	f8 01       	movw	r30, r16
    15a2:	82 89       	ldd	r24, Z+18	; 0x12
    15a4:	88 23       	and	r24, r24
    15a6:	09 f4       	brne	.+2      	; 0x15aa <SI_Host_OpenSession+0x32>
    15a8:	3d c0       	rjmp	.+122    	; 0x1624 <SI_Host_OpenSession+0xac>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    15aa:	15 8a       	std	Z+21, r1	; 0x15
    15ac:	16 8a       	std	Z+22, r1	; 0x16
    15ae:	17 8a       	std	Z+23, r1	; 0x17
    15b0:	10 8e       	std	Z+24, r1	; 0x18
	SIInterfaceInfo->State.IsSessionOpen = false;
    15b2:	14 8a       	std	Z+20, r1	; 0x14

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	7c 01       	movw	r14, r24
    15ba:	88 e1       	ldi	r24, 0x18	; 24
    15bc:	f7 01       	movw	r30, r14
    15be:	11 92       	st	Z+, r1
    15c0:	8a 95       	dec	r24
    15c2:	e9 f7       	brne	.-6      	; 0x15be <SI_Host_OpenSession+0x46>
    15c4:	80 e1       	ldi	r24, 0x10	; 16
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	ab 83       	std	Y+3, r26	; 0x03
    15d2:	bc 83       	std	Y+4, r27	; 0x04
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	90 e1       	ldi	r25, 0x10	; 16
    15e0:	98 87       	std	Y+8, r25	; 0x08
    15e2:	8f 83       	std	Y+7, r24	; 0x07
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	4d 87       	std	Y+13, r20	; 0x0d
    15ee:	5e 87       	std	Y+14, r21	; 0x0e
    15f0:	6f 87       	std	Y+15, r22	; 0x0f
    15f2:	78 8b       	std	Y+16, r23	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15f4:	b7 01       	movw	r22, r14
    15f6:	c8 01       	movw	r24, r16
    15f8:	e3 de       	rcall	.-570    	; 0x13c0 <SI_Host_SendBlockHeader>
    15fa:	81 11       	cpse	r24, r1
    15fc:	16 c0       	rjmp	.+44     	; 0x162a <SI_Host_OpenSession+0xb2>
    15fe:	b7 01       	movw	r22, r14
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1600:	c8 01       	movw	r24, r16
    1602:	31 df       	rcall	.-414    	; 0x1466 <SI_Host_ReceiveBlockHeader>
    1604:	81 11       	cpse	r24, r1
    1606:	11 c0       	rjmp	.+34     	; 0x162a <SI_Host_OpenSession+0xb2>
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    160c:	03 97       	sbiw	r24, 0x03	; 3
    160e:	61 f4       	brne	.+24     	; 0x1628 <SI_Host_OpenSession+0xb0>
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	90 42       	sbci	r25, 0x20	; 32
    1618:	39 f4       	brne	.+14     	; 0x1628 <SI_Host_OpenSession+0xb0>
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	f8 01       	movw	r30, r16
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    161e:	84 8b       	std	Z+20, r24	; 0x14
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	03 c0       	rjmp	.+6      	; 0x162a <SI_Host_OpenSession+0xb2>

	return PIPE_RWSTREAM_NoError;
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	01 c0       	rjmp	.+2      	; 0x162a <SI_Host_OpenSession+0xb2>
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1628:	80 e8       	ldi	r24, 0x80	; 128
    162a:	68 96       	adiw	r28, 0x18	; 24

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    162c:	0f b6       	in	r0, 0x3f	; 63

	SIInterfaceInfo->State.IsSessionOpen = true;

	return PIPE_RWSTREAM_NoError;
}
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	08 95       	ret

00001644 <SI_Host_CloseSession>:
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	68 97       	sbiw	r28, 0x18	; 24
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1662:	80 91 37 01 	lds	r24, 0x0137
    1666:	8b 30       	cpi	r24, 0x0B	; 11
    1668:	09 f0       	breq	.+2      	; 0x166c <SI_Host_CloseSession+0x28>
    166a:	3d c0       	rjmp	.+122    	; 0x16e6 <SI_Host_CloseSession+0xa2>
    166c:	f8 01       	movw	r30, r16
    166e:	82 89       	ldd	r24, Z+18	; 0x12
    1670:	88 23       	and	r24, r24
    1672:	c9 f1       	breq	.+114    	; 0x16e6 <SI_Host_CloseSession+0xa2>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	7c 01       	movw	r14, r24
    167a:	88 e1       	ldi	r24, 0x18	; 24
    167c:	f7 01       	movw	r30, r14
    167e:	11 92       	st	Z+, r1
    1680:	8a 95       	dec	r24
    1682:	e9 f7       	brne	.-6      	; 0x167e <SI_Host_CloseSession+0x3a>
    1684:	80 e1       	ldi	r24, 0x10	; 16
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e0       	ldi	r26, 0x00	; 0
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	ab 83       	std	Y+3, r26	; 0x03
    1692:	bc 83       	std	Y+4, r27	; 0x04
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	90 e1       	ldi	r25, 0x10	; 16
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	8f 83       	std	Y+7, r24	; 0x07
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	4d 87       	std	Y+13, r20	; 0x0d
    16ae:	5e 87       	std	Y+14, r21	; 0x0e
    16b0:	6f 87       	std	Y+15, r22	; 0x0f
    16b2:	78 8b       	std	Y+16, r23	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    16b4:	b7 01       	movw	r22, r14
    16b6:	c8 01       	movw	r24, r16
    16b8:	83 de       	rcall	.-762    	; 0x13c0 <SI_Host_SendBlockHeader>
    16ba:	81 11       	cpse	r24, r1
    16bc:	15 c0       	rjmp	.+42     	; 0x16e8 <SI_Host_CloseSession+0xa4>
    16be:	b7 01       	movw	r22, r14
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    16c0:	c8 01       	movw	r24, r16
    16c2:	d1 de       	rcall	.-606    	; 0x1466 <SI_Host_ReceiveBlockHeader>
    16c4:	81 11       	cpse	r24, r1
    16c6:	10 c0       	rjmp	.+32     	; 0x16e8 <SI_Host_CloseSession+0xa4>
    16c8:	f8 01       	movw	r30, r16
    16ca:	14 8a       	std	Z+20, r1	; 0x14
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    16d0:	03 97       	sbiw	r24, 0x03	; 3
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <SI_Host_CloseSession+0x94>
    16d4:	80 e8       	ldi	r24, 0x80	; 128
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <SI_Host_CloseSession+0xa4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    16d8:	8f 81       	ldd	r24, Y+7	; 0x07
    16da:	98 85       	ldd	r25, Y+8	; 0x08
	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	90 42       	sbci	r25, 0x20	; 32
    16e0:	c9 f7       	brne	.-14     	; 0x16d4 <SI_Host_CloseSession+0x90>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <SI_Host_CloseSession+0xa4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	68 96       	adiw	r28, 0x18	; 24
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    16ea:	0f b6       	in	r0, 0x3f	; 63

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	08 95       	ret

00001702 <SI_Host_SendCommand>:
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	68 97       	sbiw	r28, 0x18	; 24
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	7c 01       	movw	r14, r24
    1724:	cb 01       	movw	r24, r22
    1726:	b9 01       	movw	r22, r18
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1728:	20 91 37 01 	lds	r18, 0x0137
    172c:	2b 30       	cpi	r18, 0x0B	; 11
    172e:	51 f5       	brne	.+84     	; 0x1784 <SI_Host_SendCommand+0x82>
    1730:	f7 01       	movw	r30, r14
    1732:	22 89       	ldd	r18, Z+18	; 0x12
    1734:	22 23       	and	r18, r18
    1736:	31 f1       	breq	.+76     	; 0x1784 <SI_Host_SendCommand+0x82>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1738:	9e 01       	movw	r18, r28
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	69 01       	movw	r12, r18
    1740:	28 e1       	ldi	r18, 0x18	; 24
    1742:	f6 01       	movw	r30, r12
    1744:	11 92       	st	Z+, r1
    1746:	2a 95       	dec	r18
    1748:	e9 f7       	brne	.-6      	; 0x1744 <SI_Host_SendCommand+0x42>
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	4d 5f       	subi	r20, 0xFD	; 253
    174e:	5f 4f       	sbci	r21, 0xFF	; 255
    1750:	44 0f       	add	r20, r20
    1752:	55 1f       	adc	r21, r21
    1754:	44 0f       	add	r20, r20
    1756:	55 1f       	adc	r21, r21
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1758:	8a 01       	movw	r16, r20
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	09 83       	std	Y+1, r16	; 0x01
    1760:	1a 83       	std	Y+2, r17	; 0x02
    1762:	2b 83       	std	Y+3, r18	; 0x03
    1764:	3c 83       	std	Y+4, r19	; 0x04
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3e 83       	std	Y+6, r19	; 0x06
    176c:	2d 83       	std	Y+5, r18	; 0x05
    176e:	98 87       	std	Y+8, r25	; 0x08
    1770:	8f 83       	std	Y+7, r24	; 0x07
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    1772:	4c 50       	subi	r20, 0x0C	; 12
    1774:	51 09       	sbc	r21, r1
    1776:	ce 01       	movw	r24, r28
    1778:	0d 96       	adiw	r24, 0x0d	; 13
    177a:	7c d0       	rcall	.+248    	; 0x1874 <memcpy>
    177c:	b6 01       	movw	r22, r12

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    177e:	c7 01       	movw	r24, r14
    1780:	1f de       	rcall	.-962    	; 0x13c0 <SI_Host_SendBlockHeader>
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <SI_Host_SendCommand+0x84>
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	68 96       	adiw	r28, 0x18	; 24
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1788:	0f b6       	in	r0, 0x3f	; 63

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <SI_Host_ReceiveResponse>:
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	68 97       	sbiw	r28, 0x18	; 24
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    17b8:	20 91 37 01 	lds	r18, 0x0137
    17bc:	2b 30       	cpi	r18, 0x0B	; 11
    17be:	b9 f4       	brne	.+46     	; 0x17ee <SI_Host_ReceiveResponse+0x4a>
    17c0:	fc 01       	movw	r30, r24
    17c2:	22 89       	ldd	r18, Z+18	; 0x12
    17c4:	22 23       	and	r18, r18
    17c6:	99 f0       	breq	.+38     	; 0x17ee <SI_Host_ReceiveResponse+0x4a>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    17c8:	be 01       	movw	r22, r28
    17ca:	6f 5f       	subi	r22, 0xFF	; 255
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	4b de       	rcall	.-874    	; 0x1466 <SI_Host_ReceiveBlockHeader>
    17d0:	81 11       	cpse	r24, r1
    17d2:	0e c0       	rjmp	.+28     	; 0x17f0 <SI_Host_ReceiveResponse+0x4c>
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	03 97       	sbiw	r24, 0x03	; 3
    17da:	11 f0       	breq	.+4      	; 0x17e0 <SI_Host_ReceiveResponse+0x3c>
    17dc:	80 e8       	ldi	r24, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <SI_Host_ReceiveResponse+0x4c>
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    17e2:	98 85       	ldd	r25, Y+8	; 0x08
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	90 42       	sbci	r25, 0x20	; 32
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <SI_Host_ReceiveResponse+0x38>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <SI_Host_ReceiveResponse+0x4c>
    17ee:	82 e0       	ldi	r24, 0x02	; 2
{
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    17f0:	68 96       	adiw	r28, 0x18	; 24

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <Serial_putchar>:
    1802:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1806:	95 ff       	sbrs	r25, 5
    1808:	fc cf       	rjmp	.-8      	; 0x1802 <Serial_putchar>
				UDR1 = DataByte;
    180a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	08 95       	ret

00001814 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1814:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1818:	87 ff       	sbrs	r24, 7
    181a:	08 c0       	rjmp	.+16     	; 0x182c <Serial_getchar+0x18>
    181c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1820:	87 ff       	sbrs	r24, 7
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1824:	80 91 ce 00 	lds	r24, 0x00CE
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	08 95       	ret
	  return _FDEV_EOF;
    182c:	8e ef       	ldi	r24, 0xFE	; 254
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1836:	08 95       	ret

00001838 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1838:	fc 01       	movw	r30, r24
	if (!(Stream))
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	59 f4       	brne	.+22     	; 0x1854 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    183e:	88 e3       	ldi	r24, 0x38	; 56
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	90 93 47 01 	sts	0x0147, r25
    1846:	80 93 46 01 	sts	0x0146, r24
		stdout = Stream;
    184a:	90 93 49 01 	sts	0x0149, r25
    184e:	80 93 48 01 	sts	0x0148, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1852:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1854:	8e e0       	ldi	r24, 0x0E	; 14
    1856:	df 01       	movw	r26, r30
    1858:	1d 92       	st	X+, r1
    185a:	8a 95       	dec	r24
    185c:	e9 f7       	brne	.-6      	; 0x1858 <Serial_CreateStream+0x20>
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	83 83       	std	Z+3, r24	; 0x03
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	9c e0       	ldi	r25, 0x0C	; 12
    1866:	91 87       	std	Z+9, r25	; 0x09
    1868:	80 87       	std	Z+8, r24	; 0x08
    186a:	8a e0       	ldi	r24, 0x0A	; 10
    186c:	9c e0       	ldi	r25, 0x0C	; 12
    186e:	93 87       	std	Z+11, r25	; 0x0b
    1870:	82 87       	std	Z+10, r24	; 0x0a
    1872:	08 95       	ret

00001874 <memcpy>:
    1874:	fb 01       	movw	r30, r22
    1876:	dc 01       	movw	r26, r24
    1878:	02 c0       	rjmp	.+4      	; 0x187e <memcpy+0xa>
    187a:	01 90       	ld	r0, Z+
    187c:	0d 92       	st	X+, r0
    187e:	41 50       	subi	r20, 0x01	; 1
    1880:	50 40       	sbci	r21, 0x00	; 0
    1882:	d8 f7       	brcc	.-10     	; 0x187a <memcpy+0x6>
    1884:	08 95       	ret

00001886 <printf_P>:
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	fe 01       	movw	r30, r28
    1894:	37 96       	adiw	r30, 0x07	; 7
    1896:	61 91       	ld	r22, Z+
    1898:	71 91       	ld	r23, Z+
    189a:	08 e4       	ldi	r16, 0x48	; 72
    189c:	11 e0       	ldi	r17, 0x01	; 1
    189e:	d8 01       	movw	r26, r16
    18a0:	8d 91       	ld	r24, X+
    18a2:	9c 91       	ld	r25, X
    18a4:	dc 01       	movw	r26, r24
    18a6:	13 96       	adiw	r26, 0x03	; 3
    18a8:	2c 91       	ld	r18, X
    18aa:	13 97       	sbiw	r26, 0x03	; 3
    18ac:	28 60       	ori	r18, 0x08	; 8
    18ae:	13 96       	adiw	r26, 0x03	; 3
    18b0:	2c 93       	st	X, r18
    18b2:	af 01       	movw	r20, r30
    18b4:	3a d0       	rcall	.+116    	; 0x192a <vfprintf>
    18b6:	d8 01       	movw	r26, r16
    18b8:	ed 91       	ld	r30, X+
    18ba:	fc 91       	ld	r31, X
    18bc:	23 81       	ldd	r18, Z+3	; 0x03
    18be:	27 7f       	andi	r18, 0xF7	; 247
    18c0:	23 83       	std	Z+3, r18	; 0x03
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	08 95       	ret

000018cc <puts_P>:
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	e0 91 48 01 	lds	r30, 0x0148
    18da:	f0 91 49 01 	lds	r31, 0x0149
    18de:	83 81       	ldd	r24, Z+3	; 0x03
    18e0:	81 ff       	sbrs	r24, 1
    18e2:	1c c0       	rjmp	.+56     	; 0x191c <puts_P+0x50>
    18e4:	00 e0       	ldi	r16, 0x00	; 0
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	fe 01       	movw	r30, r28
    18ea:	84 91       	lpm	r24, Z
    18ec:	60 91 48 01 	lds	r22, 0x0148
    18f0:	70 91 49 01 	lds	r23, 0x0149
    18f4:	db 01       	movw	r26, r22
    18f6:	18 96       	adiw	r26, 0x08	; 8
    18f8:	ed 91       	ld	r30, X+
    18fa:	fc 91       	ld	r31, X
    18fc:	19 97       	sbiw	r26, 0x09	; 9
    18fe:	88 23       	and	r24, r24
    1900:	39 f0       	breq	.+14     	; 0x1910 <puts_P+0x44>
    1902:	09 95       	icall
    1904:	89 2b       	or	r24, r25
    1906:	11 f0       	breq	.+4      	; 0x190c <puts_P+0x40>
    1908:	0f ef       	ldi	r16, 0xFF	; 255
    190a:	1f ef       	ldi	r17, 0xFF	; 255
    190c:	21 96       	adiw	r28, 0x01	; 1
    190e:	ec cf       	rjmp	.-40     	; 0x18e8 <puts_P+0x1c>
    1910:	8a e0       	ldi	r24, 0x0A	; 10
    1912:	09 95       	icall
    1914:	89 2b       	or	r24, r25
    1916:	11 f4       	brne	.+4      	; 0x191c <puts_P+0x50>
    1918:	c8 01       	movw	r24, r16
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <puts_P+0x54>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <vfprintf>:
    192a:	2f 92       	push	r2
    192c:	3f 92       	push	r3
    192e:	4f 92       	push	r4
    1930:	5f 92       	push	r5
    1932:	6f 92       	push	r6
    1934:	7f 92       	push	r7
    1936:	8f 92       	push	r8
    1938:	9f 92       	push	r9
    193a:	af 92       	push	r10
    193c:	bf 92       	push	r11
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	2c 97       	sbiw	r28, 0x0c	; 12
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	7c 01       	movw	r14, r24
    1960:	6b 01       	movw	r12, r22
    1962:	8a 01       	movw	r16, r20
    1964:	fc 01       	movw	r30, r24
    1966:	17 82       	std	Z+7, r1	; 0x07
    1968:	16 82       	std	Z+6, r1	; 0x06
    196a:	83 81       	ldd	r24, Z+3	; 0x03
    196c:	81 ff       	sbrs	r24, 1
    196e:	b0 c1       	rjmp	.+864    	; 0x1cd0 <vfprintf+0x3a6>
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	4c 01       	movw	r8, r24
    1976:	f7 01       	movw	r30, r14
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	f6 01       	movw	r30, r12
    197c:	93 fd       	sbrc	r25, 3
    197e:	85 91       	lpm	r24, Z+
    1980:	93 ff       	sbrs	r25, 3
    1982:	81 91       	ld	r24, Z+
    1984:	6f 01       	movw	r12, r30
    1986:	88 23       	and	r24, r24
    1988:	09 f4       	brne	.+2      	; 0x198c <vfprintf+0x62>
    198a:	9e c1       	rjmp	.+828    	; 0x1cc8 <vfprintf+0x39e>
    198c:	85 32       	cpi	r24, 0x25	; 37
    198e:	39 f4       	brne	.+14     	; 0x199e <vfprintf+0x74>
    1990:	93 fd       	sbrc	r25, 3
    1992:	85 91       	lpm	r24, Z+
    1994:	93 ff       	sbrs	r25, 3
    1996:	81 91       	ld	r24, Z+
    1998:	6f 01       	movw	r12, r30
    199a:	85 32       	cpi	r24, 0x25	; 37
    199c:	21 f4       	brne	.+8      	; 0x19a6 <vfprintf+0x7c>
    199e:	b7 01       	movw	r22, r14
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	c7 d1       	rcall	.+910    	; 0x1d32 <fputc>
    19a4:	e8 cf       	rjmp	.-48     	; 0x1976 <vfprintf+0x4c>
    19a6:	51 2c       	mov	r5, r1
    19a8:	31 2c       	mov	r3, r1
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	20 32       	cpi	r18, 0x20	; 32
    19ae:	a0 f4       	brcc	.+40     	; 0x19d8 <vfprintf+0xae>
    19b0:	8b 32       	cpi	r24, 0x2B	; 43
    19b2:	69 f0       	breq	.+26     	; 0x19ce <vfprintf+0xa4>
    19b4:	30 f4       	brcc	.+12     	; 0x19c2 <vfprintf+0x98>
    19b6:	80 32       	cpi	r24, 0x20	; 32
    19b8:	59 f0       	breq	.+22     	; 0x19d0 <vfprintf+0xa6>
    19ba:	83 32       	cpi	r24, 0x23	; 35
    19bc:	69 f4       	brne	.+26     	; 0x19d8 <vfprintf+0xae>
    19be:	20 61       	ori	r18, 0x10	; 16
    19c0:	2c c0       	rjmp	.+88     	; 0x1a1a <vfprintf+0xf0>
    19c2:	8d 32       	cpi	r24, 0x2D	; 45
    19c4:	39 f0       	breq	.+14     	; 0x19d4 <vfprintf+0xaa>
    19c6:	80 33       	cpi	r24, 0x30	; 48
    19c8:	39 f4       	brne	.+14     	; 0x19d8 <vfprintf+0xae>
    19ca:	21 60       	ori	r18, 0x01	; 1
    19cc:	26 c0       	rjmp	.+76     	; 0x1a1a <vfprintf+0xf0>
    19ce:	22 60       	ori	r18, 0x02	; 2
    19d0:	24 60       	ori	r18, 0x04	; 4
    19d2:	23 c0       	rjmp	.+70     	; 0x1a1a <vfprintf+0xf0>
    19d4:	28 60       	ori	r18, 0x08	; 8
    19d6:	21 c0       	rjmp	.+66     	; 0x1a1a <vfprintf+0xf0>
    19d8:	27 fd       	sbrc	r18, 7
    19da:	27 c0       	rjmp	.+78     	; 0x1a2a <vfprintf+0x100>
    19dc:	30 ed       	ldi	r19, 0xD0	; 208
    19de:	38 0f       	add	r19, r24
    19e0:	3a 30       	cpi	r19, 0x0A	; 10
    19e2:	78 f4       	brcc	.+30     	; 0x1a02 <vfprintf+0xd8>
    19e4:	26 ff       	sbrs	r18, 6
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <vfprintf+0xca>
    19e8:	fa e0       	ldi	r31, 0x0A	; 10
    19ea:	5f 9e       	mul	r5, r31
    19ec:	30 0d       	add	r19, r0
    19ee:	11 24       	eor	r1, r1
    19f0:	53 2e       	mov	r5, r19
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <vfprintf+0xf0>
    19f4:	8a e0       	ldi	r24, 0x0A	; 10
    19f6:	38 9e       	mul	r3, r24
    19f8:	30 0d       	add	r19, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	33 2e       	mov	r3, r19
    19fe:	20 62       	ori	r18, 0x20	; 32
    1a00:	0c c0       	rjmp	.+24     	; 0x1a1a <vfprintf+0xf0>
    1a02:	8e 32       	cpi	r24, 0x2E	; 46
    1a04:	21 f4       	brne	.+8      	; 0x1a0e <vfprintf+0xe4>
    1a06:	26 fd       	sbrc	r18, 6
    1a08:	5f c1       	rjmp	.+702    	; 0x1cc8 <vfprintf+0x39e>
    1a0a:	20 64       	ori	r18, 0x40	; 64
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <vfprintf+0xf0>
    1a0e:	8c 36       	cpi	r24, 0x6C	; 108
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <vfprintf+0xec>
    1a12:	20 68       	ori	r18, 0x80	; 128
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <vfprintf+0xf0>
    1a16:	88 36       	cpi	r24, 0x68	; 104
    1a18:	41 f4       	brne	.+16     	; 0x1a2a <vfprintf+0x100>
    1a1a:	f6 01       	movw	r30, r12
    1a1c:	93 fd       	sbrc	r25, 3
    1a1e:	85 91       	lpm	r24, Z+
    1a20:	93 ff       	sbrs	r25, 3
    1a22:	81 91       	ld	r24, Z+
    1a24:	6f 01       	movw	r12, r30
    1a26:	81 11       	cpse	r24, r1
    1a28:	c1 cf       	rjmp	.-126    	; 0x19ac <vfprintf+0x82>
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	9f 7d       	andi	r25, 0xDF	; 223
    1a2e:	95 54       	subi	r25, 0x45	; 69
    1a30:	93 30       	cpi	r25, 0x03	; 3
    1a32:	28 f4       	brcc	.+10     	; 0x1a3e <vfprintf+0x114>
    1a34:	0c 5f       	subi	r16, 0xFC	; 252
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	ff e3       	ldi	r31, 0x3F	; 63
    1a3a:	f9 83       	std	Y+1, r31	; 0x01
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <vfprintf+0x12e>
    1a3e:	83 36       	cpi	r24, 0x63	; 99
    1a40:	31 f0       	breq	.+12     	; 0x1a4e <vfprintf+0x124>
    1a42:	83 37       	cpi	r24, 0x73	; 115
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <vfprintf+0x138>
    1a46:	83 35       	cpi	r24, 0x53	; 83
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <vfprintf+0x122>
    1a4a:	57 c0       	rjmp	.+174    	; 0x1afa <vfprintf+0x1d0>
    1a4c:	21 c0       	rjmp	.+66     	; 0x1a90 <vfprintf+0x166>
    1a4e:	f8 01       	movw	r30, r16
    1a50:	80 81       	ld	r24, Z
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	0e 5f       	subi	r16, 0xFE	; 254
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	44 24       	eor	r4, r4
    1a5a:	43 94       	inc	r4
    1a5c:	51 2c       	mov	r5, r1
    1a5e:	54 01       	movw	r10, r8
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <vfprintf+0x160>
    1a62:	38 01       	movw	r6, r16
    1a64:	f2 e0       	ldi	r31, 0x02	; 2
    1a66:	6f 0e       	add	r6, r31
    1a68:	71 1c       	adc	r7, r1
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	a0 80       	ld	r10, Z
    1a6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a70:	26 ff       	sbrs	r18, 6
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <vfprintf+0x150>
    1a74:	65 2d       	mov	r22, r5
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfprintf+0x154>
    1a7a:	6f ef       	ldi	r22, 0xFF	; 255
    1a7c:	7f ef       	ldi	r23, 0xFF	; 255
    1a7e:	c5 01       	movw	r24, r10
    1a80:	2c 87       	std	Y+12, r18	; 0x0c
    1a82:	4c d1       	rcall	.+664    	; 0x1d1c <strnlen>
    1a84:	2c 01       	movw	r4, r24
    1a86:	83 01       	movw	r16, r6
    1a88:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a8a:	2f 77       	andi	r18, 0x7F	; 127
    1a8c:	22 2e       	mov	r2, r18
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <vfprintf+0x192>
    1a90:	38 01       	movw	r6, r16
    1a92:	f2 e0       	ldi	r31, 0x02	; 2
    1a94:	6f 0e       	add	r6, r31
    1a96:	71 1c       	adc	r7, r1
    1a98:	f8 01       	movw	r30, r16
    1a9a:	a0 80       	ld	r10, Z
    1a9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a9e:	26 ff       	sbrs	r18, 6
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <vfprintf+0x17e>
    1aa2:	65 2d       	mov	r22, r5
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x182>
    1aa8:	6f ef       	ldi	r22, 0xFF	; 255
    1aaa:	7f ef       	ldi	r23, 0xFF	; 255
    1aac:	c5 01       	movw	r24, r10
    1aae:	2c 87       	std	Y+12, r18	; 0x0c
    1ab0:	2a d1       	rcall	.+596    	; 0x1d06 <strnlen_P>
    1ab2:	2c 01       	movw	r4, r24
    1ab4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ab6:	20 68       	ori	r18, 0x80	; 128
    1ab8:	22 2e       	mov	r2, r18
    1aba:	83 01       	movw	r16, r6
    1abc:	23 fc       	sbrc	r2, 3
    1abe:	19 c0       	rjmp	.+50     	; 0x1af2 <vfprintf+0x1c8>
    1ac0:	83 2d       	mov	r24, r3
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	48 16       	cp	r4, r24
    1ac6:	59 06       	cpc	r5, r25
    1ac8:	a0 f4       	brcc	.+40     	; 0x1af2 <vfprintf+0x1c8>
    1aca:	b7 01       	movw	r22, r14
    1acc:	80 e2       	ldi	r24, 0x20	; 32
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	30 d1       	rcall	.+608    	; 0x1d32 <fputc>
    1ad2:	3a 94       	dec	r3
    1ad4:	f5 cf       	rjmp	.-22     	; 0x1ac0 <vfprintf+0x196>
    1ad6:	f5 01       	movw	r30, r10
    1ad8:	27 fc       	sbrc	r2, 7
    1ada:	85 91       	lpm	r24, Z+
    1adc:	27 fe       	sbrs	r2, 7
    1ade:	81 91       	ld	r24, Z+
    1ae0:	5f 01       	movw	r10, r30
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	25 d1       	rcall	.+586    	; 0x1d32 <fputc>
    1ae8:	31 10       	cpse	r3, r1
    1aea:	3a 94       	dec	r3
    1aec:	f1 e0       	ldi	r31, 0x01	; 1
    1aee:	4f 1a       	sub	r4, r31
    1af0:	51 08       	sbc	r5, r1
    1af2:	41 14       	cp	r4, r1
    1af4:	51 04       	cpc	r5, r1
    1af6:	79 f7       	brne	.-34     	; 0x1ad6 <vfprintf+0x1ac>
    1af8:	de c0       	rjmp	.+444    	; 0x1cb6 <vfprintf+0x38c>
    1afa:	84 36       	cpi	r24, 0x64	; 100
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <vfprintf+0x1d8>
    1afe:	89 36       	cpi	r24, 0x69	; 105
    1b00:	31 f5       	brne	.+76     	; 0x1b4e <vfprintf+0x224>
    1b02:	f8 01       	movw	r30, r16
    1b04:	27 ff       	sbrs	r18, 7
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <vfprintf+0x1ec>
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	0c 5f       	subi	r16, 0xFC	; 252
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	08 c0       	rjmp	.+16     	; 0x1b26 <vfprintf+0x1fc>
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	88 27       	eor	r24, r24
    1b1c:	77 fd       	sbrc	r23, 7
    1b1e:	80 95       	com	r24
    1b20:	98 2f       	mov	r25, r24
    1b22:	0e 5f       	subi	r16, 0xFE	; 254
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	2f 76       	andi	r18, 0x6F	; 111
    1b28:	b2 2e       	mov	r11, r18
    1b2a:	97 ff       	sbrs	r25, 7
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <vfprintf+0x216>
    1b2e:	90 95       	com	r25
    1b30:	80 95       	com	r24
    1b32:	70 95       	com	r23
    1b34:	61 95       	neg	r22
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	20 68       	ori	r18, 0x80	; 128
    1b3e:	b2 2e       	mov	r11, r18
    1b40:	2a e0       	ldi	r18, 0x0A	; 10
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	a4 01       	movw	r20, r8
    1b46:	27 d1       	rcall	.+590    	; 0x1d96 <__ultoa_invert>
    1b48:	a8 2e       	mov	r10, r24
    1b4a:	a8 18       	sub	r10, r8
    1b4c:	43 c0       	rjmp	.+134    	; 0x1bd4 <vfprintf+0x2aa>
    1b4e:	85 37       	cpi	r24, 0x75	; 117
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <vfprintf+0x232>
    1b52:	2f 7e       	andi	r18, 0xEF	; 239
    1b54:	b2 2e       	mov	r11, r18
    1b56:	2a e0       	ldi	r18, 0x0A	; 10
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	25 c0       	rjmp	.+74     	; 0x1ba6 <vfprintf+0x27c>
    1b5c:	f2 2f       	mov	r31, r18
    1b5e:	f9 7f       	andi	r31, 0xF9	; 249
    1b60:	bf 2e       	mov	r11, r31
    1b62:	8f 36       	cpi	r24, 0x6F	; 111
    1b64:	c1 f0       	breq	.+48     	; 0x1b96 <vfprintf+0x26c>
    1b66:	18 f4       	brcc	.+6      	; 0x1b6e <vfprintf+0x244>
    1b68:	88 35       	cpi	r24, 0x58	; 88
    1b6a:	79 f0       	breq	.+30     	; 0x1b8a <vfprintf+0x260>
    1b6c:	ad c0       	rjmp	.+346    	; 0x1cc8 <vfprintf+0x39e>
    1b6e:	80 37       	cpi	r24, 0x70	; 112
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <vfprintf+0x24e>
    1b72:	88 37       	cpi	r24, 0x78	; 120
    1b74:	21 f0       	breq	.+8      	; 0x1b7e <vfprintf+0x254>
    1b76:	a8 c0       	rjmp	.+336    	; 0x1cc8 <vfprintf+0x39e>
    1b78:	2f 2f       	mov	r18, r31
    1b7a:	20 61       	ori	r18, 0x10	; 16
    1b7c:	b2 2e       	mov	r11, r18
    1b7e:	b4 fe       	sbrs	r11, 4
    1b80:	0d c0       	rjmp	.+26     	; 0x1b9c <vfprintf+0x272>
    1b82:	8b 2d       	mov	r24, r11
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	b8 2e       	mov	r11, r24
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <vfprintf+0x272>
    1b8a:	24 ff       	sbrs	r18, 4
    1b8c:	0a c0       	rjmp	.+20     	; 0x1ba2 <vfprintf+0x278>
    1b8e:	9f 2f       	mov	r25, r31
    1b90:	96 60       	ori	r25, 0x06	; 6
    1b92:	b9 2e       	mov	r11, r25
    1b94:	06 c0       	rjmp	.+12     	; 0x1ba2 <vfprintf+0x278>
    1b96:	28 e0       	ldi	r18, 0x08	; 8
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <vfprintf+0x27c>
    1b9c:	20 e1       	ldi	r18, 0x10	; 16
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <vfprintf+0x27c>
    1ba2:	20 e1       	ldi	r18, 0x10	; 16
    1ba4:	32 e0       	ldi	r19, 0x02	; 2
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	b7 fe       	sbrs	r11, 7
    1baa:	07 c0       	rjmp	.+14     	; 0x1bba <vfprintf+0x290>
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	0c 5f       	subi	r16, 0xFC	; 252
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	06 c0       	rjmp	.+12     	; 0x1bc6 <vfprintf+0x29c>
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 5f       	subi	r16, 0xFE	; 254
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	a4 01       	movw	r20, r8
    1bc8:	e6 d0       	rcall	.+460    	; 0x1d96 <__ultoa_invert>
    1bca:	a8 2e       	mov	r10, r24
    1bcc:	a8 18       	sub	r10, r8
    1bce:	fb 2d       	mov	r31, r11
    1bd0:	ff 77       	andi	r31, 0x7F	; 127
    1bd2:	bf 2e       	mov	r11, r31
    1bd4:	b6 fe       	sbrs	r11, 6
    1bd6:	0b c0       	rjmp	.+22     	; 0x1bee <vfprintf+0x2c4>
    1bd8:	2b 2d       	mov	r18, r11
    1bda:	2e 7f       	andi	r18, 0xFE	; 254
    1bdc:	a5 14       	cp	r10, r5
    1bde:	50 f4       	brcc	.+20     	; 0x1bf4 <vfprintf+0x2ca>
    1be0:	b4 fe       	sbrs	r11, 4
    1be2:	0a c0       	rjmp	.+20     	; 0x1bf8 <vfprintf+0x2ce>
    1be4:	b2 fc       	sbrc	r11, 2
    1be6:	08 c0       	rjmp	.+16     	; 0x1bf8 <vfprintf+0x2ce>
    1be8:	2b 2d       	mov	r18, r11
    1bea:	2e 7e       	andi	r18, 0xEE	; 238
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <vfprintf+0x2ce>
    1bee:	7a 2c       	mov	r7, r10
    1bf0:	2b 2d       	mov	r18, r11
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <vfprintf+0x2d0>
    1bf4:	7a 2c       	mov	r7, r10
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <vfprintf+0x2d0>
    1bf8:	75 2c       	mov	r7, r5
    1bfa:	24 ff       	sbrs	r18, 4
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <vfprintf+0x2ee>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ea 0d       	add	r30, r10
    1c02:	f1 1d       	adc	r31, r1
    1c04:	80 81       	ld	r24, Z
    1c06:	80 33       	cpi	r24, 0x30	; 48
    1c08:	11 f4       	brne	.+4      	; 0x1c0e <vfprintf+0x2e4>
    1c0a:	29 7e       	andi	r18, 0xE9	; 233
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <vfprintf+0x2f6>
    1c0e:	22 ff       	sbrs	r18, 2
    1c10:	06 c0       	rjmp	.+12     	; 0x1c1e <vfprintf+0x2f4>
    1c12:	73 94       	inc	r7
    1c14:	73 94       	inc	r7
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <vfprintf+0x2f6>
    1c18:	82 2f       	mov	r24, r18
    1c1a:	86 78       	andi	r24, 0x86	; 134
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <vfprintf+0x2f6>
    1c1e:	73 94       	inc	r7
    1c20:	23 fd       	sbrc	r18, 3
    1c22:	12 c0       	rjmp	.+36     	; 0x1c48 <vfprintf+0x31e>
    1c24:	20 ff       	sbrs	r18, 0
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <vfprintf+0x30a>
    1c28:	5a 2c       	mov	r5, r10
    1c2a:	73 14       	cp	r7, r3
    1c2c:	18 f4       	brcc	.+6      	; 0x1c34 <vfprintf+0x30a>
    1c2e:	53 0c       	add	r5, r3
    1c30:	57 18       	sub	r5, r7
    1c32:	73 2c       	mov	r7, r3
    1c34:	73 14       	cp	r7, r3
    1c36:	60 f4       	brcc	.+24     	; 0x1c50 <vfprintf+0x326>
    1c38:	b7 01       	movw	r22, r14
    1c3a:	80 e2       	ldi	r24, 0x20	; 32
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	2c 87       	std	Y+12, r18	; 0x0c
    1c40:	78 d0       	rcall	.+240    	; 0x1d32 <fputc>
    1c42:	73 94       	inc	r7
    1c44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c46:	f6 cf       	rjmp	.-20     	; 0x1c34 <vfprintf+0x30a>
    1c48:	73 14       	cp	r7, r3
    1c4a:	10 f4       	brcc	.+4      	; 0x1c50 <vfprintf+0x326>
    1c4c:	37 18       	sub	r3, r7
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <vfprintf+0x328>
    1c50:	31 2c       	mov	r3, r1
    1c52:	24 ff       	sbrs	r18, 4
    1c54:	11 c0       	rjmp	.+34     	; 0x1c78 <vfprintf+0x34e>
    1c56:	b7 01       	movw	r22, r14
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	2c 87       	std	Y+12, r18	; 0x0c
    1c5e:	69 d0       	rcall	.+210    	; 0x1d32 <fputc>
    1c60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c62:	22 ff       	sbrs	r18, 2
    1c64:	16 c0       	rjmp	.+44     	; 0x1c92 <vfprintf+0x368>
    1c66:	21 ff       	sbrs	r18, 1
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <vfprintf+0x346>
    1c6a:	88 e5       	ldi	r24, 0x58	; 88
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <vfprintf+0x34a>
    1c70:	88 e7       	ldi	r24, 0x78	; 120
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	b7 01       	movw	r22, r14
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <vfprintf+0x366>
    1c78:	82 2f       	mov	r24, r18
    1c7a:	86 78       	andi	r24, 0x86	; 134
    1c7c:	51 f0       	breq	.+20     	; 0x1c92 <vfprintf+0x368>
    1c7e:	21 fd       	sbrc	r18, 1
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x35c>
    1c82:	80 e2       	ldi	r24, 0x20	; 32
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <vfprintf+0x35e>
    1c86:	8b e2       	ldi	r24, 0x2B	; 43
    1c88:	27 fd       	sbrc	r18, 7
    1c8a:	8d e2       	ldi	r24, 0x2D	; 45
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	50 d0       	rcall	.+160    	; 0x1d32 <fputc>
    1c92:	a5 14       	cp	r10, r5
    1c94:	30 f4       	brcc	.+12     	; 0x1ca2 <vfprintf+0x378>
    1c96:	b7 01       	movw	r22, r14
    1c98:	80 e3       	ldi	r24, 0x30	; 48
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	4a d0       	rcall	.+148    	; 0x1d32 <fputc>
    1c9e:	5a 94       	dec	r5
    1ca0:	f8 cf       	rjmp	.-16     	; 0x1c92 <vfprintf+0x368>
    1ca2:	aa 94       	dec	r10
    1ca4:	f4 01       	movw	r30, r8
    1ca6:	ea 0d       	add	r30, r10
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	80 81       	ld	r24, Z
    1cac:	b7 01       	movw	r22, r14
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	40 d0       	rcall	.+128    	; 0x1d32 <fputc>
    1cb2:	a1 10       	cpse	r10, r1
    1cb4:	f6 cf       	rjmp	.-20     	; 0x1ca2 <vfprintf+0x378>
    1cb6:	33 20       	and	r3, r3
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <vfprintf+0x392>
    1cba:	5d ce       	rjmp	.-838    	; 0x1976 <vfprintf+0x4c>
    1cbc:	b7 01       	movw	r22, r14
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	37 d0       	rcall	.+110    	; 0x1d32 <fputc>
    1cc4:	3a 94       	dec	r3
    1cc6:	f7 cf       	rjmp	.-18     	; 0x1cb6 <vfprintf+0x38c>
    1cc8:	f7 01       	movw	r30, r14
    1cca:	86 81       	ldd	r24, Z+6	; 0x06
    1ccc:	97 81       	ldd	r25, Z+7	; 0x07
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfprintf+0x3aa>
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	2c 96       	adiw	r28, 0x0c	; 12
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	9f 90       	pop	r9
    1cf6:	8f 90       	pop	r8
    1cf8:	7f 90       	pop	r7
    1cfa:	6f 90       	pop	r6
    1cfc:	5f 90       	pop	r5
    1cfe:	4f 90       	pop	r4
    1d00:	3f 90       	pop	r3
    1d02:	2f 90       	pop	r2
    1d04:	08 95       	ret

00001d06 <strnlen_P>:
    1d06:	fc 01       	movw	r30, r24
    1d08:	05 90       	lpm	r0, Z+
    1d0a:	61 50       	subi	r22, 0x01	; 1
    1d0c:	70 40       	sbci	r23, 0x00	; 0
    1d0e:	01 10       	cpse	r0, r1
    1d10:	d8 f7       	brcc	.-10     	; 0x1d08 <strnlen_P+0x2>
    1d12:	80 95       	com	r24
    1d14:	90 95       	com	r25
    1d16:	8e 0f       	add	r24, r30
    1d18:	9f 1f       	adc	r25, r31
    1d1a:	08 95       	ret

00001d1c <strnlen>:
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	61 50       	subi	r22, 0x01	; 1
    1d20:	70 40       	sbci	r23, 0x00	; 0
    1d22:	01 90       	ld	r0, Z+
    1d24:	01 10       	cpse	r0, r1
    1d26:	d8 f7       	brcc	.-10     	; 0x1d1e <strnlen+0x2>
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	8e 0f       	add	r24, r30
    1d2e:	9f 1f       	adc	r25, r31
    1d30:	08 95       	ret

00001d32 <fputc>:
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	18 2f       	mov	r17, r24
    1d3c:	09 2f       	mov	r16, r25
    1d3e:	eb 01       	movw	r28, r22
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	81 fd       	sbrc	r24, 1
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <fputc+0x1a>
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	20 c0       	rjmp	.+64     	; 0x1d8c <fputc+0x5a>
    1d4c:	82 ff       	sbrs	r24, 2
    1d4e:	10 c0       	rjmp	.+32     	; 0x1d70 <fputc+0x3e>
    1d50:	4e 81       	ldd	r20, Y+6	; 0x06
    1d52:	5f 81       	ldd	r21, Y+7	; 0x07
    1d54:	2c 81       	ldd	r18, Y+4	; 0x04
    1d56:	3d 81       	ldd	r19, Y+5	; 0x05
    1d58:	42 17       	cp	r20, r18
    1d5a:	53 07       	cpc	r21, r19
    1d5c:	7c f4       	brge	.+30     	; 0x1d7c <fputc+0x4a>
    1d5e:	e8 81       	ld	r30, Y
    1d60:	f9 81       	ldd	r31, Y+1	; 0x01
    1d62:	9f 01       	movw	r18, r30
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	39 83       	std	Y+1, r19	; 0x01
    1d6a:	28 83       	st	Y, r18
    1d6c:	10 83       	st	Z, r17
    1d6e:	06 c0       	rjmp	.+12     	; 0x1d7c <fputc+0x4a>
    1d70:	e8 85       	ldd	r30, Y+8	; 0x08
    1d72:	f9 85       	ldd	r31, Y+9	; 0x09
    1d74:	81 2f       	mov	r24, r17
    1d76:	09 95       	icall
    1d78:	89 2b       	or	r24, r25
    1d7a:	29 f7       	brne	.-54     	; 0x1d46 <fputc+0x14>
    1d7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d80:	2f 5f       	subi	r18, 0xFF	; 255
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	3f 83       	std	Y+7, r19	; 0x07
    1d86:	2e 83       	std	Y+6, r18	; 0x06
    1d88:	81 2f       	mov	r24, r17
    1d8a:	90 2f       	mov	r25, r16
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <__ultoa_invert>:
    1d96:	fa 01       	movw	r30, r20
    1d98:	aa 27       	eor	r26, r26
    1d9a:	28 30       	cpi	r18, 0x08	; 8
    1d9c:	51 f1       	breq	.+84     	; 0x1df2 <__ultoa_invert+0x5c>
    1d9e:	20 31       	cpi	r18, 0x10	; 16
    1da0:	81 f1       	breq	.+96     	; 0x1e02 <__ultoa_invert+0x6c>
    1da2:	e8 94       	clt
    1da4:	6f 93       	push	r22
    1da6:	6e 7f       	andi	r22, 0xFE	; 254
    1da8:	6e 5f       	subi	r22, 0xFE	; 254
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	8f 4f       	sbci	r24, 0xFF	; 255
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	af 4f       	sbci	r26, 0xFF	; 255
    1db2:	b1 e0       	ldi	r27, 0x01	; 1
    1db4:	3e d0       	rcall	.+124    	; 0x1e32 <__ultoa_invert+0x9c>
    1db6:	b4 e0       	ldi	r27, 0x04	; 4
    1db8:	3c d0       	rcall	.+120    	; 0x1e32 <__ultoa_invert+0x9c>
    1dba:	67 0f       	add	r22, r23
    1dbc:	78 1f       	adc	r23, r24
    1dbe:	89 1f       	adc	r24, r25
    1dc0:	9a 1f       	adc	r25, r26
    1dc2:	a1 1d       	adc	r26, r1
    1dc4:	68 0f       	add	r22, r24
    1dc6:	79 1f       	adc	r23, r25
    1dc8:	8a 1f       	adc	r24, r26
    1dca:	91 1d       	adc	r25, r1
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	6a 0f       	add	r22, r26
    1dd0:	71 1d       	adc	r23, r1
    1dd2:	81 1d       	adc	r24, r1
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	20 d0       	rcall	.+64     	; 0x1e1a <__ultoa_invert+0x84>
    1dda:	09 f4       	brne	.+2      	; 0x1dde <__ultoa_invert+0x48>
    1ddc:	68 94       	set
    1dde:	3f 91       	pop	r19
    1de0:	2a e0       	ldi	r18, 0x0A	; 10
    1de2:	26 9f       	mul	r18, r22
    1de4:	11 24       	eor	r1, r1
    1de6:	30 19       	sub	r19, r0
    1de8:	30 5d       	subi	r19, 0xD0	; 208
    1dea:	31 93       	st	Z+, r19
    1dec:	de f6       	brtc	.-74     	; 0x1da4 <__ultoa_invert+0xe>
    1dee:	cf 01       	movw	r24, r30
    1df0:	08 95       	ret
    1df2:	46 2f       	mov	r20, r22
    1df4:	47 70       	andi	r20, 0x07	; 7
    1df6:	40 5d       	subi	r20, 0xD0	; 208
    1df8:	41 93       	st	Z+, r20
    1dfa:	b3 e0       	ldi	r27, 0x03	; 3
    1dfc:	0f d0       	rcall	.+30     	; 0x1e1c <__ultoa_invert+0x86>
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <__ultoa_invert+0x5c>
    1e00:	f6 cf       	rjmp	.-20     	; 0x1dee <__ultoa_invert+0x58>
    1e02:	46 2f       	mov	r20, r22
    1e04:	4f 70       	andi	r20, 0x0F	; 15
    1e06:	40 5d       	subi	r20, 0xD0	; 208
    1e08:	4a 33       	cpi	r20, 0x3A	; 58
    1e0a:	18 f0       	brcs	.+6      	; 0x1e12 <__ultoa_invert+0x7c>
    1e0c:	49 5d       	subi	r20, 0xD9	; 217
    1e0e:	31 fd       	sbrc	r19, 1
    1e10:	40 52       	subi	r20, 0x20	; 32
    1e12:	41 93       	st	Z+, r20
    1e14:	02 d0       	rcall	.+4      	; 0x1e1a <__ultoa_invert+0x84>
    1e16:	a9 f7       	brne	.-22     	; 0x1e02 <__ultoa_invert+0x6c>
    1e18:	ea cf       	rjmp	.-44     	; 0x1dee <__ultoa_invert+0x58>
    1e1a:	b4 e0       	ldi	r27, 0x04	; 4
    1e1c:	a6 95       	lsr	r26
    1e1e:	97 95       	ror	r25
    1e20:	87 95       	ror	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	ba 95       	dec	r27
    1e28:	c9 f7       	brne	.-14     	; 0x1e1c <__ultoa_invert+0x86>
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	61 05       	cpc	r22, r1
    1e2e:	71 05       	cpc	r23, r1
    1e30:	08 95       	ret
    1e32:	9b 01       	movw	r18, r22
    1e34:	ac 01       	movw	r20, r24
    1e36:	0a 2e       	mov	r0, r26
    1e38:	06 94       	lsr	r0
    1e3a:	57 95       	ror	r21
    1e3c:	47 95       	ror	r20
    1e3e:	37 95       	ror	r19
    1e40:	27 95       	ror	r18
    1e42:	ba 95       	dec	r27
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__ultoa_invert+0xa2>
    1e46:	62 0f       	add	r22, r18
    1e48:	73 1f       	adc	r23, r19
    1e4a:	84 1f       	adc	r24, r20
    1e4c:	95 1f       	adc	r25, r21
    1e4e:	a0 1d       	adc	r26, r0
    1e50:	08 95       	ret

00001e52 <_exit>:
    1e52:	f8 94       	cli

00001e54 <__stop_program>:
    1e54:	ff cf       	rjmp	.-2      	; 0x1e54 <__stop_program>

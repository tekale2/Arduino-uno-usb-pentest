
KeyboardMouseMultiReport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001142  000011d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  000011e6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a545  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b3d  00000000  00000000  0000c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004029  00000000  00000000  0000f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef8  00000000  00000000  0001350c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003d5a  00000000  00000000  00014404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067ad  00000000  00000000  0001815e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000700  00000000  00000000  0001e90b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	cd c0       	rjmp	.+410    	; 0x19c <__ctors_end>
       2:	00 00       	nop
       4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	e4 c0       	rjmp	.+456    	; 0x1d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	e2 c0       	rjmp	.+452    	; 0x1d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	e0 c0       	rjmp	.+448    	; 0x1d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	de c0       	rjmp	.+444    	; 0x1d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dc c0       	rjmp	.+440    	; 0x1d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	da c0       	rjmp	.+436    	; 0x1d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d8 c0       	rjmp	.+432    	; 0x1d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c4       	rjmp	.+2150   	; 0x890 <__vector_10>
      2a:	00 00       	nop
      2c:	d4 c0       	rjmp	.+424    	; 0x1d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d2 c0       	rjmp	.+420    	; 0x1d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d0 c0       	rjmp	.+416    	; 0x1d6 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	ce c0       	rjmp	.+412    	; 0x1d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cc c0       	rjmp	.+408    	; 0x1d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ca c0       	rjmp	.+404    	; 0x1d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c8 c0       	rjmp	.+400    	; 0x1d6 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	c6 c0       	rjmp	.+396    	; 0x1d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c4 c0       	rjmp	.+392    	; 0x1d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c2 c0       	rjmp	.+388    	; 0x1d6 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	c0 c0       	rjmp	.+384    	; 0x1d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	be c0       	rjmp	.+380    	; 0x1d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bc c0       	rjmp	.+376    	; 0x1d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ba c0       	rjmp	.+372    	; 0x1d6 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	b8 c0       	rjmp	.+368    	; 0x1d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	b6 c0       	rjmp	.+364    	; 0x1d6 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	b4 c0       	rjmp	.+360    	; 0x1d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b2 c0       	rjmp	.+356    	; 0x1d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	b0 c0       	rjmp	.+352    	; 0x1d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	ae c0       	rjmp	.+348    	; 0x1d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ac c0       	rjmp	.+344    	; 0x1d6 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	aa c0       	rjmp	.+340    	; 0x1d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a8 c0       	rjmp	.+336    	; 0x1d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	a6 c0       	rjmp	.+332    	; 0x1d6 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	a4 c0       	rjmp	.+328    	; 0x1d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a2 c0       	rjmp	.+324    	; 0x1d6 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	a0 c0       	rjmp	.+320    	; 0x1d6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	36 03 4c 00 55 00 46 00 41 00 20 00 4d 00 75 00     6.L.U.F.A. .M.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	6c 00 74 00 69 00 20 00 48 00 49 00 44 00 20 00     l.t.i. .H.I.D. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	52 00 65 00 70 00 6f 00 72 00 74 00 20 00 44 00     R.e.p.o.r.t. .D.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d0 <ManufacturerString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ea <LanguageString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ea:	04 03 09 04                                         ....

000000ee <ConfigurationDescriptor>:
      ee:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	00 00 09 21 11 01 00 01 22 79 00 07 05 81 03 08     ...!...."y......

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	00 05                                               ..

00000110 <DeviceDescriptor>:
     110:	12 01 10 01 00 00 00 08 eb 03 66 20 01 00 01 02     ..........f ....
     120:	00 01                                               ..

00000122 <HIDReport>:
     122:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     142:	81 01 05 01 09 30 09 31 15 ff 25 01 35 ff 45 01     .....0.1..%.5.E.
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     152:	95 02 75 08 81 06 c0 c0 05 01 09 06 a1 01 85 02     ..u.............
				ReportSize     -= 2;
     162:	05 07 19 e0 29 e7 15 00 25 01 75 01 95 08 81 02     ....)...%.u.....
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     172:	95 01 75 08 81 01 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				ReportSize     -= 1;
				ReportData     += 1;
     182:	91 02 95 01 75 03 91 01 15 00 25 65 05 07 19 00     ....u.....%e....
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     192:	29 65 95 06 75 08 81 00 c0 00                       )e..u.....

0000019c <__ctors_end>:
     19c:	11 24       	eor	r1, r1
     19e:	1f be       	out	0x3f, r1	; 63
     1a0:	cf ef       	ldi	r28, 0xFF	; 255
     1a2:	d0 e2       	ldi	r29, 0x20	; 32
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	cd bf       	out	0x3d, r28	; 61

000001a8 <__do_copy_data>:
     1a8:	11 e0       	ldi	r17, 0x01	; 1

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	e2 e4       	ldi	r30, 0x42	; 66
     1b0:	f1 e1       	ldi	r31, 0x11	; 17
     1b2:	00 e0       	ldi	r16, 0x00	; 0
				break;
     1b4:	0b bf       	out	0x3b, r16	; 59
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	a0 31       	cpi	r26, 0x10	; 16
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>

000001c2 <__do_clear_bss>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	a0 e1       	ldi	r26, 0x10	; 16
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <.do_clear_bss_start>

000001ca <.do_clear_bss_loop>:
     1ca:	1d 92       	st	X+, r1

000001cc <.do_clear_bss_start>:
     1cc:	a5 32       	cpi	r26, 0x25	; 37
     1ce:	b1 07       	cpc	r27, r17
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <.do_clear_bss_loop>
     1d2:	2e d0       	rcall	.+92     	; 0x230 <main>
     1d4:	b4 c7       	rjmp	.+3944   	; 0x113e <_exit>

000001d6 <__bad_interrupt>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	14 cf       	rjmp	.-472    	; 0x0 <__vectors>

000001d8 <LEDs_SetAllLEDs>:
     1d8:	9b b1       	in	r25, 0x0b	; 11
     1da:	9f 70       	andi	r25, 0x0F	; 15
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	98 2b       	or	r25, r24
     1de:	9b b9       	out	0x0b, r25	; 11
     1e0:	08 95       	ret

000001e2 <SetupHardware>:
     1e2:	84 b7       	in	r24, 0x34	; 52
     1e4:	87 7f       	andi	r24, 0xF7	; 247
     1e6:	84 bf       	out	0x34, r24	; 52
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	88 e1       	ldi	r24, 0x18	; 24
     1ea:	0f b6       	in	r0, 0x3f	; 63
				break;
     1ec:	f8 94       	cli
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	80 93 60 00 	sts	0x0060, r24
     1f2:	10 92 60 00 	sts	0x0060, r1
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	80 e8       	ldi	r24, 0x80	; 128
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	80 93 61 00 	sts	0x0061, r24
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     204:	90 93 61 00 	sts	0x0061, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	0f be       	out	0x3f, r0	; 63
     20a:	84 b1       	in	r24, 0x04	; 4
     20c:	8f 71       	andi	r24, 0x1F	; 31
     20e:	84 b9       	out	0x04, r24	; 4
     210:	8d b1       	in	r24, 0x0d	; 13
     212:	8f 7c       	andi	r24, 0xCF	; 207
     214:	8d b9       	out	0x0d, r24	; 13
     216:	85 b1       	in	r24, 0x05	; 5
     218:	80 6e       	ori	r24, 0xE0	; 224
     21a:	85 b9       	out	0x05, r24	; 5
     21c:	8e b1       	in	r24, 0x0e	; 14
     21e:	80 63       	ori	r24, 0x30	; 48
     220:	8e b9       	out	0x0e, r24	; 14
     222:	8a b1       	in	r24, 0x0a	; 10
     224:	80 6f       	ori	r24, 0xF0	; 240
     226:	8a b9       	out	0x0a, r24	; 10
     228:	8b b1       	in	r24, 0x0b	; 11
     22a:	8f 70       	andi	r24, 0x0F	; 15
     22c:	8b b9       	out	0x0b, r24	; 11
     22e:	15 c3       	rjmp	.+1578   	; 0x85a <USB_Init>

00000230 <main>:
     230:	d8 df       	rcall	.-80     	; 0x1e2 <SetupHardware>
     232:	80 e1       	ldi	r24, 0x10	; 16
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	d1 df       	rcall	.-94     	; 0x1d8 <LEDs_SetAllLEDs>
     236:	78 94       	sei
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	a6 d6       	rcall	.+3404   	; 0xf8a <HID_Device_USBTask>
     23e:	44 d5       	rcall	.+2696   	; 0xcc8 <USB_USBTask>
     240:	fb cf       	rjmp	.-10     	; 0x238 <main+0x8>

00000242 <EVENT_USB_Device_Connect>:
     242:	80 ea       	ldi	r24, 0xA0	; 160
     244:	c9 cf       	rjmp	.-110    	; 0x1d8 <LEDs_SetAllLEDs>

00000246 <EVENT_USB_Device_Disconnect>:
     246:	80 e1       	ldi	r24, 0x10	; 16
     248:	c7 cf       	rjmp	.-114    	; 0x1d8 <LEDs_SetAllLEDs>

0000024a <EVENT_USB_Device_ConfigurationChanged>:
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	8a d6       	rcall	.+3348   	; 0xf64 <HID_Device_ConfigureEndpoints>
     250:	90 91 e2 00 	lds	r25, 0x00E2
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	94 60       	ori	r25, 0x04	; 4
     256:	90 93 e2 00 	sts	0x00E2, r25
     25a:	88 23       	and	r24, r24
     25c:	11 f0       	breq	.+4      	; 0x262 <EVENT_USB_Device_ConfigurationChanged+0x18>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	80 e6       	ldi	r24, 0x60	; 96
     260:	01 c0       	rjmp	.+2      	; 0x264 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     262:	80 e9       	ldi	r24, 0x90	; 144
     264:	b9 cf       	rjmp	.-142    	; 0x1d8 <LEDs_SetAllLEDs>

00000266 <EVENT_USB_Device_ControlRequest>:
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	4a c5       	rjmp	.+2708   	; 0xd00 <HID_Device_ProcessControlRequest>

0000026c <EVENT_USB_Device_StartOfFrame>:
     26c:	80 91 0e 01 	lds	r24, 0x010E
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	90 91 0f 01 	lds	r25, 0x010F
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	00 97       	sbiw	r24, 0x00	; 0
     276:	29 f0       	breq	.+10     	; 0x282 <EVENT_USB_Device_StartOfFrame+0x16>
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	90 93 0f 01 	sts	0x010F, r25
     27e:	80 93 0e 01 	sts	0x010E, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     282:	08 95       	ret

00000284 <CALLBACK_HID_Device_CreateHIDReport>:
				break;
     284:	0f 93       	push	r16

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	1f 93       	push	r17
     288:	f9 01       	movw	r30, r18
     28a:	d8 01       	movw	r26, r16
     28c:	93 b1       	in	r25, 0x03	; 3
     28e:	8c b1       	in	r24, 0x0c	; 12
				break;
     290:	80 95       	com	r24

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	80 73       	andi	r24, 0x30	; 48
     294:	86 95       	lsr	r24
     296:	90 95       	com	r25
     298:	90 7e       	andi	r25, 0xE0	; 224
     29a:	89 2b       	or	r24, r25
     29c:	28 2f       	mov	r18, r24
     29e:	20 74       	andi	r18, 0x40	; 64
				break;
     2a0:	98 2f       	mov	r25, r24

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	90 72       	andi	r25, 0x20	; 32
     2a4:	62 9b       	sbis	0x0c, 2	; 12
     2a6:	1f c0       	rjmp	.+62     	; 0x2e6 <CALLBACK_HID_Device_CreateHIDReport+0x62>
     2a8:	32 e0       	ldi	r19, 0x02	; 2
     2aa:	30 83       	st	Z, r19
				break;
     2ac:	87 ff       	sbrs	r24, 7

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <CALLBACK_HID_Device_CreateHIDReport+0x30>
     2b0:	34 e0       	ldi	r19, 0x04	; 4
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <CALLBACK_HID_Device_CreateHIDReport+0x36>
     2b4:	84 ff       	sbrs	r24, 4
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <CALLBACK_HID_Device_CreateHIDReport+0x38>
     2b8:	35 e0       	ldi	r19, 0x05	; 5
     2ba:	32 83       	std	Z+2, r19	; 0x02
				break;
     2bc:	22 23       	and	r18, r18
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	11 f0       	breq	.+4      	; 0x2c4 <CALLBACK_HID_Device_CreateHIDReport+0x40>
     2c0:	86 e0       	ldi	r24, 0x06	; 6
     2c2:	03 c0       	rjmp	.+6      	; 0x2ca <CALLBACK_HID_Device_CreateHIDReport+0x46>
     2c4:	83 ff       	sbrs	r24, 3
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <CALLBACK_HID_Device_CreateHIDReport+0x48>
     2c8:	87 e0       	ldi	r24, 0x07	; 7
     2ca:	82 83       	std	Z+2, r24	; 0x02
				break;
     2cc:	99 23       	and	r25, r25
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <CALLBACK_HID_Device_CreateHIDReport+0x50>
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	82 83       	std	Z+2, r24	; 0x02
				break;
     2d4:	82 e0       	ldi	r24, 0x02	; 2

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	fb 01       	movw	r30, r22
     2d8:	80 83       	st	Z, r24
     2da:	88 e0       	ldi	r24, 0x08	; 8

				if (ParserData->UsingReportIDs)
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8d 93       	st	X+, r24
     2e0:	9c 93       	st	X, r25
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	1d c0       	rjmp	.+58     	; 0x320 <CALLBACK_HID_Device_CreateHIDReport+0x9c>
     2e6:	87 ff       	sbrs	r24, 7
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <CALLBACK_HID_Device_CreateHIDReport+0x6a>
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <CALLBACK_HID_Device_CreateHIDReport+0x70>
     2ee:	84 ff       	sbrs	r24, 4
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <CALLBACK_HID_Device_CreateHIDReport+0x72>
     2f2:	31 e0       	ldi	r19, 0x01	; 1
     2f4:	32 83       	std	Z+2, r19	; 0x02
     2f6:	22 23       	and	r18, r18
     2f8:	11 f0       	breq	.+4      	; 0x2fe <CALLBACK_HID_Device_CreateHIDReport+0x7a>
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <CALLBACK_HID_Device_CreateHIDReport+0x80>
     2fe:	83 ff       	sbrs	r24, 3
     300:	02 c0       	rjmp	.+4      	; 0x306 <CALLBACK_HID_Device_CreateHIDReport+0x82>
     302:	81 e0       	ldi	r24, 0x01	; 1
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	81 83       	std	Z+1, r24	; 0x01
     306:	99 23       	and	r25, r25
     308:	19 f0       	breq	.+6      	; 0x310 <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     30a:	80 81       	ld	r24, Z
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	80 83       	st	Z, r24
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	fb 01       	movw	r30, r22
     314:	80 83       	st	Z, r24
     316:	83 e0       	ldi	r24, 0x03	; 3
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	8d 93       	st	X+, r24
     31c:	9c 93       	st	X, r25
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <CALLBACK_HID_Device_ProcessHIDReport>:
     326:	f9 01       	movw	r30, r18
     328:	90 81       	ld	r25, Z
     32a:	90 fd       	sbrc	r25, 0
     32c:	02 c0       	rjmp	.+4      	; 0x332 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	01 c0       	rjmp	.+2      	; 0x334 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	91 fd       	sbrc	r25, 1
     336:	80 68       	ori	r24, 0x80	; 128
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	92 fd       	sbrc	r25, 2
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	4d cf       	rjmp	.-358    	; 0x1d8 <LEDs_SetAllLEDs>

0000033e <CALLBACK_USB_GetDescriptor>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	29 2f       	mov	r18, r25
     340:	33 27       	eor	r19, r19
     342:	23 30       	cpi	r18, 0x03	; 3
     344:	31 05       	cpc	r19, r1
     346:	b9 f0       	breq	.+46     	; 0x376 <CALLBACK_USB_GetDescriptor+0x38>
     348:	5c f4       	brge	.+22     	; 0x360 <CALLBACK_USB_GetDescriptor+0x22>
     34a:	21 30       	cpi	r18, 0x01	; 1
     34c:	31 05       	cpc	r19, r1
     34e:	69 f1       	breq	.+90     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x6c>
     350:	22 30       	cpi	r18, 0x02	; 2
     352:	31 05       	cpc	r19, r1
     354:	79 f5       	brne	.+94     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x76>
     356:	82 e2       	ldi	r24, 0x22	; 34
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2e ee       	ldi	r18, 0xEE	; 238
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	2e c0       	rjmp	.+92     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
     360:	21 32       	cpi	r18, 0x21	; 33
     362:	31 05       	cpc	r19, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	e9 f0       	breq	.+58     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x62>
     366:	22 32       	cpi	r18, 0x22	; 34
     368:	31 05       	cpc	r19, r1
     36a:	21 f5       	brne	.+72     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x76>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	89 e7       	ldi	r24, 0x79	; 121
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	22 e2       	ldi	r18, 0x22	; 34
     372:	31 e0       	ldi	r19, 0x01	; 1
     374:	23 c0       	rjmp	.+70     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
     376:	99 27       	eor	r25, r25

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	91 05       	cpc	r25, r1
     37c:	41 f0       	breq	.+16     	; 0x38e <CALLBACK_USB_GetDescriptor+0x50>
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	91 05       	cpc	r25, r1
     382:	41 f0       	breq	.+16     	; 0x394 <CALLBACK_USB_GetDescriptor+0x56>
     384:	89 2b       	or	r24, r25
     386:	b1 f4       	brne	.+44     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x76>
				break;
     388:	ea ee       	ldi	r30, 0xEA	; 234

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	05 c0       	rjmp	.+10     	; 0x398 <CALLBACK_USB_GetDescriptor+0x5a>
     38e:	e0 ed       	ldi	r30, 0xD0	; 208
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <CALLBACK_USB_GetDescriptor+0x5a>
     394:	e8 e9       	ldi	r30, 0x98	; 152
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	84 91       	lpm	r24, Z
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	9f 01       	movw	r18, r30
     39e:	0e c0       	rjmp	.+28     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
     3a0:	89 e0       	ldi	r24, 0x09	; 9
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	31 e0       	ldi	r19, 0x01	; 1
     3a8:	09 c0       	rjmp	.+18     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
     3aa:	82 e1       	ldi	r24, 0x12	; 18
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	20 e1       	ldi	r18, 0x10	; 16
				break;
     3b0:	31 e0       	ldi	r19, 0x01	; 1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	04 c0       	rjmp	.+8      	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	fa 01       	movw	r30, r20
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	31 83       	std	Z+1, r19	; 0x01
     3c0:	20 83       	st	Z, r18
     3c2:	08 95       	ret

000003c4 <Endpoint_Write_Stream_LE>:
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29

					while (CurrCollectionPath->Parent != NULL)
     3d4:	7c 01       	movw	r14, r24
     3d6:	8b 01       	movw	r16, r22
     3d8:	ea 01       	movw	r28, r20
     3da:	ca d1       	rcall	.+916    	; 0x770 <Endpoint_WaitUntilReady>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	81 11       	cpse	r24, r1
     3de:	31 c0       	rjmp	.+98     	; 0x442 <Endpoint_Write_Stream_LE+0x7e>
     3e0:	20 97       	sbiw	r28, 0x00	; 0
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <Endpoint_Write_Stream_LE+0x2c>
     3e4:	88 81       	ld	r24, Y
     3e6:	99 81       	ldd	r25, Y+1	; 0x01
     3e8:	08 1b       	sub	r16, r24
     3ea:	19 0b       	sbc	r17, r25
     3ec:	e8 0e       	add	r14, r24
     3ee:	f9 1e       	adc	r15, r25
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	c1 2c       	mov	r12, r1
     3f2:	d1 2c       	mov	r13, r1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	01 15       	cp	r16, r1
     3f6:	11 05       	cpc	r17, r1
     3f8:	19 f1       	breq	.+70     	; 0x440 <Endpoint_Write_Stream_LE+0x7c>
     3fa:	80 91 e8 00 	lds	r24, 0x00E8
     3fe:	85 fd       	sbrc	r24, 5
     400:	14 c0       	rjmp	.+40     	; 0x42a <Endpoint_Write_Stream_LE+0x66>
     402:	80 91 e8 00 	lds	r24, 0x00E8
     406:	8e 77       	andi	r24, 0x7E	; 126
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	80 93 e8 00 	sts	0x00E8, r24
     40c:	5d d4       	rcall	.+2234   	; 0xcc8 <USB_USBTask>
     40e:	20 97       	sbiw	r28, 0x00	; 0
     410:	41 f0       	breq	.+16     	; 0x422 <Endpoint_Write_Stream_LE+0x5e>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	88 81       	ld	r24, Y
     414:	99 81       	ldd	r25, Y+1	; 0x01
     416:	8c 0d       	add	r24, r12
     418:	9d 1d       	adc	r25, r13
     41a:	99 83       	std	Y+1, r25	; 0x01
     41c:	88 83       	st	Y, r24
     41e:	85 e0       	ldi	r24, 0x05	; 5

				if (UsageListSize)
     420:	10 c0       	rjmp	.+32     	; 0x442 <Endpoint_Write_Stream_LE+0x7e>
     422:	a6 d1       	rcall	.+844    	; 0x770 <Endpoint_WaitUntilReady>
     424:	88 23       	and	r24, r24
     426:	31 f3       	breq	.-52     	; 0x3f4 <Endpoint_Write_Stream_LE+0x30>
     428:	0c c0       	rjmp	.+24     	; 0x442 <Endpoint_Write_Stream_LE+0x7e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	f7 01       	movw	r30, r14
     42c:	81 91       	ld	r24, Z+
     42e:	7f 01       	movw	r14, r30
     430:	80 93 f1 00 	sts	0x00F1, r24
     434:	01 50       	subi	r16, 0x01	; 1
     436:	11 09       	sbc	r17, r1
     438:	ff ef       	ldi	r31, 0xFF	; 255
     43a:	cf 1a       	sub	r12, r31
     43c:	df 0a       	sbc	r13, r31
     43e:	da cf       	rjmp	.-76     	; 0x3f4 <Endpoint_Write_Stream_LE+0x30>

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
					  UsageList[i - 1] = UsageList[i];
     44c:	ef 90       	pop	r14
     44e:	df 90       	pop	r13
     450:	cf 90       	pop	r12
     452:	08 95       	ret

00000454 <Endpoint_Write_Control_Stream_LE>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	20 91 23 01 	lds	r18, 0x0123
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	30 91 24 01 	lds	r19, 0x0124
     45c:	26 17       	cp	r18, r22
     45e:	37 07       	cpc	r19, r23
     460:	48 f0       	brcs	.+18     	; 0x474 <Endpoint_Write_Control_Stream_LE+0x20>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	61 15       	cp	r22, r1
     464:	71 05       	cpc	r23, r1
     466:	39 f4       	brne	.+14     	; 0x476 <Endpoint_Write_Control_Stream_LE+0x22>
     468:	20 91 e8 00 	lds	r18, 0x00E8
     46c:	2e 77       	andi	r18, 0x7E	; 126
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	20 93 e8 00 	sts	0x00E8, r18
     472:	01 c0       	rjmp	.+2      	; 0x476 <Endpoint_Write_Control_Stream_LE+0x22>
     474:	b9 01       	movw	r22, r18
     476:	fc 01       	movw	r30, r24
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	61 15       	cp	r22, r1
     47c:	71 05       	cpc	r23, r1
     47e:	99 f1       	breq	.+102    	; 0x4e6 <Endpoint_Write_Control_Stream_LE+0x92>
     480:	80 91 1c 01 	lds	r24, 0x011C
     484:	88 23       	and	r24, r24
     486:	e9 f1       	breq	.+122    	; 0x502 <Endpoint_Write_Control_Stream_LE+0xae>
     488:	85 30       	cpi	r24, 0x05	; 5
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	e9 f1       	breq	.+122    	; 0x506 <Endpoint_Write_Control_Stream_LE+0xb2>
     48c:	80 91 e8 00 	lds	r24, 0x00E8
     490:	83 fd       	sbrc	r24, 3
     492:	3b c0       	rjmp	.+118    	; 0x50a <Endpoint_Write_Control_Stream_LE+0xb6>
     494:	80 91 e8 00 	lds	r24, 0x00E8
     498:	82 ff       	sbrs	r24, 2
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	06 c0       	rjmp	.+12     	; 0x4a8 <Endpoint_Write_Control_Stream_LE+0x54>
     49c:	80 91 e8 00 	lds	r24, 0x00E8
     4a0:	82 ff       	sbrs	r24, 2
     4a2:	24 c0       	rjmp	.+72     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x98>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret
     4a8:	80 91 e8 00 	lds	r24, 0x00E8
				break;
     4ac:	80 ff       	sbrs	r24, 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	e5 cf       	rjmp	.-54     	; 0x47a <Endpoint_Write_Control_Stream_LE+0x26>
     4b0:	80 91 f2 00 	lds	r24, 0x00F2
     4b4:	90 91 f3 00 	lds	r25, 0x00F3
     4b8:	61 15       	cp	r22, r1
     4ba:	71 05       	cpc	r23, r1
     4bc:	51 f0       	breq	.+20     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x7e>
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	91 05       	cpc	r25, r1
     4c2:	38 f4       	brcc	.+14     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x7e>
     4c4:	21 91       	ld	r18, Z+
     4c6:	20 93 f1 00 	sts	0x00F1, r18
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	61 50       	subi	r22, 0x01	; 1
     4cc:	71 09       	sbc	r23, r1
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x64>
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	08 97       	sbiw	r24, 0x08	; 8
     4d6:	09 f0       	breq	.+2      	; 0x4da <Endpoint_Write_Control_Stream_LE+0x86>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	80 91 e8 00 	lds	r24, 0x00E8
     4de:	8e 77       	andi	r24, 0x7E	; 126
     4e0:	80 93 e8 00 	sts	0x00E8, r24
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	ca cf       	rjmp	.-108    	; 0x47a <Endpoint_Write_Control_Stream_LE+0x26>
     4e6:	21 11       	cpse	r18, r1
     4e8:	cb cf       	rjmp	.-106    	; 0x480 <Endpoint_Write_Control_Stream_LE+0x2c>
     4ea:	d8 cf       	rjmp	.-80     	; 0x49c <Endpoint_Write_Control_Stream_LE+0x48>
     4ec:	80 91 1c 01 	lds	r24, 0x011C
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	88 23       	and	r24, r24
     4f2:	39 f0       	breq	.+14     	; 0x502 <Endpoint_Write_Control_Stream_LE+0xae>
     4f4:	85 30       	cpi	r24, 0x05	; 5
     4f6:	39 f0       	breq	.+14     	; 0x506 <Endpoint_Write_Control_Stream_LE+0xb2>
     4f8:	80 91 e8 00 	lds	r24, 0x00E8
     4fc:	83 ff       	sbrs	r24, 3
     4fe:	ce cf       	rjmp	.-100    	; 0x49c <Endpoint_Write_Control_Stream_LE+0x48>
     500:	04 c0       	rjmp	.+8      	; 0x50a <Endpoint_Write_Control_Stream_LE+0xb6>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	08 95       	ret
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	08 95       	ret
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	08 95       	ret

0000050e <Endpoint_Read_Control_Stream_LE>:
     50e:	61 15       	cp	r22, r1
     510:	71 05       	cpc	r23, r1
     512:	29 f4       	brne	.+10     	; 0x51e <Endpoint_Read_Control_Stream_LE+0x10>
     514:	20 91 e8 00 	lds	r18, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     518:	2b 77       	andi	r18, 0x7B	; 123
     51a:	20 93 e8 00 	sts	0x00E8, r18

					if (UsageListSize)
     51e:	61 15       	cp	r22, r1
     520:	71 05       	cpc	r23, r1
     522:	31 f1       	breq	.+76     	; 0x570 <Endpoint_Read_Control_Stream_LE+0x62>
     524:	20 91 1c 01 	lds	r18, 0x011C
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	22 23       	and	r18, r18
     52a:	59 f1       	breq	.+86     	; 0x582 <Endpoint_Read_Control_Stream_LE+0x74>
     52c:	25 30       	cpi	r18, 0x05	; 5
     52e:	59 f1       	breq	.+86     	; 0x586 <Endpoint_Read_Control_Stream_LE+0x78>
     530:	20 91 e8 00 	lds	r18, 0x00E8
     534:	23 fd       	sbrc	r18, 3
     536:	21 c0       	rjmp	.+66     	; 0x57a <Endpoint_Read_Control_Stream_LE+0x6c>
     538:	20 91 e8 00 	lds	r18, 0x00E8
     53c:	22 ff       	sbrs	r18, 2

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	f2 cf       	rjmp	.-28     	; 0x524 <Endpoint_Read_Control_Stream_LE+0x16>
     540:	fc 01       	movw	r30, r24
     542:	cf 01       	movw	r24, r30
     544:	20 91 f2 00 	lds	r18, 0x00F2
     548:	30 91 f3 00 	lds	r19, 0x00F3
						  UsageList[i - 1] = UsageList[i];
     54c:	23 2b       	or	r18, r19
     54e:	11 f3       	breq	.-60     	; 0x514 <Endpoint_Read_Control_Stream_LE+0x6>
     550:	80 91 f1 00 	lds	r24, 0x00F1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     554:	81 93       	st	Z+, r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	cf 01       	movw	r24, r30
     558:	61 50       	subi	r22, 0x01	; 1
     55a:	71 09       	sbc	r23, r1
     55c:	61 15       	cp	r22, r1
     55e:	71 05       	cpc	r23, r1
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	81 f7       	brne	.-32     	; 0x542 <Endpoint_Read_Control_Stream_LE+0x34>
     562:	d8 cf       	rjmp	.-80     	; 0x514 <Endpoint_Read_Control_Stream_LE+0x6>
     564:	80 91 1c 01 	lds	r24, 0x011C
     568:	88 23       	and	r24, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	59 f0       	breq	.+22     	; 0x582 <Endpoint_Read_Control_Stream_LE+0x74>
     56c:	85 30       	cpi	r24, 0x05	; 5
     56e:	59 f0       	breq	.+22     	; 0x586 <Endpoint_Read_Control_Stream_LE+0x78>
     570:	80 91 e8 00 	lds	r24, 0x00E8
     574:	80 ff       	sbrs	r24, 0
     576:	f6 cf       	rjmp	.-20     	; 0x564 <Endpoint_Read_Control_Stream_LE+0x56>
     578:	02 c0       	rjmp	.+4      	; 0x57e <Endpoint_Read_Control_Stream_LE+0x70>
     57a:	81 e0       	ldi	r24, 0x01	; 1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	08 95       	ret
     57e:	80 e0       	ldi	r24, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	08 95       	ret
     582:	82 e0       	ldi	r24, 0x02	; 2
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	08 95       	ret
     586:	83 e0       	ldi	r24, 0x03	; 3
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	08 95       	ret

0000058a <Endpoint_Write_Control_PStream_LE>:
     58a:	20 91 23 01 	lds	r18, 0x0123
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	30 91 24 01 	lds	r19, 0x0124

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	26 17       	cp	r18, r22
     594:	37 07       	cpc	r19, r23
     596:	48 f0       	brcs	.+18     	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x20>
     598:	61 15       	cp	r22, r1
     59a:	71 05       	cpc	r23, r1
     59c:	39 f4       	brne	.+14     	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x22>
     59e:	20 91 e8 00 	lds	r18, 0x00E8
     5a2:	2e 77       	andi	r18, 0x7E	; 126
     5a4:	20 93 e8 00 	sts	0x00E8, r18
     5a8:	01 c0       	rjmp	.+2      	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x22>
     5aa:	b9 01       	movw	r22, r18

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	61 15       	cp	r22, r1
     5b2:	71 05       	cpc	r23, r1
     5b4:	b1 f1       	breq	.+108    	; 0x622 <Endpoint_Write_Control_PStream_LE+0x98>
     5b6:	80 91 1c 01 	lds	r24, 0x011C
     5ba:	88 23       	and	r24, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x36>
     5be:	3f c0       	rjmp	.+126    	; 0x63e <Endpoint_Write_Control_PStream_LE+0xb4>
     5c0:	85 30       	cpi	r24, 0x05	; 5
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x3c>
     5c4:	3e c0       	rjmp	.+124    	; 0x642 <Endpoint_Write_Control_PStream_LE+0xb8>
     5c6:	80 91 e8 00 	lds	r24, 0x00E8
     5ca:	83 fd       	sbrc	r24, 3
     5cc:	3c c0       	rjmp	.+120    	; 0x646 <Endpoint_Write_Control_PStream_LE+0xbc>
     5ce:	80 91 e8 00 	lds	r24, 0x00E8
     5d2:	82 ff       	sbrs	r24, 2
     5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x58>
     5d6:	80 91 e8 00 	lds	r24, 0x00E8
     5da:	82 ff       	sbrs	r24, 2
     5dc:	25 c0       	rjmp	.+74     	; 0x628 <Endpoint_Write_Control_PStream_LE+0x9e>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	08 95       	ret
     5e2:	80 91 e8 00 	lds	r24, 0x00E8
     5e6:	80 ff       	sbrs	r24, 0
     5e8:	e3 cf       	rjmp	.-58     	; 0x5b0 <Endpoint_Write_Control_PStream_LE+0x26>
     5ea:	80 91 f2 00 	lds	r24, 0x00F2
     5ee:	90 91 f3 00 	lds	r25, 0x00F3
     5f2:	61 15       	cp	r22, r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	71 05       	cpc	r23, r1
     5f6:	59 f0       	breq	.+22     	; 0x60e <Endpoint_Write_Control_PStream_LE+0x84>
     5f8:	88 30       	cpi	r24, 0x08	; 8
     5fa:	91 05       	cpc	r25, r1
     5fc:	40 f4       	brcc	.+16     	; 0x60e <Endpoint_Write_Control_PStream_LE+0x84>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	24 91       	lpm	r18, Z
     600:	20 93 f1 00 	sts	0x00F1, r18

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	61 50       	subi	r22, 0x01	; 1
     608:	71 09       	sbc	r23, r1
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	f2 cf       	rjmp	.-28     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x68>
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	08 97       	sbiw	r24, 0x08	; 8
     612:	09 f0       	breq	.+2      	; 0x616 <Endpoint_Write_Control_PStream_LE+0x8c>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	80 91 e8 00 	lds	r24, 0x00E8
     61a:	8e 77       	andi	r24, 0x7E	; 126
     61c:	80 93 e8 00 	sts	0x00E8, r24
     620:	c7 cf       	rjmp	.-114    	; 0x5b0 <Endpoint_Write_Control_PStream_LE+0x26>
     622:	21 11       	cpse	r18, r1
     624:	c8 cf       	rjmp	.-112    	; 0x5b6 <Endpoint_Write_Control_PStream_LE+0x2c>
     626:	d7 cf       	rjmp	.-82     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x4c>
     628:	80 91 1c 01 	lds	r24, 0x011C
     62c:	88 23       	and	r24, r24
     62e:	39 f0       	breq	.+14     	; 0x63e <Endpoint_Write_Control_PStream_LE+0xb4>
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	39 f0       	breq	.+14     	; 0x642 <Endpoint_Write_Control_PStream_LE+0xb8>
     634:	80 91 e8 00 	lds	r24, 0x00E8
     638:	83 ff       	sbrs	r24, 3
     63a:	cd cf       	rjmp	.-102    	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x4c>
     63c:	04 c0       	rjmp	.+8      	; 0x646 <Endpoint_Write_Control_PStream_LE+0xbc>
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	08 95       	ret
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	08 95       	ret
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	08 95       	ret

0000064a <Endpoint_ConfigureEndpoint_Prv>:
     64a:	98 2f       	mov	r25, r24
     64c:	97 30       	cpi	r25, 0x07	; 7
     64e:	58 f5       	brcc	.+86     	; 0x6a6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     650:	90 93 e9 00 	sts	0x00E9, r25
     654:	98 17       	cp	r25, r24
     656:	39 f0       	breq	.+14     	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     658:	70 91 ec 00 	lds	r23, 0x00EC
     65c:	20 91 ed 00 	lds	r18, 0x00ED
     660:	50 91 f0 00 	lds	r21, 0x00F0
     664:	03 c0       	rjmp	.+6      	; 0x66c <Endpoint_ConfigureEndpoint_Prv+0x22>
     666:	24 2f       	mov	r18, r20
     668:	76 2f       	mov	r23, r22
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	21 ff       	sbrs	r18, 1
     66e:	19 c0       	rjmp	.+50     	; 0x6a2 <Endpoint_ConfigureEndpoint_Prv+0x58>
     670:	30 91 eb 00 	lds	r19, 0x00EB
     674:	3e 7f       	andi	r19, 0xFE	; 254
     676:	30 93 eb 00 	sts	0x00EB, r19
     67a:	30 91 ed 00 	lds	r19, 0x00ED
     67e:	3d 7f       	andi	r19, 0xFD	; 253
     680:	30 93 ed 00 	sts	0x00ED, r19
     684:	30 91 eb 00 	lds	r19, 0x00EB
					  ParserData->TotalReportItems++;
     688:	31 60       	ori	r19, 0x01	; 1
     68a:	30 93 eb 00 	sts	0x00EB, r19
     68e:	70 93 ec 00 	sts	0x00EC, r23

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	20 93 ed 00 	sts	0x00ED, r18
     696:	50 93 f0 00 	sts	0x00F0, r21
     69a:	20 91 ee 00 	lds	r18, 0x00EE
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	27 ff       	sbrs	r18, 7
     6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <Endpoint_ConfigureEndpoint_Prv+0x66>
     6a2:	9f 5f       	subi	r25, 0xFF	; 255
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	d3 cf       	rjmp	.-90     	; 0x64c <Endpoint_ConfigureEndpoint_Prv+0x2>
     6a6:	8f 70       	andi	r24, 0x0F	; 15
     6a8:	80 93 e9 00 	sts	0x00E9, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	08 95       	ret
     6b0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	08 95       	ret

000006b4 <Endpoint_ConfigureEndpointTable>:
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	df 93       	push	r29
     6bc:	06 2f       	mov	r16, r22

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	ec 01       	movw	r28, r24
     6c0:	10 e0       	ldi	r17, 0x00	; 0
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	10 17       	cp	r17, r16
     6c4:	71 f1       	breq	.+92     	; 0x722 <Endpoint_ConfigureEndpointTable+0x6e>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	98 81       	ld	r25, Y
     6c8:	99 23       	and	r25, r25
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	41 f1       	breq	.+80     	; 0x71c <Endpoint_ConfigureEndpointTable+0x68>
     6cc:	2c 81       	ldd	r18, Y+4	; 0x04

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	e9 81       	ldd	r30, Y+1	; 0x01
     6d0:	fa 81       	ldd	r31, Y+2	; 0x02
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	7b 81       	ldd	r23, Y+3	; 0x03
     6d4:	89 2f       	mov	r24, r25
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	8f 70       	andi	r24, 0x0F	; 15

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	87 30       	cpi	r24, 0x07	; 7
     6da:	10 f0       	brcs	.+4      	; 0x6e0 <Endpoint_ConfigureEndpointTable+0x2c>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	22 c0       	rjmp	.+68     	; 0x724 <Endpoint_ConfigureEndpointTable+0x70>
     6e0:	22 30       	cpi	r18, 0x02	; 2
     6e2:	10 f0       	brcs	.+4      	; 0x6e8 <Endpoint_ConfigureEndpointTable+0x34>
     6e4:	56 e0       	ldi	r21, 0x06	; 6
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <Endpoint_ConfigureEndpointTable+0x36>
     6e8:	52 e0       	ldi	r21, 0x02	; 2
     6ea:	28 e0       	ldi	r18, 0x08	; 8
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	2e 17       	cp	r18, r30
     6f2:	3f 07       	cpc	r19, r31
     6f4:	20 f4       	brcc	.+8      	; 0x6fe <Endpoint_ConfigureEndpointTable+0x4a>
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	f9 cf       	rjmp	.-14     	; 0x6f0 <Endpoint_ConfigureEndpointTable+0x3c>
     6fe:	42 95       	swap	r20
     700:	40 7f       	andi	r20, 0xF0	; 240
     702:	45 2b       	or	r20, r21
     704:	69 2f       	mov	r22, r25
     706:	66 1f       	adc	r22, r22
     708:	66 27       	eor	r22, r22
     70a:	66 1f       	adc	r22, r22

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     70c:	90 e4       	ldi	r25, 0x40	; 64
     70e:	79 9f       	mul	r23, r25
     710:	90 01       	movw	r18, r0
     712:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     714:	62 2b       	or	r22, r18
     716:	99 df       	rcall	.-206    	; 0x64a <Endpoint_ConfigureEndpoint_Prv>
     718:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     71a:	01 f3       	breq	.-64     	; 0x6dc <Endpoint_ConfigureEndpointTable+0x28>
     71c:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     71e:	25 96       	adiw	r28, 0x05	; 5
     720:	d0 cf       	rjmp	.-96     	; 0x6c2 <Endpoint_ConfigureEndpointTable+0xe>
     722:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     724:	df 91       	pop	r29
}
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <Endpoint_ClearStatusStage>:
     72e:	80 91 1d 01 	lds	r24, 0x011D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     732:	87 fd       	sbrc	r24, 7
     734:	05 c0       	rjmp	.+10     	; 0x740 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     736:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     73a:	80 ff       	sbrs	r24, 0
     73c:	0e c0       	rjmp	.+28     	; 0x75a <Endpoint_ClearStatusStage+0x2c>
     73e:	12 c0       	rjmp	.+36     	; 0x764 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     740:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     744:	82 fd       	sbrc	r24, 2
     746:	05 c0       	rjmp	.+10     	; 0x752 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     748:	80 91 1c 01 	lds	r24, 0x011C
     74c:	81 11       	cpse	r24, r1
     74e:	f8 cf       	rjmp	.-16     	; 0x740 <Endpoint_ClearStatusStage+0x12>
     750:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     752:	80 91 e8 00 	lds	r24, 0x00E8
     756:	8b 77       	andi	r24, 0x7B	; 123
     758:	08 c0       	rjmp	.+16     	; 0x76a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     75a:	80 91 1c 01 	lds	r24, 0x011C
     75e:	81 11       	cpse	r24, r1
     760:	ea cf       	rjmp	.-44     	; 0x736 <Endpoint_ClearStatusStage+0x8>
     762:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     764:	80 91 e8 00 	lds	r24, 0x00E8
     768:	8e 77       	andi	r24, 0x7E	; 126
     76a:	80 93 e8 00 	sts	0x00E8, r24
     76e:	08 95       	ret

00000770 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     770:	80 91 e4 00 	lds	r24, 0x00E4
     774:	90 91 e5 00 	lds	r25, 0x00E5
     778:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     77a:	20 91 ec 00 	lds	r18, 0x00EC
     77e:	20 ff       	sbrs	r18, 0
     780:	21 c0       	rjmp	.+66     	; 0x7c4 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     782:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     786:	20 fd       	sbrc	r18, 0
     788:	21 c0       	rjmp	.+66     	; 0x7cc <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     78a:	20 91 1c 01 	lds	r18, 0x011C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     78e:	22 23       	and	r18, r18
     790:	89 f0       	breq	.+34     	; 0x7b4 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     792:	25 30       	cpi	r18, 0x05	; 5
     794:	89 f0       	breq	.+34     	; 0x7b8 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     796:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     79a:	25 fd       	sbrc	r18, 5
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <Endpoint_WaitUntilReady+0x4c>
     79e:	20 91 e4 00 	lds	r18, 0x00E4
     7a2:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7a6:	28 17       	cp	r18, r24
     7a8:	39 07       	cpc	r19, r25
     7aa:	39 f3       	breq	.-50     	; 0x77a <Endpoint_WaitUntilReady+0xa>
     7ac:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7ae:	41 f0       	breq	.+16     	; 0x7c0 <Endpoint_WaitUntilReady+0x50>
     7b0:	c9 01       	movw	r24, r18
     7b2:	e3 cf       	rjmp	.-58     	; 0x77a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     7c0:	84 e0       	ldi	r24, 0x04	; 4
     7c2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7c4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7c8:	22 ff       	sbrs	r18, 2
     7ca:	df cf       	rjmp	.-66     	; 0x78a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 95       	ret

000007d0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7d8:	4e d0       	rcall	.+156    	; 0x876 <USB_INT_DisableAllInterrupts>
     7da:	55 d0       	rcall	.+170    	; 0x886 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7dc:	c8 ed       	ldi	r28, 0xD8	; 216
     7de:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7e0:	88 81       	ld	r24, Y
     7e2:	8f 77       	andi	r24, 0x7F	; 127
     7e4:	88 83       	st	Y, r24
     7e6:	88 81       	ld	r24, Y
     7e8:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7ea:	88 83       	st	Y, r24
     7ec:	88 81       	ld	r24, Y
     7ee:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7f0:	88 83       	st	Y, r24
     7f2:	e7 ed       	ldi	r30, 0xD7	; 215
     7f4:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7f6:	80 81       	ld	r24, Z
     7f8:	80 68       	ori	r24, 0x80	; 128
     7fa:	80 83       	st	Z, r24
     7fc:	19 bc       	out	0x29, r1	; 41
     7fe:	10 92 1c 01 	sts	0x011C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     802:	10 92 18 01 	sts	0x0118, r1
	USB_Device_ConfigurationNumber  = 0;
     806:	10 92 1a 01 	sts	0x011A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     80a:	10 92 19 01 	sts	0x0119, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     80e:	00 ee       	ldi	r16, 0xE0	; 224
     810:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     812:	f8 01       	movw	r30, r16
     814:	80 81       	ld	r24, Z
     816:	8b 7f       	andi	r24, 0xFB	; 251
     818:	80 83       	st	Z, r24
     81a:	88 81       	ld	r24, Y
     81c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     81e:	88 83       	st	Y, r24
     820:	42 e0       	ldi	r20, 0x02	; 2
     822:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	11 df       	rcall	.-478    	; 0x64a <Endpoint_ConfigureEndpoint_Prv>
     828:	e1 ee       	ldi	r30, 0xE1	; 225
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     82e:	8e 7f       	andi	r24, 0xFE	; 254
     830:	80 83       	st	Z, r24
     832:	e2 ee       	ldi	r30, 0xE2	; 226
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     838:	81 60       	ori	r24, 0x01	; 1
     83a:	80 83       	st	Z, r24
     83c:	80 81       	ld	r24, Z
     83e:	88 60       	ori	r24, 0x08	; 8
     840:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     842:	f8 01       	movw	r30, r16
     844:	80 81       	ld	r24, Z
     846:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     848:	80 83       	st	Z, r24
     84a:	88 81       	ld	r24, Y
     84c:	80 61       	ori	r24, 0x10	; 16
     84e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <USB_Init>:
     85a:	e8 ed       	ldi	r30, 0xD8	; 216
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     860:	8f 7e       	andi	r24, 0xEF	; 239
     862:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     864:	e7 ed       	ldi	r30, 0xD7	; 215
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 1b 01 	sts	0x011B, r24

	USB_ResetInterface();
     874:	ad cf       	rjmp	.-166    	; 0x7d0 <USB_ResetInterface>

00000876 <USB_INT_DisableAllInterrupts>:
     876:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	8c 7f       	andi	r24, 0xFC	; 252
     87e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     880:	10 92 e2 00 	sts	0x00E2, r1
     884:	08 95       	ret

00000886 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     886:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     88a:	10 92 e1 00 	sts	0x00E1, r1
     88e:	08 95       	ret

00000890 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	0b b6       	in	r0, 0x3b	; 59
     89c:	0f 92       	push	r0
     89e:	2f 93       	push	r18
     8a0:	3f 93       	push	r19
     8a2:	4f 93       	push	r20
     8a4:	5f 93       	push	r21
     8a6:	6f 93       	push	r22
     8a8:	7f 93       	push	r23
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	af 93       	push	r26
     8b0:	bf 93       	push	r27
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8b6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8ba:	82 ff       	sbrs	r24, 2
     8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8be:	80 91 e2 00 	lds	r24, 0x00E2
     8c2:	82 ff       	sbrs	r24, 2
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8c6:	80 91 e1 00 	lds	r24, 0x00E1
     8ca:	8b 7f       	andi	r24, 0xFB	; 251
     8cc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8d0:	cd dc       	rcall	.-1638   	; 0x26c <EVENT_USB_Device_StartOfFrame>
     8d2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8d6:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8d8:	1d c0       	rjmp	.+58     	; 0x914 <__vector_10+0x84>
     8da:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8de:	80 ff       	sbrs	r24, 0
     8e0:	19 c0       	rjmp	.+50     	; 0x914 <__vector_10+0x84>
     8e2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8e6:	8e 7f       	andi	r24, 0xFE	; 254
     8e8:	80 93 da 00 	sts	0x00DA, r24
     8ec:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8f0:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8f2:	0c c0       	rjmp	.+24     	; 0x90c <__vector_10+0x7c>
     8f4:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8f6:	89 bd       	out	0x29, r24	; 41
     8f8:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8fa:	89 bd       	out	0x29, r24	; 41
     8fc:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8fe:	00 fe       	sbrs	r0, 0
     900:	fd cf       	rjmp	.-6      	; 0x8fc <__vector_10+0x6c>
     902:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     904:	80 93 1c 01 	sts	0x011C, r24
     908:	9c dc       	rcall	.-1736   	; 0x242 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__vector_10+0x84>
     90c:	19 bc       	out	0x29, r1	; 41
     90e:	10 92 1c 01 	sts	0x011C, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     912:	99 dc       	rcall	.-1742   	; 0x246 <EVENT_USB_Device_Disconnect>
     914:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     918:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     91a:	18 c0       	rjmp	.+48     	; 0x94c <__vector_10+0xbc>
     91c:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     920:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     922:	14 c0       	rjmp	.+40     	; 0x94c <__vector_10+0xbc>
     924:	80 91 e2 00 	lds	r24, 0x00E2
     928:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     92a:	80 93 e2 00 	sts	0x00E2, r24
     92e:	80 91 e2 00 	lds	r24, 0x00E2
     932:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     934:	80 93 e2 00 	sts	0x00E2, r24
     938:	80 91 d8 00 	lds	r24, 0x00D8
     93c:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     93e:	80 93 d8 00 	sts	0x00D8, r24
     942:	19 bc       	out	0x29, r1	; 41
     944:	85 e0       	ldi	r24, 0x05	; 5
     946:	80 93 1c 01 	sts	0x011C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     94a:	bd d1       	rcall	.+890    	; 0xcc6 <USB_Event_Stub>
     94c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     950:	84 ff       	sbrs	r24, 4
     952:	2f c0       	rjmp	.+94     	; 0x9b2 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     954:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     958:	84 ff       	sbrs	r24, 4
     95a:	2b c0       	rjmp	.+86     	; 0x9b2 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     95c:	8c e0       	ldi	r24, 0x0C	; 12
     95e:	89 bd       	out	0x29, r24	; 41
     960:	8e e0       	ldi	r24, 0x0E	; 14
     962:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     964:	09 b4       	in	r0, 0x29	; 41
     966:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     968:	fd cf       	rjmp	.-6      	; 0x964 <__vector_10+0xd4>
     96a:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     96e:	8f 7d       	andi	r24, 0xDF	; 223
     970:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     974:	80 91 e1 00 	lds	r24, 0x00E1
     978:	8f 7e       	andi	r24, 0xEF	; 239
     97a:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     97e:	80 91 e2 00 	lds	r24, 0x00E2
     982:	8f 7e       	andi	r24, 0xEF	; 239
     984:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     988:	80 91 e2 00 	lds	r24, 0x00E2
     98c:	81 60       	ori	r24, 0x01	; 1
     98e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     992:	80 91 18 01 	lds	r24, 0x0118
     996:	88 23       	and	r24, r24
     998:	11 f0       	breq	.+4      	; 0x99e <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <__vector_10+0x11c>
     99e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     9a2:	87 ff       	sbrs	r24, 7
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 1c 01 	sts	0x011C, r24
     9b0:	8a d1       	rcall	.+788    	; 0xcc6 <USB_Event_Stub>
     9b2:	80 91 e1 00 	lds	r24, 0x00E1
     9b6:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     9b8:	22 c0       	rjmp	.+68     	; 0x9fe <__vector_10+0x16e>
     9ba:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9be:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9c0:	1e c0       	rjmp	.+60     	; 0x9fe <__vector_10+0x16e>
     9c2:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9c6:	87 7f       	andi	r24, 0xF7	; 247
     9c8:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	80 93 1c 01 	sts	0x011C, r24
     9d2:	10 92 18 01 	sts	0x0118, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9d6:	80 91 e1 00 	lds	r24, 0x00E1
     9da:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9dc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9e0:	80 91 e2 00 	lds	r24, 0x00E2
     9e4:	8e 7f       	andi	r24, 0xFE	; 254
     9e6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9ea:	80 91 e2 00 	lds	r24, 0x00E2
     9ee:	80 61       	ori	r24, 0x10	; 16
     9f0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9f4:	42 e0       	ldi	r20, 0x02	; 2
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	27 de       	rcall	.-946    	; 0x64a <Endpoint_ConfigureEndpoint_Prv>
     9fc:	64 d1       	rcall	.+712    	; 0xcc6 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0b be       	out	0x3b, r0	; 59
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <USB_Device_ProcessControlRequest>:
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	aa 97       	sbiw	r28, 0x2a	; 42
     a30:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	ed e1       	ldi	r30, 0x1D	; 29
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a3e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a42:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	e5 32       	cpi	r30, 0x25	; 37
     a48:	f2 07       	cpc	r31, r18
     a4a:	c9 f7       	brne	.-14     	; 0xa3e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a4c:	0c dc       	rcall	.-2024   	; 0x266 <EVENT_USB_Device_ControlRequest>
     a4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a52:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a54:	20 c1       	rjmp	.+576    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     a56:	90 91 1d 01 	lds	r25, 0x011D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a5a:	80 91 1e 01 	lds	r24, 0x011E

		switch (USB_ControlRequest.bRequest)
     a5e:	85 30       	cpi	r24, 0x05	; 5
     a60:	09 f4       	brne	.+2      	; 0xa64 <USB_Device_ProcessControlRequest+0x40>
     a62:	77 c0       	rjmp	.+238    	; 0xb52 <USB_Device_ProcessControlRequest+0x12e>
     a64:	30 f4       	brcc	.+12     	; 0xa72 <USB_Device_ProcessControlRequest+0x4e>
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	81 f1       	breq	.+96     	; 0xaca <USB_Device_ProcessControlRequest+0xa6>
     a6a:	68 f0       	brcs	.+26     	; 0xa86 <USB_Device_ProcessControlRequest+0x62>
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	69 f1       	breq	.+90     	; 0xaca <USB_Device_ProcessControlRequest+0xa6>
     a70:	12 c1       	rjmp	.+548    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     a72:	88 30       	cpi	r24, 0x08	; 8
     a74:	09 f4       	brne	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x54>
     a76:	e1 c0       	rjmp	.+450    	; 0xc3a <USB_Device_ProcessControlRequest+0x216>
     a78:	89 30       	cpi	r24, 0x09	; 9
     a7a:	09 f4       	brne	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x5a>
     a7c:	f0 c0       	rjmp	.+480    	; 0xc5e <USB_Device_ProcessControlRequest+0x23a>
     a7e:	86 30       	cpi	r24, 0x06	; 6
     a80:	09 f0       	breq	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0x60>
     a82:	09 c1       	rjmp	.+530    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     a84:	88 c0       	rjmp	.+272    	; 0xb96 <USB_Device_ProcessControlRequest+0x172>
     a86:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a88:	81 f0       	breq	.+32     	; 0xaaa <USB_Device_ProcessControlRequest+0x86>
     a8a:	92 38       	cpi	r25, 0x82	; 130
     a8c:	09 f0       	breq	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0x6c>
     a8e:	03 c1       	rjmp	.+518    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     a90:	80 91 21 01 	lds	r24, 0x0121
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a94:	8f 70       	andi	r24, 0x0F	; 15
     a96:	80 93 e9 00 	sts	0x00E9, r24
     a9a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a9e:	85 fb       	bst	r24, 5
     aa0:	88 27       	eor	r24, r24
     aa2:	80 f9       	bld	r24, 0
     aa4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <USB_Device_ProcessControlRequest+0x92>
     aaa:	80 91 19 01 	lds	r24, 0x0119
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     aae:	90 91 1a 01 	lds	r25, 0x011A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ab2:	91 11       	cpse	r25, r1
     ab4:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ab6:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aba:	97 7f       	andi	r25, 0xF7	; 247
     abc:	90 93 e8 00 	sts	0x00E8, r25
     ac0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ac4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     ac8:	c3 c0       	rjmp	.+390    	; 0xc50 <USB_Device_ProcessControlRequest+0x22c>
     aca:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     acc:	2d 7f       	andi	r18, 0xFD	; 253
     ace:	09 f0       	breq	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0xae>
     ad0:	e2 c0       	rjmp	.+452    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     ad2:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     ad4:	19 f0       	breq	.+6      	; 0xadc <USB_Device_ProcessControlRequest+0xb8>
     ad6:	92 30       	cpi	r25, 0x02	; 2
     ad8:	61 f0       	breq	.+24     	; 0xaf2 <USB_Device_ProcessControlRequest+0xce>
     ada:	dd c0       	rjmp	.+442    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     adc:	90 91 1f 01 	lds	r25, 0x011F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     ae0:	91 30       	cpi	r25, 0x01	; 1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0xc2>
     ae4:	d8 c0       	rjmp	.+432    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     ae6:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     ae8:	09 f0       	breq	.+2      	; 0xaec <USB_Device_ProcessControlRequest+0xc8>
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 1a 01 	sts	0x011A, r25
     af0:	2a c0       	rjmp	.+84     	; 0xb46 <USB_Device_ProcessControlRequest+0x122>
     af2:	90 91 1f 01 	lds	r25, 0x011F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     af6:	91 11       	cpse	r25, r1
     af8:	26 c0       	rjmp	.+76     	; 0xb46 <USB_Device_ProcessControlRequest+0x122>
     afa:	20 91 21 01 	lds	r18, 0x0121
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     afe:	2f 70       	andi	r18, 0x0F	; 15
     b00:	09 f4       	brne	.+2      	; 0xb04 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b02:	c9 c0       	rjmp	.+402    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     b04:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b08:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b0c:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b0e:	1b c0       	rjmp	.+54     	; 0xb46 <USB_Device_ProcessControlRequest+0x122>
     b10:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b12:	21 f4       	brne	.+8      	; 0xb1c <USB_Device_ProcessControlRequest+0xf8>
     b14:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b18:	80 62       	ori	r24, 0x20	; 32
     b1a:	13 c0       	rjmp	.+38     	; 0xb42 <USB_Device_ProcessControlRequest+0x11e>
     b1c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b20:	80 61       	ori	r24, 0x10	; 16
     b22:	80 93 eb 00 	sts	0x00EB, r24
     b26:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 2e       	mov	r0, r18
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <USB_Device_ProcessControlRequest+0x10c>
     b2e:	88 0f       	add	r24, r24
     b30:	0a 94       	dec	r0
     b32:	ea f7       	brpl	.-6      	; 0xb2e <USB_Device_ProcessControlRequest+0x10a>
     b34:	80 93 ea 00 	sts	0x00EA, r24
     b38:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b3c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b40:	88 60       	ori	r24, 0x08	; 8
     b42:	80 93 eb 00 	sts	0x00EB, r24
     b46:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b4a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b4e:	87 7f       	andi	r24, 0xF7	; 247
     b50:	82 c0       	rjmp	.+260    	; 0xc56 <USB_Device_ProcessControlRequest+0x232>
     b52:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b54:	a0 c0       	rjmp	.+320    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     b56:	10 91 1f 01 	lds	r17, 0x011F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b5a:	1f 77       	andi	r17, 0x7F	; 127
     b5c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b60:	80 78       	andi	r24, 0x80	; 128
     b62:	81 2b       	or	r24, r17
     b64:	80 93 e3 00 	sts	0x00E3, r24
     b68:	80 91 e8 00 	lds	r24, 0x00E8
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	80 93 e8 00 	sts	0x00E8, r24
     b72:	dd dd       	rcall	.-1094   	; 0x72e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b74:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b78:	80 ff       	sbrs	r24, 0
     b7a:	fc cf       	rjmp	.-8      	; 0xb74 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     b7c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	80 93 e3 00 	sts	0x00E3, r24
     b86:	11 23       	and	r17, r17
     b88:	11 f0       	breq	.+4      	; 0xb8e <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <USB_Device_ProcessControlRequest+0x16c>
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	80 93 1c 01 	sts	0x011C, r24
     b94:	80 c0       	rjmp	.+256    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     b96:	90 58       	subi	r25, 0x80	; 128
     b98:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x17a>
     b9c:	7c c0       	rjmp	.+248    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     b9e:	80 91 1f 01 	lds	r24, 0x011F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ba2:	90 91 20 01 	lds	r25, 0x0120
     ba6:	8c 3d       	cpi	r24, 0xDC	; 220
     ba8:	23 e0       	ldi	r18, 0x03	; 3
     baa:	92 07       	cpc	r25, r18
     bac:	71 f5       	brne	.+92     	; 0xc0a <USB_Device_ProcessControlRequest+0x1e6>
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bb2:	8a e2       	ldi	r24, 0x2A	; 42
     bb4:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bb6:	4f b7       	in	r20, 0x3f	; 63
     bb8:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bba:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bbc:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bc2:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     bc4:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	50 93 57 00 	sts	0x0057, r21
     bcc:	e4 91       	lpm	r30, Z
     bce:	20 ff       	sbrs	r18, 0
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
     bd2:	e2 95       	swap	r30
     bd4:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     bd6:	3f 5f       	subi	r19, 0xFF	; 255
     bd8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     bda:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	ea 30       	cpi	r30, 0x0A	; 10
     be0:	10 f0       	brcs	.+4      	; 0xbe6 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     be2:	c7 96       	adiw	r24, 0x37	; 55
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <USB_Device_ProcessControlRequest+0x1c4>
     be6:	c0 96       	adiw	r24, 0x30	; 48
     be8:	8d 93       	st	X+, r24
     bea:	9d 93       	st	X+, r25
     bec:	2f 5f       	subi	r18, 0xFF	; 255
     bee:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bf0:	49 f7       	brne	.-46     	; 0xbc4 <USB_Device_ProcessControlRequest+0x1a0>
     bf2:	4f bf       	out	0x3f, r20	; 63
     bf4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	80 93 e8 00 	sts	0x00E8, r24
     bfe:	6a e2       	ldi	r22, 0x2A	; 42
     c00:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	26 dc       	rcall	.-1972   	; 0x454 <Endpoint_Write_Control_Stream_LE>
     c08:	12 c0       	rjmp	.+36     	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
     c0a:	ae 01       	movw	r20, r28
     c0c:	4f 5f       	subi	r20, 0xFF	; 255
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c10:	60 91 21 01 	lds	r22, 0x0121
     c14:	94 db       	rcall	.-2264   	; 0x33e <CALLBACK_USB_GetDescriptor>
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	09 f4       	brne	.+2      	; 0xc1c <USB_Device_ProcessControlRequest+0x1f8>
     c1a:	3d c0       	rjmp	.+122    	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     c1c:	20 91 e8 00 	lds	r18, 0x00E8
     c20:	27 7f       	andi	r18, 0xF7	; 247
     c22:	20 93 e8 00 	sts	0x00E8, r18
     c26:	bc 01       	movw	r22, r24
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	ae dc       	rcall	.-1700   	; 0x58a <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
     c32:	8b 77       	andi	r24, 0x7B	; 123
     c34:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c38:	2e c0       	rjmp	.+92     	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     c3a:	90 38       	cpi	r25, 0x80	; 128
     c3c:	61 f5       	brne	.+88     	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     c3e:	80 91 e8 00 	lds	r24, 0x00E8
     c42:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c44:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c48:	80 91 18 01 	lds	r24, 0x0118
     c4c:	80 93 f1 00 	sts	0x00F1, r24
     c50:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c54:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c56:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c5a:	69 dd       	rcall	.-1326   	; 0x72e <Endpoint_ClearStatusStage>
     c5c:	1c c0       	rjmp	.+56     	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     c5e:	91 11       	cpse	r25, r1
     c60:	1a c0       	rjmp	.+52     	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
     c62:	90 91 1f 01 	lds	r25, 0x011F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c66:	92 30       	cpi	r25, 0x02	; 2
     c68:	b0 f4       	brcc	.+44     	; 0xc96 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c6e:	87 7f       	andi	r24, 0xF7	; 247
     c70:	80 93 e8 00 	sts	0x00E8, r24
     c74:	90 93 18 01 	sts	0x0118, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c78:	5a dd       	rcall	.-1356   	; 0x72e <Endpoint_ClearStatusStage>
     c7a:	80 91 18 01 	lds	r24, 0x0118
     c7e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <USB_Device_ProcessControlRequest+0x266>
     c82:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     c86:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <USB_Device_ProcessControlRequest+0x26a>
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <USB_Device_ProcessControlRequest+0x26c>
     c8e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c90:	80 93 1c 01 	sts	0x011C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c94:	da da       	rcall	.-2636   	; 0x24a <EVENT_USB_Device_ConfigurationChanged>
     c96:	80 91 e8 00 	lds	r24, 0x00E8
     c9a:	83 ff       	sbrs	r24, 3
     c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <USB_Device_ProcessControlRequest+0x28e>
     c9e:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     ca2:	87 7f       	andi	r24, 0xF7	; 247
     ca4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ca8:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cac:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cae:	80 93 eb 00 	sts	0x00EB, r24
     cb2:	aa 96       	adiw	r28, 0x2a	; 42
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <USB_Event_Stub>:
     cc6:	08 95       	ret

00000cc8 <USB_USBTask>:
     cc8:	cf 93       	push	r28
     cca:	80 91 1c 01 	lds	r24, 0x011C
     cce:	88 23       	and	r24, r24
     cd0:	a9 f0       	breq	.+42     	; 0xcfc <USB_USBTask+0x34>
     cd2:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cd6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     cd8:	90 91 ec 00 	lds	r25, 0x00EC
     cdc:	90 ff       	sbrs	r25, 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <USB_USBTask+0x1c>
     ce0:	90 e8       	ldi	r25, 0x80	; 128
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <USB_USBTask+0x1e>
     ce4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ce6:	c9 2f       	mov	r28, r25
     ce8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cee:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     cf2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     cf4:	97 de       	rcall	.-722    	; 0xa24 <USB_Device_ProcessControlRequest>
     cf6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf8:	c0 93 e9 00 	sts	0x00E9, r28
     cfc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cfe:	08 95       	ret

00000d00 <HID_Device_ProcessControlRequest>:
     d00:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     d02:	7f 92       	push	r7
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <HID_Device_ProcessControlRequest+0x1e>
     d1e:	1f 92       	push	r1
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     d26:	ad b6       	in	r10, 0x3d	; 61
     d28:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d2a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d2e:	83 ff       	sbrs	r24, 3
     d30:	02 c1       	rjmp	.+516    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     d32:	f7 01       	movw	r30, r14
     d34:	80 81       	ld	r24, Z
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	20 91 21 01 	lds	r18, 0x0121
     d3c:	30 91 22 01 	lds	r19, 0x0122
     d40:	28 17       	cp	r18, r24
     d42:	39 07       	cpc	r19, r25
     d44:	09 f0       	breq	.+2      	; 0xd48 <HID_Device_ProcessControlRequest+0x48>
     d46:	f7 c0       	rjmp	.+494    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     d48:	80 91 1e 01 	lds	r24, 0x011E
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	09 f4       	brne	.+2      	; 0xd52 <HID_Device_ProcessControlRequest+0x52>
     d50:	99 c0       	rjmp	.+306    	; 0xe84 <HID_Device_ProcessControlRequest+0x184>
     d52:	30 f4       	brcc	.+12     	; 0xd60 <HID_Device_ProcessControlRequest+0x60>
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	71 f0       	breq	.+28     	; 0xd74 <HID_Device_ProcessControlRequest+0x74>
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	09 f4       	brne	.+2      	; 0xd5e <HID_Device_ProcessControlRequest+0x5e>
     d5c:	d0 c0       	rjmp	.+416    	; 0xefe <HID_Device_ProcessControlRequest+0x1fe>
     d5e:	eb c0       	rjmp	.+470    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     d60:	8a 30       	cpi	r24, 0x0A	; 10
     d62:	09 f4       	brne	.+2      	; 0xd66 <HID_Device_ProcessControlRequest+0x66>
     d64:	b4 c0       	rjmp	.+360    	; 0xece <HID_Device_ProcessControlRequest+0x1ce>
     d66:	8b 30       	cpi	r24, 0x0B	; 11
     d68:	09 f4       	brne	.+2      	; 0xd6c <HID_Device_ProcessControlRequest+0x6c>
     d6a:	9d c0       	rjmp	.+314    	; 0xea6 <HID_Device_ProcessControlRequest+0x1a6>
     d6c:	89 30       	cpi	r24, 0x09	; 9
     d6e:	09 f0       	breq	.+2      	; 0xd72 <HID_Device_ProcessControlRequest+0x72>
     d70:	e2 c0       	rjmp	.+452    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     d72:	4b c0       	rjmp	.+150    	; 0xe0a <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d74:	80 91 1d 01 	lds	r24, 0x011D
     d78:	81 3a       	cpi	r24, 0xA1	; 161
     d7a:	09 f0       	breq	.+2      	; 0xd7e <HID_Device_ProcessControlRequest+0x7e>
     d7c:	dc c0       	rjmp	.+440    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     d7e:	8d b6       	in	r8, 0x3d	; 61
     d80:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     d82:	1a 82       	std	Y+2, r1	; 0x02
     d84:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d86:	80 91 1f 01 	lds	r24, 0x011F
     d8a:	10 91 20 01 	lds	r17, 0x0120
     d8e:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d90:	f7 01       	movw	r30, r14
     d92:	40 85       	ldd	r20, Z+8	; 0x08
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	8d b7       	in	r24, 0x3d	; 61
     d98:	9e b7       	in	r25, 0x3e	; 62
     d9a:	84 1b       	sub	r24, r20
     d9c:	95 0b       	sbc	r25, r21
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	9e bf       	out	0x3e, r25	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	8d bf       	out	0x3d, r24	; 61
     da8:	ed b7       	in	r30, 0x3d	; 61
     daa:	fe b7       	in	r31, 0x3e	; 62
     dac:	31 96       	adiw	r30, 0x01	; 1
     dae:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	cf 01       	movw	r24, r30
     db6:	bc d1       	rcall	.+888    	; 0x1130 <memset>
     db8:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     dba:	41 0f       	add	r20, r17
     dbc:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     dbe:	0f 5f       	subi	r16, 0xFF	; 255
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	96 01       	movw	r18, r12
     dc4:	be 01       	movw	r22, r28
     dc6:	6d 5f       	subi	r22, 0xFD	; 253
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	c7 01       	movw	r24, r14
     dcc:	5b da       	rcall	.-2890   	; 0x284 <CALLBACK_HID_Device_CreateHIDReport>
     dce:	f7 01       	movw	r30, r14
     dd0:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     dd2:	97 81       	ldd	r25, Z+7	; 0x07
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	21 f0       	breq	.+8      	; 0xde0 <HID_Device_ProcessControlRequest+0xe0>
     dd8:	40 85       	ldd	r20, Z+8	; 0x08
     dda:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     ddc:	b6 01       	movw	r22, r12
     dde:	9f d1       	rcall	.+830    	; 0x111e <memcpy>
     de0:	10 92 e9 00 	sts	0x00E9, r1
     de4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dea:	80 93 e8 00 	sts	0x00E8, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	81 11       	cpse	r24, r1
     df2:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     df6:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     df8:	7a 81       	ldd	r23, Y+2	; 0x02
     dfa:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dfc:	2b db       	rcall	.-2474   	; 0x454 <Endpoint_Write_Control_Stream_LE>
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	8b 77       	andi	r24, 0x7B	; 123
     e04:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e08:	37 c0       	rjmp	.+110    	; 0xe78 <HID_Device_ProcessControlRequest+0x178>
     e0a:	80 91 1d 01 	lds	r24, 0x011D
     e0e:	81 32       	cpi	r24, 0x21	; 33
     e10:	09 f0       	breq	.+2      	; 0xe14 <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e12:	91 c0       	rjmp	.+290    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     e14:	8d b6       	in	r8, 0x3d	; 61
     e16:	9e b6       	in	r9, 0x3e	; 62
     e18:	00 91 23 01 	lds	r16, 0x0123
     e1c:	10 91 24 01 	lds	r17, 0x0124
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     e20:	70 90 1f 01 	lds	r7, 0x011F
     e24:	60 90 20 01 	lds	r6, 0x0120
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e28:	8d b7       	in	r24, 0x3d	; 61
     e2a:	9e b7       	in	r25, 0x3e	; 62
     e2c:	80 1b       	sub	r24, r16
     e2e:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	9e bf       	out	0x3e, r25	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	8d bf       	out	0x3d, r24	; 61
     e3a:	ed b7       	in	r30, 0x3d	; 61
     e3c:	fe b7       	in	r31, 0x3e	; 62
     e3e:	31 96       	adiw	r30, 0x01	; 1
     e40:	6f 01       	movw	r12, r30
     e42:	80 91 e8 00 	lds	r24, 0x00E8
     e46:	87 7f       	andi	r24, 0xF7	; 247
     e48:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e4c:	b8 01       	movw	r22, r16
     e4e:	cf 01       	movw	r24, r30
     e50:	5e db       	rcall	.-2372   	; 0x50e <Endpoint_Read_Control_Stream_LE>
     e52:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e56:	8e 77       	andi	r24, 0x7E	; 126
     e58:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	71 10       	cpse	r7, r1
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <HID_Device_ProcessControlRequest+0x164>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e66:	02 1b       	sub	r16, r18
     e68:	13 0b       	sbc	r17, r19
     e6a:	2c 0d       	add	r18, r12
     e6c:	3d 1d       	adc	r19, r13
     e6e:	4f ef       	ldi	r20, 0xFF	; 255
     e70:	46 0d       	add	r20, r6
     e72:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     e74:	c7 01       	movw	r24, r14
     e76:	57 da       	rcall	.-2898   	; 0x326 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e7c:	9e be       	out	0x3e, r9	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	8d be       	out	0x3d, r8	; 61
     e82:	59 c0       	rjmp	.+178    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     e84:	80 91 1d 01 	lds	r24, 0x011D
     e88:	81 3a       	cpi	r24, 0xA1	; 161
     e8a:	09 f0       	breq	.+2      	; 0xe8e <HID_Device_ProcessControlRequest+0x18e>
     e8c:	54 c0       	rjmp	.+168    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     e8e:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 93 e8 00 	sts	0x00E8, r24
     e98:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e9c:	80 ff       	sbrs	r24, 0
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <HID_Device_ProcessControlRequest+0x198>
     ea0:	f7 01       	movw	r30, r14
     ea2:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ea4:	40 c0       	rjmp	.+128    	; 0xf26 <HID_Device_ProcessControlRequest+0x226>
     ea6:	80 91 1d 01 	lds	r24, 0x011D
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     eaa:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     eac:	09 f0       	breq	.+2      	; 0xeb0 <HID_Device_ProcessControlRequest+0x1b0>
     eae:	43 c0       	rjmp	.+134    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     eb0:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	80 93 e8 00 	sts	0x00E8, r24
     eba:	39 dc       	rcall	.-1934   	; 0x72e <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ebc:	90 91 1f 01 	lds	r25, 0x011F
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	91 11       	cpse	r25, r1
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     eca:	81 87       	std	Z+9, r24	; 0x09
     ecc:	34 c0       	rjmp	.+104    	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     ece:	80 91 1d 01 	lds	r24, 0x011D
     ed2:	81 32       	cpi	r24, 0x21	; 33
     ed4:	81 f5       	brne	.+96     	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     ed6:	80 91 e8 00 	lds	r24, 0x00E8
     eda:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     edc:	80 93 e8 00 	sts	0x00E8, r24
     ee0:	26 dc       	rcall	.-1972   	; 0x72e <Endpoint_ClearStatusStage>
     ee2:	80 91 1f 01 	lds	r24, 0x011F
     ee6:	90 91 20 01 	lds	r25, 0x0120
     eea:	88 27       	eor	r24, r24
     eec:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ef2:	3a 95       	dec	r19
     ef4:	e1 f7       	brne	.-8      	; 0xeee <HID_Device_ProcessControlRequest+0x1ee>
     ef6:	f7 01       	movw	r30, r14
     ef8:	95 87       	std	Z+13, r25	; 0x0d
     efa:	84 87       	std	Z+12, r24	; 0x0c
     efc:	1c c0       	rjmp	.+56     	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     efe:	80 91 1d 01 	lds	r24, 0x011D
     f02:	81 3a       	cpi	r24, 0xA1	; 161
     f04:	c1 f4       	brne	.+48     	; 0xf36 <HID_Device_ProcessControlRequest+0x236>
     f06:	80 91 e8 00 	lds	r24, 0x00E8
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f10:	80 91 e8 00 	lds	r24, 0x00E8
     f14:	80 ff       	sbrs	r24, 0
     f16:	fc cf       	rjmp	.-8      	; 0xf10 <HID_Device_ProcessControlRequest+0x210>
     f18:	f7 01       	movw	r30, r14
     f1a:	84 85       	ldd	r24, Z+12	; 0x0c
     f1c:	95 85       	ldd	r25, Z+13	; 0x0d
     f1e:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f20:	87 95       	ror	r24
     f22:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f24:	87 95       	ror	r24
     f26:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     f2a:	80 91 e8 00 	lds	r24, 0x00E8
     f2e:	8e 77       	andi	r24, 0x7E	; 126
     f30:	80 93 e8 00 	sts	0x00E8, r24
     f34:	fc db       	rcall	.-2056   	; 0x72e <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f3a:	be be       	out	0x3e, r11	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	ad be       	out	0x3d, r10	; 61
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f44:	0f 90       	pop	r0
     f46:	df 91       	pop	r29
			}

			break;
	}
}
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	af 90       	pop	r10
     f5a:	9f 90       	pop	r9
     f5c:	8f 90       	pop	r8
     f5e:	7f 90       	pop	r7
     f60:	6f 90       	pop	r6
     f62:	08 95       	ret

00000f64 <HID_Device_ConfigureEndpoints>:
     f64:	fc 01       	movw	r30, r24
     f66:	39 96       	adiw	r30, 0x09	; 9
     f68:	27 e0       	ldi	r18, 0x07	; 7
     f6a:	df 01       	movw	r26, r30
     f6c:	1d 92       	st	X+, r1
     f6e:	2a 95       	dec	r18
     f70:	e9 f7       	brne	.-6      	; 0xf6c <HID_Device_ConfigureEndpoints+0x8>
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f76:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f78:	24 ef       	ldi	r18, 0xF4	; 244
     f7a:	31 e0       	ldi	r19, 0x01	; 1
     f7c:	35 87       	std	Z+13, r19	; 0x0d
     f7e:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f80:	23 e0       	ldi	r18, 0x03	; 3
     f82:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	95 cb       	rjmp	.-2262   	; 0x6b4 <Endpoint_ConfigureEndpointTable>

00000f8a <HID_Device_USBTask>:
     f8a:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f8c:	6f 92       	push	r6
     f8e:	7f 92       	push	r7
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <HID_Device_USBTask+0x20>
     faa:	1f 92       	push	r1
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     fb2:	ad b6       	in	r10, 0x3d	; 61
     fb4:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     fb6:	80 91 1c 01 	lds	r24, 0x011C
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <HID_Device_USBTask+0x36>
     fbe:	8a c0       	rjmp	.+276    	; 0x10d4 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fc0:	80 91 e4 00 	lds	r24, 0x00E4
     fc4:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     fc8:	f7 01       	movw	r30, r14
     fca:	22 85       	ldd	r18, Z+10	; 0x0a
     fcc:	33 85       	ldd	r19, Z+11	; 0x0b
     fce:	28 17       	cp	r18, r24
     fd0:	39 07       	cpc	r19, r25
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <HID_Device_USBTask+0x4c>
     fd4:	7f c0       	rjmp	.+254    	; 0x10d4 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fde:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     fe2:	85 ff       	sbrs	r24, 5
     fe4:	77 c0       	rjmp	.+238    	; 0x10d4 <HID_Device_USBTask+0x14a>
     fe6:	8d b6       	in	r8, 0x3d	; 61
     fe8:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fea:	40 85       	ldd	r20, Z+8	; 0x08
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	8d b7       	in	r24, 0x3d	; 61
     ff0:	9e b7       	in	r25, 0x3e	; 62
     ff2:	84 1b       	sub	r24, r20
     ff4:	95 0b       	sbc	r25, r21
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	9e bf       	out	0x3e, r25	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	8d bf       	out	0x3d, r24	; 61
    1000:	ed b7       	in	r30, 0x3d	; 61
    1002:	fe b7       	in	r31, 0x3e	; 62
    1004:	31 96       	adiw	r30, 0x01	; 1
    1006:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1008:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    100a:	1a 82       	std	Y+2, r1	; 0x02
    100c:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	cf 01       	movw	r24, r30
    1014:	8d d0       	rcall	.+282    	; 0x1130 <memset>
    1016:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1018:	0f 5f       	subi	r16, 0xFF	; 255
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	96 01       	movw	r18, r12
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	be 01       	movw	r22, r28
    1022:	6d 5f       	subi	r22, 0xFD	; 253
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	c7 01       	movw	r24, r14
    1028:	2d d9       	rcall	.-3494   	; 0x284 <CALLBACK_HID_Device_CreateHIDReport>
    102a:	68 2e       	mov	r6, r24
    102c:	f7 01       	movw	r30, r14
    102e:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1030:	95 85       	ldd	r25, Z+13	; 0x0d
    1032:	89 2b       	or	r24, r25
    1034:	41 f0       	breq	.+16     	; 0x1046 <HID_Device_USBTask+0xbc>
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	86 85       	ldd	r24, Z+14	; 0x0e
    103a:	97 85       	ldd	r25, Z+15	; 0x0f
    103c:	89 2b       	or	r24, r25
    103e:	09 f0       	breq	.+2      	; 0x1042 <HID_Device_USBTask+0xb8>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	72 2e       	mov	r7, r18
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <HID_Device_USBTask+0xbe>
    1046:	71 2c       	mov	r7, r1
    1048:	f7 01       	movw	r30, r14
    104a:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    104c:	17 81       	ldd	r17, Z+7	; 0x07
    104e:	01 15       	cp	r16, r1
    1050:	11 05       	cpc	r17, r1
    1052:	89 f0       	breq	.+34     	; 0x1076 <HID_Device_USBTask+0xec>
    1054:	49 81       	ldd	r20, Y+1	; 0x01
    1056:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1058:	b8 01       	movw	r22, r16
    105a:	c6 01       	movw	r24, r12
    105c:	53 d0       	rcall	.+166    	; 0x1104 <memcmp>
    105e:	55 24       	eor	r5, r5
    1060:	53 94       	inc	r5
    1062:	89 2b       	or	r24, r25
    1064:	09 f4       	brne	.+2      	; 0x1068 <HID_Device_USBTask+0xde>
    1066:	51 2c       	mov	r5, r1
    1068:	f7 01       	movw	r30, r14
    106a:	40 85       	ldd	r20, Z+8	; 0x08
    106c:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    106e:	b6 01       	movw	r22, r12
    1070:	c8 01       	movw	r24, r16
    1072:	55 d0       	rcall	.+170    	; 0x111e <memcpy>
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <HID_Device_USBTask+0xee>
    1076:	51 2c       	mov	r5, r1
    1078:	29 81       	ldd	r18, Y+1	; 0x01
    107a:	3a 81       	ldd	r19, Y+2	; 0x02
    107c:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    107e:	f1 f0       	breq	.+60     	; 0x10bc <HID_Device_USBTask+0x132>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1080:	61 10       	cpse	r6, r1
    1082:	04 c0       	rjmp	.+8      	; 0x108c <HID_Device_USBTask+0x102>
    1084:	51 10       	cpse	r5, r1
    1086:	02 c0       	rjmp	.+4      	; 0x108c <HID_Device_USBTask+0x102>
    1088:	70 fe       	sbrs	r7, 0
    108a:	18 c0       	rjmp	.+48     	; 0x10bc <HID_Device_USBTask+0x132>
    108c:	f7 01       	movw	r30, r14
    108e:	84 85       	ldd	r24, Z+12	; 0x0c
    1090:	95 85       	ldd	r25, Z+13	; 0x0d
    1092:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1094:	86 87       	std	Z+14, r24	; 0x0e
    1096:	81 81       	ldd	r24, Z+1	; 0x01
    1098:	8f 70       	andi	r24, 0x0F	; 15
    109a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	81 11       	cpse	r24, r1
    10a2:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    10a6:	69 81       	ldd	r22, Y+1	; 0x01
    10a8:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    10ae:	c6 01       	movw	r24, r12
    10b0:	89 d9       	rcall	.-3310   	; 0x3c4 <Endpoint_Write_Stream_LE>
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
    10b6:	8e 77       	andi	r24, 0x7E	; 126
    10b8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10bc:	80 91 e4 00 	lds	r24, 0x00E4
    10c0:	90 91 e5 00 	lds	r25, 0x00E5
    10c4:	f7 01       	movw	r30, r14
    10c6:	93 87       	std	Z+11, r25	; 0x0b
    10c8:	82 87       	std	Z+10, r24	; 0x0a
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    10ce:	9e be       	out	0x3e, r9	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	8d be       	out	0x3d, r8	; 61
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	be be       	out	0x3e, r11	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	ad be       	out	0x3d, r10	; 61
	}
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	af 90       	pop	r10
    10f8:	9f 90       	pop	r9
    10fa:	8f 90       	pop	r8
    10fc:	7f 90       	pop	r7
    10fe:	6f 90       	pop	r6
    1100:	5f 90       	pop	r5
    1102:	08 95       	ret

00001104 <memcmp>:
    1104:	fb 01       	movw	r30, r22
    1106:	dc 01       	movw	r26, r24
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <memcmp+0xe>
    110a:	8d 91       	ld	r24, X+
    110c:	01 90       	ld	r0, Z+
    110e:	80 19       	sub	r24, r0
    1110:	21 f4       	brne	.+8      	; 0x111a <memcmp+0x16>
    1112:	41 50       	subi	r20, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	c8 f7       	brcc	.-14     	; 0x110a <memcmp+0x6>
    1118:	88 1b       	sub	r24, r24
    111a:	99 0b       	sbc	r25, r25
    111c:	08 95       	ret

0000111e <memcpy>:
    111e:	fb 01       	movw	r30, r22
    1120:	dc 01       	movw	r26, r24
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <memcpy+0xa>
    1124:	01 90       	ld	r0, Z+
    1126:	0d 92       	st	X+, r0
    1128:	41 50       	subi	r20, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	d8 f7       	brcc	.-10     	; 0x1124 <memcpy+0x6>
    112e:	08 95       	ret

00001130 <memset>:
    1130:	dc 01       	movw	r26, r24
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <memset+0x6>
    1134:	6d 93       	st	X+, r22
    1136:	41 50       	subi	r20, 0x01	; 1
    1138:	50 40       	sbci	r21, 0x00	; 0
    113a:	e0 f7       	brcc	.-8      	; 0x1134 <memset+0x4>
    113c:	08 95       	ret

0000113e <_exit>:
    113e:	f8 94       	cli

00001140 <__stop_program>:
    1140:	ff cf       	rjmp	.-2      	; 0x1140 <__stop_program>

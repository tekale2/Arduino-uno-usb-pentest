
MIDIToneGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000dac  00000e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080020c  0080020c  00000f4c  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000650  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a530  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a79  00000000  00000000  0000c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d4a  00000000  00000000  0000f15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f24  00000000  00000000  00012ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004060  00000000  00000000  00013dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000671c  00000000  00000000  00017e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000720  00000000  00000000  0001e548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
   6:	00 00       	nop
   8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
   a:	00 00       	nop
   c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
   e:	00 00       	nop
  10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
  16:	00 00       	nop
  18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
  22:	00 00       	nop
  24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
  26:	00 00       	nop
  28:	11 c4       	rjmp	.+2082   	; 0x84c <__vector_10>
  2a:	00 00       	nop
  2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
  42:	00 00       	nop
  44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	9f c0       	rjmp	.+318    	; 0x194 <__vector_21>
  56:	00 00       	nop
  58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
  5e:	00 00       	nop
  60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
  72:	00 00       	nop
  74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
  76:	00 00       	nop
  78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
  82:	00 00       	nop
  84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
  86:	00 00       	nop
  88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000b8 <ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d2 <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d6:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
	{
		uint8_t  HIDReportItem  = *ReportData;
  e6:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 106:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 116:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 136:	05 25 01 01 03                                      .%...

0000013b <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
 14b:	00 01 00                                            ...

0000014e <__ctors_end>:
				break;
 14e:	11 24       	eor	r1, r1

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	12 e0       	ldi	r17, 0x02	; 2
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	ec ea       	ldi	r30, 0xAC	; 172
				ReportSize     -= 2;
 162:	fd e0       	ldi	r31, 0x0D	; 13
 164:	00 e0       	ldi	r16, 0x00	; 0
				ReportData     += 2;
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
				break;
 16c:	0d 92       	st	X+, r0

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	ac 30       	cpi	r26, 0x0C	; 12
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>

00000174 <__do_clear_bss>:
 174:	12 e0       	ldi	r17, 0x02	; 2
 176:	ac e0       	ldi	r26, 0x0C	; 12
 178:	b2 e0       	ldi	r27, 0x02	; 2
				ReportSize     -= 1;
 17a:	01 c0       	rjmp	.+2      	; 0x17e <.do_clear_bss_start>

0000017c <.do_clear_bss_loop>:
 17c:	1d 92       	st	X+, r1

0000017e <.do_clear_bss_start>:
				ReportData     += 1;
 17e:	a6 33       	cpi	r26, 0x36	; 54
 180:	b1 07       	cpc	r27, r17
 182:	e1 f7       	brne	.-8      	; 0x17c <.do_clear_bss_loop>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	85 d0       	rcall	.+266    	; 0x290 <main>
 186:	10 c6       	rjmp	.+3104   	; 0xda8 <_exit>

00000188 <__bad_interrupt>:
 188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <LEDs_SetAllLEDs>:
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	98 2b       	or	r25, r24
 190:	9b b9       	out	0x0b, r25	; 11
 192:	08 95       	ret

00000194 <__vector_21>:
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	0b b6       	in	r0, 0x3b	; 59
 1a0:	0f 92       	push	r0
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
				break;
 1b4:	bf 93       	push	r27
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
 1ba:	ed e0       	ldi	r30, 0x0D	; 13
 1bc:	f2 e0       	ldi	r31, 0x02	; 2
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 23       	and	r24, r24
 1c6:	b9 f0       	breq	.+46     	; 0x1f6 <__vector_21+0x62>
 1c8:	45 81       	ldd	r20, Z+5	; 0x05
 1ca:	56 81       	ldd	r21, Z+6	; 0x06
 1cc:	67 81       	ldd	r22, Z+7	; 0x07
 1ce:	70 85       	ldd	r23, Z+8	; 0x08
 1d0:	a7 2f       	mov	r26, r23
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	a4 5f       	subi	r26, 0xF4	; 244
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	be 4f       	sbci	r27, 0xFE	; 254
 1d8:	8c 91       	ld	r24, X
 1da:	28 0f       	add	r18, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	31 1d       	adc	r19, r1
 1de:	81 81       	ldd	r24, Z+1	; 0x01
 1e0:	92 81       	ldd	r25, Z+2	; 0x02
 1e2:	a3 81       	ldd	r26, Z+3	; 0x03
 1e4:	b4 81       	ldd	r27, Z+4	; 0x04
 1e6:	84 0f       	add	r24, r20
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	95 1f       	adc	r25, r21
 1ea:	a6 1f       	adc	r26, r22
				break;
 1ec:	b7 1f       	adc	r27, r23
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	85 83       	std	Z+5, r24	; 0x05
 1f0:	96 83       	std	Z+6, r25	; 0x06
 1f2:	a7 83       	std	Z+7, r26	; 0x07
 1f4:	b0 87       	std	Z+8, r27	; 0x08
 1f6:	3a 96       	adiw	r30, 0x0a	; 10
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	eb 32       	cpi	r30, 0x2B	; 43
 1fc:	f8 07       	cpc	r31, r24
 1fe:	09 f7       	brne	.-62     	; 0x1c2 <__vector_21+0x2e>
 200:	c9 01       	movw	r24, r18
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	2f 3f       	cpi	r18, 0xFF	; 255
 204:	31 05       	cpc	r19, r1
				break;
 206:	19 f0       	breq	.+6      	; 0x20e <__vector_21+0x7a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	10 f0       	brcs	.+4      	; 0x20e <__vector_21+0x7a>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 99 00 	sts	0x0099, r25
 212:	80 93 98 00 	sts	0x0098, r24
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <SetupHardware>:
 23c:	84 b7       	in	r24, 0x34	; 52
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	84 bf       	out	0x34, r24	; 52
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	80 93 60 00 	sts	0x0060, r24
 24c:	10 92 60 00 	sts	0x0060, r1
 250:	0f be       	out	0x3f, r0	; 63
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	80 93 61 00 	sts	0x0061, r24
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	90 93 61 00 	sts	0x0061, r25
 262:	0f be       	out	0x3f, r0	; 63
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	80 6f       	ori	r24, 0xF0	; 240
 268:	8a b9       	out	0x0a, r24	; 10
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	8b b9       	out	0x0b, r24	; 11
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	d2 d2       	rcall	.+1444   	; 0x816 <USB_Init>
				break;
 272:	82 e0       	ldi	r24, 0x02	; 2

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	80 93 6e 00 	sts	0x006E, r24
 278:	90 e4       	ldi	r25, 0x40	; 64
 27a:	97 bd       	out	0x27, r25	; 39
 27c:	84 bd       	out	0x24, r24	; 36
 27e:	85 bd       	out	0x25, r24	; 37
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	3e 9a       	sbi	0x07, 6	; 7
 282:	82 ec       	ldi	r24, 0xC2	; 194
				break;
 284:	80 93 90 00 	sts	0x0090, r24

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 288:	89 e0       	ldi	r24, 0x09	; 9
 28a:	80 93 91 00 	sts	0x0091, r24
 28e:	08 95       	ret

00000290 <main>:
				break;
 290:	cf 93       	push	r28

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <main+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <main+0x8>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	cf df       	rcall	.-98     	; 0x23c <SetupHardware>
 29e:	80 e1       	ldi	r24, 0x10	; 16
				break;
 2a0:	74 df       	rcall	.-280    	; 0x18a <LEDs_SetAllLEDs>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	78 94       	sei
 2a4:	1a e0       	ldi	r17, 0x0A	; 10
 2a6:	be 01       	movw	r22, r28
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
 2ac:	80 e0       	ldi	r24, 0x00	; 0

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	39 d5       	rcall	.+2674   	; 0xd24 <MIDI_Device_ReceiveEventPacket>
 2b2:	88 23       	and	r24, r24
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0x28>
 2b6:	5b c0       	rjmp	.+182    	; 0x36e <main+0xde>
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	89 30       	cpi	r24, 0x09	; 9
				break;
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <main+0x30>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	40 c0       	rjmp	.+128    	; 0x340 <main+0xb0>
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <main+0x38>
 2c6:	53 c0       	rjmp	.+166    	; 0x36e <main+0xde>
 2c8:	2d e0       	ldi	r18, 0x0D	; 13
 2ca:	32 e0       	ldi	r19, 0x02	; 2
				break;
 2cc:	6c e0       	ldi	r22, 0x0C	; 12
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	72 e0       	ldi	r23, 0x02	; 2
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
				break;
 2d4:	fb 01       	movw	r30, r22

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	d9 01       	movw	r26, r18
 2d8:	4c 91       	ld	r20, X
 2da:	41 11       	cpse	r20, r1

				if (ParserData->UsingReportIDs)
 2dc:	08 c0       	rjmp	.+16     	; 0x2ee <main+0x5e>
 2de:	18 9f       	mul	r17, r24
 2e0:	f0 01       	movw	r30, r0
 2e2:	19 9f       	mul	r17, r25
 2e4:	f0 0d       	add	r31, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	e4 5f       	subi	r30, 0xF4	; 244
 2ea:	fd 4f       	sbci	r31, 0xFD	; 253
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	11 c0       	rjmp	.+34     	; 0x310 <main+0x80>
 2ee:	db 01       	movw	r26, r22
 2f0:	4c 91       	ld	r20, X
 2f2:	50 81       	ld	r21, Z
 2f4:	45 17       	cp	r20, r21
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <main+0x6a>
 2f8:	fb 01       	movw	r30, r22
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	db 01       	movw	r26, r22
 2fe:	4c 93       	st	X, r20
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	26 5f       	subi	r18, 0xF6	; 246
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	3f 4f       	sbci	r19, 0xFF	; 255
 306:	66 5f       	subi	r22, 0xF6	; 246
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	91 05       	cpc	r25, r1
 30e:	19 f7       	brne	.-58     	; 0x2d6 <main+0x46>
 310:	ab 81       	ldd	r26, Y+3	; 0x03
 312:	a1 83       	std	Z+1, r26	; 0x01
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	55 97       	sbiw	r26, 0x15	; 21
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	26 eb       	ldi	r18, 0xB6	; 182
 31a:	36 ef       	ldi	r19, 0xF6	; 246
 31c:	4c e2       	ldi	r20, 0x2C	; 44
 31e:	51 e0       	ldi	r21, 0x01	; 1
 320:	24 d5       	rcall	.+2632   	; 0xd6a <__mulshisi3>
 322:	62 56       	subi	r22, 0x62	; 98
 324:	7d 4e       	sbci	r23, 0xED	; 237
 326:	83 4e       	sbci	r24, 0xE3	; 227
 328:	9e 4f       	sbci	r25, 0xFE	; 254
 32a:	62 83       	std	Z+2, r22	; 0x02
 32c:	73 83       	std	Z+3, r23	; 0x03
 32e:	84 83       	std	Z+4, r24	; 0x04
 330:	95 83       	std	Z+5, r25	; 0x05
 332:	16 82       	std	Z+6, r1	; 0x06
 334:	17 82       	std	Z+7, r1	; 0x07
 336:	10 86       	std	Z+8, r1	; 0x08
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	11 86       	std	Z+9, r1	; 0x09
 33a:	10 82       	st	Z, r1
 33c:	80 e1       	ldi	r24, 0x10	; 16
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	16 c0       	rjmp	.+44     	; 0x36c <main+0xdc>
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	a9 f4       	brne	.+42     	; 0x36e <main+0xde>
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	8f 70       	andi	r24, 0x0F	; 15
 348:	91 f4       	brne	.+36     	; 0x36e <main+0xde>
 34a:	2b 81       	ldd	r18, Y+3	; 0x03
 34c:	ed e0       	ldi	r30, 0x0D	; 13
 34e:	f2 e0       	ldi	r31, 0x02	; 2
 350:	90 81       	ld	r25, Z
 352:	92 13       	cpse	r25, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <main+0xca>
 356:	10 82       	st	Z, r1
 358:	02 c0       	rjmp	.+4      	; 0x35e <main+0xce>
 35a:	91 11       	cpse	r25, r1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	3a 96       	adiw	r30, 0x0a	; 10
 360:	b2 e0       	ldi	r27, 0x02	; 2
 362:	eb 32       	cpi	r30, 0x2B	; 43
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	fb 07       	cpc	r31, r27
 366:	a1 f7       	brne	.-24     	; 0x350 <main+0xc0>
 368:	81 11       	cpse	r24, r1
 36a:	01 c0       	rjmp	.+2      	; 0x36e <main+0xde>
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	0e df       	rcall	.-484    	; 0x18a <LEDs_SetAllLEDs>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	cb d4       	rcall	.+2454   	; 0xd0a <MIDI_Device_USBTask>
 374:	80 d4       	rcall	.+2304   	; 0xc76 <USB_USBTask>
 376:	97 cf       	rjmp	.-210    	; 0x2a6 <main+0x16>

00000378 <EVENT_USB_Device_Connect>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	80 ea       	ldi	r24, 0xA0	; 160
 37a:	07 df       	rcall	.-498    	; 0x18a <LEDs_SetAllLEDs>
 37c:	3e 9a       	sbi	0x07, 6	; 7
 37e:	08 95       	ret

00000380 <EVENT_USB_Device_Disconnect>:
 380:	80 e1       	ldi	r24, 0x10	; 16
 382:	03 df       	rcall	.-506    	; 0x18a <LEDs_SetAllLEDs>
 384:	10 92 0d 02 	sts	0x020D, r1
				break;
 388:	10 92 17 02 	sts	0x0217, r1

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38c:	10 92 21 02 	sts	0x0221, r1
 390:	3e 98       	cbi	0x07, 6	; 7
 392:	08 95       	ret

00000394 <EVENT_USB_Device_ConfigurationChanged>:
 394:	80 e0       	ldi	r24, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	89 d4       	rcall	.+2322   	; 0xcac <MIDI_Device_ConfigureEndpoints>
 39a:	88 23       	and	r24, r24
 39c:	11 f0       	breq	.+4      	; 0x3a2 <EVENT_USB_Device_ConfigurationChanged+0xe>
 39e:	80 e6       	ldi	r24, 0x60	; 96
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <EVENT_USB_Device_ConfigurationChanged+0x10>
 3a2:	80 e9       	ldi	r24, 0x90	; 144
 3a4:	f2 ce       	rjmp	.-540    	; 0x18a <LEDs_SetAllLEDs>

000003a6 <EVENT_USB_Device_ControlRequest>:
 3a6:	08 95       	ret

000003a8 <CALLBACK_USB_GetDescriptor>:
 3a8:	29 2f       	mov	r18, r25
 3aa:	33 27       	eor	r19, r19
 3ac:	22 30       	cpi	r18, 0x02	; 2
 3ae:	31 05       	cpc	r19, r1
				break;
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x20>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	23 30       	cpi	r18, 0x03	; 3
 3b4:	31 05       	cpc	r19, r1
 3b6:	69 f0       	breq	.+26     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x2a>
 3b8:	21 30       	cpi	r18, 0x01	; 1
 3ba:	31 05       	cpc	r19, r1
 3bc:	f9 f4       	brne	.+62     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x54>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	82 e1       	ldi	r24, 0x12	; 18
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	2b e3       	ldi	r18, 0x3B	; 59
 3c4:	31 e0       	ldi	r19, 0x01	; 1
 3c6:	1e c0       	rjmp	.+60     	; 0x404 <CALLBACK_USB_GetDescriptor+0x5c>
 3c8:	85 e6       	ldi	r24, 0x65	; 101
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	26 ed       	ldi	r18, 0xD6	; 214
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	19 c0       	rjmp	.+50     	; 0x404 <CALLBACK_USB_GetDescriptor+0x5c>
 3d2:	99 27       	eor	r25, r25

					while (CurrCollectionPath->Parent != NULL)
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	91 05       	cpc	r25, r1
 3d8:	41 f0       	breq	.+16     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x42>
 3da:	82 30       	cpi	r24, 0x02	; 2
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	91 05       	cpc	r25, r1
 3de:	41 f0       	breq	.+16     	; 0x3f0 <CALLBACK_USB_GetDescriptor+0x48>
 3e0:	89 2b       	or	r24, r25
 3e2:	61 f4       	brne	.+24     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x54>
 3e4:	e2 ed       	ldi	r30, 0xD2	; 210
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x4c>
 3ea:	e8 eb       	ldi	r30, 0xB8	; 184
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x4c>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	e8 e9       	ldi	r30, 0x98	; 152
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	84 91       	lpm	r24, Z
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	9f 01       	movw	r18, r30
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <CALLBACK_USB_GetDescriptor+0x5c>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	fa 01       	movw	r30, r20
 406:	31 83       	std	Z+1, r19	; 0x01
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	20 83       	st	Z, r18
 40a:	08 95       	ret

0000040c <Endpoint_Read_Stream_LE>:
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	7c 01       	movw	r14, r24
 41e:	8b 01       	movw	r16, r22

				if (UsageListSize)
 420:	ea 01       	movw	r28, r20
 422:	86 d1       	rcall	.+780    	; 0x730 <Endpoint_WaitUntilReady>
 424:	81 11       	cpse	r24, r1
 426:	31 c0       	rjmp	.+98     	; 0x48a <Endpoint_Read_Stream_LE+0x7e>
 428:	20 97       	sbiw	r28, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	31 f0       	breq	.+12     	; 0x438 <Endpoint_Read_Stream_LE+0x2c>
 42c:	88 81       	ld	r24, Y
 42e:	99 81       	ldd	r25, Y+1	; 0x01
 430:	08 1b       	sub	r16, r24
 432:	19 0b       	sbc	r17, r25
 434:	e8 0e       	add	r14, r24
 436:	f9 1e       	adc	r15, r25
 438:	c1 2c       	mov	r12, r1
 43a:	d1 2c       	mov	r13, r1
 43c:	01 15       	cp	r16, r1
 43e:	11 05       	cpc	r17, r1

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	19 f1       	breq	.+70     	; 0x488 <Endpoint_Read_Stream_LE+0x7c>
 442:	80 91 e8 00 	lds	r24, 0x00E8
 446:	85 fd       	sbrc	r24, 5
 448:	14 c0       	rjmp	.+40     	; 0x472 <Endpoint_Read_Stream_LE+0x66>
 44a:	80 91 e8 00 	lds	r24, 0x00E8
					  UsageList[i - 1] = UsageList[i];
 44e:	8b 77       	andi	r24, 0x7B	; 123
 450:	80 93 e8 00 	sts	0x00E8, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	10 d4       	rcall	.+2080   	; 0xc76 <USB_USBTask>
 456:	20 97       	sbiw	r28, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	41 f0       	breq	.+16     	; 0x46a <Endpoint_Read_Stream_LE+0x5e>
 45a:	88 81       	ld	r24, Y
 45c:	99 81       	ldd	r25, Y+1	; 0x01
 45e:	8c 0d       	add	r24, r12
 460:	9d 1d       	adc	r25, r13
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	99 83       	std	Y+1, r25	; 0x01
 464:	88 83       	st	Y, r24
 466:	85 e0       	ldi	r24, 0x05	; 5
 468:	10 c0       	rjmp	.+32     	; 0x48a <Endpoint_Read_Stream_LE+0x7e>
 46a:	62 d1       	rcall	.+708    	; 0x730 <Endpoint_WaitUntilReady>
 46c:	88 23       	and	r24, r24
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	31 f3       	breq	.-52     	; 0x43c <Endpoint_Read_Stream_LE+0x30>
 470:	0c c0       	rjmp	.+24     	; 0x48a <Endpoint_Read_Stream_LE+0x7e>
 472:	80 91 f1 00 	lds	r24, 0x00F1
 476:	f7 01       	movw	r30, r14
 478:	81 93       	st	Z+, r24
 47a:	7f 01       	movw	r14, r30
 47c:	01 50       	subi	r16, 0x01	; 1
 47e:	11 09       	sbc	r17, r1
 480:	ff ef       	ldi	r31, 0xFF	; 255
 482:	cf 1a       	sub	r12, r31
 484:	df 0a       	sbc	r13, r31
 486:	da cf       	rjmp	.-76     	; 0x43c <Endpoint_Read_Stream_LE+0x30>
 488:	80 e0       	ldi	r24, 0x00	; 0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	08 95       	ret

0000049c <Endpoint_Write_Control_Stream_LE>:
 49c:	20 91 34 02 	lds	r18, 0x0234
 4a0:	30 91 35 02 	lds	r19, 0x0235
 4a4:	26 17       	cp	r18, r22
 4a6:	37 07       	cpc	r19, r23
 4a8:	48 f0       	brcs	.+18     	; 0x4bc <Endpoint_Write_Control_Stream_LE+0x20>
 4aa:	61 15       	cp	r22, r1
				break;
 4ac:	71 05       	cpc	r23, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	39 f4       	brne	.+14     	; 0x4be <Endpoint_Write_Control_Stream_LE+0x22>
 4b0:	20 91 e8 00 	lds	r18, 0x00E8
 4b4:	2e 77       	andi	r18, 0x7E	; 126
 4b6:	20 93 e8 00 	sts	0x00E8, r18
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <Endpoint_Write_Control_Stream_LE+0x22>
 4bc:	b9 01       	movw	r22, r18
 4be:	fc 01       	movw	r30, r24
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	61 15       	cp	r22, r1
 4c4:	71 05       	cpc	r23, r1
 4c6:	91 f1       	breq	.+100    	; 0x52c <Endpoint_Write_Control_Stream_LE+0x90>
 4c8:	8e b3       	in	r24, 0x1e	; 30
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	88 23       	and	r24, r24
 4cc:	e1 f1       	breq	.+120    	; 0x546 <Endpoint_Write_Control_Stream_LE+0xaa>
 4ce:	85 30       	cpi	r24, 0x05	; 5
 4d0:	e1 f1       	breq	.+120    	; 0x54a <Endpoint_Write_Control_Stream_LE+0xae>
 4d2:	80 91 e8 00 	lds	r24, 0x00E8
 4d6:	83 fd       	sbrc	r24, 3
 4d8:	3a c0       	rjmp	.+116    	; 0x54e <Endpoint_Write_Control_Stream_LE+0xb2>
 4da:	80 91 e8 00 	lds	r24, 0x00E8
 4de:	82 ff       	sbrs	r24, 2
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <Endpoint_Write_Control_Stream_LE+0x52>
 4e2:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e6:	82 ff       	sbrs	r24, 2
 4e8:	24 c0       	rjmp	.+72     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x96>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
 4ee:	80 91 e8 00 	lds	r24, 0x00E8
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f2:	80 ff       	sbrs	r24, 0
 4f4:	e6 cf       	rjmp	.-52     	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0x26>
 4f6:	80 91 f2 00 	lds	r24, 0x00F2
 4fa:	90 91 f3 00 	lds	r25, 0x00F3
 4fe:	61 15       	cp	r22, r1
 500:	71 05       	cpc	r23, r1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	51 f0       	breq	.+20     	; 0x518 <Endpoint_Write_Control_Stream_LE+0x7c>
 504:	88 30       	cpi	r24, 0x08	; 8
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	91 05       	cpc	r25, r1
 508:	38 f4       	brcc	.+14     	; 0x518 <Endpoint_Write_Control_Stream_LE+0x7c>
 50a:	21 91       	ld	r18, Z+
 50c:	20 93 f1 00 	sts	0x00F1, r18
 510:	61 50       	subi	r22, 0x01	; 1
 512:	71 09       	sbc	r23, r1
 514:	01 96       	adiw	r24, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	f3 cf       	rjmp	.-26     	; 0x4fe <Endpoint_Write_Control_Stream_LE+0x62>
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	08 97       	sbiw	r24, 0x08	; 8
 51c:	09 f0       	breq	.+2      	; 0x520 <Endpoint_Write_Control_Stream_LE+0x84>

					if (UsageListSize)
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	80 91 e8 00 	lds	r24, 0x00E8
 524:	8e 77       	andi	r24, 0x7E	; 126
 526:	80 93 e8 00 	sts	0x00E8, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 52a:	cb cf       	rjmp	.-106    	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0x26>
 52c:	21 11       	cpse	r18, r1
 52e:	cc cf       	rjmp	.-104    	; 0x4c8 <Endpoint_Write_Control_Stream_LE+0x2c>
 530:	d8 cf       	rjmp	.-80     	; 0x4e2 <Endpoint_Write_Control_Stream_LE+0x46>
 532:	8e b3       	in	r24, 0x1e	; 30
 534:	88 23       	and	r24, r24
 536:	39 f0       	breq	.+14     	; 0x546 <Endpoint_Write_Control_Stream_LE+0xaa>
 538:	85 30       	cpi	r24, 0x05	; 5
 53a:	39 f0       	breq	.+14     	; 0x54a <Endpoint_Write_Control_Stream_LE+0xae>
 53c:	80 91 e8 00 	lds	r24, 0x00E8

						for (uint8_t i = 1; i < UsageListSize; i++)
 540:	83 ff       	sbrs	r24, 3
 542:	cf cf       	rjmp	.-98     	; 0x4e2 <Endpoint_Write_Control_Stream_LE+0x46>
 544:	04 c0       	rjmp	.+8      	; 0x54e <Endpoint_Write_Control_Stream_LE+0xb2>
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	08 95       	ret
						  UsageList[i - 1] = UsageList[i];
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	08 95       	ret
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	08 95       	ret

00000552 <Endpoint_Write_Control_PStream_LE>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	20 91 34 02 	lds	r18, 0x0234
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	30 91 35 02 	lds	r19, 0x0235
 55a:	26 17       	cp	r18, r22
 55c:	37 07       	cpc	r19, r23
 55e:	48 f0       	brcs	.+18     	; 0x572 <Endpoint_Write_Control_PStream_LE+0x20>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	61 15       	cp	r22, r1
 562:	71 05       	cpc	r23, r1
 564:	39 f4       	brne	.+14     	; 0x574 <Endpoint_Write_Control_PStream_LE+0x22>
 566:	20 91 e8 00 	lds	r18, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	2e 77       	andi	r18, 0x7E	; 126
 56c:	20 93 e8 00 	sts	0x00E8, r18
 570:	01 c0       	rjmp	.+2      	; 0x574 <Endpoint_Write_Control_PStream_LE+0x22>
 572:	b9 01       	movw	r22, r18
 574:	fc 01       	movw	r30, r24
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	61 15       	cp	r22, r1
 57a:	71 05       	cpc	r23, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	a9 f1       	breq	.+106    	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x96>
 57e:	8e b3       	in	r24, 0x1e	; 30
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	88 23       	and	r24, r24
 582:	09 f4       	brne	.+2      	; 0x586 <Endpoint_Write_Control_PStream_LE+0x34>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	3e c0       	rjmp	.+124    	; 0x602 <Endpoint_Write_Control_PStream_LE+0xb0>
 586:	85 30       	cpi	r24, 0x05	; 5
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	09 f4       	brne	.+2      	; 0x58c <Endpoint_Write_Control_PStream_LE+0x3a>
 58a:	3d c0       	rjmp	.+122    	; 0x606 <Endpoint_Write_Control_PStream_LE+0xb4>
 58c:	80 91 e8 00 	lds	r24, 0x00E8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 590:	83 fd       	sbrc	r24, 3

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	3b c0       	rjmp	.+118    	; 0x60a <Endpoint_Write_Control_PStream_LE+0xb8>
 594:	80 91 e8 00 	lds	r24, 0x00E8
 598:	82 ff       	sbrs	r24, 2
 59a:	06 c0       	rjmp	.+12     	; 0x5a8 <Endpoint_Write_Control_PStream_LE+0x56>
 59c:	80 91 e8 00 	lds	r24, 0x00E8
 5a0:	82 ff       	sbrs	r24, 2
 5a2:	25 c0       	rjmp	.+74     	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x9c>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	80 91 e8 00 	lds	r24, 0x00E8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	80 ff       	sbrs	r24, 0
 5ae:	e4 cf       	rjmp	.-56     	; 0x578 <Endpoint_Write_Control_PStream_LE+0x26>
 5b0:	80 91 f2 00 	lds	r24, 0x00F2
 5b4:	90 91 f3 00 	lds	r25, 0x00F3
 5b8:	61 15       	cp	r22, r1
 5ba:	71 05       	cpc	r23, r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	59 f0       	breq	.+22     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x82>
 5be:	88 30       	cpi	r24, 0x08	; 8
 5c0:	91 05       	cpc	r25, r1
 5c2:	40 f4       	brcc	.+16     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x82>
 5c4:	24 91       	lpm	r18, Z
 5c6:	20 93 f1 00 	sts	0x00F1, r18
 5ca:	31 96       	adiw	r30, 0x01	; 1
 5cc:	61 50       	subi	r22, 0x01	; 1
 5ce:	71 09       	sbc	r23, r1
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	f2 cf       	rjmp	.-28     	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x66>
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	08 97       	sbiw	r24, 0x08	; 8
 5d8:	09 f0       	breq	.+2      	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x8a>
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	80 91 e8 00 	lds	r24, 0x00E8
 5e0:	8e 77       	andi	r24, 0x7E	; 126
 5e2:	80 93 e8 00 	sts	0x00E8, r24
 5e6:	c8 cf       	rjmp	.-112    	; 0x578 <Endpoint_Write_Control_PStream_LE+0x26>
 5e8:	21 11       	cpse	r18, r1
 5ea:	c9 cf       	rjmp	.-110    	; 0x57e <Endpoint_Write_Control_PStream_LE+0x2c>
 5ec:	d7 cf       	rjmp	.-82     	; 0x59c <Endpoint_Write_Control_PStream_LE+0x4a>
 5ee:	8e b3       	in	r24, 0x1e	; 30
 5f0:	88 23       	and	r24, r24
 5f2:	39 f0       	breq	.+14     	; 0x602 <Endpoint_Write_Control_PStream_LE+0xb0>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	85 30       	cpi	r24, 0x05	; 5
 5f6:	39 f0       	breq	.+14     	; 0x606 <Endpoint_Write_Control_PStream_LE+0xb4>
 5f8:	80 91 e8 00 	lds	r24, 0x00E8
 5fc:	83 ff       	sbrs	r24, 3
					  return HID_PARSE_InsufficientReportItems;
 5fe:	ce cf       	rjmp	.-100    	; 0x59c <Endpoint_Write_Control_PStream_LE+0x4a>
 600:	04 c0       	rjmp	.+8      	; 0x60a <Endpoint_Write_Control_PStream_LE+0xb8>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	08 95       	ret
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	08 95       	ret
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	08 95       	ret

0000060e <Endpoint_ConfigureEndpoint_Prv>:
 60e:	98 2f       	mov	r25, r24
 610:	97 30       	cpi	r25, 0x07	; 7
 612:	58 f5       	brcc	.+86     	; 0x66a <Endpoint_ConfigureEndpoint_Prv+0x5c>
 614:	90 93 e9 00 	sts	0x00E9, r25
 618:	98 17       	cp	r25, r24
 61a:	39 f0       	breq	.+14     	; 0x62a <Endpoint_ConfigureEndpoint_Prv+0x1c>
 61c:	70 91 ec 00 	lds	r23, 0x00EC
 620:	20 91 ed 00 	lds	r18, 0x00ED
 624:	50 91 f0 00 	lds	r21, 0x00F0
 628:	03 c0       	rjmp	.+6      	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x22>
 62a:	24 2f       	mov	r18, r20
 62c:	76 2f       	mov	r23, r22
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	21 ff       	sbrs	r18, 1
 632:	19 c0       	rjmp	.+50     	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x58>
 634:	30 91 eb 00 	lds	r19, 0x00EB
 638:	3e 7f       	andi	r19, 0xFE	; 254
 63a:	30 93 eb 00 	sts	0x00EB, r19
 63e:	30 91 ed 00 	lds	r19, 0x00ED
 642:	3d 7f       	andi	r19, 0xFD	; 253
 644:	30 93 ed 00 	sts	0x00ED, r19
 648:	30 91 eb 00 	lds	r19, 0x00EB
 64c:	31 60       	ori	r19, 0x01	; 1
 64e:	30 93 eb 00 	sts	0x00EB, r19
 652:	70 93 ec 00 	sts	0x00EC, r23
 656:	20 93 ed 00 	sts	0x00ED, r18
 65a:	50 93 f0 00 	sts	0x00F0, r21
 65e:	20 91 ee 00 	lds	r18, 0x00EE
 662:	27 ff       	sbrs	r18, 7
 664:	07 c0       	rjmp	.+14     	; 0x674 <Endpoint_ConfigureEndpoint_Prv+0x66>
 666:	9f 5f       	subi	r25, 0xFF	; 255
 668:	d3 cf       	rjmp	.-90     	; 0x610 <Endpoint_ConfigureEndpoint_Prv+0x2>
 66a:	8f 70       	andi	r24, 0x0F	; 15
 66c:	80 93 e9 00 	sts	0x00E9, r24
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret

00000678 <Endpoint_ConfigureEndpointTable>:
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	06 2f       	mov	r16, r22
 682:	ec 01       	movw	r28, r24
 684:	10 e0       	ldi	r17, 0x00	; 0
 686:	10 17       	cp	r17, r16
					  ParserData->TotalReportItems++;
 688:	71 f1       	breq	.+92     	; 0x6e6 <Endpoint_ConfigureEndpointTable+0x6e>
 68a:	98 81       	ld	r25, Y
 68c:	99 23       	and	r25, r25
 68e:	41 f1       	breq	.+80     	; 0x6e0 <Endpoint_ConfigureEndpointTable+0x68>
 690:	2c 81       	ldd	r18, Y+4	; 0x04

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	e9 81       	ldd	r30, Y+1	; 0x01
 694:	fa 81       	ldd	r31, Y+2	; 0x02
 696:	7b 81       	ldd	r23, Y+3	; 0x03
 698:	89 2f       	mov	r24, r25
 69a:	8f 70       	andi	r24, 0x0F	; 15
 69c:	87 30       	cpi	r24, 0x07	; 7
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	10 f0       	brcs	.+4      	; 0x6a4 <Endpoint_ConfigureEndpointTable+0x2c>
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <Endpoint_ConfigureEndpointTable+0x70>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	22 30       	cpi	r18, 0x02	; 2
 6a6:	10 f0       	brcs	.+4      	; 0x6ac <Endpoint_ConfigureEndpointTable+0x34>
 6a8:	56 e0       	ldi	r21, 0x06	; 6
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <Endpoint_ConfigureEndpointTable+0x36>
 6ac:	52 e0       	ldi	r21, 0x02	; 2
 6ae:	28 e0       	ldi	r18, 0x08	; 8
 6b0:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	2e 17       	cp	r18, r30
 6b6:	3f 07       	cpc	r19, r31
 6b8:	20 f4       	brcc	.+8      	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x4a>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	4f 5f       	subi	r20, 0xFF	; 255
 6bc:	22 0f       	add	r18, r18

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	33 1f       	adc	r19, r19
 6c0:	f9 cf       	rjmp	.-14     	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x3c>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	42 95       	swap	r20
 6c4:	40 7f       	andi	r20, 0xF0	; 240
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	45 2b       	or	r20, r21
 6c8:	69 2f       	mov	r22, r25
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	66 1f       	adc	r22, r22
 6cc:	66 27       	eor	r22, r22

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	66 1f       	adc	r22, r22
 6d0:	90 e4       	ldi	r25, 0x40	; 64
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	79 9f       	mul	r23, r25
 6d4:	90 01       	movw	r18, r0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	11 24       	eor	r1, r1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	62 2b       	or	r22, r18
 6da:	99 df       	rcall	.-206    	; 0x60e <Endpoint_ConfigureEndpoint_Prv>
 6dc:	88 23       	and	r24, r24
 6de:	01 f3       	breq	.-64     	; 0x6a0 <Endpoint_ConfigureEndpointTable+0x28>
 6e0:	1f 5f       	subi	r17, 0xFF	; 255
 6e2:	25 96       	adiw	r28, 0x05	; 5
 6e4:	d0 cf       	rjmp	.-96     	; 0x686 <Endpoint_ConfigureEndpointTable+0xe>
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <Endpoint_ClearStatusStage>:
 6f2:	80 91 2e 02 	lds	r24, 0x022E
 6f6:	87 fd       	sbrc	r24, 7
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <Endpoint_ClearStatusStage+0x12>
 6fa:	80 91 e8 00 	lds	r24, 0x00E8
 6fe:	80 ff       	sbrs	r24, 0
 700:	0d c0       	rjmp	.+26     	; 0x71c <Endpoint_ClearStatusStage+0x2a>
 702:	10 c0       	rjmp	.+32     	; 0x724 <Endpoint_ClearStatusStage+0x32>
 704:	80 91 e8 00 	lds	r24, 0x00E8
 708:	82 fd       	sbrc	r24, 2
 70a:	04 c0       	rjmp	.+8      	; 0x714 <Endpoint_ClearStatusStage+0x22>
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 70c:	8e b3       	in	r24, 0x1e	; 30
 70e:	81 11       	cpse	r24, r1
 710:	f9 cf       	rjmp	.-14     	; 0x704 <Endpoint_ClearStatusStage+0x12>
 712:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 714:	80 91 e8 00 	lds	r24, 0x00E8
 718:	8b 77       	andi	r24, 0x7B	; 123
 71a:	07 c0       	rjmp	.+14     	; 0x72a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 71c:	8e b3       	in	r24, 0x1e	; 30
 71e:	81 11       	cpse	r24, r1
 720:	ec cf       	rjmp	.-40     	; 0x6fa <Endpoint_ClearStatusStage+0x8>
 722:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 724:	80 91 e8 00 	lds	r24, 0x00E8
 728:	8e 77       	andi	r24, 0x7E	; 126
 72a:	80 93 e8 00 	sts	0x00E8, r24
 72e:	08 95       	ret

00000730 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 730:	80 91 e4 00 	lds	r24, 0x00E4
 734:	90 91 e5 00 	lds	r25, 0x00E5
 738:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 73a:	20 91 ec 00 	lds	r18, 0x00EC
 73e:	20 ff       	sbrs	r18, 0
 740:	20 c0       	rjmp	.+64     	; 0x782 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 742:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 746:	20 fd       	sbrc	r18, 0
 748:	20 c0       	rjmp	.+64     	; 0x78a <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 74a:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 74c:	22 23       	and	r18, r18
 74e:	89 f0       	breq	.+34     	; 0x772 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 750:	25 30       	cpi	r18, 0x05	; 5
 752:	89 f0       	breq	.+34     	; 0x776 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 754:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 758:	25 fd       	sbrc	r18, 5
 75a:	0f c0       	rjmp	.+30     	; 0x77a <Endpoint_WaitUntilReady+0x4a>
 75c:	20 91 e4 00 	lds	r18, 0x00E4
 760:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 764:	28 17       	cp	r18, r24
 766:	39 07       	cpc	r19, r25
 768:	41 f3       	breq	.-48     	; 0x73a <Endpoint_WaitUntilReady+0xa>
 76a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 76c:	41 f0       	breq	.+16     	; 0x77e <Endpoint_WaitUntilReady+0x4e>
 76e:	c9 01       	movw	r24, r18
 770:	e4 cf       	rjmp	.-56     	; 0x73a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 772:	82 e0       	ldi	r24, 0x02	; 2
 774:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 77e:	84 e0       	ldi	r24, 0x04	; 4
 780:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 782:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 786:	22 ff       	sbrs	r18, 2
 788:	e0 cf       	rjmp	.-64     	; 0x74a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret

0000078e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 796:	4d d0       	rcall	.+154    	; 0x832 <USB_INT_DisableAllInterrupts>
 798:	54 d0       	rcall	.+168    	; 0x842 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 79a:	c8 ed       	ldi	r28, 0xD8	; 216
 79c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 79e:	88 81       	ld	r24, Y
 7a0:	8f 77       	andi	r24, 0x7F	; 127
 7a2:	88 83       	st	Y, r24
 7a4:	88 81       	ld	r24, Y
 7a6:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7a8:	88 83       	st	Y, r24
 7aa:	88 81       	ld	r24, Y
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7ae:	88 83       	st	Y, r24
 7b0:	e7 ed       	ldi	r30, 0xD7	; 215
 7b2:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7b4:	80 81       	ld	r24, Z
 7b6:	80 68       	ori	r24, 0x80	; 128
 7b8:	80 83       	st	Z, r24
 7ba:	19 bc       	out	0x29, r1	; 41
 7bc:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7be:	10 92 2a 02 	sts	0x022A, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
 7c2:	10 92 2c 02 	sts	0x022C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7c6:	10 92 2b 02 	sts	0x022B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7ca:	00 ee       	ldi	r16, 0xE0	; 224
 7cc:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7ce:	f8 01       	movw	r30, r16
 7d0:	80 81       	ld	r24, Z
 7d2:	8b 7f       	andi	r24, 0xFB	; 251
 7d4:	80 83       	st	Z, r24
 7d6:	88 81       	ld	r24, Y
 7d8:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7da:	88 83       	st	Y, r24
 7dc:	42 e0       	ldi	r20, 0x02	; 2
 7de:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	15 df       	rcall	.-470    	; 0x60e <Endpoint_ConfigureEndpoint_Prv>
 7e4:	e1 ee       	ldi	r30, 0xE1	; 225
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ea:	8e 7f       	andi	r24, 0xFE	; 254
 7ec:	80 83       	st	Z, r24
 7ee:	e2 ee       	ldi	r30, 0xE2	; 226
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	80 83       	st	Z, r24
 7f8:	80 81       	ld	r24, Z
 7fa:	88 60       	ori	r24, 0x08	; 8
 7fc:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7fe:	f8 01       	movw	r30, r16
 800:	80 81       	ld	r24, Z
 802:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 804:	80 83       	st	Z, r24
 806:	88 81       	ld	r24, Y
 808:	80 61       	ori	r24, 0x10	; 16
 80a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <USB_Init>:
 816:	e8 ed       	ldi	r30, 0xD8	; 216
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 81c:	8f 7e       	andi	r24, 0xEF	; 239
 81e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 820:	e7 ed       	ldi	r30, 0xD7	; 215
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	80 93 2d 02 	sts	0x022D, r24

	USB_ResetInterface();
 830:	ae cf       	rjmp	.-164    	; 0x78e <USB_ResetInterface>

00000832 <USB_INT_DisableAllInterrupts>:
 832:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	8c 7f       	andi	r24, 0xFC	; 252
 83a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 83c:	10 92 e2 00 	sts	0x00E2, r1
 840:	08 95       	ret

00000842 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 842:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 846:	10 92 e1 00 	sts	0x00E1, r1
 84a:	08 95       	ret

0000084c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	0b b6       	in	r0, 0x3b	; 59
 858:	0f 92       	push	r0
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 872:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 876:	82 ff       	sbrs	r24, 2
 878:	0a c0       	rjmp	.+20     	; 0x88e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 87a:	80 91 e2 00 	lds	r24, 0x00E2
 87e:	82 ff       	sbrs	r24, 2
 880:	06 c0       	rjmp	.+12     	; 0x88e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 882:	80 91 e1 00 	lds	r24, 0x00E1
 886:	8b 7f       	andi	r24, 0xFB	; 251
 888:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 88c:	f3 d1       	rcall	.+998    	; 0xc74 <USB_Event_Stub>
 88e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 892:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 894:	1b c0       	rjmp	.+54     	; 0x8cc <__vector_10+0x80>
 896:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 89a:	80 ff       	sbrs	r24, 0
 89c:	17 c0       	rjmp	.+46     	; 0x8cc <__vector_10+0x80>
 89e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8a2:	8e 7f       	andi	r24, 0xFE	; 254
 8a4:	80 93 da 00 	sts	0x00DA, r24
 8a8:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8ac:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <__vector_10+0x7a>
 8b0:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8b2:	89 bd       	out	0x29, r24	; 41
 8b4:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8b6:	89 bd       	out	0x29, r24	; 41
 8b8:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8ba:	00 fe       	sbrs	r0, 0
 8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <__vector_10+0x6c>
 8be:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8c0:	8e bb       	out	0x1e, r24	; 30
 8c2:	5a dd       	rcall	.-1356   	; 0x378 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <__vector_10+0x80>
 8c6:	19 bc       	out	0x29, r1	; 41
 8c8:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 8ca:	5a dd       	rcall	.-1356   	; 0x380 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8cc:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8d0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8d2:	17 c0       	rjmp	.+46     	; 0x902 <__vector_10+0xb6>
 8d4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8d8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8da:	13 c0       	rjmp	.+38     	; 0x902 <__vector_10+0xb6>
 8dc:	80 91 e2 00 	lds	r24, 0x00E2
 8e0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8e2:	80 93 e2 00 	sts	0x00E2, r24
 8e6:	80 91 e2 00 	lds	r24, 0x00E2
 8ea:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8ec:	80 93 e2 00 	sts	0x00E2, r24
 8f0:	80 91 d8 00 	lds	r24, 0x00D8
 8f4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8f6:	80 93 d8 00 	sts	0x00D8, r24
 8fa:	19 bc       	out	0x29, r1	; 41
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 900:	b9 d1       	rcall	.+882    	; 0xc74 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 902:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 906:	84 ff       	sbrs	r24, 4
 908:	2e c0       	rjmp	.+92     	; 0x966 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 90a:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 90e:	84 ff       	sbrs	r24, 4
 910:	2a c0       	rjmp	.+84     	; 0x966 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 912:	8c e0       	ldi	r24, 0x0C	; 12
 914:	89 bd       	out	0x29, r24	; 41
 916:	8e e0       	ldi	r24, 0x0E	; 14
 918:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 91a:	09 b4       	in	r0, 0x29	; 41
 91c:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 91e:	fd cf       	rjmp	.-6      	; 0x91a <__vector_10+0xce>
 920:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 924:	8f 7d       	andi	r24, 0xDF	; 223
 926:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 92a:	80 91 e1 00 	lds	r24, 0x00E1
 92e:	8f 7e       	andi	r24, 0xEF	; 239
 930:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 934:	80 91 e2 00 	lds	r24, 0x00E2
 938:	8f 7e       	andi	r24, 0xEF	; 239
 93a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 93e:	80 91 e2 00 	lds	r24, 0x00E2
 942:	81 60       	ori	r24, 0x01	; 1
 944:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 948:	80 91 2a 02 	lds	r24, 0x022A
 94c:	88 23       	and	r24, r24
 94e:	11 f0       	breq	.+4      	; 0x954 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 950:	84 e0       	ldi	r24, 0x04	; 4
 952:	07 c0       	rjmp	.+14     	; 0x962 <__vector_10+0x116>
 954:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 958:	87 ff       	sbrs	r24, 7
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	01 c0       	rjmp	.+2      	; 0x962 <__vector_10+0x116>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	8e bb       	out	0x1e, r24	; 30
 964:	87 d1       	rcall	.+782    	; 0xc74 <USB_Event_Stub>
 966:	80 91 e1 00 	lds	r24, 0x00E1
 96a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 96c:	21 c0       	rjmp	.+66     	; 0x9b0 <__vector_10+0x164>
 96e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 972:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 974:	1d c0       	rjmp	.+58     	; 0x9b0 <__vector_10+0x164>
 976:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 97a:	87 7f       	andi	r24, 0xF7	; 247
 97c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	8e bb       	out	0x1e, r24	; 30
 984:	10 92 2a 02 	sts	0x022A, r1
 988:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 98c:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 98e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 992:	80 91 e2 00 	lds	r24, 0x00E2
 996:	8e 7f       	andi	r24, 0xFE	; 254
 998:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 99c:	80 91 e2 00 	lds	r24, 0x00E2
 9a0:	80 61       	ori	r24, 0x10	; 16
 9a2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9a6:	42 e0       	ldi	r20, 0x02	; 2
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	30 de       	rcall	.-928    	; 0x60e <Endpoint_ConfigureEndpoint_Prv>
 9ae:	62 d1       	rcall	.+708    	; 0xc74 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9b0:	ff 91       	pop	r31
 9b2:	ef 91       	pop	r30
 9b4:	bf 91       	pop	r27
 9b6:	af 91       	pop	r26
 9b8:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9ba:	8f 91       	pop	r24
 9bc:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9be:	6f 91       	pop	r22
 9c0:	5f 91       	pop	r21
 9c2:	4f 91       	pop	r20
 9c4:	3f 91       	pop	r19
 9c6:	2f 91       	pop	r18
 9c8:	0f 90       	pop	r0
 9ca:	0b be       	out	0x3b, r0	; 59
 9cc:	0f 90       	pop	r0
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	0f 90       	pop	r0
 9d2:	1f 90       	pop	r1
 9d4:	18 95       	reti

000009d6 <USB_Device_ProcessControlRequest>:
 9d6:	1f 93       	push	r17
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	aa 97       	sbiw	r28, 0x2a	; 42
 9e2:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	ee e2       	ldi	r30, 0x2E	; 46
 9ee:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9f0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9f4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9f6:	22 e0       	ldi	r18, 0x02	; 2
 9f8:	e6 33       	cpi	r30, 0x36	; 54
 9fa:	f2 07       	cpc	r31, r18
 9fc:	c9 f7       	brne	.-14     	; 0x9f0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9fe:	d3 dc       	rcall	.-1626   	; 0x3a6 <EVENT_USB_Device_ControlRequest>
 a00:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a04:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a06:	1e c1       	rjmp	.+572    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a08:	90 91 2e 02 	lds	r25, 0x022E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a0c:	80 91 2f 02 	lds	r24, 0x022F

		switch (USB_ControlRequest.bRequest)
 a10:	85 30       	cpi	r24, 0x05	; 5
 a12:	09 f4       	brne	.+2      	; 0xa16 <USB_Device_ProcessControlRequest+0x40>
 a14:	77 c0       	rjmp	.+238    	; 0xb04 <USB_Device_ProcessControlRequest+0x12e>
 a16:	30 f4       	brcc	.+12     	; 0xa24 <USB_Device_ProcessControlRequest+0x4e>
 a18:	81 30       	cpi	r24, 0x01	; 1
 a1a:	81 f1       	breq	.+96     	; 0xa7c <USB_Device_ProcessControlRequest+0xa6>
 a1c:	68 f0       	brcs	.+26     	; 0xa38 <USB_Device_ProcessControlRequest+0x62>
 a1e:	83 30       	cpi	r24, 0x03	; 3
 a20:	69 f1       	breq	.+90     	; 0xa7c <USB_Device_ProcessControlRequest+0xa6>
 a22:	10 c1       	rjmp	.+544    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a24:	88 30       	cpi	r24, 0x08	; 8
 a26:	09 f4       	brne	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0x54>
 a28:	e0 c0       	rjmp	.+448    	; 0xbea <USB_Device_ProcessControlRequest+0x214>
 a2a:	89 30       	cpi	r24, 0x09	; 9
 a2c:	09 f4       	brne	.+2      	; 0xa30 <USB_Device_ProcessControlRequest+0x5a>
 a2e:	ef c0       	rjmp	.+478    	; 0xc0e <USB_Device_ProcessControlRequest+0x238>
 a30:	86 30       	cpi	r24, 0x06	; 6
 a32:	09 f0       	breq	.+2      	; 0xa36 <USB_Device_ProcessControlRequest+0x60>
 a34:	07 c1       	rjmp	.+526    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a36:	87 c0       	rjmp	.+270    	; 0xb46 <USB_Device_ProcessControlRequest+0x170>
 a38:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a3a:	81 f0       	breq	.+32     	; 0xa5c <USB_Device_ProcessControlRequest+0x86>
 a3c:	92 38       	cpi	r25, 0x82	; 130
 a3e:	09 f0       	breq	.+2      	; 0xa42 <USB_Device_ProcessControlRequest+0x6c>
 a40:	01 c1       	rjmp	.+514    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a42:	80 91 32 02 	lds	r24, 0x0232
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a46:	8f 70       	andi	r24, 0x0F	; 15
 a48:	80 93 e9 00 	sts	0x00E9, r24
 a4c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a50:	85 fb       	bst	r24, 5
 a52:	88 27       	eor	r24, r24
 a54:	80 f9       	bld	r24, 0
 a56:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a5a:	06 c0       	rjmp	.+12     	; 0xa68 <USB_Device_ProcessControlRequest+0x92>
 a5c:	80 91 2b 02 	lds	r24, 0x022B
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a60:	90 91 2c 02 	lds	r25, 0x022C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a64:	91 11       	cpse	r25, r1
 a66:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a68:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a6c:	97 7f       	andi	r25, 0xF7	; 247
 a6e:	90 93 e8 00 	sts	0x00E8, r25
 a72:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a76:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a7a:	c2 c0       	rjmp	.+388    	; 0xc00 <USB_Device_ProcessControlRequest+0x22a>
 a7c:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a7e:	2d 7f       	andi	r18, 0xFD	; 253
 a80:	09 f0       	breq	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0xae>
 a82:	e0 c0       	rjmp	.+448    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a84:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a86:	19 f0       	breq	.+6      	; 0xa8e <USB_Device_ProcessControlRequest+0xb8>
 a88:	92 30       	cpi	r25, 0x02	; 2
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <USB_Device_ProcessControlRequest+0xce>
 a8c:	db c0       	rjmp	.+438    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a8e:	90 91 30 02 	lds	r25, 0x0230
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a92:	91 30       	cpi	r25, 0x01	; 1
 a94:	09 f0       	breq	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0xc2>
 a96:	d6 c0       	rjmp	.+428    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 a98:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a9a:	09 f0       	breq	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0xc8>
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	90 93 2c 02 	sts	0x022C, r25
 aa2:	2a c0       	rjmp	.+84     	; 0xaf8 <USB_Device_ProcessControlRequest+0x122>
 aa4:	90 91 30 02 	lds	r25, 0x0230

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 aa8:	91 11       	cpse	r25, r1
 aaa:	26 c0       	rjmp	.+76     	; 0xaf8 <USB_Device_ProcessControlRequest+0x122>
 aac:	20 91 32 02 	lds	r18, 0x0232
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ab0:	2f 70       	andi	r18, 0x0F	; 15
 ab2:	09 f4       	brne	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ab4:	c7 c0       	rjmp	.+398    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 ab6:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aba:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 abe:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ac0:	1b c0       	rjmp	.+54     	; 0xaf8 <USB_Device_ProcessControlRequest+0x122>
 ac2:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ac4:	21 f4       	brne	.+8      	; 0xace <USB_Device_ProcessControlRequest+0xf8>
 ac6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 aca:	80 62       	ori	r24, 0x20	; 32
 acc:	13 c0       	rjmp	.+38     	; 0xaf4 <USB_Device_ProcessControlRequest+0x11e>
 ace:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ad2:	80 61       	ori	r24, 0x10	; 16
 ad4:	80 93 eb 00 	sts	0x00EB, r24
 ad8:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	02 2e       	mov	r0, r18
 ade:	01 c0       	rjmp	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x10c>
 ae0:	88 0f       	add	r24, r24
 ae2:	0a 94       	dec	r0
 ae4:	ea f7       	brpl	.-6      	; 0xae0 <USB_Device_ProcessControlRequest+0x10a>
 ae6:	80 93 ea 00 	sts	0x00EA, r24
 aea:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 aee:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 af2:	88 60       	ori	r24, 0x08	; 8
 af4:	80 93 eb 00 	sts	0x00EB, r24
 af8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 afc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b00:	87 7f       	andi	r24, 0xF7	; 247
 b02:	81 c0       	rjmp	.+258    	; 0xc06 <USB_Device_ProcessControlRequest+0x230>
 b04:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b06:	9e c0       	rjmp	.+316    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 b08:	10 91 30 02 	lds	r17, 0x0230
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b0c:	1f 77       	andi	r17, 0x7F	; 127
 b0e:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b12:	80 78       	andi	r24, 0x80	; 128
 b14:	81 2b       	or	r24, r17
 b16:	80 93 e3 00 	sts	0x00E3, r24
 b1a:	80 91 e8 00 	lds	r24, 0x00E8
 b1e:	87 7f       	andi	r24, 0xF7	; 247
 b20:	80 93 e8 00 	sts	0x00E8, r24
 b24:	e6 dd       	rcall	.-1076   	; 0x6f2 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b26:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b2a:	80 ff       	sbrs	r24, 0
 b2c:	fc cf       	rjmp	.-8      	; 0xb26 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b2e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b32:	80 68       	ori	r24, 0x80	; 128
 b34:	80 93 e3 00 	sts	0x00E3, r24
 b38:	11 23       	and	r17, r17
 b3a:	11 f0       	breq	.+4      	; 0xb40 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b3c:	83 e0       	ldi	r24, 0x03	; 3
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0x16c>
 b40:	82 e0       	ldi	r24, 0x02	; 2
 b42:	8e bb       	out	0x1e, r24	; 30
 b44:	7f c0       	rjmp	.+254    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 b46:	90 58       	subi	r25, 0x80	; 128
 b48:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b4a:	08 f0       	brcs	.+2      	; 0xb4e <USB_Device_ProcessControlRequest+0x178>
 b4c:	7b c0       	rjmp	.+246    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 b4e:	80 91 30 02 	lds	r24, 0x0230
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b52:	90 91 31 02 	lds	r25, 0x0231
 b56:	8c 3d       	cpi	r24, 0xDC	; 220
 b58:	23 e0       	ldi	r18, 0x03	; 3
 b5a:	92 07       	cpc	r25, r18
 b5c:	71 f5       	brne	.+92     	; 0xbba <USB_Device_ProcessControlRequest+0x1e4>
 b5e:	83 e0       	ldi	r24, 0x03	; 3
 b60:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b62:	8a e2       	ldi	r24, 0x2A	; 42
 b64:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b66:	4f b7       	in	r20, 0x3f	; 63
 b68:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b6a:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b6c:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b72:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b74:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	50 93 57 00 	sts	0x0057, r21
 b7c:	e4 91       	lpm	r30, Z
 b7e:	20 ff       	sbrs	r18, 0
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
 b82:	e2 95       	swap	r30
 b84:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b86:	3f 5f       	subi	r19, 0xFF	; 255
 b88:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b8a:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	ea 30       	cpi	r30, 0x0A	; 10
 b90:	10 f0       	brcs	.+4      	; 0xb96 <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b92:	c7 96       	adiw	r24, 0x37	; 55
 b94:	01 c0       	rjmp	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x1c2>
 b96:	c0 96       	adiw	r24, 0x30	; 48
 b98:	8d 93       	st	X+, r24
 b9a:	9d 93       	st	X+, r25
 b9c:	2f 5f       	subi	r18, 0xFF	; 255
 b9e:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ba0:	49 f7       	brne	.-46     	; 0xb74 <USB_Device_ProcessControlRequest+0x19e>
 ba2:	4f bf       	out	0x3f, r20	; 63
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba8:	87 7f       	andi	r24, 0xF7	; 247
 baa:	80 93 e8 00 	sts	0x00E8, r24
 bae:	6a e2       	ldi	r22, 0x2A	; 42
 bb0:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bb2:	ce 01       	movw	r24, r28
 bb4:	01 96       	adiw	r24, 0x01	; 1
 bb6:	72 dc       	rcall	.-1820   	; 0x49c <Endpoint_Write_Control_Stream_LE>
 bb8:	12 c0       	rjmp	.+36     	; 0xbde <USB_Device_ProcessControlRequest+0x208>
 bba:	ae 01       	movw	r20, r28
 bbc:	4f 5f       	subi	r20, 0xFF	; 255
 bbe:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bc0:	60 91 32 02 	lds	r22, 0x0232
 bc4:	f1 db       	rcall	.-2078   	; 0x3a8 <CALLBACK_USB_GetDescriptor>
 bc6:	00 97       	sbiw	r24, 0x00	; 0
 bc8:	09 f4       	brne	.+2      	; 0xbcc <USB_Device_ProcessControlRequest+0x1f6>
 bca:	3c c0       	rjmp	.+120    	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 bcc:	20 91 e8 00 	lds	r18, 0x00E8
 bd0:	27 7f       	andi	r18, 0xF7	; 247
 bd2:	20 93 e8 00 	sts	0x00E8, r18
 bd6:	bc 01       	movw	r22, r24
 bd8:	89 81       	ldd	r24, Y+1	; 0x01
 bda:	9a 81       	ldd	r25, Y+2	; 0x02
 bdc:	ba dc       	rcall	.-1676   	; 0x552 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bde:	80 91 e8 00 	lds	r24, 0x00E8
 be2:	8b 77       	andi	r24, 0x7B	; 123
 be4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 be8:	2d c0       	rjmp	.+90     	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 bea:	90 38       	cpi	r25, 0x80	; 128
 bec:	59 f5       	brne	.+86     	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 bee:	80 91 e8 00 	lds	r24, 0x00E8
 bf2:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bf4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf8:	80 91 2a 02 	lds	r24, 0x022A
 bfc:	80 93 f1 00 	sts	0x00F1, r24
 c00:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c04:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c06:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c0a:	73 dd       	rcall	.-1306   	; 0x6f2 <Endpoint_ClearStatusStage>
 c0c:	1b c0       	rjmp	.+54     	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 c0e:	91 11       	cpse	r25, r1
 c10:	19 c0       	rjmp	.+50     	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
 c12:	90 91 30 02 	lds	r25, 0x0230
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c16:	92 30       	cpi	r25, 0x02	; 2
 c18:	a8 f4       	brcc	.+42     	; 0xc44 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c1a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c1e:	87 7f       	andi	r24, 0xF7	; 247
 c20:	80 93 e8 00 	sts	0x00E8, r24
 c24:	90 93 2a 02 	sts	0x022A, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c28:	64 dd       	rcall	.-1336   	; 0x6f2 <Endpoint_ClearStatusStage>
 c2a:	80 91 2a 02 	lds	r24, 0x022A
 c2e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <USB_Device_ProcessControlRequest+0x264>
 c32:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c36:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c38:	02 c0       	rjmp	.+4      	; 0xc3e <USB_Device_ProcessControlRequest+0x268>
 c3a:	84 e0       	ldi	r24, 0x04	; 4
 c3c:	01 c0       	rjmp	.+2      	; 0xc40 <USB_Device_ProcessControlRequest+0x26a>
 c3e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c40:	8e bb       	out	0x1e, r24	; 30
 c42:	a8 db       	rcall	.-2224   	; 0x394 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c44:	80 91 e8 00 	lds	r24, 0x00E8
 c48:	83 ff       	sbrs	r24, 3
 c4a:	0a c0       	rjmp	.+20     	; 0xc60 <USB_Device_ProcessControlRequest+0x28a>
 c4c:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c50:	87 7f       	andi	r24, 0xF7	; 247
 c52:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c56:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c5a:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c5c:	80 93 eb 00 	sts	0x00EB, r24
 c60:	aa 96       	adiw	r28, 0x2a	; 42
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	df 91       	pop	r29
 c6e:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c70:	1f 91       	pop	r17
 c72:	08 95       	ret

00000c74 <USB_Event_Stub>:
 c74:	08 95       	ret

00000c76 <USB_USBTask>:
 c76:	cf 93       	push	r28
 c78:	8e b3       	in	r24, 0x1e	; 30
 c7a:	88 23       	and	r24, r24
 c7c:	a9 f0       	breq	.+42     	; 0xca8 <USB_USBTask+0x32>
 c7e:	80 91 e9 00 	lds	r24, 0x00E9
 c82:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c84:	90 91 ec 00 	lds	r25, 0x00EC
 c88:	90 ff       	sbrs	r25, 0
 c8a:	02 c0       	rjmp	.+4      	; 0xc90 <USB_USBTask+0x1a>
 c8c:	90 e8       	ldi	r25, 0x80	; 128
 c8e:	01 c0       	rjmp	.+2      	; 0xc92 <USB_USBTask+0x1c>
 c90:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c92:	c9 2f       	mov	r28, r25
 c94:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c96:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c9a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c9e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 ca0:	9a de       	rcall	.-716    	; 0x9d6 <USB_Device_ProcessControlRequest>
 ca2:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca4:	c0 93 e9 00 	sts	0x00E9, r28
 ca8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 caa:	08 95       	ret

00000cac <MIDI_Device_ConfigureEndpoints>:
 cac:	cf 93       	push	r28
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 cae:	df 93       	push	r29
 cb0:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 cb2:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 cb4:	82 e0       	ldi	r24, 0x02	; 2
 cb6:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 cb8:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 cba:	61 e0       	ldi	r22, 0x01	; 1
 cbc:	ce 01       	movw	r24, r28
 cbe:	01 96       	adiw	r24, 0x01	; 1
 cc0:	db dc       	rcall	.-1610   	; 0x678 <Endpoint_ConfigureEndpointTable>
 cc2:	88 23       	and	r24, r24
 cc4:	31 f0       	breq	.+12     	; 0xcd2 <MIDI_Device_ConfigureEndpoints+0x26>
 cc6:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cc8:	ce 01       	movw	r24, r28
 cca:	06 96       	adiw	r24, 0x06	; 6
 ccc:	df 91       	pop	r29
	  return false;

	return true;
}
 cce:	cf 91       	pop	r28
 cd0:	d3 cc       	rjmp	.-1626   	; 0x678 <Endpoint_ConfigureEndpointTable>
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	df 91       	pop	r29
	  return false;

	return true;
}
 cd6:	cf 91       	pop	r28
 cd8:	08 95       	ret

00000cda <MIDI_Device_Flush>:
 cda:	2e b3       	in	r18, 0x1e	; 30
 cdc:	24 30       	cpi	r18, 0x04	; 4
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 cde:	89 f4       	brne	.+34     	; 0xd02 <MIDI_Device_Flush+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ce0:	fc 01       	movw	r30, r24
 ce2:	81 81       	ldd	r24, Z+1	; 0x01
 ce4:	8f 70       	andi	r24, 0x0F	; 15
 ce6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 cea:	80 91 f2 00 	lds	r24, 0x00F2
 cee:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 cf2:	89 2b       	or	r24, r25
 cf4:	41 f0       	breq	.+16     	; 0xd06 <MIDI_Device_Flush+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cf6:	80 91 e8 00 	lds	r24, 0x00E8
 cfa:	8e 77       	andi	r24, 0x7E	; 126
 cfc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d00:	17 cd       	rjmp	.-1490   	; 0x730 <Endpoint_WaitUntilReady>
 d02:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d04:	08 95       	ret
 d06:	80 e0       	ldi	r24, 0x00	; 0

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d08:	08 95       	ret

00000d0a <MIDI_Device_USBTask>:
}
 d0a:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d0c:	24 30       	cpi	r18, 0x04	; 4
 d0e:	49 f4       	brne	.+18     	; 0xd22 <MIDI_Device_USBTask+0x18>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d10:	fc 01       	movw	r30, r24
 d12:	21 81       	ldd	r18, Z+1	; 0x01
 d14:	2f 70       	andi	r18, 0x0F	; 15
 d16:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d1a:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 d1e:	20 fd       	sbrc	r18, 0
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 d20:	dc cf       	rjmp	.-72     	; 0xcda <MIDI_Device_Flush>
 d22:	08 95       	ret

00000d24 <MIDI_Device_ReceiveEventPacket>:
 d24:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 d26:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d28:	2e b3       	in	r18, 0x1e	; 30
 d2a:	24 30       	cpi	r18, 0x04	; 4
 d2c:	11 f0       	breq	.+4      	; 0xd32 <MIDI_Device_ReceiveEventPacket+0xe>
	  return false;
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	08 95       	ret
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d32:	26 81       	ldd	r18, Z+6	; 0x06
 d34:	2f 70       	andi	r18, 0x0F	; 15
 d36:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d3a:	20 91 e8 00 	lds	r18, 0x00E8

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsOUTReceived()))
 d3e:	22 ff       	sbrs	r18, 2
 d40:	f6 cf       	rjmp	.-20     	; 0xd2e <MIDI_Device_ReceiveEventPacket+0xa>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d42:	20 91 e8 00 	lds	r18, 0x00E8
		return false;

	if (!(Endpoint_IsReadWriteAllowed()))
 d46:	25 ff       	sbrs	r18, 5
 d48:	f2 cf       	rjmp	.-28     	; 0xd2e <MIDI_Device_ReceiveEventPacket+0xa>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 d4a:	40 e0       	ldi	r20, 0x00	; 0
 d4c:	50 e0       	ldi	r21, 0x00	; 0
 d4e:	64 e0       	ldi	r22, 0x04	; 4
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	5c db       	rcall	.-2376   	; 0x40c <Endpoint_Read_Stream_LE>
 d54:	80 91 e8 00 	lds	r24, 0x00E8
 d58:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 d5a:	05 c0       	rjmp	.+10     	; 0xd66 <MIDI_Device_ReceiveEventPacket+0x42>
 d5c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d60:	8b 77       	andi	r24, 0x7B	; 123
 d62:	80 93 e8 00 	sts	0x00E8, r24
 d66:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 d68:	08 95       	ret

00000d6a <__mulshisi3>:
}
 d6a:	b7 ff       	sbrs	r27, 7
 d6c:	04 c0       	rjmp	.+8      	; 0xd76 <__muluhisi3>

00000d6e <__mulohisi3>:
 d6e:	03 d0       	rcall	.+6      	; 0xd76 <__muluhisi3>
 d70:	82 1b       	sub	r24, r18
 d72:	93 0b       	sbc	r25, r19
 d74:	08 95       	ret

00000d76 <__muluhisi3>:
 d76:	09 d0       	rcall	.+18     	; 0xd8a <__umulhisi3>
 d78:	a5 9f       	mul	r26, r21
 d7a:	90 0d       	add	r25, r0
 d7c:	b4 9f       	mul	r27, r20
 d7e:	90 0d       	add	r25, r0
 d80:	a4 9f       	mul	r26, r20
 d82:	80 0d       	add	r24, r0
 d84:	91 1d       	adc	r25, r1
 d86:	11 24       	eor	r1, r1
 d88:	08 95       	ret

00000d8a <__umulhisi3>:
 d8a:	a2 9f       	mul	r26, r18
 d8c:	b0 01       	movw	r22, r0
 d8e:	b3 9f       	mul	r27, r19
 d90:	c0 01       	movw	r24, r0
 d92:	a3 9f       	mul	r26, r19
 d94:	70 0d       	add	r23, r0
 d96:	81 1d       	adc	r24, r1
 d98:	11 24       	eor	r1, r1
 d9a:	91 1d       	adc	r25, r1
 d9c:	b2 9f       	mul	r27, r18
 d9e:	70 0d       	add	r23, r0
 da0:	81 1d       	adc	r24, r1
 da2:	11 24       	eor	r1, r1
 da4:	91 1d       	adc	r25, r1
 da6:	08 95       	ret

00000da8 <_exit>:
 da8:	f8 94       	cli

00000daa <__stop_program>:
 daa:	ff cf       	rjmp	.-2      	; 0xdaa <__stop_program>

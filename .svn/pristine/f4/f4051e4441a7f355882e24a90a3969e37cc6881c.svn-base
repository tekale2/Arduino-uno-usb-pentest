
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000018a2  00001936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800112  00800112  00001948  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000521a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b8  00000000  00000000  0000522b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a2e  00000000  00000000  000055e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a82  00000000  00000000  0000b011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000267c  00000000  00000000  0000ca93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a00  00000000  00000000  0000f110  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000288d  00000000  00000000  0000fb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003cd4  00000000  00000000  0001239d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  00016071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	78 c1       	rjmp	.+752    	; 0x2f2 <__ctors_end>
       2:	00 00       	nop
       4:	94 c1       	rjmp	.+808    	; 0x32e <__bad_interrupt>
       6:	00 00       	nop
       8:	92 c1       	rjmp	.+804    	; 0x32e <__bad_interrupt>
       a:	00 00       	nop
       c:	90 c1       	rjmp	.+800    	; 0x32e <__bad_interrupt>
       e:	00 00       	nop
      10:	8e c1       	rjmp	.+796    	; 0x32e <__bad_interrupt>
      12:	00 00       	nop
      14:	8c c1       	rjmp	.+792    	; 0x32e <__bad_interrupt>
      16:	00 00       	nop
      18:	8a c1       	rjmp	.+788    	; 0x32e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	88 c1       	rjmp	.+784    	; 0x32e <__bad_interrupt>
      1e:	00 00       	nop
      20:	86 c1       	rjmp	.+780    	; 0x32e <__bad_interrupt>
      22:	00 00       	nop
      24:	84 c1       	rjmp	.+776    	; 0x32e <__bad_interrupt>
      26:	00 00       	nop
      28:	70 c6       	rjmp	.+3296   	; 0xd0a <__vector_10>
      2a:	00 00       	nop
      2c:	80 c1       	rjmp	.+768    	; 0x32e <__bad_interrupt>
      2e:	00 00       	nop
      30:	7e c1       	rjmp	.+764    	; 0x32e <__bad_interrupt>
      32:	00 00       	nop
      34:	7c c1       	rjmp	.+760    	; 0x32e <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	7a c1       	rjmp	.+756    	; 0x32e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	78 c1       	rjmp	.+752    	; 0x32e <__bad_interrupt>
      3e:	00 00       	nop
      40:	76 c1       	rjmp	.+748    	; 0x32e <__bad_interrupt>
      42:	00 00       	nop
      44:	74 c1       	rjmp	.+744    	; 0x32e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	72 c1       	rjmp	.+740    	; 0x32e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	70 c1       	rjmp	.+736    	; 0x32e <__bad_interrupt>
      4e:	00 00       	nop
      50:	6e c1       	rjmp	.+732    	; 0x32e <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	74 c2       	rjmp	.+1256   	; 0x53e <__vector_21>
      56:	00 00       	nop
      58:	6a c1       	rjmp	.+724    	; 0x32e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	68 c1       	rjmp	.+720    	; 0x32e <__bad_interrupt>
      5e:	00 00       	nop
      60:	66 c1       	rjmp	.+716    	; 0x32e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	64 c1       	rjmp	.+712    	; 0x32e <__bad_interrupt>
      66:	00 00       	nop
      68:	62 c1       	rjmp	.+708    	; 0x32e <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	60 c1       	rjmp	.+704    	; 0x32e <__bad_interrupt>
      6e:	00 00       	nop
      70:	5e c1       	rjmp	.+700    	; 0x32e <__bad_interrupt>
      72:	00 00       	nop
      74:	5c c1       	rjmp	.+696    	; 0x32e <__bad_interrupt>
      76:	00 00       	nop
      78:	5a c1       	rjmp	.+692    	; 0x32e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	58 c1       	rjmp	.+688    	; 0x32e <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	56 c1       	rjmp	.+684    	; 0x32e <__bad_interrupt>
      82:	00 00       	nop
      84:	54 c1       	rjmp	.+680    	; 0x32e <__bad_interrupt>
      86:	00 00       	nop
      88:	52 c1       	rjmp	.+676    	; 0x32e <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	50 c1       	rjmp	.+672    	; 0x32e <__bad_interrupt>
      8e:	00 00       	nop
      90:	4e c1       	rjmp	.+668    	; 0x32e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	4c c1       	rjmp	.+664    	; 0x32e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4624>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4617>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4612>:
     11d:	53 70 65 61 6b 65 72 20 45 6e 75 6d 65 72 61 74     Speaker Enumerat
     12d:	65 64 2e 0d 0a 00                                   ed....

00000133 <__c.4610>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     133:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     143:	65 74 20 72 65 71 75 65 73 74 65 64 20 41 75 64     et requested Aud
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     153:	69 6f 20 73 61 6d 70 6c 65 20 72 61 74 65 2e 0d     io sample rate..
				ReportSize     -= 2;
     163:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     173:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

0000017e <__c.4606>:
				ReportSize     -= 1;
				ReportData     += 1;
     17e:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18e:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     19e:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ae:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1be:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     1ce:	0a 1b 5b 33 37 6d 00                                ..[37m.

000001d5 <__c.4604>:
     1d5:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1e5:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1f5:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     205:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     215:	37 6d 00                                            7m.

00000218 <__c.4602>:
     218:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     228:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000232 <__c.4600>:
     232:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     242:	69 63 65 2e 0d 0a 00                                ice....

00000249 <__c.4598>:
     249:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     259:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     269:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000273 <__c.4595>:
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     273:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     283:	61 74 61 2e 0d 0a 00                                ata....

0000028a <__c.4590>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28a:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     29a:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

000002a9 <__c.4585>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a9:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b9:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002c6 <__c.4576>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c6:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn

				if (ParserData->UsingReportIDs)
     2e6:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000002f2 <__ctors_end>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f2:	11 24       	eor	r1, r1
     2f4:	1f be       	out	0x3f, r1	; 63
     2f6:	cf ef       	ldi	r28, 0xFF	; 255
     2f8:	d0 e2       	ldi	r29, 0x20	; 32
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cd bf       	out	0x3d, r28	; 61

000002fe <__do_copy_data>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	a0 e0       	ldi	r26, 0x00	; 0
     302:	b1 e0       	ldi	r27, 0x01	; 1
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	e2 ea       	ldi	r30, 0xA2	; 162
     306:	f8 e1       	ldi	r31, 0x18	; 24
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	0b bf       	out	0x3b, r16	; 59
     30c:	02 c0       	rjmp	.+4      	; 0x312 <__do_copy_data+0x14>
     30e:	07 90       	elpm	r0, Z+
     310:	0d 92       	st	X+, r0
     312:	a2 31       	cpi	r26, 0x12	; 18
     314:	b1 07       	cpc	r27, r17
     316:	d9 f7       	brne	.-10     	; 0x30e <__do_copy_data+0x10>

00000318 <__do_clear_bss>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	a2 e1       	ldi	r26, 0x12	; 18
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	01 c0       	rjmp	.+2      	; 0x322 <.do_clear_bss_start>

00000320 <.do_clear_bss_loop>:
     320:	1d 92       	st	X+, r1

00000322 <.do_clear_bss_start>:
     322:	aa 33       	cpi	r26, 0x3A	; 58
     324:	b1 07       	cpc	r27, r17
     326:	e1 f7       	brne	.-8      	; 0x320 <.do_clear_bss_loop>
     328:	4d d0       	rcall	.+154    	; 0x3c4 <main>
     32a:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <_exit>

0000032e <__bad_interrupt>:
     32e:	68 ce       	rjmp	.-816    	; 0x0 <__vectors>

00000330 <LEDs_SetAllLEDs>:
     330:	9b b1       	in	r25, 0x0b	; 11
     332:	9f 70       	andi	r25, 0x0F	; 15
     334:	98 2b       	or	r25, r24
     336:	9b b9       	out	0x0b, r25	; 11
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	08 95       	ret

0000033a <SetupHardware>:
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	84 b7       	in	r24, 0x34	; 52
     340:	87 7f       	andi	r24, 0xF7	; 247
     342:	84 bf       	out	0x34, r24	; 52
     344:	88 e1       	ldi	r24, 0x18	; 24
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	80 93 60 00 	sts	0x0060, r24
     34e:	10 92 60 00 	sts	0x0060, r1
     352:	0f be       	out	0x3f, r0	; 63
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	80 e8       	ldi	r24, 0x80	; 128
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	80 93 61 00 	sts	0x0061, r24
     360:	90 93 61 00 	sts	0x0061, r25
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	0f be       	out	0x3f, r0	; 63
     366:	83 e3       	ldi	r24, 0x33	; 51
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 cd 00 	sts	0x00CD, r25
					}
				}

				ParserData->UsingReportIDs = true;
     36e:	80 93 cc 00 	sts	0x00CC, r24
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	80 93 ca 00 	sts	0x00CA, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	10 92 c8 00 	sts	0x00C8, r1
     37c:	88 e1       	ldi	r24, 0x18	; 24
     37e:	80 93 c9 00 	sts	0x00C9, r24
     382:	53 9a       	sbi	0x0a, 3	; 10
     384:	5a 9a       	sbi	0x0b, 2	; 11
     386:	6a 98       	cbi	0x0d, 2	; 13
				break;
     388:	72 9a       	sbi	0x0e, 2	; 14

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	ca e7       	ldi	r28, 0x7A	; 122
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	85 ea       	ldi	r24, 0xA5	; 165
     390:	88 83       	st	Y, r24
     392:	82 98       	cbi	0x10, 2	; 16
     394:	ee e7       	ldi	r30, 0x7E	; 126
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	84 60       	ori	r24, 0x04	; 4
     39c:	80 83       	st	Z, r24
     39e:	8a b1       	in	r24, 0x0a	; 10
     3a0:	80 6f       	ori	r24, 0xF0	; 240
     3a2:	8a b9       	out	0x0a, r24	; 10
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	8b b9       	out	0x0b, r24	; 11
     3aa:	94 d4       	rcall	.+2344   	; 0xcd4 <USB_Init>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
				break;
     3b0:	72 d7       	rcall	.+3812   	; 0x1296 <Serial_CreateStream>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	82 e4       	ldi	r24, 0x42	; 66
     3b4:	80 93 7c 00 	sts	0x007C, r24
     3b8:	88 81       	ld	r24, Y
     3ba:	80 64       	ori	r24, 0x40	; 64
     3bc:	88 83       	st	Y, r24
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <main>:
     3c4:	ba df       	rcall	.-140    	; 0x33a <SetupHardware>
     3c6:	86 ec       	ldi	r24, 0xC6	; 198
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	a6 d7       	rcall	.+3916   	; 0x1318 <puts_P>
     3cc:	80 e1       	ldi	r24, 0x10	; 16
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	b0 df       	rcall	.-160    	; 0x330 <LEDs_SetAllLEDs>
     3d0:	78 94       	sei
     3d2:	39 d7       	rcall	.+3698   	; 0x1246 <USB_USBTask>

					while (CurrCollectionPath->Parent != NULL)
     3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <main+0xe>

000003d6 <EVENT_USB_Host_DeviceAttached>:
     3d6:	89 ea       	ldi	r24, 0xA9	; 169
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	9e d7       	rcall	.+3900   	; 0x1318 <puts_P>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	80 ea       	ldi	r24, 0xA0	; 160
     3de:	a8 cf       	rjmp	.-176    	; 0x330 <LEDs_SetAllLEDs>

000003e0 <EVENT_USB_Host_DeviceUnattached>:
     3e0:	8a e8       	ldi	r24, 0x8A	; 138
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	99 d7       	rcall	.+3890   	; 0x1318 <puts_P>
     3e6:	80 e1       	ldi	r24, 0x10	; 16
     3e8:	a3 cf       	rjmp	.-186    	; 0x330 <LEDs_SetAllLEDs>

000003ea <EVENT_USB_Host_DeviceEnumerationComplete>:
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     3f2:	1f 92       	push	r1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	83 e7       	ldi	r24, 0x73	; 115
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	8d d7       	rcall	.+3866   	; 0x1318 <puts_P>
     3fe:	2b d1       	rcall	.+598    	; 0x656 <ProcessConfigurationDescriptor>
     400:	18 2f       	mov	r17, r24
     402:	88 23       	and	r24, r24
     404:	91 f0       	breq	.+36     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     406:	81 30       	cpi	r24, 0x01	; 1
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	19 f4       	brne	.+6      	; 0x410 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     40a:	89 e4       	ldi	r24, 0x49	; 73
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	02 c0       	rjmp	.+4      	; 0x414 <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
     410:	82 e3       	ldi	r24, 0x32	; 50
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	81 d7       	rcall	.+3842   	; 0x1318 <puts_P>
     416:	1f 92       	push	r1
     418:	1f 93       	push	r17
     41a:	88 e1       	ldi	r24, 0x18	; 24
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	9f 93       	push	r25

				if (UsageListSize)
     420:	8f 93       	push	r24
     422:	57 d7       	rcall	.+3758   	; 0x12d2 <printf_P>
     424:	80 e9       	ldi	r24, 0x90	; 144
     426:	84 df       	rcall	.-248    	; 0x330 <LEDs_SetAllLEDs>
     428:	45 c0       	rjmp	.+138    	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	cc d6       	rcall	.+3480   	; 0x11c6 <USB_Host_SetDeviceConfiguration>
     42e:	88 23       	and	r24, r24
     430:	29 f0       	breq	.+10     	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     432:	1f 92       	push	r1
     434:	8f 93       	push	r24
     436:	85 ed       	ldi	r24, 0xD5	; 213
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	f1 cf       	rjmp	.-30     	; 0x41e <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     43c:	60 91 16 01 	lds	r22, 0x0116

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	80 91 17 01 	lds	r24, 0x0117
     444:	e7 d6       	rcall	.+3534   	; 0x1214 <USB_Host_SetInterfaceAltSetting>
     446:	88 23       	and	r24, r24
     448:	29 f0       	breq	.+10     	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     44a:	1f 92       	push	r1
					  UsageList[i - 1] = UsageList[i];
     44c:	8f 93       	push	r24
     44e:	8e e7       	ldi	r24, 0x7E	; 126
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	29 c0       	rjmp	.+82     	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	80 91 15 01 	lds	r24, 0x0115
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	22 e2       	ldi	r18, 0x22	; 34
     45c:	20 93 1d 01 	sts	0x011D, r18
     460:	21 e0       	ldi	r18, 0x01	; 1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	20 93 1e 01 	sts	0x011E, r18
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	31 e0       	ldi	r19, 0x01	; 1
     46a:	30 93 20 01 	sts	0x0120, r19
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	20 93 1f 01 	sts	0x011F, r18
     472:	90 93 22 01 	sts	0x0122, r25
     476:	80 93 21 01 	sts	0x0121, r24
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	90 93 24 01 	sts	0x0124, r25
     482:	80 93 23 01 	sts	0x0123, r24
     486:	80 e8       	ldi	r24, 0x80	; 128
     488:	89 83       	std	Y+1, r24	; 0x01
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	8b eb       	ldi	r24, 0xBB	; 187
     48c:	8a 83       	std	Y+2, r24	; 0x02
     48e:	1b 82       	std	Y+3, r1	; 0x03
     490:	10 92 a7 00 	sts	0x00A7, r1
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	9b d5       	rcall	.+2870   	; 0xfd0 <USB_Host_SendControlRequest>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	88 23       	and	r24, r24
     49c:	81 f0       	breq	.+32     	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0xd4>
     49e:	1f 92       	push	r1
     4a0:	8f 93       	push	r24
     4a2:	83 e3       	ldi	r24, 0x33	; 51
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	13 d7       	rcall	.+3622   	; 0x12d2 <printf_P>
				break;
     4ac:	80 e9       	ldi	r24, 0x90	; 144
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	40 df       	rcall	.-384    	; 0x330 <LEDs_SetAllLEDs>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	89 d6       	rcall	.+3346   	; 0x11c6 <USB_Host_SetDeviceConfiguration>
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0c c0       	rjmp	.+24     	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete+0xec>
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	80 93 6e 00 	sts	0x006E, r24
     4c4:	93 e1       	ldi	r25, 0x13	; 19
     4c6:	97 bd       	out	0x27, r25	; 39
     4c8:	84 bd       	out	0x24, r24	; 36
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	85 bd       	out	0x25, r24	; 37
     4cc:	8d e1       	ldi	r24, 0x1D	; 29
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	23 d7       	rcall	.+3654   	; 0x1318 <puts_P>
     4d2:	80 e6       	ldi	r24, 0x60	; 96
     4d4:	2d df       	rcall	.-422    	; 0x330 <LEDs_SetAllLEDs>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <EVENT_USB_Host_HostError>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	89 83       	std	Y+1, r24	; 0x01
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	89 d3       	rcall	.+1810   	; 0xc04 <USB_Disable>
     4f2:	1f 92       	push	r1
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	8f 93       	push	r24
     4f8:	8e ee       	ldi	r24, 0xEE	; 238
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	e8 d6       	rcall	.+3536   	; 0x12d2 <printf_P>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 e9       	ldi	r24, 0x90	; 144
     504:	15 df       	rcall	.-470    	; 0x330 <LEDs_SetAllLEDs>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	ff cf       	rjmp	.-2      	; 0x50e <EVENT_USB_Host_HostError+0x2a>

00000510 <EVENT_USB_Host_DeviceEnumerationFailed>:
     510:	90 91 25 01 	lds	r25, 0x0125
     514:	1f 92       	push	r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	9f 93       	push	r25
     518:	1f 92       	push	r1
     51a:	6f 93       	push	r22
     51c:	1f 92       	push	r1

					if (UsageListSize)
     51e:	8f 93       	push	r24
     520:	88 e9       	ldi	r24, 0x98	; 152
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	d4 d6       	rcall	.+3496   	; 0x12d2 <printf_P>
     52a:	8d b7       	in	r24, 0x3d	; 61
     52c:	9e b7       	in	r25, 0x3e	; 62
     52e:	08 96       	adiw	r24, 0x08	; 8
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	9e bf       	out	0x3e, r25	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	8d bf       	out	0x3d, r24	; 61
     53a:	80 e9       	ldi	r24, 0x90	; 144
     53c:	f9 ce       	rjmp	.-526    	; 0x330 <LEDs_SetAllLEDs>

0000053e <__vector_21>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	2f 93       	push	r18
						  UsageList[i - 1] = UsageList[i];
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	80 91 a7 00 	lds	r24, 0x00A7

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	8f 70       	andi	r24, 0x0F	; 15
     554:	90 91 aa 00 	lds	r25, 0x00AA
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	90 ff       	sbrs	r25, 0
     55a:	02 c0       	rjmp	.+4      	; 0x560 <__vector_21+0x22>
     55c:	90 e8       	ldi	r25, 0x80	; 128
     55e:	01 c0       	rjmp	.+2      	; 0x562 <__vector_21+0x24>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	29 2f       	mov	r18, r25
     564:	28 2b       	or	r18, r24
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 a7 00 	sts	0x00A7, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56c:	80 91 a9 00 	lds	r24, 0x00A9
     570:	8f 7b       	andi	r24, 0xBF	; 191
     572:	80 93 a9 00 	sts	0x00A9, r24
     576:	80 91 a6 00 	lds	r24, 0x00A6
     57a:	82 ff       	sbrs	r24, 2
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	2b c0       	rjmp	.+86     	; 0x5d4 <__vector_21+0x96>
     57e:	90 91 14 01 	lds	r25, 0x0114
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     582:	81 e0       	ldi	r24, 0x01	; 1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	89 0f       	add	r24, r25
     586:	80 93 14 01 	sts	0x0114, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	9f 3f       	cpi	r25, 0xFF	; 255
     58c:	49 f4       	brne	.+18     	; 0x5a0 <__vector_21+0x62>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	80 91 12 01 	lds	r24, 0x0112

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	90 91 13 01 	lds	r25, 0x0113
     596:	90 58       	subi	r25, 0x80	; 128
     598:	90 93 13 01 	sts	0x0113, r25
     59c:	80 93 12 01 	sts	0x0112, r24
     5a0:	62 99       	sbic	0x0c, 2	; 12
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <__vector_21+0x70>
     5a4:	90 91 12 01 	lds	r25, 0x0112
     5a8:	80 91 13 01 	lds	r24, 0x0113

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__vector_21+0x74>
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 93 af 00 	sts	0x00AF, r25
     5b6:	80 93 af 00 	sts	0x00AF, r24
     5ba:	90 93 af 00 	sts	0x00AF, r25

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	80 93 af 00 	sts	0x00AF, r24
     5c2:	80 91 a6 00 	lds	r24, 0x00A6
     5c6:	85 fd       	sbrc	r24, 5
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__vector_21+0x96>
     5ca:	80 91 a6 00 	lds	r24, 0x00A6
     5ce:	8b 77       	andi	r24, 0x7B	; 123
     5d0:	80 93 a6 00 	sts	0x00A6, r24
     5d4:	80 91 a9 00 	lds	r24, 0x00A9
     5d8:	80 64       	ori	r24, 0x40	; 64
     5da:	80 93 a9 00 	sts	0x00A9, r24
     5de:	82 2f       	mov	r24, r18
     5e0:	8f 70       	andi	r24, 0x0F	; 15
     5e2:	80 93 a7 00 	sts	0x00A7, r24
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	2f 91       	pop	r18
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	18 95       	reti

000005f6 <DComp_NextAudioControlInterface>:
     5f6:	fc 01       	movw	r30, r24
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	51 f4       	brne	.+20     	; 0x612 <DComp_NextAudioControlInterface+0x1c>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	85 81       	ldd	r24, Z+5	; 0x05
     600:	81 30       	cpi	r24, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	39 f4       	brne	.+14     	; 0x612 <DComp_NextAudioControlInterface+0x1c>
     604:	86 81       	ldd	r24, Z+6	; 0x06
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	21 f4       	brne	.+8      	; 0x612 <DComp_NextAudioControlInterface+0x1c>
     60a:	87 81       	ldd	r24, Z+7	; 0x07
     60c:	81 11       	cpse	r24, r1
     60e:	01 c0       	rjmp	.+2      	; 0x612 <DComp_NextAudioControlInterface+0x1c>
     610:	08 95       	ret
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	08 95       	ret

00000616 <DComp_NextAudioStreamInterface>:
     616:	fc 01       	movw	r30, r24
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	84 30       	cpi	r24, 0x04	; 4
     61c:	51 f4       	brne	.+20     	; 0x632 <DComp_NextAudioStreamInterface+0x1c>
     61e:	85 81       	ldd	r24, Z+5	; 0x05
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	39 f4       	brne	.+14     	; 0x632 <DComp_NextAudioStreamInterface+0x1c>
     624:	86 81       	ldd	r24, Z+6	; 0x06
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	21 f4       	brne	.+8      	; 0x632 <DComp_NextAudioStreamInterface+0x1c>
     62a:	87 81       	ldd	r24, Z+7	; 0x07
     62c:	81 11       	cpse	r24, r1
     62e:	01 c0       	rjmp	.+2      	; 0x632 <DComp_NextAudioStreamInterface+0x1c>
     630:	08 95       	ret
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	08 95       	ret

00000636 <DComp_NextAudioInterfaceDataEndpoint>:
     636:	fc 01       	movw	r30, r24
     638:	21 81       	ldd	r18, Z+1	; 0x01
     63a:	25 30       	cpi	r18, 0x05	; 5
     63c:	31 f4       	brne	.+12     	; 0x64a <DComp_NextAudioInterfaceDataEndpoint+0x14>
     63e:	83 81       	ldd	r24, Z+3	; 0x03
     640:	83 70       	andi	r24, 0x03	; 3
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	31 f0       	breq	.+12     	; 0x652 <DComp_NextAudioInterfaceDataEndpoint+0x1c>
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	08 95       	ret
     64a:	24 30       	cpi	r18, 0x04	; 4
     64c:	e1 f7       	brne	.-8      	; 0x646 <DComp_NextAudioInterfaceDataEndpoint+0x10>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	08 95       	ret

00000656 <ProcessConfigurationDescriptor>:
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	c4 50       	subi	r28, 0x04	; 4
     668:	d2 40       	sbci	r29, 0x02	; 2
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	ae 01       	movw	r20, r28
     676:	4f 5f       	subi	r20, 0xFF	; 255
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	cd 5f       	subi	r28, 0xFD	; 253
     67c:	dd 4f       	sbci	r29, 0xFD	; 253
     67e:	59 83       	std	Y+1, r21	; 0x01
     680:	48 83       	st	Y, r20
     682:	c3 50       	subi	r28, 0x03	; 3
     684:	d2 40       	sbci	r29, 0x02	; 2
     686:	20 e0       	ldi	r18, 0x00	; 0
					  ParserData->TotalReportItems++;
     688:	32 e0       	ldi	r19, 0x02	; 2
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7d 4f       	sbci	r23, 0xFD	; 253
     690:	81 e0       	ldi	r24, 0x01	; 1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	ea d3       	rcall	.+2004   	; 0xe68 <USB_Host_GetDeviceConfigDescriptor>
     694:	85 30       	cpi	r24, 0x05	; 5
     696:	09 f4       	brne	.+2      	; 0x69a <ProcessConfigurationDescriptor+0x44>
     698:	6a c0       	rjmp	.+212    	; 0x76e <ProcessConfigurationDescriptor+0x118>
     69a:	86 30       	cpi	r24, 0x06	; 6
     69c:	21 f0       	breq	.+8      	; 0x6a6 <ProcessConfigurationDescriptor+0x50>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	88 23       	and	r24, r24
     6a0:	21 f0       	breq	.+8      	; 0x6aa <ProcessConfigurationDescriptor+0x54>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	65 c0       	rjmp	.+202    	; 0x770 <ProcessConfigurationDescriptor+0x11a>
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	63 c0       	rjmp	.+198    	; 0x770 <ProcessConfigurationDescriptor+0x11a>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	e1 2c       	mov	r14, r1
     6b0:	f1 2c       	mov	r15, r1
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	e1 14       	cp	r14, r1
     6b4:	f1 04       	cpc	r15, r1
     6b6:	b1 f0       	breq	.+44     	; 0x6e4 <ProcessConfigurationDescriptor+0x8e>
     6b8:	4b e1       	ldi	r20, 0x1B	; 27
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	53 e0       	ldi	r21, 0x03	; 3
     6bc:	be 01       	movw	r22, r28

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	6d 5f       	subi	r22, 0xFD	; 253
     6c0:	7d 4f       	sbci	r23, 0xFD	; 253
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	ce 01       	movw	r24, r28
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	9d 4f       	sbci	r25, 0xFD	; 253
     6c8:	29 d4       	rcall	.+2130   	; 0xf1c <USB_GetNextDescriptorComp>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	88 23       	and	r24, r24
     6cc:	81 f1       	breq	.+96     	; 0x72e <ProcessConfigurationDescriptor+0xd8>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	4b e0       	ldi	r20, 0x0B	; 11
     6d0:	53 e0       	ldi	r21, 0x03	; 3
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	be 01       	movw	r22, r28
     6d4:	6d 5f       	subi	r22, 0xFD	; 253
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	7d 4f       	sbci	r23, 0xFD	; 253

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	ce 01       	movw	r24, r28
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	9d 4f       	sbci	r25, 0xFD	; 253
     6de:	1e d4       	rcall	.+2108   	; 0xf1c <USB_GetNextDescriptorComp>
     6e0:	88 23       	and	r24, r24
     6e2:	f1 f0       	breq	.+60     	; 0x720 <ProcessConfigurationDescriptor+0xca>
     6e4:	4b ef       	ldi	r20, 0xFB	; 251
     6e6:	52 e0       	ldi	r21, 0x02	; 2
     6e8:	be 01       	movw	r22, r28
     6ea:	6d 5f       	subi	r22, 0xFD	; 253
     6ec:	7d 4f       	sbci	r23, 0xFD	; 253
     6ee:	ce 01       	movw	r24, r28
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	9d 4f       	sbci	r25, 0xFD	; 253
     6f4:	13 d4       	rcall	.+2086   	; 0xf1c <USB_GetNextDescriptorComp>
     6f6:	88 23       	and	r24, r24
     6f8:	11 f0       	breq	.+4      	; 0x6fe <ProcessConfigurationDescriptor+0xa8>
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	39 c0       	rjmp	.+114    	; 0x770 <ProcessConfigurationDescriptor+0x11a>
     6fe:	cd 5f       	subi	r28, 0xFD	; 253
     700:	dd 4f       	sbci	r29, 0xFD	; 253
     702:	e8 80       	ld	r14, Y
     704:	f9 80       	ldd	r15, Y+1	; 0x01
     706:	c3 50       	subi	r28, 0x03	; 3
     708:	d2 40       	sbci	r29, 0x02	; 2
     70a:	4b e0       	ldi	r20, 0x0B	; 11
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     70c:	53 e0       	ldi	r21, 0x03	; 3
     70e:	be 01       	movw	r22, r28
     710:	6d 5f       	subi	r22, 0xFD	; 253

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     712:	7d 4f       	sbci	r23, 0xFD	; 253
     714:	ce 01       	movw	r24, r28
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	9d 4f       	sbci	r25, 0xFD	; 253
     71a:	00 d4       	rcall	.+2048   	; 0xf1c <USB_GetNextDescriptorComp>
     71c:	81 11       	cpse	r24, r1
     71e:	ed cf       	rjmp	.-38     	; 0x6fa <ProcessConfigurationDescriptor+0xa4>
     720:	cd 5f       	subi	r28, 0xFD	; 253
     722:	dd 4f       	sbci	r29, 0xFD	; 253
     724:	08 81       	ld	r16, Y
     726:	19 81       	ldd	r17, Y+1	; 0x01
     728:	c3 50       	subi	r28, 0x03	; 3
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     72a:	d2 40       	sbci	r29, 0x02	; 2
     72c:	c2 cf       	rjmp	.-124    	; 0x6b2 <ProcessConfigurationDescriptor+0x5c>
     72e:	cd 5f       	subi	r28, 0xFD	; 253
     730:	dd 4f       	sbci	r29, 0xFD	; 253
     732:	e8 81       	ld	r30, Y
     734:	f9 81       	ldd	r31, Y+1	; 0x01

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     736:	c3 50       	subi	r28, 0x03	; 3
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     738:	d2 40       	sbci	r29, 0x02	; 2
     73a:	42 81       	ldd	r20, Z+2	; 0x02
     73c:	47 fd       	sbrc	r20, 7
     73e:	b9 cf       	rjmp	.-142    	; 0x6b2 <ProcessConfigurationDescriptor+0x5c>
     740:	30 97       	sbiw	r30, 0x00	; 0
     742:	09 f4       	brne	.+2      	; 0x746 <ProcessConfigurationDescriptor+0xf0>

		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
     744:	b6 cf       	rjmp	.-148    	; 0x6b2 <ProcessConfigurationDescriptor+0x5c>
     746:	d8 01       	movw	r26, r16
     748:	12 96       	adiw	r26, 0x02	; 2
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataOUTEndpoint))
     74a:	8c 91       	ld	r24, X
     74c:	12 97       	sbiw	r26, 0x02	; 2
     74e:	80 93 17 01 	sts	0x0117, r24
		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
		  DataOUTEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     752:	13 96       	adiw	r26, 0x03	; 3
     754:	8c 91       	ld	r24, X
     756:	80 93 16 01 	sts	0x0116, r24
     75a:	40 93 15 01 	sts	0x0115, r20
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     75e:	24 81       	ldd	r18, Z+4	; 0x04
     760:	35 81       	ldd	r19, Z+5	; 0x05
     762:	02 e0       	ldi	r16, 0x02	; 2
	StreamingEndpointAddress     = DataOUTEndpoint->EndpointAddress;
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	81 e0       	ldi	r24, 0x01	; 1

	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 2);
     768:	d1 d1       	rcall	.+930    	; 0xb0c <Pipe_ConfigurePipe>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	01 c0       	rjmp	.+2      	; 0x770 <ProcessConfigurationDescriptor+0x11a>
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	cc 5f       	subi	r28, 0xFC	; 252
     772:	dd 4f       	sbci	r29, 0xFD	; 253
     774:	0f b6       	in	r0, 0x3f	; 63

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     77a:	0f be       	out	0x3f, r0	; 63
	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 2);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	08 95       	ret

0000078c <USB_Host_ResetDevice>:
     78c:	80 91 9e 00 	lds	r24, 0x009E
     790:	81 70       	andi	r24, 0x01	; 1
     792:	90 91 a0 00 	lds	r25, 0x00A0
     796:	9d 7f       	andi	r25, 0xFD	; 253
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     798:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     79c:	90 91 9e 00 	lds	r25, 0x009E
     7a0:	92 60       	ori	r25, 0x02	; 2
     7a2:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7a6:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7aa:	91 fd       	sbrc	r25, 1
     7ac:	fc cf       	rjmp	.-8      	; 0x7a6 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ae:	90 91 9e 00 	lds	r25, 0x009E
     7b2:	91 60       	ori	r25, 0x01	; 1
     7b4:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     7b8:	10 92 1b 01 	sts	0x011B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7bc:	90 91 a0 00 	lds	r25, 0x00A0
     7c0:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7c2:	20 91 a0 00 	lds	r18, 0x00A0
     7c6:	2f 7d       	andi	r18, 0xDF	; 223
     7c8:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7cc:	20 91 9f 00 	lds	r18, 0x009F
     7d0:	2f 7d       	andi	r18, 0xDF	; 223
     7d2:	20 93 9f 00 	sts	0x009F, r18
     7d6:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7d8:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7dc:	35 ff       	sbrs	r19, 5
     7de:	0b c0       	rjmp	.+22     	; 0x7f6 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7e0:	20 91 9f 00 	lds	r18, 0x009F
     7e4:	2f 7d       	andi	r18, 0xDF	; 223
     7e6:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ea:	20 91 9f 00 	lds	r18, 0x009F
     7ee:	2d 7f       	andi	r18, 0xFD	; 253
     7f0:	20 93 9f 00 	sts	0x009F, r18
     7f4:	08 c0       	rjmp	.+16     	; 0x806 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f6:	ef ec       	ldi	r30, 0xCF	; 207
     7f8:	f7 e0       	ldi	r31, 0x07	; 7
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <USB_Host_ResetDevice+0x6e>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <USB_Host_ResetDevice+0x74>
     800:	00 00       	nop
     802:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     804:	49 f7       	brne	.-46     	; 0x7d8 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     806:	99 23       	and	r25, r25
     808:	29 f0       	breq	.+10     	; 0x814 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     80a:	90 91 a0 00 	lds	r25, 0x00A0
     80e:	90 62       	ori	r25, 0x20	; 32
     810:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     814:	81 11       	cpse	r24, r1
     816:	05 c0       	rjmp	.+10     	; 0x822 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     818:	80 91 9e 00 	lds	r24, 0x009E
     81c:	8e 7f       	andi	r24, 0xFE	; 254
     81e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     822:	80 91 a0 00 	lds	r24, 0x00A0
     826:	82 60       	ori	r24, 0x02	; 2
     828:	80 93 a0 00 	sts	0x00A0, r24
     82c:	08 95       	ret

0000082e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     82e:	20 91 9e 00 	lds	r18, 0x009E
     832:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     834:	90 91 a0 00 	lds	r25, 0x00A0
     838:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     83a:	30 91 a0 00 	lds	r19, 0x00A0
     83e:	3f 7d       	andi	r19, 0xDF	; 223
     840:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     844:	30 91 9f 00 	lds	r19, 0x009F
     848:	3f 7d       	andi	r19, 0xDF	; 223
     84a:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     84e:	30 91 9e 00 	lds	r19, 0x009E
     852:	31 60       	ori	r19, 0x01	; 1
     854:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     858:	88 23       	and	r24, r24
     85a:	39 f1       	breq	.+78     	; 0x8aa <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     85c:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     860:	35 ff       	sbrs	r19, 5
     862:	06 c0       	rjmp	.+12     	; 0x870 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     864:	30 91 9f 00 	lds	r19, 0x009F
     868:	3f 7d       	andi	r19, 0xDF	; 223
     86a:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     86e:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     870:	30 91 25 01 	lds	r19, 0x0125
     874:	31 30       	cpi	r19, 0x01	; 1
     876:	c1 f0       	breq	.+48     	; 0x8a8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     878:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     87c:	34 ff       	sbrs	r19, 4
     87e:	09 c0       	rjmp	.+18     	; 0x892 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     880:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     884:	80 91 a6 00 	lds	r24, 0x00A6
     888:	8f 7e       	andi	r24, 0xEF	; 239
     88a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     88e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     890:	0c c0       	rjmp	.+24     	; 0x8aa <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     892:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     896:	31 ff       	sbrs	r19, 1
     898:	df cf       	rjmp	.-66     	; 0x858 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     89a:	80 91 a6 00 	lds	r24, 0x00A6
     89e:	8d 7f       	andi	r24, 0xFD	; 253
     8a0:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     8a4:	83 e0       	ldi	r24, 0x03	; 3

			break;
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     8a8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     8aa:	21 11       	cpse	r18, r1
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8ae:	20 91 9e 00 	lds	r18, 0x009E
     8b2:	2e 7f       	andi	r18, 0xFE	; 254
     8b4:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     8b8:	99 23       	and	r25, r25
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8bc:	90 91 a0 00 	lds	r25, 0x00A0
     8c0:	90 62       	ori	r25, 0x20	; 32
     8c2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     8c6:	08 95       	ret

000008c8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	28 97       	sbiw	r28, 0x08	; 8
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8e0:	80 91 25 01 	lds	r24, 0x0125
     8e4:	85 30       	cpi	r24, 0x05	; 5
     8e6:	09 f4       	brne	.+2      	; 0x8ea <USB_Host_ProcessNextHostState+0x22>
     8e8:	9c c0       	rjmp	.+312    	; 0xa22 <USB_Host_ProcessNextHostState+0x15a>
     8ea:	68 f4       	brcc	.+26     	; 0x906 <USB_Host_ProcessNextHostState+0x3e>
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	e1 f1       	breq	.+120    	; 0x968 <USB_Host_ProcessNextHostState+0xa0>
     8f0:	18 f4       	brcc	.+6      	; 0x8f8 <USB_Host_ProcessNextHostState+0x30>
     8f2:	88 23       	and	r24, r24
     8f4:	d9 f0       	breq	.+54     	; 0x92c <USB_Host_ProcessNextHostState+0x64>
     8f6:	ff c0       	rjmp	.+510    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	09 f4       	brne	.+2      	; 0x8fe <USB_Host_ProcessNextHostState+0x36>
     8fc:	3f c0       	rjmp	.+126    	; 0x97c <USB_Host_ProcessNextHostState+0xb4>
     8fe:	84 30       	cpi	r24, 0x04	; 4
     900:	09 f4       	brne	.+2      	; 0x904 <USB_Host_ProcessNextHostState+0x3c>
     902:	67 c0       	rjmp	.+206    	; 0x9d2 <USB_Host_ProcessNextHostState+0x10a>
     904:	f8 c0       	rjmp	.+496    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     906:	87 30       	cpi	r24, 0x07	; 7
     908:	09 f4       	brne	.+2      	; 0x90c <USB_Host_ProcessNextHostState+0x44>
     90a:	a6 c0       	rjmp	.+332    	; 0xa58 <USB_Host_ProcessNextHostState+0x190>
     90c:	08 f4       	brcc	.+2      	; 0x910 <USB_Host_ProcessNextHostState+0x48>
     90e:	96 c0       	rjmp	.+300    	; 0xa3c <USB_Host_ProcessNextHostState+0x174>
     910:	88 30       	cpi	r24, 0x08	; 8
     912:	09 f4       	brne	.+2      	; 0x916 <USB_Host_ProcessNextHostState+0x4e>
     914:	bf c0       	rjmp	.+382    	; 0xa94 <USB_Host_ProcessNextHostState+0x1cc>
     916:	89 30       	cpi	r24, 0x09	; 9
     918:	09 f0       	breq	.+2      	; 0x91c <USB_Host_ProcessNextHostState+0x54>
     91a:	ed c0       	rjmp	.+474    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     922:	8a e0       	ldi	r24, 0x0A	; 10
     924:	80 93 25 01 	sts	0x0125, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     928:	60 dd       	rcall	.-1344   	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete>
     92a:	e5 c0       	rjmp	.+458    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
			break;
     92c:	00 91 19 01 	lds	r16, 0x0119
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     930:	10 91 1a 01 	lds	r17, 0x011A
     934:	01 15       	cp	r16, r1
     936:	11 05       	cpc	r17, r1
     938:	09 f4       	brne	.+2      	; 0x93c <USB_Host_ProcessNextHostState+0x74>
     93a:	dd c0       	rjmp	.+442    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     93c:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     93e:	77 df       	rcall	.-274    	; 0x82e <USB_Host_WaitMS>
     940:	88 23       	and	r24, r24
     942:	31 f0       	breq	.+12     	; 0x950 <USB_Host_ProcessNextHostState+0x88>
     944:	90 91 18 01 	lds	r25, 0x0118
				{
					USB_HostState = PostWaitState;
     948:	90 93 25 01 	sts	0x0125, r25
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	c5 c0       	rjmp	.+394    	; 0xada <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     950:	01 50       	subi	r16, 0x01	; 1
					break;
     952:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     954:	10 93 1a 01 	sts	0x011A, r17
     958:	00 93 19 01 	sts	0x0119, r16
     95c:	01 2b       	or	r16, r17
     95e:	09 f0       	breq	.+2      	; 0x962 <USB_Host_ProcessNextHostState+0x9a>
     960:	ca c0       	rjmp	.+404    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     962:	80 91 18 01 	lds	r24, 0x0118
				  USB_HostState = PostWaitState;
     966:	07 c0       	rjmp	.+14     	; 0x976 <USB_Host_ProcessNextHostState+0xae>
     968:	88 ee       	ldi	r24, 0xE8	; 232
     96a:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     96c:	90 93 1a 01 	sts	0x011A, r25
     970:	80 93 19 01 	sts	0x0119, r24
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     97a:	bd c0       	rjmp	.+378    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     97c:	80 91 19 01 	lds	r24, 0x0119
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     980:	90 91 1a 01 	lds	r25, 0x011A
     984:	9c 01       	movw	r18, r24
     986:	21 50       	subi	r18, 0x01	; 1
     988:	31 09       	sbc	r19, r1
     98a:	30 93 1a 01 	sts	0x011A, r19
     98e:	20 93 19 01 	sts	0x0119, r18
     992:	89 2b       	or	r24, r25
     994:	39 f0       	breq	.+14     	; 0x9a4 <USB_Host_ProcessNextHostState+0xdc>
     996:	8f ec       	ldi	r24, 0xCF	; 207
     998:	97 e0       	ldi	r25, 0x07	; 7
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f1 f7       	brne	.-4      	; 0x99a <USB_Host_ProcessNextHostState+0xd2>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <USB_Host_ProcessNextHostState+0xd8>
     9a0:	00 00       	nop
     9a2:	a9 c0       	rjmp	.+338    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     9a4:	77 98       	cbi	0x0e, 7	; 14
     9a6:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9aa:	80 61       	ori	r24, 0x10	; 16
     9ac:	80 93 d8 00 	sts	0x00D8, r24
     9b0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9b4:	8b 7f       	andi	r24, 0xFB	; 251
     9b6:	80 93 dd 00 	sts	0x00DD, r24
     9ba:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     9be:	80 61       	ori	r24, 0x10	; 16
     9c0:	80 93 d7 00 	sts	0x00D7, r24
     9c4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	80 93 dd 00 	sts	0x00DD, r24
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	d2 cf       	rjmp	.-92     	; 0x976 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9d2:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9d6:	80 ff       	sbrs	r24, 0
     9d8:	8e c0       	rjmp	.+284    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9da:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     9de:	8e 7f       	andi	r24, 0xFE	; 254
     9e0:	80 93 9f 00 	sts	0x009F, r24
     9e4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9e8:	8d 7f       	andi	r24, 0xFD	; 253
     9ea:	80 93 9f 00 	sts	0x009F, r24
     9ee:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     9f2:	8d 7f       	andi	r24, 0xFD	; 253
     9f4:	80 93 df 00 	sts	0x00DF, r24
     9f8:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     9fc:	82 60       	ori	r24, 0x02	; 2
     9fe:	80 93 de 00 	sts	0x00DE, r24
     a02:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 93 9e 00 	sts	0x009E, r24
     a0c:	e7 d0       	rcall	.+462    	; 0xbdc <Pipe_ClearPipes>
     a0e:	10 92 25 01 	sts	0x0125, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a12:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	90 93 1a 01 	sts	0x011A, r25
     a1a:	80 93 19 01 	sts	0x0119, r24
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <USB_Host_ProcessNextHostState+0x16e>
     a22:	b4 de       	rcall	.-664    	; 0x78c <USB_Host_ResetDevice>
     a24:	10 92 25 01 	sts	0x0125, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a28:	88 ec       	ldi	r24, 0xC8	; 200
     a2a:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a2c:	90 93 1a 01 	sts	0x011A, r25
     a30:	80 93 19 01 	sts	0x0119, r24
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	80 93 18 01 	sts	0x0118, r24
     a3a:	5d c0       	rjmp	.+186    	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     a3c:	01 e0       	ldi	r16, 0x01	; 1
     a3e:	20 e4       	ldi	r18, 0x40	; 64
     a40:	30 e0       	ldi	r19, 0x00	; 0
			break;
     a42:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	61 d0       	rcall	.+194    	; 0xb0c <Pipe_ConfigurePipe>
     a4a:	81 11       	cpse	r24, r1
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <USB_Host_ProcessNextHostState+0x18c>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	43 c0       	rjmp	.+134    	; 0xada <USB_Host_ProcessNextHostState+0x212>
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	8f cf       	rjmp	.-226    	; 0x976 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a58:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a5a:	e1 e0       	ldi	r30, 0x01	; 1
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a5e:	ad e1       	ldi	r26, 0x1D	; 29
     a60:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a62:	01 90       	ld	r0, Z+
     a64:	0d 92       	st	X+, r0
     a66:	8a 95       	dec	r24
     a68:	e1 f7       	brne	.-8      	; 0xa62 <USB_Host_ProcessNextHostState+0x19a>
     a6a:	10 92 a7 00 	sts	0x00A7, r1
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	ae d2       	rcall	.+1372   	; 0xfd0 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a74:	81 11       	cpse	r24, r1
     a76:	30 c0       	rjmp	.+96     	; 0xad8 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a78:	88 85       	ldd	r24, Y+8	; 0x08
     a7a:	80 93 00 01 	sts	0x0100, r24
     a7e:	86 de       	rcall	.-756    	; 0x78c <USB_Host_ResetDevice>
     a80:	10 92 25 01 	sts	0x0125, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a84:	88 ec       	ldi	r24, 0xC8	; 200
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	90 93 1a 01 	sts	0x011A, r25

			USB_Host_ResetDevice();
     a8c:	80 93 19 01 	sts	0x0119, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a90:	88 e0       	ldi	r24, 0x08	; 8
     a92:	d1 cf       	rjmp	.-94     	; 0xa36 <USB_Host_ProcessNextHostState+0x16e>
     a94:	20 91 00 01 	lds	r18, 0x0100
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	01 e0       	ldi	r16, 0x01	; 1
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     aa2:	34 d0       	rcall	.+104    	; 0xb0c <Pipe_ConfigurePipe>
     aa4:	88 23       	and	r24, r24
     aa6:	99 f2       	breq	.-90     	; 0xa4e <USB_Host_ProcessNextHostState+0x186>
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	e9 e0       	ldi	r30, 0x09	; 9
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	ad e1       	ldi	r26, 0x1D	; 29
     ab0:	b1 e0       	ldi	r27, 0x01	; 1
     ab2:	01 90       	ld	r0, Z+
     ab4:	0d 92       	st	X+, r0
     ab6:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <USB_Host_ProcessNextHostState+0x1ea>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	88 d2       	rcall	.+1296   	; 0xfd0 <USB_Host_SendControlRequest>
     ac0:	81 11       	cpse	r24, r1
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <USB_Host_ProcessNextHostState+0x210>
     ac4:	10 92 25 01 	sts	0x0125, r1
     ac8:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 1a 01 	sts	0x011A, r25
     ad0:	80 93 19 01 	sts	0x0119, r24
     ad4:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ad6:	af cf       	rjmp	.-162    	; 0xa36 <USB_Host_ProcessNextHostState+0x16e>
     ad8:	93 e0       	ldi	r25, 0x03	; 3
     ada:	20 91 25 01 	lds	r18, 0x0125
     ade:	21 30       	cpi	r18, 0x01	; 1
     ae0:	51 f0       	breq	.+20     	; 0xaf6 <USB_Host_ProcessNextHostState+0x22e>
     ae2:	68 2f       	mov	r22, r24
     ae4:	89 2f       	mov	r24, r25
     ae6:	14 dd       	rcall	.-1496   	; 0x510 <EVENT_USB_Host_DeviceEnumerationFailed>
     ae8:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	80 93 dd 00 	sts	0x00DD, r24
     af2:	76 dc       	rcall	.-1812   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     af4:	9f d0       	rcall	.+318    	; 0xc34 <USB_ResetInterface>
     af6:	28 96       	adiw	r28, 0x08	; 8
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16

		USB_ResetInterface();
     b0a:	08 95       	ret

00000b0c <Pipe_ConfigurePipe>:
     b0c:	0f 93       	push	r16
	}
}
     b0e:	e8 2f       	mov	r30, r24
     b10:	ef 70       	andi	r30, 0x0F	; 15
     b12:	87 ff       	sbrs	r24, 7
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <Pipe_ConfigurePipe+0xe>
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <Pipe_ConfigurePipe+0x10>
     b1a:	80 e2       	ldi	r24, 0x20	; 32
     b1c:	e7 30       	cpi	r30, 0x07	; 7
     b1e:	10 f0       	brcs	.+4      	; 0xb24 <Pipe_ConfigurePipe+0x18>
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	5a c0       	rjmp	.+180    	; 0xbd8 <Pipe_ConfigurePipe+0xcc>
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;

	if (Number >= PIPE_TOTAL_PIPES)
	  return false;

	if (Type == EP_TYPE_CONTROL)
     b24:	61 11       	cpse	r22, r1
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     b28:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b2a:	90 e4       	ldi	r25, 0x40	; 64
     b2c:	69 9f       	mul	r22, r25
     b2e:	b0 01       	movw	r22, r0
     b30:	11 24       	eor	r1, r1
     b32:	4f 70       	andi	r20, 0x0F	; 15
     b34:	46 2b       	or	r20, r22
     b36:	48 2b       	or	r20, r24
     b38:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b3a:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     b3e:	5e 13       	cpse	r21, r30
     b40:	19 c0       	rjmp	.+50     	; 0xb74 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     b42:	02 30       	cpi	r16, 0x02	; 2
     b44:	10 f0       	brcs	.+4      	; 0xb4a <Pipe_ConfigurePipe+0x3e>
     b46:	76 e0       	ldi	r23, 0x06	; 6
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <Pipe_ConfigurePipe+0x40>
     b4a:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     b50:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	40 f0       	brcs	.+16     	; 0xb68 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b58:	86 2f       	mov	r24, r22
     b5a:	82 95       	swap	r24
     b5c:	80 7f       	andi	r24, 0xF0	; 240
     b5e:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b60:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b62:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	0e c0       	rjmp	.+28     	; 0xb84 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b68:	65 30       	cpi	r22, 0x05	; 5
     b6a:	b1 f3       	breq	.-20     	; 0xb58 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	ef cf       	rjmp	.-34     	; 0xb52 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b74:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b78:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b7c:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     b80:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b84:	81 fd       	sbrc	r24, 1
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b88:	5f 5f       	subi	r21, 0xFF	; 255
     b8a:	57 30       	cpi	r21, 0x07	; 7
     b8c:	b1 f6       	brne	.-84     	; 0xb3a <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b8e:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	21 c0       	rjmp	.+66     	; 0xbd8 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b96:	90 91 a9 00 	lds	r25, 0x00A9
     b9a:	9e 7f       	andi	r25, 0xFE	; 254
     b9c:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ba0:	90 91 ab 00 	lds	r25, 0x00AB
     ba4:	9d 7f       	andi	r25, 0xFD	; 253
     ba6:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     baa:	90 91 a9 00 	lds	r25, 0x00A9
     bae:	91 60       	ori	r25, 0x01	; 1
     bb0:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     bb4:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     bb8:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     bbc:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     bc0:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bc4:	80 91 a9 00 	lds	r24, 0x00A9
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bce:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     bd2:	87 fd       	sbrc	r24, 7
     bd4:	d9 cf       	rjmp	.-78     	; 0xb88 <Pipe_ConfigurePipe+0x7c>
     bd6:	a4 cf       	rjmp	.-184    	; 0xb20 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     bdc:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     be0:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     be2:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     be6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     bea:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     bee:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bf2:	90 91 a9 00 	lds	r25, 0x00A9
     bf6:	9e 7f       	andi	r25, 0xFE	; 254
     bf8:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	87 30       	cpi	r24, 0x07	; 7
     c00:	81 f7       	brne	.-32     	; 0xbe2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c02:	08 95       	ret

00000c04 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c04:	75 d0       	rcall	.+234    	; 0xcf0 <USB_INT_DisableAllInterrupts>
     c06:	7c d0       	rcall	.+248    	; 0xd00 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c08:	e0 ee       	ldi	r30, 0xE0	; 224
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c0c:	80 81       	ld	r24, Z
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	80 83       	st	Z, r24
     c12:	e8 ed       	ldi	r30, 0xD8	; 216
     c14:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c16:	80 81       	ld	r24, Z
     c18:	8f 77       	andi	r24, 0x7F	; 127
     c1a:	80 83       	st	Z, r24
     c1c:	19 bc       	out	0x29, r1	; 41
     c1e:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c20:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c22:	8c 91       	ld	r24, X
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	8c 93       	st	X, r24
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c2c:	80 83       	st	Z, r24
     c2e:	10 92 1c 01 	sts	0x011C, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c32:	08 95       	ret

00000c34 <USB_ResetInterface>:
     c34:	5d d0       	rcall	.+186    	; 0xcf0 <USB_INT_DisableAllInterrupts>
     c36:	64 d0       	rcall	.+200    	; 0xd00 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     c38:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c3c:	8f 77       	andi	r24, 0x7F	; 127
     c3e:	80 93 d8 00 	sts	0x00D8, r24
     c42:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     c46:	80 68       	ori	r24, 0x80	; 128
     c48:	80 93 d8 00 	sts	0x00D8, r24
     c4c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c50:	8f 7d       	andi	r24, 0xDF	; 223
     c52:	80 93 d8 00 	sts	0x00D8, r24
     c56:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c5a:	8f 77       	andi	r24, 0x7F	; 127
     c5c:	80 93 d7 00 	sts	0x00D7, r24
     c60:	8c e0       	ldi	r24, 0x0C	; 12
     c62:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c64:	8e e0       	ldi	r24, 0x0E	; 14
     c66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c68:	09 b4       	in	r0, 0x29	; 41
     c6a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c6c:	fd cf       	rjmp	.-6      	; 0xc68 <USB_ResetInterface+0x34>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 25 01 	sts	0x0125, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c74:	10 92 1b 01 	sts	0x011B, r1
	USB_Host_ConfigurationNumber = 0;
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c7e:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	80 93 d8 00 	sts	0x00D8, r24
     c88:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 93 dd 00 	sts	0x00DD, r24
     c92:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	80 93 dd 00 	sts	0x00DD, r24
     c9c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     ca0:	8f 7e       	andi	r24, 0xEF	; 239
     ca2:	80 93 d7 00 	sts	0x00D7, r24
     ca6:	6f 9a       	sbi	0x0d, 7	; 13
     ca8:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     caa:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	80 93 de 00 	sts	0x00DE, r24
     cb4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     cb8:	84 60       	ori	r24, 0x04	; 4
     cba:	80 93 de 00 	sts	0x00DE, r24
     cbe:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	80 93 e0 00 	sts	0x00E0, r24
     cc8:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	80 93 d8 00 	sts	0x00D8, r24
     cd2:	08 95       	ret

00000cd4 <USB_Init>:
     cd4:	e8 ed       	ldi	r30, 0xD8	; 216
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7e       	andi	r24, 0xEF	; 239
     cdc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cde:	e7 ed       	ldi	r30, 0xD7	; 215
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	80 93 1c 01 	sts	0x011C, r24

	USB_ResetInterface();
     cee:	a2 cf       	rjmp	.-188    	; 0xc34 <USB_ResetInterface>

00000cf0 <USB_INT_DisableAllInterrupts>:
     cf0:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8c 7f       	andi	r24, 0xFC	; 252
     cf8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cfa:	10 92 a0 00 	sts	0x00A0, r1
     cfe:	08 95       	ret

00000d00 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d00:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d04:	10 92 9f 00 	sts	0x009F, r1
     d08:	08 95       	ret

00000d0a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	0b b6       	in	r0, 0x3b	; 59
     d16:	0f 92       	push	r0
     d18:	2f 93       	push	r18
     d1a:	3f 93       	push	r19
     d1c:	4f 93       	push	r20
     d1e:	5f 93       	push	r21
     d20:	6f 93       	push	r22
     d22:	7f 93       	push	r23
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d30:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d34:	85 ff       	sbrs	r24, 5
     d36:	0a c0       	rjmp	.+20     	; 0xd4c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d38:	80 91 a0 00 	lds	r24, 0x00A0
     d3c:	85 ff       	sbrs	r24, 5
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d40:	80 91 9f 00 	lds	r24, 0x009F
     d44:	8f 7d       	andi	r24, 0xDF	; 223
     d46:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d4a:	1a d1       	rcall	.+564    	; 0xf80 <USB_Event_Stub>
     d4c:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d50:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d52:	15 c0       	rjmp	.+42     	; 0xd7e <__vector_10+0x74>
     d54:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d58:	81 ff       	sbrs	r24, 1
     d5a:	11 c0       	rjmp	.+34     	; 0xd7e <__vector_10+0x74>
     d5c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d60:	8d 7f       	andi	r24, 0xFD	; 253
     d62:	80 93 9f 00 	sts	0x009F, r24
     d66:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d6a:	8e 7f       	andi	r24, 0xFE	; 254
     d6c:	80 93 9f 00 	sts	0x009F, r24
     d70:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	80 93 a0 00 	sts	0x00A0, r24
     d7a:	32 db       	rcall	.-2460   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d7c:	5b df       	rcall	.-330    	; 0xc34 <USB_ResetInterface>
     d7e:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d82:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d84:	15 c0       	rjmp	.+42     	; 0xdb0 <__vector_10+0xa6>
     d86:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d8a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d8c:	11 c0       	rjmp	.+34     	; 0xdb0 <__vector_10+0xa6>
     d8e:	80 91 df 00 	lds	r24, 0x00DF
     d92:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d94:	80 93 df 00 	sts	0x00DF, r24
     d98:	77 98       	cbi	0x0e, 7	; 14
     d9a:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d9e:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     da0:	80 93 dd 00 	sts	0x00DD, r24
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	9e db       	rcall	.-2244   	; 0x4e4 <EVENT_USB_Host_HostError>
     da8:	1b db       	rcall	.-2506   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 25 01 	sts	0x0125, r24
		EVENT_USB_Host_DeviceUnattached();
     db0:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     db4:	80 ff       	sbrs	r24, 0
     db6:	17 c0       	rjmp	.+46     	; 0xde6 <__vector_10+0xdc>
     db8:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     dbc:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     dbe:	13 c0       	rjmp	.+38     	; 0xde6 <__vector_10+0xdc>
     dc0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     dca:	80 91 de 00 	lds	r24, 0x00DE
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     dd4:	00 db       	rcall	.-2560   	; 0x3d6 <EVENT_USB_Host_DeviceAttached>
     dd6:	80 91 a0 00 	lds	r24, 0x00A0
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     de0:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     de2:	80 93 25 01 	sts	0x0125, r24
     de6:	80 91 df 00 	lds	r24, 0x00DF
     dea:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dec:	0e c0       	rjmp	.+28     	; 0xe0a <__vector_10+0x100>
     dee:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     df2:	82 ff       	sbrs	r24, 2
     df4:	0a c0       	rjmp	.+20     	; 0xe0a <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     df6:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dfa:	8b 7f       	andi	r24, 0xFB	; 251
     dfc:	80 93 df 00 	sts	0x00DF, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	85 db       	rcall	.-2294   	; 0x510 <EVENT_USB_Host_DeviceEnumerationFailed>
     e06:	ec da       	rcall	.-2600   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
     e08:	15 df       	rcall	.-470    	; 0xc34 <USB_ResetInterface>
     e0a:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23

		USB_ResetInterface();
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0b be       	out	0x3b, r0	; 59
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <USB_GetNextDescriptor>:
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	fc 01       	movw	r30, r24
     e36:	eb 01       	movw	r28, r22
     e38:	a8 81       	ld	r26, Y
     e3a:	b9 81       	ldd	r27, Y+1	; 0x01
     e3c:	8c 91       	ld	r24, X
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     e42:	31 81       	ldd	r19, Z+1	; 0x01
     e44:	82 17       	cp	r24, r18
     e46:	93 07       	cpc	r25, r19
     e48:	08 f4       	brcc	.+2      	; 0xe4c <USB_GetNextDescriptor+0x1c>
     e4a:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e4c:	a2 0f       	add	r26, r18
     e4e:	b3 1f       	adc	r27, r19
     e50:	eb 01       	movw	r28, r22
     e52:	b9 83       	std	Y+1, r27	; 0x01
     e54:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	82 1b       	sub	r24, r18
     e5c:	93 0b       	sbc	r25, r19
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
			}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	29 97       	sbiw	r28, 0x09	; 9
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	7b 01       	movw	r14, r22
     e8a:	8a 01       	movw	r16, r20
     e8c:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e8e:	90 e8       	ldi	r25, 0x80	; 128
     e90:	90 93 1d 01 	sts	0x011D, r25
     e94:	96 e0       	ldi	r25, 0x06	; 6
     e96:	90 93 1e 01 	sts	0x011E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e9a:	e8 2f       	mov	r30, r24
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ea2:	f0 93 20 01 	sts	0x0120, r31
     ea6:	e0 93 1f 01 	sts	0x011F, r30
     eaa:	10 92 22 01 	sts	0x0122, r1
     eae:	10 92 21 01 	sts	0x0121, r1
     eb2:	89 e0       	ldi	r24, 0x09	; 9
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 93 24 01 	sts	0x0124, r25
     eba:	80 93 23 01 	sts	0x0123, r24
     ebe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	84 d0       	rcall	.+264    	; 0xfd0 <USB_Host_SendControlRequest>
     ec8:	81 11       	cpse	r24, r1
     eca:	19 c0       	rjmp	.+50     	; 0xefe <USB_Host_GetDeviceConfigDescriptor+0x96>
     ecc:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ece:	fc 81       	ldd	r31, Y+4	; 0x04
     ed0:	d7 01       	movw	r26, r14
     ed2:	ed 93       	st	X+, r30
     ed4:	fc 93       	st	X, r31
     ed6:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     ed8:	df 06       	cpc	r13, r31
     eda:	70 f0       	brcs	.+28     	; 0xef8 <USB_Host_GetDeviceConfigDescriptor+0x90>
     edc:	f0 93 24 01 	sts	0x0124, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ee0:	e0 93 23 01 	sts	0x0123, r30
     ee4:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ee6:	74 d0       	rcall	.+232    	; 0xfd0 <USB_Host_SendControlRequest>
     ee8:	81 11       	cpse	r24, r1
     eea:	09 c0       	rjmp	.+18     	; 0xefe <USB_Host_GetDeviceConfigDescriptor+0x96>
     eec:	f8 01       	movw	r30, r16
     eee:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	21 f0       	breq	.+8      	; 0xefc <USB_Host_GetDeviceConfigDescriptor+0x94>
     ef4:	86 e0       	ldi	r24, 0x06	; 6
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	01 c0       	rjmp	.+2      	; 0xefe <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     f00:	0f b6       	in	r0, 0x3f	; 63
}
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	08 95       	ret

00000f1c <USB_GetNextDescriptorComp>:
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	8c 01       	movw	r16, r24
     f32:	eb 01       	movw	r28, r22
     f34:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f36:	f8 01       	movw	r30, r16
     f38:	e0 80       	ld	r14, Z
     f3a:	f1 80       	ldd	r15, Z+1	; 0x01
     f3c:	e1 14       	cp	r14, r1
     f3e:	f1 04       	cpc	r15, r1
     f40:	99 f0       	breq	.+38     	; 0xf68 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f42:	a8 80       	ld	r10, Y
     f44:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     f46:	be 01       	movw	r22, r28
     f48:	c8 01       	movw	r24, r16
     f4a:	72 df       	rcall	.-284    	; 0xe30 <USB_GetNextDescriptor>
     f4c:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f4e:	99 81       	ldd	r25, Y+1	; 0x01
     f50:	f6 01       	movw	r30, r12
     f52:	09 95       	icall
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	79 f3       	breq	.-34     	; 0xf36 <USB_GetNextDescriptorComp+0x1a>
     f58:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f5a:	39 f4       	brne	.+14     	; 0xf6a <USB_GetNextDescriptorComp+0x4e>
     f5c:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     f5e:	a8 82       	st	Y, r10
     f60:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     f62:	f1 82       	std	Z+1, r15	; 0x01
     f64:	e0 82       	st	Z, r14
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <USB_GetNextDescriptorComp+0x4e>
     f68:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f6a:	df 91       	pop	r29
}
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	08 95       	ret

00000f80 <USB_Event_Stub>:
     f80:	08 95       	ret

00000f82 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f8a:	c9 ee       	ldi	r28, 0xE9	; 233
     f8c:	d3 e0       	ldi	r29, 0x03	; 3
     f8e:	11 11       	cpse	r17, r1
     f90:	0d c0       	rjmp	.+26     	; 0xfac <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f92:	80 91 a6 00 	lds	r24, 0x00A6
     f96:	83 fd       	sbrc	r24, 3
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	48 dc       	rcall	.-1904   	; 0x82e <USB_Host_WaitMS>
     f9e:	81 11       	cpse	r24, r1
     fa0:	13 c0       	rjmp	.+38     	; 0xfc8 <USB_Host_WaitForIOS+0x46>
     fa2:	21 97       	sbiw	r28, 0x01	; 1
     fa4:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     fa6:	99 f7       	brne	.-26     	; 0xf8e <USB_Host_WaitForIOS+0xc>
     fa8:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <USB_Host_WaitForIOS+0x46>
     fac:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fae:	29 f4       	brne	.+10     	; 0xfba <USB_Host_WaitForIOS+0x38>
     fb0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     fb4:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     fb6:	f1 cf       	rjmp	.-30     	; 0xf9a <USB_Host_WaitForIOS+0x18>
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <USB_Host_WaitForIOS+0x44>
     fba:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fbc:	71 f7       	brne	.-36     	; 0xf9a <USB_Host_WaitForIOS+0x18>
     fbe:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     fc2:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     fc4:	ea cf       	rjmp	.-44     	; 0xf9a <USB_Host_WaitForIOS+0x18>
     fc6:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     fc8:	df 91       	pop	r29
}
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	08 95       	ret

00000fd0 <USB_Host_SendControlRequest>:
     fd0:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fdc:	f0 90 9e 00 	lds	r15, 0x009E
     fe0:	8f 2d       	mov	r24, r15
     fe2:	81 70       	andi	r24, 0x01	; 1
     fe4:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fe6:	c0 91 23 01 	lds	r28, 0x0123
     fea:	d0 91 24 01 	lds	r29, 0x0124
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fee:	80 91 9e 00 	lds	r24, 0x009E
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	19 dc       	rcall	.-1998   	; 0x82e <USB_Host_WaitMS>
     ffc:	81 11       	cpse	r24, r1
     ffe:	cc c0       	rjmp	.+408    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    1000:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1004:	8f 7c       	andi	r24, 0xCF	; 207
    1006:	80 93 aa 00 	sts	0x00AA, r24
    100a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    100e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1012:	8f 7e       	andi	r24, 0xEF	; 239
    1014:	80 93 a6 00 	sts	0x00A6, r24
    1018:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101c:	8f 7b       	andi	r24, 0xBF	; 191
    101e:	80 93 a9 00 	sts	0x00A9, r24
    1022:	ed e1       	ldi	r30, 0x1D	; 29
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1028:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    102c:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    102e:	e5 32       	cpi	r30, 0x25	; 37
    1030:	f8 07       	cpc	r31, r24
    1032:	c9 f7       	brne	.-14     	; 0x1026 <USB_Host_SendControlRequest+0x56>
    1034:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1038:	87 77       	andi	r24, 0x77	; 119
    103a:	80 93 a6 00 	sts	0x00A6, r24
    103e:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1040:	a0 df       	rcall	.-192    	; 0xf82 <USB_Host_WaitForIOS>
    1042:	81 11       	cpse	r24, r1
    1044:	a9 c0       	rjmp	.+338    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    1046:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	80 93 a9 00 	sts	0x00A9, r24
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	ed db       	rcall	.-2086   	; 0x82e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1054:	81 11       	cpse	r24, r1
    1056:	a0 c0       	rjmp	.+320    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    1058:	80 91 1d 01 	lds	r24, 0x011D
    105c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    105e:	4e c0       	rjmp	.+156    	; 0x10fc <USB_Host_SendControlRequest+0x12c>
    1060:	80 91 aa 00 	lds	r24, 0x00AA
    1064:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1066:	80 61       	ori	r24, 0x10	; 16
    1068:	80 93 aa 00 	sts	0x00AA, r24
    106c:	01 15       	cp	r16, r1
    106e:	11 05       	cpc	r17, r1
    1070:	09 f0       	breq	.+2      	; 0x1074 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1072:	3a c0       	rjmp	.+116    	; 0x10e8 <USB_Host_SendControlRequest+0x118>
    1074:	80 91 aa 00 	lds	r24, 0x00AA
    1078:	8f 7c       	andi	r24, 0xCF	; 207
    107a:	80 62       	ori	r24, 0x20	; 32
    107c:	80 93 aa 00 	sts	0x00AA, r24
    1080:	80 91 a9 00 	lds	r24, 0x00A9
    1084:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1086:	80 93 a9 00 	sts	0x00A9, r24
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	7a df       	rcall	.-268    	; 0xf82 <USB_Host_WaitForIOS>
    108e:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1090:	83 c0       	rjmp	.+262    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    1092:	80 91 a6 00 	lds	r24, 0x00A6
    1096:	8b 77       	andi	r24, 0x7B	; 123
    1098:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	71 df       	rcall	.-286    	; 0xf82 <USB_Host_WaitForIOS>
    10a0:	7b c0       	rjmp	.+246    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    10a2:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a6:	8f 7b       	andi	r24, 0xBF	; 191
    10a8:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	69 df       	rcall	.-302    	; 0xf82 <USB_Host_WaitForIOS>
    10b0:	81 11       	cpse	r24, r1
    10b2:	72 c0       	rjmp	.+228    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    10b4:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10b8:	90 91 f7 00 	lds	r25, 0x00F7
    10bc:	89 2b       	or	r24, r25
    10be:	11 f4       	brne	.+4      	; 0x10c4 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
    10c2:	d0 e0       	ldi	r29, 0x00	; 0
    10c4:	f8 01       	movw	r30, r16
    10c6:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    10c8:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    10cc:	90 91 f7 00 	lds	r25, 0x00F7
    10d0:	89 2b       	or	r24, r25
    10d2:	69 f4       	brne	.+26     	; 0x10ee <USB_Host_SendControlRequest+0x11e>
    10d4:	80 91 a9 00 	lds	r24, 0x00A9
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    10de:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e2:	8e 77       	andi	r24, 0x7E	; 126
    10e4:	80 93 a6 00 	sts	0x00A6, r24
    10e8:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10ea:	d9 f6       	brne	.-74     	; 0x10a2 <USB_Host_SendControlRequest+0xd2>
    10ec:	c3 cf       	rjmp	.-122    	; 0x1074 <USB_Host_SendControlRequest+0xa4>
    10ee:	20 97       	sbiw	r28, 0x00	; 0
    10f0:	89 f3       	breq	.-30     	; 0x10d4 <USB_Host_SendControlRequest+0x104>
    10f2:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10f6:	81 93       	st	Z+, r24
    10f8:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10fa:	e5 cf       	rjmp	.-54     	; 0x10c6 <USB_Host_SendControlRequest+0xf6>
    10fc:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10fe:	11 05       	cpc	r17, r1
    1100:	b1 f1       	breq	.+108    	; 0x116e <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1102:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1106:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    110e:	80 91 a9 00 	lds	r24, 0x00A9
    1112:	8f 7b       	andi	r24, 0xBF	; 191
    1114:	80 93 a9 00 	sts	0x00A9, r24
    1118:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    111a:	20 97       	sbiw	r28, 0x00	; 0
    111c:	01 f1       	breq	.+64     	; 0x115e <USB_Host_SendControlRequest+0x18e>
    111e:	31 df       	rcall	.-414    	; 0xf82 <USB_Host_WaitForIOS>
    1120:	81 11       	cpse	r24, r1
    1122:	3a c0       	rjmp	.+116    	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1124:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1126:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    112a:	30 91 f7 00 	lds	r19, 0x00F7
    112e:	80 91 00 01 	lds	r24, 0x0100
    1132:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1134:	28 17       	cp	r18, r24
    1136:	39 07       	cpc	r19, r25
    1138:	58 f4       	brcc	.+22     	; 0x1150 <USB_Host_SendControlRequest+0x180>
    113a:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	8c 01       	movw	r16, r24
    1140:	20 81       	ld	r18, Z
    1142:	20 93 af 00 	sts	0x00AF, r18
    1146:	21 97       	sbiw	r28, 0x01	; 1
    1148:	20 97       	sbiw	r28, 0x00	; 0
    114a:	19 f0       	breq	.+6      	; 0x1152 <USB_Host_SendControlRequest+0x182>
    114c:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    114e:	eb cf       	rjmp	.-42     	; 0x1126 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1150:	8f 01       	movw	r16, r30
    1152:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1156:	8b 77       	andi	r24, 0x7B	; 123
    1158:	80 93 a6 00 	sts	0x00A6, r24
    115c:	dd cf       	rjmp	.-70     	; 0x1118 <USB_Host_SendControlRequest+0x148>
    115e:	11 df       	rcall	.-478    	; 0xf82 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1160:	81 11       	cpse	r24, r1
    1162:	1a c0       	rjmp	.+52     	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    1164:	80 91 a9 00 	lds	r24, 0x00A9
    1168:	80 64       	ori	r24, 0x40	; 64
    116a:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116e:	80 91 aa 00 	lds	r24, 0x00AA
    1172:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1174:	80 61       	ori	r24, 0x10	; 16
    1176:	80 93 aa 00 	sts	0x00AA, r24
    117a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	80 93 a9 00 	sts	0x00A9, r24
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	fd de       	rcall	.-518    	; 0xf82 <USB_Host_WaitForIOS>
    1188:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <USB_Host_SendControlRequest+0x1c8>
    118c:	80 91 a6 00 	lds	r24, 0x00A6
    1190:	8e 77       	andi	r24, 0x7E	; 126
    1192:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 91 a9 00 	lds	r25, 0x00A9
    119c:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    119e:	90 93 a9 00 	sts	0x00A9, r25
    11a2:	f1 10       	cpse	r15, r1
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <USB_Host_SendControlRequest+0x1e0>
    11a6:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11aa:	9e 7f       	andi	r25, 0xFE	; 254
    11ac:	90 93 9e 00 	sts	0x009E, r25
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    11b6:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    11c2:	ff 90       	pop	r15
    11c4:	08 95       	ret

000011c6 <USB_Host_SetDeviceConfiguration>:
    11c6:	cf 93       	push	r28
				UPRST = 0;
    11c8:	c8 2f       	mov	r28, r24
    11ca:	10 92 1d 01 	sts	0x011D, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11ce:	89 e0       	ldi	r24, 0x09	; 9
    11d0:	80 93 1e 01 	sts	0x011E, r24
    11d4:	2c 2f       	mov	r18, r28
    11d6:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11d8:	30 93 20 01 	sts	0x0120, r19
    11dc:	20 93 1f 01 	sts	0x011F, r18
    11e0:	10 92 22 01 	sts	0x0122, r1
    11e4:	10 92 21 01 	sts	0x0121, r1
    11e8:	10 92 24 01 	sts	0x0124, r1
    11ec:	10 92 23 01 	sts	0x0123, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11f0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	eb de       	rcall	.-554    	; 0xfd0 <USB_Host_SendControlRequest>
    11fa:	81 11       	cpse	r24, r1
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <USB_Host_SetDeviceConfiguration+0x4a>
    11fe:	c0 93 1b 01 	sts	0x011B, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1202:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1204:	11 f0       	breq	.+4      	; 0x120a <USB_Host_SetDeviceConfiguration+0x44>
    1206:	9b e0       	ldi	r25, 0x0B	; 11
    1208:	01 c0       	rjmp	.+2      	; 0x120c <USB_Host_SetDeviceConfiguration+0x46>
    120a:	9a e0       	ldi	r25, 0x0A	; 10
    120c:	90 93 25 01 	sts	0x0125, r25
    1210:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1212:	08 95       	ret

00001214 <USB_Host_SetInterfaceAltSetting>:
    1214:	91 e0       	ldi	r25, 0x01	; 1
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1216:	90 93 1d 01 	sts	0x011D, r25
    121a:	9b e0       	ldi	r25, 0x0B	; 11
    121c:	90 93 1e 01 	sts	0x011E, r25
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	70 93 20 01 	sts	0x0120, r23
    1226:	60 93 1f 01 	sts	0x011F, r22
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	90 93 22 01 	sts	0x0122, r25
    1230:	80 93 21 01 	sts	0x0121, r24
    1234:	10 92 24 01 	sts	0x0124, r1
    1238:	10 92 23 01 	sts	0x0123, r1
    123c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	c5 ce       	rjmp	.-630    	; 0xfd0 <USB_Host_SendControlRequest>

00001246 <USB_USBTask>:
    1246:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1248:	c0 91 a7 00 	lds	r28, 0x00A7
    124c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    124e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1252:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1256:	38 db       	rcall	.-2448   	; 0x8c8 <USB_Host_ProcessNextHostState>
    1258:	c0 93 a7 00 	sts	0x00A7, r28
    125c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    125e:	08 95       	ret

00001260 <Serial_putchar>:
    1260:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1264:	95 ff       	sbrs	r25, 5
    1266:	fc cf       	rjmp	.-8      	; 0x1260 <Serial_putchar>
				UDR1 = DataByte;
    1268:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	08 95       	ret

00001272 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1272:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1276:	87 ff       	sbrs	r24, 7
    1278:	08 c0       	rjmp	.+16     	; 0x128a <Serial_getchar+0x18>
    127a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    127e:	87 ff       	sbrs	r24, 7
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1282:	80 91 ce 00 	lds	r24, 0x00CE
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	08 95       	ret
	  return _FDEV_EOF;
    128a:	8e ef       	ldi	r24, 0xFE	; 254
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1294:	08 95       	ret

00001296 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1296:	fc 01       	movw	r30, r24
	if (!(Stream))
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	59 f4       	brne	.+22     	; 0x12b2 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    129c:	86 e2       	ldi	r24, 0x26	; 38
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	90 93 35 01 	sts	0x0135, r25
    12a4:	80 93 34 01 	sts	0x0134, r24
		stdout = Stream;
    12a8:	90 93 37 01 	sts	0x0137, r25
    12ac:	80 93 36 01 	sts	0x0136, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    12b0:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    12b2:	8e e0       	ldi	r24, 0x0E	; 14
    12b4:	df 01       	movw	r26, r30
    12b6:	1d 92       	st	X+, r1
    12b8:	8a 95       	dec	r24
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <Serial_CreateStream+0x20>
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	83 83       	std	Z+3, r24	; 0x03
    12c0:	80 e3       	ldi	r24, 0x30	; 48
    12c2:	99 e0       	ldi	r25, 0x09	; 9
    12c4:	91 87       	std	Z+9, r25	; 0x09
    12c6:	80 87       	std	Z+8, r24	; 0x08
    12c8:	89 e3       	ldi	r24, 0x39	; 57
    12ca:	99 e0       	ldi	r25, 0x09	; 9
    12cc:	93 87       	std	Z+11, r25	; 0x0b
    12ce:	82 87       	std	Z+10, r24	; 0x0a
    12d0:	08 95       	ret

000012d2 <printf_P>:
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	fe 01       	movw	r30, r28
    12e0:	37 96       	adiw	r30, 0x07	; 7
    12e2:	61 91       	ld	r22, Z+
    12e4:	71 91       	ld	r23, Z+
    12e6:	06 e3       	ldi	r16, 0x36	; 54
    12e8:	11 e0       	ldi	r17, 0x01	; 1
    12ea:	d8 01       	movw	r26, r16
    12ec:	8d 91       	ld	r24, X+
    12ee:	9c 91       	ld	r25, X
    12f0:	dc 01       	movw	r26, r24
    12f2:	13 96       	adiw	r26, 0x03	; 3
    12f4:	2c 91       	ld	r18, X
    12f6:	13 97       	sbiw	r26, 0x03	; 3
    12f8:	28 60       	ori	r18, 0x08	; 8
    12fa:	13 96       	adiw	r26, 0x03	; 3
    12fc:	2c 93       	st	X, r18
    12fe:	af 01       	movw	r20, r30
    1300:	3a d0       	rcall	.+116    	; 0x1376 <vfprintf>
    1302:	d8 01       	movw	r26, r16
    1304:	ed 91       	ld	r30, X+
    1306:	fc 91       	ld	r31, X
    1308:	23 81       	ldd	r18, Z+3	; 0x03
    130a:	27 7f       	andi	r18, 0xF7	; 247
    130c:	23 83       	std	Z+3, r18	; 0x03
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <puts_P>:
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	e0 91 36 01 	lds	r30, 0x0136
    1326:	f0 91 37 01 	lds	r31, 0x0137
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	81 ff       	sbrs	r24, 1
    132e:	1c c0       	rjmp	.+56     	; 0x1368 <puts_P+0x50>
    1330:	00 e0       	ldi	r16, 0x00	; 0
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	fe 01       	movw	r30, r28
    1336:	84 91       	lpm	r24, Z
    1338:	60 91 36 01 	lds	r22, 0x0136
    133c:	70 91 37 01 	lds	r23, 0x0137
    1340:	db 01       	movw	r26, r22
    1342:	18 96       	adiw	r26, 0x08	; 8
    1344:	ed 91       	ld	r30, X+
    1346:	fc 91       	ld	r31, X
    1348:	19 97       	sbiw	r26, 0x09	; 9
    134a:	88 23       	and	r24, r24
    134c:	39 f0       	breq	.+14     	; 0x135c <puts_P+0x44>
    134e:	09 95       	icall
    1350:	89 2b       	or	r24, r25
    1352:	11 f0       	breq	.+4      	; 0x1358 <puts_P+0x40>
    1354:	0f ef       	ldi	r16, 0xFF	; 255
    1356:	1f ef       	ldi	r17, 0xFF	; 255
    1358:	21 96       	adiw	r28, 0x01	; 1
    135a:	ec cf       	rjmp	.-40     	; 0x1334 <puts_P+0x1c>
    135c:	8a e0       	ldi	r24, 0x0A	; 10
    135e:	09 95       	icall
    1360:	89 2b       	or	r24, r25
    1362:	11 f4       	brne	.+4      	; 0x1368 <puts_P+0x50>
    1364:	c8 01       	movw	r24, r16
    1366:	02 c0       	rjmp	.+4      	; 0x136c <puts_P+0x54>
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <vfprintf>:
    1376:	2f 92       	push	r2
    1378:	3f 92       	push	r3
    137a:	4f 92       	push	r4
    137c:	5f 92       	push	r5
    137e:	6f 92       	push	r6
    1380:	7f 92       	push	r7
    1382:	8f 92       	push	r8
    1384:	9f 92       	push	r9
    1386:	af 92       	push	r10
    1388:	bf 92       	push	r11
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	2c 97       	sbiw	r28, 0x0c	; 12
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	7c 01       	movw	r14, r24
    13ac:	6b 01       	movw	r12, r22
    13ae:	8a 01       	movw	r16, r20
    13b0:	fc 01       	movw	r30, r24
    13b2:	17 82       	std	Z+7, r1	; 0x07
    13b4:	16 82       	std	Z+6, r1	; 0x06
    13b6:	83 81       	ldd	r24, Z+3	; 0x03
    13b8:	81 ff       	sbrs	r24, 1
    13ba:	b0 c1       	rjmp	.+864    	; 0x171c <vfprintf+0x3a6>
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	4c 01       	movw	r8, r24
    13c2:	f7 01       	movw	r30, r14
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	f6 01       	movw	r30, r12
    13c8:	93 fd       	sbrc	r25, 3
    13ca:	85 91       	lpm	r24, Z+
    13cc:	93 ff       	sbrs	r25, 3
    13ce:	81 91       	ld	r24, Z+
    13d0:	6f 01       	movw	r12, r30
    13d2:	88 23       	and	r24, r24
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <vfprintf+0x62>
    13d6:	9e c1       	rjmp	.+828    	; 0x1714 <vfprintf+0x39e>
    13d8:	85 32       	cpi	r24, 0x25	; 37
    13da:	39 f4       	brne	.+14     	; 0x13ea <vfprintf+0x74>
    13dc:	93 fd       	sbrc	r25, 3
    13de:	85 91       	lpm	r24, Z+
    13e0:	93 ff       	sbrs	r25, 3
    13e2:	81 91       	ld	r24, Z+
    13e4:	6f 01       	movw	r12, r30
    13e6:	85 32       	cpi	r24, 0x25	; 37
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <vfprintf+0x7c>
    13ea:	b7 01       	movw	r22, r14
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	c7 d1       	rcall	.+910    	; 0x177e <fputc>
    13f0:	e8 cf       	rjmp	.-48     	; 0x13c2 <vfprintf+0x4c>
    13f2:	51 2c       	mov	r5, r1
    13f4:	31 2c       	mov	r3, r1
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	20 32       	cpi	r18, 0x20	; 32
    13fa:	a0 f4       	brcc	.+40     	; 0x1424 <vfprintf+0xae>
    13fc:	8b 32       	cpi	r24, 0x2B	; 43
    13fe:	69 f0       	breq	.+26     	; 0x141a <vfprintf+0xa4>
    1400:	30 f4       	brcc	.+12     	; 0x140e <vfprintf+0x98>
    1402:	80 32       	cpi	r24, 0x20	; 32
    1404:	59 f0       	breq	.+22     	; 0x141c <vfprintf+0xa6>
    1406:	83 32       	cpi	r24, 0x23	; 35
    1408:	69 f4       	brne	.+26     	; 0x1424 <vfprintf+0xae>
    140a:	20 61       	ori	r18, 0x10	; 16
    140c:	2c c0       	rjmp	.+88     	; 0x1466 <vfprintf+0xf0>
    140e:	8d 32       	cpi	r24, 0x2D	; 45
    1410:	39 f0       	breq	.+14     	; 0x1420 <vfprintf+0xaa>
    1412:	80 33       	cpi	r24, 0x30	; 48
    1414:	39 f4       	brne	.+14     	; 0x1424 <vfprintf+0xae>
    1416:	21 60       	ori	r18, 0x01	; 1
    1418:	26 c0       	rjmp	.+76     	; 0x1466 <vfprintf+0xf0>
    141a:	22 60       	ori	r18, 0x02	; 2
    141c:	24 60       	ori	r18, 0x04	; 4
    141e:	23 c0       	rjmp	.+70     	; 0x1466 <vfprintf+0xf0>
    1420:	28 60       	ori	r18, 0x08	; 8
    1422:	21 c0       	rjmp	.+66     	; 0x1466 <vfprintf+0xf0>
    1424:	27 fd       	sbrc	r18, 7
    1426:	27 c0       	rjmp	.+78     	; 0x1476 <vfprintf+0x100>
    1428:	30 ed       	ldi	r19, 0xD0	; 208
    142a:	38 0f       	add	r19, r24
    142c:	3a 30       	cpi	r19, 0x0A	; 10
    142e:	78 f4       	brcc	.+30     	; 0x144e <vfprintf+0xd8>
    1430:	26 ff       	sbrs	r18, 6
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <vfprintf+0xca>
    1434:	fa e0       	ldi	r31, 0x0A	; 10
    1436:	5f 9e       	mul	r5, r31
    1438:	30 0d       	add	r19, r0
    143a:	11 24       	eor	r1, r1
    143c:	53 2e       	mov	r5, r19
    143e:	13 c0       	rjmp	.+38     	; 0x1466 <vfprintf+0xf0>
    1440:	8a e0       	ldi	r24, 0x0A	; 10
    1442:	38 9e       	mul	r3, r24
    1444:	30 0d       	add	r19, r0
    1446:	11 24       	eor	r1, r1
    1448:	33 2e       	mov	r3, r19
    144a:	20 62       	ori	r18, 0x20	; 32
    144c:	0c c0       	rjmp	.+24     	; 0x1466 <vfprintf+0xf0>
    144e:	8e 32       	cpi	r24, 0x2E	; 46
    1450:	21 f4       	brne	.+8      	; 0x145a <vfprintf+0xe4>
    1452:	26 fd       	sbrc	r18, 6
    1454:	5f c1       	rjmp	.+702    	; 0x1714 <vfprintf+0x39e>
    1456:	20 64       	ori	r18, 0x40	; 64
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <vfprintf+0xf0>
    145a:	8c 36       	cpi	r24, 0x6C	; 108
    145c:	11 f4       	brne	.+4      	; 0x1462 <vfprintf+0xec>
    145e:	20 68       	ori	r18, 0x80	; 128
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <vfprintf+0xf0>
    1462:	88 36       	cpi	r24, 0x68	; 104
    1464:	41 f4       	brne	.+16     	; 0x1476 <vfprintf+0x100>
    1466:	f6 01       	movw	r30, r12
    1468:	93 fd       	sbrc	r25, 3
    146a:	85 91       	lpm	r24, Z+
    146c:	93 ff       	sbrs	r25, 3
    146e:	81 91       	ld	r24, Z+
    1470:	6f 01       	movw	r12, r30
    1472:	81 11       	cpse	r24, r1
    1474:	c1 cf       	rjmp	.-126    	; 0x13f8 <vfprintf+0x82>
    1476:	98 2f       	mov	r25, r24
    1478:	9f 7d       	andi	r25, 0xDF	; 223
    147a:	95 54       	subi	r25, 0x45	; 69
    147c:	93 30       	cpi	r25, 0x03	; 3
    147e:	28 f4       	brcc	.+10     	; 0x148a <vfprintf+0x114>
    1480:	0c 5f       	subi	r16, 0xFC	; 252
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	ff e3       	ldi	r31, 0x3F	; 63
    1486:	f9 83       	std	Y+1, r31	; 0x01
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <vfprintf+0x12e>
    148a:	83 36       	cpi	r24, 0x63	; 99
    148c:	31 f0       	breq	.+12     	; 0x149a <vfprintf+0x124>
    148e:	83 37       	cpi	r24, 0x73	; 115
    1490:	71 f0       	breq	.+28     	; 0x14ae <vfprintf+0x138>
    1492:	83 35       	cpi	r24, 0x53	; 83
    1494:	09 f0       	breq	.+2      	; 0x1498 <vfprintf+0x122>
    1496:	57 c0       	rjmp	.+174    	; 0x1546 <vfprintf+0x1d0>
    1498:	21 c0       	rjmp	.+66     	; 0x14dc <vfprintf+0x166>
    149a:	f8 01       	movw	r30, r16
    149c:	80 81       	ld	r24, Z
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	0e 5f       	subi	r16, 0xFE	; 254
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	44 24       	eor	r4, r4
    14a6:	43 94       	inc	r4
    14a8:	51 2c       	mov	r5, r1
    14aa:	54 01       	movw	r10, r8
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <vfprintf+0x160>
    14ae:	38 01       	movw	r6, r16
    14b0:	f2 e0       	ldi	r31, 0x02	; 2
    14b2:	6f 0e       	add	r6, r31
    14b4:	71 1c       	adc	r7, r1
    14b6:	f8 01       	movw	r30, r16
    14b8:	a0 80       	ld	r10, Z
    14ba:	b1 80       	ldd	r11, Z+1	; 0x01
    14bc:	26 ff       	sbrs	r18, 6
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <vfprintf+0x150>
    14c0:	65 2d       	mov	r22, r5
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0x154>
    14c6:	6f ef       	ldi	r22, 0xFF	; 255
    14c8:	7f ef       	ldi	r23, 0xFF	; 255
    14ca:	c5 01       	movw	r24, r10
    14cc:	2c 87       	std	Y+12, r18	; 0x0c
    14ce:	4c d1       	rcall	.+664    	; 0x1768 <strnlen>
    14d0:	2c 01       	movw	r4, r24
    14d2:	83 01       	movw	r16, r6
    14d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d6:	2f 77       	andi	r18, 0x7F	; 127
    14d8:	22 2e       	mov	r2, r18
    14da:	16 c0       	rjmp	.+44     	; 0x1508 <vfprintf+0x192>
    14dc:	38 01       	movw	r6, r16
    14de:	f2 e0       	ldi	r31, 0x02	; 2
    14e0:	6f 0e       	add	r6, r31
    14e2:	71 1c       	adc	r7, r1
    14e4:	f8 01       	movw	r30, r16
    14e6:	a0 80       	ld	r10, Z
    14e8:	b1 80       	ldd	r11, Z+1	; 0x01
    14ea:	26 ff       	sbrs	r18, 6
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <vfprintf+0x17e>
    14ee:	65 2d       	mov	r22, r5
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x182>
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	7f ef       	ldi	r23, 0xFF	; 255
    14f8:	c5 01       	movw	r24, r10
    14fa:	2c 87       	std	Y+12, r18	; 0x0c
    14fc:	2a d1       	rcall	.+596    	; 0x1752 <strnlen_P>
    14fe:	2c 01       	movw	r4, r24
    1500:	2c 85       	ldd	r18, Y+12	; 0x0c
    1502:	20 68       	ori	r18, 0x80	; 128
    1504:	22 2e       	mov	r2, r18
    1506:	83 01       	movw	r16, r6
    1508:	23 fc       	sbrc	r2, 3
    150a:	19 c0       	rjmp	.+50     	; 0x153e <vfprintf+0x1c8>
    150c:	83 2d       	mov	r24, r3
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	48 16       	cp	r4, r24
    1512:	59 06       	cpc	r5, r25
    1514:	a0 f4       	brcc	.+40     	; 0x153e <vfprintf+0x1c8>
    1516:	b7 01       	movw	r22, r14
    1518:	80 e2       	ldi	r24, 0x20	; 32
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	30 d1       	rcall	.+608    	; 0x177e <fputc>
    151e:	3a 94       	dec	r3
    1520:	f5 cf       	rjmp	.-22     	; 0x150c <vfprintf+0x196>
    1522:	f5 01       	movw	r30, r10
    1524:	27 fc       	sbrc	r2, 7
    1526:	85 91       	lpm	r24, Z+
    1528:	27 fe       	sbrs	r2, 7
    152a:	81 91       	ld	r24, Z+
    152c:	5f 01       	movw	r10, r30
    152e:	b7 01       	movw	r22, r14
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	25 d1       	rcall	.+586    	; 0x177e <fputc>
    1534:	31 10       	cpse	r3, r1
    1536:	3a 94       	dec	r3
    1538:	f1 e0       	ldi	r31, 0x01	; 1
    153a:	4f 1a       	sub	r4, r31
    153c:	51 08       	sbc	r5, r1
    153e:	41 14       	cp	r4, r1
    1540:	51 04       	cpc	r5, r1
    1542:	79 f7       	brne	.-34     	; 0x1522 <vfprintf+0x1ac>
    1544:	de c0       	rjmp	.+444    	; 0x1702 <vfprintf+0x38c>
    1546:	84 36       	cpi	r24, 0x64	; 100
    1548:	11 f0       	breq	.+4      	; 0x154e <vfprintf+0x1d8>
    154a:	89 36       	cpi	r24, 0x69	; 105
    154c:	31 f5       	brne	.+76     	; 0x159a <vfprintf+0x224>
    154e:	f8 01       	movw	r30, r16
    1550:	27 ff       	sbrs	r18, 7
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <vfprintf+0x1ec>
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	0c 5f       	subi	r16, 0xFC	; 252
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	08 c0       	rjmp	.+16     	; 0x1572 <vfprintf+0x1fc>
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	88 27       	eor	r24, r24
    1568:	77 fd       	sbrc	r23, 7
    156a:	80 95       	com	r24
    156c:	98 2f       	mov	r25, r24
    156e:	0e 5f       	subi	r16, 0xFE	; 254
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	2f 76       	andi	r18, 0x6F	; 111
    1574:	b2 2e       	mov	r11, r18
    1576:	97 ff       	sbrs	r25, 7
    1578:	09 c0       	rjmp	.+18     	; 0x158c <vfprintf+0x216>
    157a:	90 95       	com	r25
    157c:	80 95       	com	r24
    157e:	70 95       	com	r23
    1580:	61 95       	neg	r22
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	20 68       	ori	r18, 0x80	; 128
    158a:	b2 2e       	mov	r11, r18
    158c:	2a e0       	ldi	r18, 0x0A	; 10
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	a4 01       	movw	r20, r8
    1592:	27 d1       	rcall	.+590    	; 0x17e2 <__ultoa_invert>
    1594:	a8 2e       	mov	r10, r24
    1596:	a8 18       	sub	r10, r8
    1598:	43 c0       	rjmp	.+134    	; 0x1620 <vfprintf+0x2aa>
    159a:	85 37       	cpi	r24, 0x75	; 117
    159c:	29 f4       	brne	.+10     	; 0x15a8 <vfprintf+0x232>
    159e:	2f 7e       	andi	r18, 0xEF	; 239
    15a0:	b2 2e       	mov	r11, r18
    15a2:	2a e0       	ldi	r18, 0x0A	; 10
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	25 c0       	rjmp	.+74     	; 0x15f2 <vfprintf+0x27c>
    15a8:	f2 2f       	mov	r31, r18
    15aa:	f9 7f       	andi	r31, 0xF9	; 249
    15ac:	bf 2e       	mov	r11, r31
    15ae:	8f 36       	cpi	r24, 0x6F	; 111
    15b0:	c1 f0       	breq	.+48     	; 0x15e2 <vfprintf+0x26c>
    15b2:	18 f4       	brcc	.+6      	; 0x15ba <vfprintf+0x244>
    15b4:	88 35       	cpi	r24, 0x58	; 88
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <vfprintf+0x260>
    15b8:	ad c0       	rjmp	.+346    	; 0x1714 <vfprintf+0x39e>
    15ba:	80 37       	cpi	r24, 0x70	; 112
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <vfprintf+0x24e>
    15be:	88 37       	cpi	r24, 0x78	; 120
    15c0:	21 f0       	breq	.+8      	; 0x15ca <vfprintf+0x254>
    15c2:	a8 c0       	rjmp	.+336    	; 0x1714 <vfprintf+0x39e>
    15c4:	2f 2f       	mov	r18, r31
    15c6:	20 61       	ori	r18, 0x10	; 16
    15c8:	b2 2e       	mov	r11, r18
    15ca:	b4 fe       	sbrs	r11, 4
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <vfprintf+0x272>
    15ce:	8b 2d       	mov	r24, r11
    15d0:	84 60       	ori	r24, 0x04	; 4
    15d2:	b8 2e       	mov	r11, r24
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <vfprintf+0x272>
    15d6:	24 ff       	sbrs	r18, 4
    15d8:	0a c0       	rjmp	.+20     	; 0x15ee <vfprintf+0x278>
    15da:	9f 2f       	mov	r25, r31
    15dc:	96 60       	ori	r25, 0x06	; 6
    15de:	b9 2e       	mov	r11, r25
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <vfprintf+0x278>
    15e2:	28 e0       	ldi	r18, 0x08	; 8
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <vfprintf+0x27c>
    15e8:	20 e1       	ldi	r18, 0x10	; 16
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x27c>
    15ee:	20 e1       	ldi	r18, 0x10	; 16
    15f0:	32 e0       	ldi	r19, 0x02	; 2
    15f2:	f8 01       	movw	r30, r16
    15f4:	b7 fe       	sbrs	r11, 7
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <vfprintf+0x290>
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	0c 5f       	subi	r16, 0xFC	; 252
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <vfprintf+0x29c>
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 5f       	subi	r16, 0xFE	; 254
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	a4 01       	movw	r20, r8
    1614:	e6 d0       	rcall	.+460    	; 0x17e2 <__ultoa_invert>
    1616:	a8 2e       	mov	r10, r24
    1618:	a8 18       	sub	r10, r8
    161a:	fb 2d       	mov	r31, r11
    161c:	ff 77       	andi	r31, 0x7F	; 127
    161e:	bf 2e       	mov	r11, r31
    1620:	b6 fe       	sbrs	r11, 6
    1622:	0b c0       	rjmp	.+22     	; 0x163a <vfprintf+0x2c4>
    1624:	2b 2d       	mov	r18, r11
    1626:	2e 7f       	andi	r18, 0xFE	; 254
    1628:	a5 14       	cp	r10, r5
    162a:	50 f4       	brcc	.+20     	; 0x1640 <vfprintf+0x2ca>
    162c:	b4 fe       	sbrs	r11, 4
    162e:	0a c0       	rjmp	.+20     	; 0x1644 <vfprintf+0x2ce>
    1630:	b2 fc       	sbrc	r11, 2
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <vfprintf+0x2ce>
    1634:	2b 2d       	mov	r18, r11
    1636:	2e 7e       	andi	r18, 0xEE	; 238
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <vfprintf+0x2ce>
    163a:	7a 2c       	mov	r7, r10
    163c:	2b 2d       	mov	r18, r11
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <vfprintf+0x2d0>
    1640:	7a 2c       	mov	r7, r10
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <vfprintf+0x2d0>
    1644:	75 2c       	mov	r7, r5
    1646:	24 ff       	sbrs	r18, 4
    1648:	0d c0       	rjmp	.+26     	; 0x1664 <vfprintf+0x2ee>
    164a:	fe 01       	movw	r30, r28
    164c:	ea 0d       	add	r30, r10
    164e:	f1 1d       	adc	r31, r1
    1650:	80 81       	ld	r24, Z
    1652:	80 33       	cpi	r24, 0x30	; 48
    1654:	11 f4       	brne	.+4      	; 0x165a <vfprintf+0x2e4>
    1656:	29 7e       	andi	r18, 0xE9	; 233
    1658:	09 c0       	rjmp	.+18     	; 0x166c <vfprintf+0x2f6>
    165a:	22 ff       	sbrs	r18, 2
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x2f4>
    165e:	73 94       	inc	r7
    1660:	73 94       	inc	r7
    1662:	04 c0       	rjmp	.+8      	; 0x166c <vfprintf+0x2f6>
    1664:	82 2f       	mov	r24, r18
    1666:	86 78       	andi	r24, 0x86	; 134
    1668:	09 f0       	breq	.+2      	; 0x166c <vfprintf+0x2f6>
    166a:	73 94       	inc	r7
    166c:	23 fd       	sbrc	r18, 3
    166e:	12 c0       	rjmp	.+36     	; 0x1694 <vfprintf+0x31e>
    1670:	20 ff       	sbrs	r18, 0
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <vfprintf+0x30a>
    1674:	5a 2c       	mov	r5, r10
    1676:	73 14       	cp	r7, r3
    1678:	18 f4       	brcc	.+6      	; 0x1680 <vfprintf+0x30a>
    167a:	53 0c       	add	r5, r3
    167c:	57 18       	sub	r5, r7
    167e:	73 2c       	mov	r7, r3
    1680:	73 14       	cp	r7, r3
    1682:	60 f4       	brcc	.+24     	; 0x169c <vfprintf+0x326>
    1684:	b7 01       	movw	r22, r14
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	2c 87       	std	Y+12, r18	; 0x0c
    168c:	78 d0       	rcall	.+240    	; 0x177e <fputc>
    168e:	73 94       	inc	r7
    1690:	2c 85       	ldd	r18, Y+12	; 0x0c
    1692:	f6 cf       	rjmp	.-20     	; 0x1680 <vfprintf+0x30a>
    1694:	73 14       	cp	r7, r3
    1696:	10 f4       	brcc	.+4      	; 0x169c <vfprintf+0x326>
    1698:	37 18       	sub	r3, r7
    169a:	01 c0       	rjmp	.+2      	; 0x169e <vfprintf+0x328>
    169c:	31 2c       	mov	r3, r1
    169e:	24 ff       	sbrs	r18, 4
    16a0:	11 c0       	rjmp	.+34     	; 0x16c4 <vfprintf+0x34e>
    16a2:	b7 01       	movw	r22, r14
    16a4:	80 e3       	ldi	r24, 0x30	; 48
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	2c 87       	std	Y+12, r18	; 0x0c
    16aa:	69 d0       	rcall	.+210    	; 0x177e <fputc>
    16ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ae:	22 ff       	sbrs	r18, 2
    16b0:	16 c0       	rjmp	.+44     	; 0x16de <vfprintf+0x368>
    16b2:	21 ff       	sbrs	r18, 1
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <vfprintf+0x346>
    16b6:	88 e5       	ldi	r24, 0x58	; 88
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <vfprintf+0x34a>
    16bc:	88 e7       	ldi	r24, 0x78	; 120
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	b7 01       	movw	r22, r14
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <vfprintf+0x366>
    16c4:	82 2f       	mov	r24, r18
    16c6:	86 78       	andi	r24, 0x86	; 134
    16c8:	51 f0       	breq	.+20     	; 0x16de <vfprintf+0x368>
    16ca:	21 fd       	sbrc	r18, 1
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfprintf+0x35c>
    16ce:	80 e2       	ldi	r24, 0x20	; 32
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <vfprintf+0x35e>
    16d2:	8b e2       	ldi	r24, 0x2B	; 43
    16d4:	27 fd       	sbrc	r18, 7
    16d6:	8d e2       	ldi	r24, 0x2D	; 45
    16d8:	b7 01       	movw	r22, r14
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	50 d0       	rcall	.+160    	; 0x177e <fputc>
    16de:	a5 14       	cp	r10, r5
    16e0:	30 f4       	brcc	.+12     	; 0x16ee <vfprintf+0x378>
    16e2:	b7 01       	movw	r22, r14
    16e4:	80 e3       	ldi	r24, 0x30	; 48
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	4a d0       	rcall	.+148    	; 0x177e <fputc>
    16ea:	5a 94       	dec	r5
    16ec:	f8 cf       	rjmp	.-16     	; 0x16de <vfprintf+0x368>
    16ee:	aa 94       	dec	r10
    16f0:	f4 01       	movw	r30, r8
    16f2:	ea 0d       	add	r30, r10
    16f4:	f1 1d       	adc	r31, r1
    16f6:	80 81       	ld	r24, Z
    16f8:	b7 01       	movw	r22, r14
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	40 d0       	rcall	.+128    	; 0x177e <fputc>
    16fe:	a1 10       	cpse	r10, r1
    1700:	f6 cf       	rjmp	.-20     	; 0x16ee <vfprintf+0x378>
    1702:	33 20       	and	r3, r3
    1704:	09 f4       	brne	.+2      	; 0x1708 <vfprintf+0x392>
    1706:	5d ce       	rjmp	.-838    	; 0x13c2 <vfprintf+0x4c>
    1708:	b7 01       	movw	r22, r14
    170a:	80 e2       	ldi	r24, 0x20	; 32
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	37 d0       	rcall	.+110    	; 0x177e <fputc>
    1710:	3a 94       	dec	r3
    1712:	f7 cf       	rjmp	.-18     	; 0x1702 <vfprintf+0x38c>
    1714:	f7 01       	movw	r30, r14
    1716:	86 81       	ldd	r24, Z+6	; 0x06
    1718:	97 81       	ldd	r25, Z+7	; 0x07
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <vfprintf+0x3aa>
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	9f ef       	ldi	r25, 0xFF	; 255
    1720:	2c 96       	adiw	r28, 0x0c	; 12
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	9f 90       	pop	r9
    1742:	8f 90       	pop	r8
    1744:	7f 90       	pop	r7
    1746:	6f 90       	pop	r6
    1748:	5f 90       	pop	r5
    174a:	4f 90       	pop	r4
    174c:	3f 90       	pop	r3
    174e:	2f 90       	pop	r2
    1750:	08 95       	ret

00001752 <strnlen_P>:
    1752:	fc 01       	movw	r30, r24
    1754:	05 90       	lpm	r0, Z+
    1756:	61 50       	subi	r22, 0x01	; 1
    1758:	70 40       	sbci	r23, 0x00	; 0
    175a:	01 10       	cpse	r0, r1
    175c:	d8 f7       	brcc	.-10     	; 0x1754 <strnlen_P+0x2>
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	8e 0f       	add	r24, r30
    1764:	9f 1f       	adc	r25, r31
    1766:	08 95       	ret

00001768 <strnlen>:
    1768:	fc 01       	movw	r30, r24
    176a:	61 50       	subi	r22, 0x01	; 1
    176c:	70 40       	sbci	r23, 0x00	; 0
    176e:	01 90       	ld	r0, Z+
    1770:	01 10       	cpse	r0, r1
    1772:	d8 f7       	brcc	.-10     	; 0x176a <strnlen+0x2>
    1774:	80 95       	com	r24
    1776:	90 95       	com	r25
    1778:	8e 0f       	add	r24, r30
    177a:	9f 1f       	adc	r25, r31
    177c:	08 95       	ret

0000177e <fputc>:
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	18 2f       	mov	r17, r24
    1788:	09 2f       	mov	r16, r25
    178a:	eb 01       	movw	r28, r22
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	81 fd       	sbrc	r24, 1
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <fputc+0x1a>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	20 c0       	rjmp	.+64     	; 0x17d8 <fputc+0x5a>
    1798:	82 ff       	sbrs	r24, 2
    179a:	10 c0       	rjmp	.+32     	; 0x17bc <fputc+0x3e>
    179c:	4e 81       	ldd	r20, Y+6	; 0x06
    179e:	5f 81       	ldd	r21, Y+7	; 0x07
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	42 17       	cp	r20, r18
    17a6:	53 07       	cpc	r21, r19
    17a8:	7c f4       	brge	.+30     	; 0x17c8 <fputc+0x4a>
    17aa:	e8 81       	ld	r30, Y
    17ac:	f9 81       	ldd	r31, Y+1	; 0x01
    17ae:	9f 01       	movw	r18, r30
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	39 83       	std	Y+1, r19	; 0x01
    17b6:	28 83       	st	Y, r18
    17b8:	10 83       	st	Z, r17
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <fputc+0x4a>
    17bc:	e8 85       	ldd	r30, Y+8	; 0x08
    17be:	f9 85       	ldd	r31, Y+9	; 0x09
    17c0:	81 2f       	mov	r24, r17
    17c2:	09 95       	icall
    17c4:	89 2b       	or	r24, r25
    17c6:	29 f7       	brne	.-54     	; 0x1792 <fputc+0x14>
    17c8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ca:	3f 81       	ldd	r19, Y+7	; 0x07
    17cc:	2f 5f       	subi	r18, 0xFF	; 255
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	3f 83       	std	Y+7, r19	; 0x07
    17d2:	2e 83       	std	Y+6, r18	; 0x06
    17d4:	81 2f       	mov	r24, r17
    17d6:	90 2f       	mov	r25, r16
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <__ultoa_invert>:
    17e2:	fa 01       	movw	r30, r20
    17e4:	aa 27       	eor	r26, r26
    17e6:	28 30       	cpi	r18, 0x08	; 8
    17e8:	51 f1       	breq	.+84     	; 0x183e <__ultoa_invert+0x5c>
    17ea:	20 31       	cpi	r18, 0x10	; 16
    17ec:	81 f1       	breq	.+96     	; 0x184e <__ultoa_invert+0x6c>
    17ee:	e8 94       	clt
    17f0:	6f 93       	push	r22
    17f2:	6e 7f       	andi	r22, 0xFE	; 254
    17f4:	6e 5f       	subi	r22, 0xFE	; 254
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	af 4f       	sbci	r26, 0xFF	; 255
    17fe:	b1 e0       	ldi	r27, 0x01	; 1
    1800:	3e d0       	rcall	.+124    	; 0x187e <__ultoa_invert+0x9c>
    1802:	b4 e0       	ldi	r27, 0x04	; 4
    1804:	3c d0       	rcall	.+120    	; 0x187e <__ultoa_invert+0x9c>
    1806:	67 0f       	add	r22, r23
    1808:	78 1f       	adc	r23, r24
    180a:	89 1f       	adc	r24, r25
    180c:	9a 1f       	adc	r25, r26
    180e:	a1 1d       	adc	r26, r1
    1810:	68 0f       	add	r22, r24
    1812:	79 1f       	adc	r23, r25
    1814:	8a 1f       	adc	r24, r26
    1816:	91 1d       	adc	r25, r1
    1818:	a1 1d       	adc	r26, r1
    181a:	6a 0f       	add	r22, r26
    181c:	71 1d       	adc	r23, r1
    181e:	81 1d       	adc	r24, r1
    1820:	91 1d       	adc	r25, r1
    1822:	a1 1d       	adc	r26, r1
    1824:	20 d0       	rcall	.+64     	; 0x1866 <__ultoa_invert+0x84>
    1826:	09 f4       	brne	.+2      	; 0x182a <__ultoa_invert+0x48>
    1828:	68 94       	set
    182a:	3f 91       	pop	r19
    182c:	2a e0       	ldi	r18, 0x0A	; 10
    182e:	26 9f       	mul	r18, r22
    1830:	11 24       	eor	r1, r1
    1832:	30 19       	sub	r19, r0
    1834:	30 5d       	subi	r19, 0xD0	; 208
    1836:	31 93       	st	Z+, r19
    1838:	de f6       	brtc	.-74     	; 0x17f0 <__ultoa_invert+0xe>
    183a:	cf 01       	movw	r24, r30
    183c:	08 95       	ret
    183e:	46 2f       	mov	r20, r22
    1840:	47 70       	andi	r20, 0x07	; 7
    1842:	40 5d       	subi	r20, 0xD0	; 208
    1844:	41 93       	st	Z+, r20
    1846:	b3 e0       	ldi	r27, 0x03	; 3
    1848:	0f d0       	rcall	.+30     	; 0x1868 <__ultoa_invert+0x86>
    184a:	c9 f7       	brne	.-14     	; 0x183e <__ultoa_invert+0x5c>
    184c:	f6 cf       	rjmp	.-20     	; 0x183a <__ultoa_invert+0x58>
    184e:	46 2f       	mov	r20, r22
    1850:	4f 70       	andi	r20, 0x0F	; 15
    1852:	40 5d       	subi	r20, 0xD0	; 208
    1854:	4a 33       	cpi	r20, 0x3A	; 58
    1856:	18 f0       	brcs	.+6      	; 0x185e <__ultoa_invert+0x7c>
    1858:	49 5d       	subi	r20, 0xD9	; 217
    185a:	31 fd       	sbrc	r19, 1
    185c:	40 52       	subi	r20, 0x20	; 32
    185e:	41 93       	st	Z+, r20
    1860:	02 d0       	rcall	.+4      	; 0x1866 <__ultoa_invert+0x84>
    1862:	a9 f7       	brne	.-22     	; 0x184e <__ultoa_invert+0x6c>
    1864:	ea cf       	rjmp	.-44     	; 0x183a <__ultoa_invert+0x58>
    1866:	b4 e0       	ldi	r27, 0x04	; 4
    1868:	a6 95       	lsr	r26
    186a:	97 95       	ror	r25
    186c:	87 95       	ror	r24
    186e:	77 95       	ror	r23
    1870:	67 95       	ror	r22
    1872:	ba 95       	dec	r27
    1874:	c9 f7       	brne	.-14     	; 0x1868 <__ultoa_invert+0x86>
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 05       	cpc	r22, r1
    187a:	71 05       	cpc	r23, r1
    187c:	08 95       	ret
    187e:	9b 01       	movw	r18, r22
    1880:	ac 01       	movw	r20, r24
    1882:	0a 2e       	mov	r0, r26
    1884:	06 94       	lsr	r0
    1886:	57 95       	ror	r21
    1888:	47 95       	ror	r20
    188a:	37 95       	ror	r19
    188c:	27 95       	ror	r18
    188e:	ba 95       	dec	r27
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__ultoa_invert+0xa2>
    1892:	62 0f       	add	r22, r18
    1894:	73 1f       	adc	r23, r19
    1896:	84 1f       	adc	r24, r20
    1898:	95 1f       	adc	r25, r21
    189a:	a0 1d       	adc	r26, r0
    189c:	08 95       	ret

0000189e <_exit>:
    189e:	f8 94       	cli

000018a0 <__stop_program>:
    18a0:	ff cf       	rjmp	.-2      	; 0x18a0 <__stop_program>

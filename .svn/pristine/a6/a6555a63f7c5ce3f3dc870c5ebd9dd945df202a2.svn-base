
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000011bc  00001250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800120  00800120  00001270  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a612  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b4c  00000000  00000000  0000cafa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004041  00000000  00000000  0000f646  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f00  00000000  00000000  00013688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003db2  00000000  00000000  00014588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000068e9  00000000  00000000  0001833a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000718  00000000  00000000  0001ec23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	f6 c0       	rjmp	.+492    	; 0x1f2 <__bad_interrupt>
       6:	00 00       	nop
       8:	f4 c0       	rjmp	.+488    	; 0x1f2 <__bad_interrupt>
       a:	00 00       	nop
       c:	f2 c0       	rjmp	.+484    	; 0x1f2 <__bad_interrupt>
       e:	00 00       	nop
      10:	f0 c0       	rjmp	.+480    	; 0x1f2 <__bad_interrupt>
      12:	00 00       	nop
      14:	ee c0       	rjmp	.+476    	; 0x1f2 <__bad_interrupt>
      16:	00 00       	nop
      18:	ec c0       	rjmp	.+472    	; 0x1f2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e8 c0       	rjmp	.+464    	; 0x1f2 <__bad_interrupt>
      22:	00 00       	nop
      24:	e6 c0       	rjmp	.+460    	; 0x1f2 <__bad_interrupt>
      26:	00 00       	nop
      28:	70 c4       	rjmp	.+2272   	; 0x90a <__vector_10>
      2a:	00 00       	nop
      2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e0 c0       	rjmp	.+448    	; 0x1f2 <__bad_interrupt>
      32:	00 00       	nop
      34:	de c0       	rjmp	.+444    	; 0x1f2 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	dc c0       	rjmp	.+440    	; 0x1f2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	da c0       	rjmp	.+436    	; 0x1f2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d8 c0       	rjmp	.+432    	; 0x1f2 <__bad_interrupt>
      42:	00 00       	nop
      44:	d6 c0       	rjmp	.+428    	; 0x1f2 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	d4 c0       	rjmp	.+424    	; 0x1f2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d2 c0       	rjmp	.+420    	; 0x1f2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d0 c0       	rjmp	.+416    	; 0x1f2 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	ce c0       	rjmp	.+412    	; 0x1f2 <__bad_interrupt>
      56:	00 00       	nop
      58:	cc c0       	rjmp	.+408    	; 0x1f2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ca c0       	rjmp	.+404    	; 0x1f2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c8 c0       	rjmp	.+400    	; 0x1f2 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	c6 c0       	rjmp	.+396    	; 0x1f2 <__bad_interrupt>
      66:	00 00       	nop
      68:	c4 c0       	rjmp	.+392    	; 0x1f2 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	c2 c0       	rjmp	.+388    	; 0x1f2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c0 c0       	rjmp	.+384    	; 0x1f2 <__bad_interrupt>
      72:	00 00       	nop
      74:	be c0       	rjmp	.+380    	; 0x1f2 <__bad_interrupt>
      76:	00 00       	nop
      78:	bc c0       	rjmp	.+376    	; 0x1f2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ba c0       	rjmp	.+372    	; 0x1f2 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	b8 c0       	rjmp	.+368    	; 0x1f2 <__bad_interrupt>
      82:	00 00       	nop
      84:	b6 c0       	rjmp	.+364    	; 0x1f2 <__bad_interrupt>
      86:	00 00       	nop
      88:	b4 c0       	rjmp	.+360    	; 0x1f2 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	b2 c0       	rjmp	.+356    	; 0x1f2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b0 c0       	rjmp	.+352    	; 0x1f2 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	ae c0       	rjmp	.+348    	; 0x1f2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000000d4 <ManufacturerString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
      f2:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     112:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     122:	01 22 3a 00 07 05 83 03 08 00 05                    .":........

0000012d <DeviceDescriptor>:
     12d:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     13d:	00 01                                               ..

0000013f <KeyboardReport>:
     13f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     14f:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15f:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16f:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

0000017e <MouseReport>:
				ReportSize     -= 1;
				ReportData     += 1;
     17e:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18e:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     19e:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ae:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000001b8 <__ctors_end>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e2       	ldi	r29, 0x20	; 32
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	11 e0       	ldi	r17, 0x01	; 1
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	ec eb       	ldi	r30, 0xBC	; 188
     1cc:	f1 e1       	ldi	r31, 0x11	; 17
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	0d 92       	st	X+, r0
     1d8:	a0 32       	cpi	r26, 0x20	; 32
     1da:	b1 07       	cpc	r27, r17
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>

000001de <__do_clear_bss>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e2       	ldi	r26, 0x20	; 32
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	a8 33       	cpi	r26, 0x38	; 56
     1ea:	b1 07       	cpc	r27, r17
				break;
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	2e d0       	rcall	.+92     	; 0x24c <main>
     1f0:	e3 c7       	rjmp	.+4038   	; 0x11b8 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	06 cf       	rjmp	.-500    	; 0x0 <__vectors>

000001f4 <LEDs_SetAllLEDs>:
     1f4:	9b b1       	in	r25, 0x0b	; 11
     1f6:	9f 70       	andi	r25, 0x0F	; 15
     1f8:	98 2b       	or	r25, r24
     1fa:	9b b9       	out	0x0b, r25	; 11
     1fc:	08 95       	ret

000001fe <SetupHardware>:
     1fe:	84 b7       	in	r24, 0x34	; 52
     200:	87 7f       	andi	r24, 0xF7	; 247
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	84 bf       	out	0x34, r24	; 52
     204:	88 e1       	ldi	r24, 0x18	; 24
				break;
     206:	0f b6       	in	r0, 0x3f	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	f8 94       	cli
     20a:	80 93 60 00 	sts	0x0060, r24
     20e:	10 92 60 00 	sts	0x0060, r1
     212:	0f be       	out	0x3f, r0	; 63
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	80 e8       	ldi	r24, 0x80	; 128
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	80 93 61 00 	sts	0x0061, r24
     220:	90 93 61 00 	sts	0x0061, r25
     224:	0f be       	out	0x3f, r0	; 63
     226:	84 b1       	in	r24, 0x04	; 4
     228:	8f 71       	andi	r24, 0x1F	; 31
     22a:	84 b9       	out	0x04, r24	; 4
     22c:	8d b1       	in	r24, 0x0d	; 13
     22e:	8f 7c       	andi	r24, 0xCF	; 207
     230:	8d b9       	out	0x0d, r24	; 13
     232:	85 b1       	in	r24, 0x05	; 5
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	80 6e       	ori	r24, 0xE0	; 224
     236:	85 b9       	out	0x05, r24	; 5
     238:	8e b1       	in	r24, 0x0e	; 14
     23a:	80 63       	ori	r24, 0x30	; 48
     23c:	8e b9       	out	0x0e, r24	; 14
     23e:	8a b1       	in	r24, 0x0a	; 10
     240:	80 6f       	ori	r24, 0xF0	; 240
     242:	8a b9       	out	0x0a, r24	; 10
     244:	8b b1       	in	r24, 0x0b	; 11
     246:	8f 70       	andi	r24, 0x0F	; 15
     248:	8b b9       	out	0x0b, r24	; 11
     24a:	44 c3       	rjmp	.+1672   	; 0x8d4 <USB_Init>

0000024c <main>:
     24c:	d8 df       	rcall	.-80     	; 0x1fe <SetupHardware>
     24e:	80 e1       	ldi	r24, 0x10	; 16
     250:	d1 df       	rcall	.-94     	; 0x1f4 <LEDs_SetAllLEDs>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	78 94       	sei
     254:	80 e1       	ldi	r24, 0x10	; 16
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	d5 d6       	rcall	.+3498   	; 0x1004 <HID_Device_USBTask>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	91 e0       	ldi	r25, 0x01	; 1
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	d2 d6       	rcall	.+3492   	; 0x1004 <HID_Device_USBTask>
     260:	70 d5       	rcall	.+2784   	; 0xd42 <USB_USBTask>
     262:	f8 cf       	rjmp	.-16     	; 0x254 <main+0x8>

00000264 <EVENT_USB_Device_Connect>:
     264:	80 ea       	ldi	r24, 0xA0	; 160
     266:	c6 cf       	rjmp	.-116    	; 0x1f4 <LEDs_SetAllLEDs>

00000268 <EVENT_USB_Device_Disconnect>:
     268:	80 e1       	ldi	r24, 0x10	; 16
     26a:	c4 cf       	rjmp	.-120    	; 0x1f4 <LEDs_SetAllLEDs>

0000026c <EVENT_USB_Device_ConfigurationChanged>:
     26c:	cf 93       	push	r28
     26e:	80 e1       	ldi	r24, 0x10	; 16
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	91 e0       	ldi	r25, 0x01	; 1
				break;
     272:	b5 d6       	rcall	.+3434   	; 0xfde <HID_Device_ConfigureEndpoints>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	c8 2f       	mov	r28, r24
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	b1 d6       	rcall	.+3426   	; 0xfde <HID_Device_ConfigureEndpoints>
     27c:	90 91 e2 00 	lds	r25, 0x00E2
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	94 60       	ori	r25, 0x04	; 4
     282:	90 93 e2 00 	sts	0x00E2, r25

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	88 23       	and	r24, r24
     288:	21 f0       	breq	.+8      	; 0x292 <EVENT_USB_Device_ConfigurationChanged+0x26>
     28a:	cc 23       	and	r28, r28
     28c:	11 f0       	breq	.+4      	; 0x292 <EVENT_USB_Device_ConfigurationChanged+0x26>
     28e:	80 e6       	ldi	r24, 0x60	; 96
				break;
     290:	01 c0       	rjmp	.+2      	; 0x294 <EVENT_USB_Device_ConfigurationChanged+0x28>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	80 e9       	ldi	r24, 0x90	; 144
     294:	cf 91       	pop	r28
     296:	ae cf       	rjmp	.-164    	; 0x1f4 <LEDs_SetAllLEDs>

00000298 <EVENT_USB_Device_ControlRequest>:
     298:	80 e1       	ldi	r24, 0x10	; 16
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	6e d5       	rcall	.+2780   	; 0xd7a <HID_Device_ProcessControlRequest>
     29e:	80 e0       	ldi	r24, 0x00	; 0
				break;
     2a0:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	6b c5       	rjmp	.+2774   	; 0xd7a <HID_Device_ProcessControlRequest>

000002a4 <EVENT_USB_Device_StartOfFrame>:
     2a4:	80 91 1e 01 	lds	r24, 0x011E
     2a8:	90 91 1f 01 	lds	r25, 0x011F
				break;
     2ac:	00 97       	sbiw	r24, 0x00	; 0

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	29 f0       	breq	.+10     	; 0x2ba <EVENT_USB_Device_StartOfFrame+0x16>
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	90 93 1f 01 	sts	0x011F, r25
     2b6:	80 93 1e 01 	sts	0x011E, r24
     2ba:	80 91 0e 01 	lds	r24, 0x010E
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	90 91 0f 01 	lds	r25, 0x010F
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	29 f0       	breq	.+10     	; 0x2d0 <EVENT_USB_Device_StartOfFrame+0x2c>
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	90 93 0f 01 	sts	0x010F, r25
				break;
     2cc:	80 93 0e 01 	sts	0x010E, r24
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d0:	08 95       	ret

000002d2 <CALLBACK_HID_Device_CreateHIDReport>:
     2d2:	0f 93       	push	r16
				break;
     2d4:	1f 93       	push	r17

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	f9 01       	movw	r30, r18
     2d8:	d8 01       	movw	r26, r16
     2da:	33 b1       	in	r19, 0x03	; 3

				if (ParserData->UsingReportIDs)
     2dc:	2c b1       	in	r18, 0x0c	; 12
     2de:	20 95       	com	r18
     2e0:	20 73       	andi	r18, 0x30	; 48
     2e2:	26 95       	lsr	r18
     2e4:	30 95       	com	r19
     2e6:	30 7e       	andi	r19, 0xE0	; 224
     2e8:	23 2b       	or	r18, r19
     2ea:	3c b1       	in	r19, 0x0c	; 12
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	30 95       	com	r19
     2ee:	34 70       	andi	r19, 0x04	; 4
     2f0:	80 51       	subi	r24, 0x10	; 16
     2f2:	91 40       	sbci	r25, 0x01	; 1
     2f4:	e9 f4       	brne	.+58     	; 0x330 <CALLBACK_HID_Device_CreateHIDReport+0x5e>
     2f6:	33 23       	and	r19, r19
     2f8:	c1 f1       	breq	.+112    	; 0x36a <CALLBACK_HID_Device_CreateHIDReport+0x98>
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	80 83       	st	Z, r24
     2fe:	27 ff       	sbrs	r18, 7
     300:	02 c0       	rjmp	.+4      	; 0x306 <CALLBACK_HID_Device_CreateHIDReport+0x34>
     302:	84 e0       	ldi	r24, 0x04	; 4
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	03 c0       	rjmp	.+6      	; 0x30c <CALLBACK_HID_Device_CreateHIDReport+0x3a>
     306:	24 ff       	sbrs	r18, 4
     308:	02 c0       	rjmp	.+4      	; 0x30e <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	82 83       	std	Z+2, r24	; 0x02
     30e:	26 ff       	sbrs	r18, 6
     310:	02 c0       	rjmp	.+4      	; 0x316 <CALLBACK_HID_Device_CreateHIDReport+0x44>
     312:	86 e0       	ldi	r24, 0x06	; 6
     314:	03 c0       	rjmp	.+6      	; 0x31c <CALLBACK_HID_Device_CreateHIDReport+0x4a>
     316:	23 ff       	sbrs	r18, 3
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	02 c0       	rjmp	.+4      	; 0x31e <CALLBACK_HID_Device_CreateHIDReport+0x4c>
     31a:	87 e0       	ldi	r24, 0x07	; 7
     31c:	82 83       	std	Z+2, r24	; 0x02
     31e:	25 ff       	sbrs	r18, 5
     320:	02 c0       	rjmp	.+4      	; 0x326 <CALLBACK_HID_Device_CreateHIDReport+0x54>
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	82 83       	std	Z+2, r24	; 0x02
     326:	88 e0       	ldi	r24, 0x08	; 8
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	8d 93       	st	X+, r24
     32c:	9c 93       	st	X, r25
     32e:	1d c0       	rjmp	.+58     	; 0x36a <CALLBACK_HID_Device_CreateHIDReport+0x98>
     330:	31 11       	cpse	r19, r1
     332:	1b c0       	rjmp	.+54     	; 0x36a <CALLBACK_HID_Device_CreateHIDReport+0x98>
     334:	27 ff       	sbrs	r18, 7
     336:	02 c0       	rjmp	.+4      	; 0x33c <CALLBACK_HID_Device_CreateHIDReport+0x6a>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	03 c0       	rjmp	.+6      	; 0x342 <CALLBACK_HID_Device_CreateHIDReport+0x70>
     33c:	24 ff       	sbrs	r18, 4
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	02 c0       	rjmp	.+4      	; 0x344 <CALLBACK_HID_Device_CreateHIDReport+0x72>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	82 83       	std	Z+2, r24	; 0x02
     344:	26 ff       	sbrs	r18, 6
     346:	02 c0       	rjmp	.+4      	; 0x34c <CALLBACK_HID_Device_CreateHIDReport+0x7a>
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	03 c0       	rjmp	.+6      	; 0x352 <CALLBACK_HID_Device_CreateHIDReport+0x80>
     34c:	23 ff       	sbrs	r18, 3
     34e:	02 c0       	rjmp	.+4      	; 0x354 <CALLBACK_HID_Device_CreateHIDReport+0x82>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	81 83       	std	Z+1, r24	; 0x01
     354:	25 ff       	sbrs	r18, 5
     356:	03 c0       	rjmp	.+6      	; 0x35e <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     358:	80 81       	ld	r24, Z
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	80 83       	st	Z, r24
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	8d 93       	st	X+, r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	9c 93       	st	X, r25
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	01 c0       	rjmp	.+2      	; 0x36c <CALLBACK_HID_Device_CreateHIDReport+0x9a>
     36a:	80 e0       	ldi	r24, 0x00	; 0
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	08 95       	ret

00000372 <CALLBACK_HID_Device_ProcessHIDReport>:
     372:	80 51       	subi	r24, 0x10	; 16
     374:	91 40       	sbci	r25, 0x01	; 1
     376:	61 f4       	brne	.+24     	; 0x390 <CALLBACK_HID_Device_ProcessHIDReport+0x1e>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	f9 01       	movw	r30, r18
     37a:	90 81       	ld	r25, Z
     37c:	90 fd       	sbrc	r25, 0
     37e:	02 c0       	rjmp	.+4      	; 0x384 <CALLBACK_HID_Device_ProcessHIDReport+0x12>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <CALLBACK_HID_Device_ProcessHIDReport+0x14>
     384:	80 e1       	ldi	r24, 0x10	; 16
     386:	91 fd       	sbrc	r25, 1
				break;
     388:	80 68       	ori	r24, 0x80	; 128

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	92 fd       	sbrc	r25, 2
     38c:	80 64       	ori	r24, 0x40	; 64
     38e:	32 cf       	rjmp	.-412    	; 0x1f4 <LEDs_SetAllLEDs>
     390:	08 95       	ret

00000392 <CALLBACK_USB_GetDescriptor>:
     392:	29 2f       	mov	r18, r25
     394:	33 27       	eor	r19, r19
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	23 30       	cpi	r18, 0x03	; 3
     398:	31 05       	cpc	r19, r1
     39a:	99 f0       	breq	.+38     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x30>
     39c:	5c f4       	brge	.+22     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x22>
     39e:	21 30       	cpi	r18, 0x01	; 1
     3a0:	31 05       	cpc	r19, r1
     3a2:	b1 f1       	breq	.+108    	; 0x410 <CALLBACK_USB_GetDescriptor+0x7e>
     3a4:	22 30       	cpi	r18, 0x02	; 2
     3a6:	31 05       	cpc	r19, r1
     3a8:	c1 f5       	brne	.+112    	; 0x41a <CALLBACK_USB_GetDescriptor+0x88>
     3aa:	8b e3       	ldi	r24, 0x3B	; 59
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	22 ef       	ldi	r18, 0xF2	; 242
				break;
     3b0:	30 e0       	ldi	r19, 0x00	; 0
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	41 c0       	rjmp	.+130    	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     3b4:	21 32       	cpi	r18, 0x21	; 33
     3b6:	31 05       	cpc	r19, r1
     3b8:	c9 f0       	breq	.+50     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x5a>
     3ba:	22 32       	cpi	r18, 0x22	; 34
     3bc:	31 05       	cpc	r19, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	f9 f0       	breq	.+62     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x6c>
     3c0:	2c c0       	rjmp	.+88     	; 0x41a <CALLBACK_USB_GetDescriptor+0x88>
     3c2:	99 27       	eor	r25, r25
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	91 05       	cpc	r25, r1
     3c8:	41 f0       	breq	.+16     	; 0x3da <CALLBACK_USB_GetDescriptor+0x48>
     3ca:	82 30       	cpi	r24, 0x02	; 2
     3cc:	91 05       	cpc	r25, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	41 f0       	breq	.+16     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x4e>
     3d0:	89 2b       	or	r24, r25
     3d2:	19 f5       	brne	.+70     	; 0x41a <CALLBACK_USB_GetDescriptor+0x88>

					while (CurrCollectionPath->Parent != NULL)
     3d4:	ee ee       	ldi	r30, 0xEE	; 238
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <CALLBACK_USB_GetDescriptor+0x52>
     3da:	e4 ed       	ldi	r30, 0xD4	; 212
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <CALLBACK_USB_GetDescriptor+0x52>
     3e0:	e8 e9       	ldi	r30, 0x98	; 152
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	84 91       	lpm	r24, Z
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	9f 01       	movw	r18, r30
     3ea:	25 c0       	rjmp	.+74     	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     3ec:	66 23       	and	r22, r22
     3ee:	d1 f0       	breq	.+52     	; 0x424 <CALLBACK_USB_GetDescriptor+0x92>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	61 30       	cpi	r22, 0x01	; 1
     3f2:	99 f4       	brne	.+38     	; 0x41a <CALLBACK_USB_GetDescriptor+0x88>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	89 e0       	ldi	r24, 0x09	; 9
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	2d e1       	ldi	r18, 0x1D	; 29
     3fa:	31 e0       	ldi	r19, 0x01	; 1
     3fc:	1c c0       	rjmp	.+56     	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     3fe:	66 23       	and	r22, r22
     400:	b1 f0       	breq	.+44     	; 0x42e <CALLBACK_USB_GetDescriptor+0x9c>
     402:	61 30       	cpi	r22, 0x01	; 1
     404:	51 f4       	brne	.+20     	; 0x41a <CALLBACK_USB_GetDescriptor+0x88>
     406:	8a e3       	ldi	r24, 0x3A	; 58
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2e e7       	ldi	r18, 0x7E	; 126
     40c:	31 e0       	ldi	r19, 0x01	; 1
     40e:	13 c0       	rjmp	.+38     	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     410:	82 e1       	ldi	r24, 0x12	; 18
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	2d e2       	ldi	r18, 0x2D	; 45
     416:	31 e0       	ldi	r19, 0x01	; 1
     418:	0e c0       	rjmp	.+28     	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	20 e0       	ldi	r18, 0x00	; 0

				if (UsageListSize)
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	09 c0       	rjmp	.+18     	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     424:	89 e0       	ldi	r24, 0x09	; 9
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	24 e0       	ldi	r18, 0x04	; 4
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	31 e0       	ldi	r19, 0x01	; 1
     42c:	04 c0       	rjmp	.+8      	; 0x436 <CALLBACK_USB_GetDescriptor+0xa4>
     42e:	8f e3       	ldi	r24, 0x3F	; 63
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	2f e3       	ldi	r18, 0x3F	; 63
     434:	31 e0       	ldi	r19, 0x01	; 1
     436:	fa 01       	movw	r30, r20
     438:	31 83       	std	Z+1, r19	; 0x01
     43a:	20 83       	st	Z, r18
     43c:	08 95       	ret

0000043e <Endpoint_Write_Stream_LE>:
     43e:	cf 92       	push	r12

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
					  UsageList[i - 1] = UsageList[i];
     44c:	df 93       	push	r29
     44e:	7c 01       	movw	r14, r24
     450:	8b 01       	movw	r16, r22
     452:	ea 01       	movw	r28, r20

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	ca d1       	rcall	.+916    	; 0x7ea <Endpoint_WaitUntilReady>
     456:	81 11       	cpse	r24, r1
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	31 c0       	rjmp	.+98     	; 0x4bc <Endpoint_Write_Stream_LE+0x7e>
     45a:	20 97       	sbiw	r28, 0x00	; 0
     45c:	31 f0       	breq	.+12     	; 0x46a <Endpoint_Write_Stream_LE+0x2c>
     45e:	88 81       	ld	r24, Y
     460:	99 81       	ldd	r25, Y+1	; 0x01
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	08 1b       	sub	r16, r24
     464:	19 0b       	sbc	r17, r25
     466:	e8 0e       	add	r14, r24
     468:	f9 1e       	adc	r15, r25
     46a:	c1 2c       	mov	r12, r1
     46c:	d1 2c       	mov	r13, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	01 15       	cp	r16, r1
     470:	11 05       	cpc	r17, r1
     472:	19 f1       	breq	.+70     	; 0x4ba <Endpoint_Write_Stream_LE+0x7c>
     474:	80 91 e8 00 	lds	r24, 0x00E8
     478:	85 fd       	sbrc	r24, 5
     47a:	14 c0       	rjmp	.+40     	; 0x4a4 <Endpoint_Write_Stream_LE+0x66>
     47c:	80 91 e8 00 	lds	r24, 0x00E8
     480:	8e 77       	andi	r24, 0x7E	; 126
     482:	80 93 e8 00 	sts	0x00E8, r24
     486:	5d d4       	rcall	.+2234   	; 0xd42 <USB_USBTask>
     488:	20 97       	sbiw	r28, 0x00	; 0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	41 f0       	breq	.+16     	; 0x49c <Endpoint_Write_Stream_LE+0x5e>
     48c:	88 81       	ld	r24, Y
     48e:	99 81       	ldd	r25, Y+1	; 0x01
     490:	8c 0d       	add	r24, r12
     492:	9d 1d       	adc	r25, r13
     494:	99 83       	std	Y+1, r25	; 0x01
     496:	88 83       	st	Y, r24
     498:	85 e0       	ldi	r24, 0x05	; 5
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	10 c0       	rjmp	.+32     	; 0x4bc <Endpoint_Write_Stream_LE+0x7e>
     49c:	a6 d1       	rcall	.+844    	; 0x7ea <Endpoint_WaitUntilReady>
     49e:	88 23       	and	r24, r24
     4a0:	31 f3       	breq	.-52     	; 0x46e <Endpoint_Write_Stream_LE+0x30>
     4a2:	0c c0       	rjmp	.+24     	; 0x4bc <Endpoint_Write_Stream_LE+0x7e>
     4a4:	f7 01       	movw	r30, r14
     4a6:	81 91       	ld	r24, Z+
     4a8:	7f 01       	movw	r14, r30
     4aa:	80 93 f1 00 	sts	0x00F1, r24
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	01 50       	subi	r16, 0x01	; 1
     4b0:	11 09       	sbc	r17, r1
     4b2:	ff ef       	ldi	r31, 0xFF	; 255
     4b4:	cf 1a       	sub	r12, r31
     4b6:	df 0a       	sbc	r13, r31
     4b8:	da cf       	rjmp	.-76     	; 0x46e <Endpoint_Write_Stream_LE+0x30>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <Endpoint_Write_Control_Stream_LE>:
     4ce:	20 91 36 01 	lds	r18, 0x0136
     4d2:	30 91 37 01 	lds	r19, 0x0137
     4d6:	26 17       	cp	r18, r22
     4d8:	37 07       	cpc	r19, r23
     4da:	48 f0       	brcs	.+18     	; 0x4ee <Endpoint_Write_Control_Stream_LE+0x20>
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	39 f4       	brne	.+14     	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x22>
     4e2:	20 91 e8 00 	lds	r18, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e6:	2e 77       	andi	r18, 0x7E	; 126
     4e8:	20 93 e8 00 	sts	0x00E8, r18
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x22>
     4ee:	b9 01       	movw	r22, r18
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	61 15       	cp	r22, r1
     4f6:	71 05       	cpc	r23, r1
     4f8:	99 f1       	breq	.+102    	; 0x560 <Endpoint_Write_Control_Stream_LE+0x92>
     4fa:	80 91 2f 01 	lds	r24, 0x012F
     4fe:	88 23       	and	r24, r24
     500:	e9 f1       	breq	.+122    	; 0x57c <Endpoint_Write_Control_Stream_LE+0xae>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	85 30       	cpi	r24, 0x05	; 5
     504:	e9 f1       	breq	.+122    	; 0x580 <Endpoint_Write_Control_Stream_LE+0xb2>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	80 91 e8 00 	lds	r24, 0x00E8
     50a:	83 fd       	sbrc	r24, 3
     50c:	3b c0       	rjmp	.+118    	; 0x584 <Endpoint_Write_Control_Stream_LE+0xb6>
     50e:	80 91 e8 00 	lds	r24, 0x00E8
     512:	82 ff       	sbrs	r24, 2
     514:	06 c0       	rjmp	.+12     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x54>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	80 91 e8 00 	lds	r24, 0x00E8
     51a:	82 ff       	sbrs	r24, 2
     51c:	24 c0       	rjmp	.+72     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x98>

					if (UsageListSize)
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	08 95       	ret
     522:	80 91 e8 00 	lds	r24, 0x00E8
     526:	80 ff       	sbrs	r24, 0
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	e5 cf       	rjmp	.-54     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x26>
     52a:	80 91 f2 00 	lds	r24, 0x00F2
     52e:	90 91 f3 00 	lds	r25, 0x00F3
     532:	61 15       	cp	r22, r1
     534:	71 05       	cpc	r23, r1
     536:	51 f0       	breq	.+20     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x7e>
     538:	88 30       	cpi	r24, 0x08	; 8
     53a:	91 05       	cpc	r25, r1
     53c:	38 f4       	brcc	.+14     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x7e>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	21 91       	ld	r18, Z+
     540:	20 93 f1 00 	sts	0x00F1, r18
     544:	61 50       	subi	r22, 0x01	; 1
     546:	71 09       	sbc	r23, r1
     548:	01 96       	adiw	r24, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];
     54a:	f3 cf       	rjmp	.-26     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x64>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	08 97       	sbiw	r24, 0x08	; 8
     550:	09 f0       	breq	.+2      	; 0x554 <Endpoint_Write_Control_Stream_LE+0x86>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	80 91 e8 00 	lds	r24, 0x00E8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	8e 77       	andi	r24, 0x7E	; 126
     55a:	80 93 e8 00 	sts	0x00E8, r24
     55e:	ca cf       	rjmp	.-108    	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x26>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	21 11       	cpse	r18, r1
     562:	cb cf       	rjmp	.-106    	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x2c>
     564:	d8 cf       	rjmp	.-80     	; 0x516 <Endpoint_Write_Control_Stream_LE+0x48>
     566:	80 91 2f 01 	lds	r24, 0x012F
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	88 23       	and	r24, r24
     56c:	39 f0       	breq	.+14     	; 0x57c <Endpoint_Write_Control_Stream_LE+0xae>
     56e:	85 30       	cpi	r24, 0x05	; 5
     570:	39 f0       	breq	.+14     	; 0x580 <Endpoint_Write_Control_Stream_LE+0xb2>
     572:	80 91 e8 00 	lds	r24, 0x00E8
     576:	83 ff       	sbrs	r24, 3
     578:	ce cf       	rjmp	.-100    	; 0x516 <Endpoint_Write_Control_Stream_LE+0x48>
     57a:	04 c0       	rjmp	.+8      	; 0x584 <Endpoint_Write_Control_Stream_LE+0xb6>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	08 95       	ret
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	08 95       	ret
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	08 95       	ret

00000588 <Endpoint_Read_Control_Stream_LE>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	61 15       	cp	r22, r1
     58a:	71 05       	cpc	r23, r1
     58c:	29 f4       	brne	.+10     	; 0x598 <Endpoint_Read_Control_Stream_LE+0x10>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	20 91 e8 00 	lds	r18, 0x00E8

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	2b 77       	andi	r18, 0x7B	; 123
     594:	20 93 e8 00 	sts	0x00E8, r18
     598:	61 15       	cp	r22, r1
     59a:	71 05       	cpc	r23, r1
     59c:	31 f1       	breq	.+76     	; 0x5ea <Endpoint_Read_Control_Stream_LE+0x62>
     59e:	20 91 2f 01 	lds	r18, 0x012F
     5a2:	22 23       	and	r18, r18
     5a4:	59 f1       	breq	.+86     	; 0x5fc <Endpoint_Read_Control_Stream_LE+0x74>
     5a6:	25 30       	cpi	r18, 0x05	; 5
     5a8:	59 f1       	breq	.+86     	; 0x600 <Endpoint_Read_Control_Stream_LE+0x78>
     5aa:	20 91 e8 00 	lds	r18, 0x00E8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	23 fd       	sbrc	r18, 3
     5b0:	21 c0       	rjmp	.+66     	; 0x5f4 <Endpoint_Read_Control_Stream_LE+0x6c>
     5b2:	20 91 e8 00 	lds	r18, 0x00E8
     5b6:	22 ff       	sbrs	r18, 2
     5b8:	f2 cf       	rjmp	.-28     	; 0x59e <Endpoint_Read_Control_Stream_LE+0x16>
     5ba:	fc 01       	movw	r30, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	cf 01       	movw	r24, r30
     5be:	20 91 f2 00 	lds	r18, 0x00F2
     5c2:	30 91 f3 00 	lds	r19, 0x00F3
     5c6:	23 2b       	or	r18, r19
     5c8:	11 f3       	breq	.-60     	; 0x58e <Endpoint_Read_Control_Stream_LE+0x6>
     5ca:	80 91 f1 00 	lds	r24, 0x00F1
     5ce:	81 93       	st	Z+, r24
     5d0:	cf 01       	movw	r24, r30
     5d2:	61 50       	subi	r22, 0x01	; 1
     5d4:	71 09       	sbc	r23, r1
     5d6:	61 15       	cp	r22, r1
     5d8:	71 05       	cpc	r23, r1
     5da:	81 f7       	brne	.-32     	; 0x5bc <Endpoint_Read_Control_Stream_LE+0x34>
     5dc:	d8 cf       	rjmp	.-80     	; 0x58e <Endpoint_Read_Control_Stream_LE+0x6>
     5de:	80 91 2f 01 	lds	r24, 0x012F
     5e2:	88 23       	and	r24, r24
     5e4:	59 f0       	breq	.+22     	; 0x5fc <Endpoint_Read_Control_Stream_LE+0x74>
     5e6:	85 30       	cpi	r24, 0x05	; 5
     5e8:	59 f0       	breq	.+22     	; 0x600 <Endpoint_Read_Control_Stream_LE+0x78>
     5ea:	80 91 e8 00 	lds	r24, 0x00E8
     5ee:	80 ff       	sbrs	r24, 0
     5f0:	f6 cf       	rjmp	.-20     	; 0x5de <Endpoint_Read_Control_Stream_LE+0x56>
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <Endpoint_Read_Control_Stream_LE+0x70>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	08 95       	ret
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	08 95       	ret
     5fc:	82 e0       	ldi	r24, 0x02	; 2
					  return HID_PARSE_InsufficientReportItems;
     5fe:	08 95       	ret
     600:	83 e0       	ldi	r24, 0x03	; 3

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	08 95       	ret

00000604 <Endpoint_Write_Control_PStream_LE>:
     604:	20 91 36 01 	lds	r18, 0x0136
     608:	30 91 37 01 	lds	r19, 0x0137
     60c:	26 17       	cp	r18, r22
     60e:	37 07       	cpc	r19, r23
     610:	48 f0       	brcs	.+18     	; 0x624 <Endpoint_Write_Control_PStream_LE+0x20>
     612:	61 15       	cp	r22, r1
     614:	71 05       	cpc	r23, r1
     616:	39 f4       	brne	.+14     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x22>
     618:	20 91 e8 00 	lds	r18, 0x00E8
     61c:	2e 77       	andi	r18, 0x7E	; 126
     61e:	20 93 e8 00 	sts	0x00E8, r18
     622:	01 c0       	rjmp	.+2      	; 0x626 <Endpoint_Write_Control_PStream_LE+0x22>
     624:	b9 01       	movw	r22, r18
     626:	fc 01       	movw	r30, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	61 15       	cp	r22, r1
     62c:	71 05       	cpc	r23, r1
     62e:	b1 f1       	breq	.+108    	; 0x69c <Endpoint_Write_Control_PStream_LE+0x98>
     630:	80 91 2f 01 	lds	r24, 0x012F
     634:	88 23       	and	r24, r24
     636:	09 f4       	brne	.+2      	; 0x63a <Endpoint_Write_Control_PStream_LE+0x36>
     638:	3f c0       	rjmp	.+126    	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0xb4>
     63a:	85 30       	cpi	r24, 0x05	; 5
     63c:	09 f4       	brne	.+2      	; 0x640 <Endpoint_Write_Control_PStream_LE+0x3c>
     63e:	3e c0       	rjmp	.+124    	; 0x6bc <Endpoint_Write_Control_PStream_LE+0xb8>
     640:	80 91 e8 00 	lds	r24, 0x00E8
     644:	83 fd       	sbrc	r24, 3
     646:	3c c0       	rjmp	.+120    	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0xbc>
     648:	80 91 e8 00 	lds	r24, 0x00E8
     64c:	82 ff       	sbrs	r24, 2
     64e:	06 c0       	rjmp	.+12     	; 0x65c <Endpoint_Write_Control_PStream_LE+0x58>
     650:	80 91 e8 00 	lds	r24, 0x00E8
     654:	82 ff       	sbrs	r24, 2
     656:	25 c0       	rjmp	.+74     	; 0x6a2 <Endpoint_Write_Control_PStream_LE+0x9e>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	08 95       	ret
     65c:	80 91 e8 00 	lds	r24, 0x00E8
     660:	80 ff       	sbrs	r24, 0
     662:	e3 cf       	rjmp	.-58     	; 0x62a <Endpoint_Write_Control_PStream_LE+0x26>
     664:	80 91 f2 00 	lds	r24, 0x00F2
     668:	90 91 f3 00 	lds	r25, 0x00F3
     66c:	61 15       	cp	r22, r1
     66e:	71 05       	cpc	r23, r1
     670:	59 f0       	breq	.+22     	; 0x688 <Endpoint_Write_Control_PStream_LE+0x84>
     672:	88 30       	cpi	r24, 0x08	; 8
     674:	91 05       	cpc	r25, r1
     676:	40 f4       	brcc	.+16     	; 0x688 <Endpoint_Write_Control_PStream_LE+0x84>
     678:	24 91       	lpm	r18, Z
     67a:	20 93 f1 00 	sts	0x00F1, r18
     67e:	31 96       	adiw	r30, 0x01	; 1
     680:	61 50       	subi	r22, 0x01	; 1
     682:	71 09       	sbc	r23, r1
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	f2 cf       	rjmp	.-28     	; 0x66c <Endpoint_Write_Control_PStream_LE+0x68>
					  ParserData->TotalReportItems++;
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	08 97       	sbiw	r24, 0x08	; 8
     68c:	09 f0       	breq	.+2      	; 0x690 <Endpoint_Write_Control_PStream_LE+0x8c>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	80 91 e8 00 	lds	r24, 0x00E8

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     694:	8e 77       	andi	r24, 0x7E	; 126
     696:	80 93 e8 00 	sts	0x00E8, r24
     69a:	c7 cf       	rjmp	.-114    	; 0x62a <Endpoint_Write_Control_PStream_LE+0x26>
     69c:	21 11       	cpse	r18, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	c8 cf       	rjmp	.-112    	; 0x630 <Endpoint_Write_Control_PStream_LE+0x2c>
     6a0:	d7 cf       	rjmp	.-82     	; 0x650 <Endpoint_Write_Control_PStream_LE+0x4c>
     6a2:	80 91 2f 01 	lds	r24, 0x012F
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a6:	88 23       	and	r24, r24
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0xb4>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	39 f0       	breq	.+14     	; 0x6bc <Endpoint_Write_Control_PStream_LE+0xb8>
     6ae:	80 91 e8 00 	lds	r24, 0x00E8
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	83 ff       	sbrs	r24, 3
     6b4:	cd cf       	rjmp	.-102    	; 0x650 <Endpoint_Write_Control_PStream_LE+0x4c>
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0xbc>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	08 95       	ret
     6bc:	83 e0       	ldi	r24, 0x03	; 3

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	08 95       	ret
     6c0:	81 e0       	ldi	r24, 0x01	; 1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	08 95       	ret

000006c4 <Endpoint_ConfigureEndpoint_Prv>:
     6c4:	98 2f       	mov	r25, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	97 30       	cpi	r25, 0x07	; 7
     6c8:	58 f5       	brcc	.+86     	; 0x720 <Endpoint_ConfigureEndpoint_Prv+0x5c>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	90 93 e9 00 	sts	0x00E9, r25

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	98 17       	cp	r25, r24
     6d0:	39 f0       	breq	.+14     	; 0x6e0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	70 91 ec 00 	lds	r23, 0x00EC
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	20 91 ed 00 	lds	r18, 0x00ED

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6da:	50 91 f0 00 	lds	r21, 0x00F0
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <Endpoint_ConfigureEndpoint_Prv+0x22>
     6e0:	24 2f       	mov	r18, r20
     6e2:	76 2f       	mov	r23, r22
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	21 ff       	sbrs	r18, 1
     6e8:	19 c0       	rjmp	.+50     	; 0x71c <Endpoint_ConfigureEndpoint_Prv+0x58>
     6ea:	30 91 eb 00 	lds	r19, 0x00EB
     6ee:	3e 7f       	andi	r19, 0xFE	; 254
     6f0:	30 93 eb 00 	sts	0x00EB, r19
     6f4:	30 91 ed 00 	lds	r19, 0x00ED
     6f8:	3d 7f       	andi	r19, 0xFD	; 253
     6fa:	30 93 ed 00 	sts	0x00ED, r19
     6fe:	30 91 eb 00 	lds	r19, 0x00EB
     702:	31 60       	ori	r19, 0x01	; 1
     704:	30 93 eb 00 	sts	0x00EB, r19
     708:	70 93 ec 00 	sts	0x00EC, r23
		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
     70c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     710:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     714:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     718:	27 ff       	sbrs	r18, 7
     71a:	07 c0       	rjmp	.+14     	; 0x72a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     71c:	9f 5f       	subi	r25, 0xFF	; 255
     71e:	d3 cf       	rjmp	.-90     	; 0x6c6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     720:	8f 70       	andi	r24, 0x0F	; 15
     722:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     72a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     72c:	08 95       	ret

0000072e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	06 2f       	mov	r16, r22
     738:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     73a:	10 e0       	ldi	r17, 0x00	; 0
     73c:	10 17       	cp	r17, r16
     73e:	71 f1       	breq	.+92     	; 0x79c <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
     740:	98 81       	ld	r25, Y
     742:	99 23       	and	r25, r25
     744:	41 f1       	breq	.+80     	; 0x796 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     746:	2c 81       	ldd	r18, Y+4	; 0x04
     748:	e9 81       	ldd	r30, Y+1	; 0x01
     74a:	fa 81       	ldd	r31, Y+2	; 0x02
     74c:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     74e:	89 2f       	mov	r24, r25
     750:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     752:	87 30       	cpi	r24, 0x07	; 7
     754:	10 f0       	brcs	.+4      	; 0x75a <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	22 c0       	rjmp	.+68     	; 0x79e <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     75a:	22 30       	cpi	r18, 0x02	; 2
     75c:	10 f0       	brcs	.+4      	; 0x762 <Endpoint_ConfigureEndpointTable+0x34>
     75e:	56 e0       	ldi	r21, 0x06	; 6
     760:	01 c0       	rjmp	.+2      	; 0x764 <Endpoint_ConfigureEndpointTable+0x36>
     762:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     764:	28 e0       	ldi	r18, 0x08	; 8
     766:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     768:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     76a:	2e 17       	cp	r18, r30
     76c:	3f 07       	cpc	r19, r31
     76e:	20 f4       	brcc	.+8      	; 0x778 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     770:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	f9 cf       	rjmp	.-14     	; 0x76a <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     778:	42 95       	swap	r20
     77a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     77c:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     77e:	69 2f       	mov	r22, r25
     780:	66 1f       	adc	r22, r22
     782:	66 27       	eor	r22, r22
     784:	66 1f       	adc	r22, r22
     786:	90 e4       	ldi	r25, 0x40	; 64
     788:	79 9f       	mul	r23, r25
     78a:	90 01       	movw	r18, r0
     78c:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     78e:	62 2b       	or	r22, r18
     790:	99 df       	rcall	.-206    	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv>
     792:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     794:	01 f3       	breq	.-64     	; 0x756 <Endpoint_ConfigureEndpointTable+0x28>
     796:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     798:	25 96       	adiw	r28, 0x05	; 5
     79a:	d0 cf       	rjmp	.-96     	; 0x73c <Endpoint_ConfigureEndpointTable+0xe>
     79c:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     79e:	df 91       	pop	r29
}
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	08 95       	ret

000007a8 <Endpoint_ClearStatusStage>:
     7a8:	80 91 30 01 	lds	r24, 0x0130
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7ac:	87 fd       	sbrc	r24, 7
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7b4:	80 ff       	sbrs	r24, 0
     7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <Endpoint_ClearStatusStage+0x2c>
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7ba:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7be:	82 fd       	sbrc	r24, 2
     7c0:	05 c0       	rjmp	.+10     	; 0x7cc <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7c2:	80 91 2f 01 	lds	r24, 0x012F
     7c6:	81 11       	cpse	r24, r1
     7c8:	f8 cf       	rjmp	.-16     	; 0x7ba <Endpoint_ClearStatusStage+0x12>
     7ca:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7cc:	80 91 e8 00 	lds	r24, 0x00E8
     7d0:	8b 77       	andi	r24, 0x7B	; 123
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7d4:	80 91 2f 01 	lds	r24, 0x012F
     7d8:	81 11       	cpse	r24, r1
     7da:	ea cf       	rjmp	.-44     	; 0x7b0 <Endpoint_ClearStatusStage+0x8>
     7dc:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7de:	80 91 e8 00 	lds	r24, 0x00E8
     7e2:	8e 77       	andi	r24, 0x7E	; 126
     7e4:	80 93 e8 00 	sts	0x00E8, r24
     7e8:	08 95       	ret

000007ea <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7ea:	80 91 e4 00 	lds	r24, 0x00E4
     7ee:	90 91 e5 00 	lds	r25, 0x00E5
     7f2:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7f4:	20 91 ec 00 	lds	r18, 0x00EC
     7f8:	20 ff       	sbrs	r18, 0
     7fa:	21 c0       	rjmp	.+66     	; 0x83e <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fc:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     800:	20 fd       	sbrc	r18, 0
     802:	21 c0       	rjmp	.+66     	; 0x846 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     804:	20 91 2f 01 	lds	r18, 0x012F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     808:	22 23       	and	r18, r18
     80a:	89 f0       	breq	.+34     	; 0x82e <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     80c:	25 30       	cpi	r18, 0x05	; 5
     80e:	89 f0       	breq	.+34     	; 0x832 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     810:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     814:	25 fd       	sbrc	r18, 5
     816:	0f c0       	rjmp	.+30     	; 0x836 <Endpoint_WaitUntilReady+0x4c>
     818:	20 91 e4 00 	lds	r18, 0x00E4
     81c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     820:	28 17       	cp	r18, r24
     822:	39 07       	cpc	r19, r25
     824:	39 f3       	breq	.-50     	; 0x7f4 <Endpoint_WaitUntilReady+0xa>
     826:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     828:	41 f0       	breq	.+16     	; 0x83a <Endpoint_WaitUntilReady+0x50>
     82a:	c9 01       	movw	r24, r18
     82c:	e3 cf       	rjmp	.-58     	; 0x7f4 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     83e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     842:	22 ff       	sbrs	r18, 2
     844:	df cf       	rjmp	.-66     	; 0x804 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret

0000084a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     852:	4e d0       	rcall	.+156    	; 0x8f0 <USB_INT_DisableAllInterrupts>
     854:	55 d0       	rcall	.+170    	; 0x900 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     856:	c8 ed       	ldi	r28, 0xD8	; 216
     858:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     85a:	88 81       	ld	r24, Y
     85c:	8f 77       	andi	r24, 0x7F	; 127
     85e:	88 83       	st	Y, r24
     860:	88 81       	ld	r24, Y
     862:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     864:	88 83       	st	Y, r24
     866:	88 81       	ld	r24, Y
     868:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     86a:	88 83       	st	Y, r24
     86c:	e7 ed       	ldi	r30, 0xD7	; 215
     86e:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     870:	80 81       	ld	r24, Z
     872:	80 68       	ori	r24, 0x80	; 128
     874:	80 83       	st	Z, r24
     876:	19 bc       	out	0x29, r1	; 41
     878:	10 92 2f 01 	sts	0x012F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     87c:	10 92 2b 01 	sts	0x012B, r1
	USB_Device_ConfigurationNumber  = 0;
     880:	10 92 2d 01 	sts	0x012D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     884:	10 92 2c 01 	sts	0x012C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     888:	00 ee       	ldi	r16, 0xE0	; 224
     88a:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     88c:	f8 01       	movw	r30, r16
     88e:	80 81       	ld	r24, Z
     890:	8b 7f       	andi	r24, 0xFB	; 251
     892:	80 83       	st	Z, r24
     894:	88 81       	ld	r24, Y
     896:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     898:	88 83       	st	Y, r24
     89a:	42 e0       	ldi	r20, 0x02	; 2
     89c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	11 df       	rcall	.-478    	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv>
     8a2:	e1 ee       	ldi	r30, 0xE1	; 225
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	80 83       	st	Z, r24
     8ac:	e2 ee       	ldi	r30, 0xE2	; 226
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8b2:	81 60       	ori	r24, 0x01	; 1
     8b4:	80 83       	st	Z, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8bc:	f8 01       	movw	r30, r16
     8be:	80 81       	ld	r24, Z
     8c0:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8c2:	80 83       	st	Z, r24
     8c4:	88 81       	ld	r24, Y
     8c6:	80 61       	ori	r24, 0x10	; 16
     8c8:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8d0:	0f 91       	pop	r16
     8d2:	08 95       	ret

000008d4 <USB_Init>:
     8d4:	e8 ed       	ldi	r30, 0xD8	; 216
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     8da:	8f 7e       	andi	r24, 0xEF	; 239
     8dc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     8de:	e7 ed       	ldi	r30, 0xD7	; 215
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	81 60       	ori	r24, 0x01	; 1
     8e6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 2e 01 	sts	0x012E, r24

	USB_ResetInterface();
     8ee:	ad cf       	rjmp	.-166    	; 0x84a <USB_ResetInterface>

000008f0 <USB_INT_DisableAllInterrupts>:
     8f0:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	8c 7f       	andi	r24, 0xFC	; 252
     8f8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8fa:	10 92 e2 00 	sts	0x00E2, r1
     8fe:	08 95       	ret

00000900 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     900:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     904:	10 92 e1 00 	sts	0x00E1, r1
     908:	08 95       	ret

0000090a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	2f 93       	push	r18
     91a:	3f 93       	push	r19
     91c:	4f 93       	push	r20
     91e:	5f 93       	push	r21
     920:	6f 93       	push	r22
     922:	7f 93       	push	r23
     924:	8f 93       	push	r24
     926:	9f 93       	push	r25
     928:	af 93       	push	r26
     92a:	bf 93       	push	r27
     92c:	ef 93       	push	r30
     92e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     930:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     934:	82 ff       	sbrs	r24, 2
     936:	0a c0       	rjmp	.+20     	; 0x94c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     938:	80 91 e2 00 	lds	r24, 0x00E2
     93c:	82 ff       	sbrs	r24, 2
     93e:	06 c0       	rjmp	.+12     	; 0x94c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     940:	80 91 e1 00 	lds	r24, 0x00E1
     944:	8b 7f       	andi	r24, 0xFB	; 251
     946:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     94a:	ac dc       	rcall	.-1704   	; 0x2a4 <EVENT_USB_Device_StartOfFrame>
     94c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     950:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     952:	1d c0       	rjmp	.+58     	; 0x98e <__vector_10+0x84>
     954:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     958:	80 ff       	sbrs	r24, 0
     95a:	19 c0       	rjmp	.+50     	; 0x98e <__vector_10+0x84>
     95c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     960:	8e 7f       	andi	r24, 0xFE	; 254
     962:	80 93 da 00 	sts	0x00DA, r24
     966:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     96a:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     96c:	0c c0       	rjmp	.+24     	; 0x986 <__vector_10+0x7c>
     96e:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     970:	89 bd       	out	0x29, r24	; 41
     972:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     974:	89 bd       	out	0x29, r24	; 41
     976:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     978:	00 fe       	sbrs	r0, 0
     97a:	fd cf       	rjmp	.-6      	; 0x976 <__vector_10+0x6c>
     97c:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     97e:	80 93 2f 01 	sts	0x012F, r24
     982:	70 dc       	rcall	.-1824   	; 0x264 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     984:	04 c0       	rjmp	.+8      	; 0x98e <__vector_10+0x84>
     986:	19 bc       	out	0x29, r1	; 41
     988:	10 92 2f 01 	sts	0x012F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     98c:	6d dc       	rcall	.-1830   	; 0x268 <EVENT_USB_Device_Disconnect>
     98e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     992:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     994:	18 c0       	rjmp	.+48     	; 0x9c6 <__vector_10+0xbc>
     996:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     99a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     99c:	14 c0       	rjmp	.+40     	; 0x9c6 <__vector_10+0xbc>
     99e:	80 91 e2 00 	lds	r24, 0x00E2
     9a2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9a4:	80 93 e2 00 	sts	0x00E2, r24
     9a8:	80 91 e2 00 	lds	r24, 0x00E2
     9ac:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9ae:	80 93 e2 00 	sts	0x00E2, r24
     9b2:	80 91 d8 00 	lds	r24, 0x00D8
     9b6:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     9b8:	80 93 d8 00 	sts	0x00D8, r24
     9bc:	19 bc       	out	0x29, r1	; 41
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	80 93 2f 01 	sts	0x012F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     9c4:	bd d1       	rcall	.+890    	; 0xd40 <USB_Event_Stub>
     9c6:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     9ca:	84 ff       	sbrs	r24, 4
     9cc:	2f c0       	rjmp	.+94     	; 0xa2c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9ce:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9d2:	84 ff       	sbrs	r24, 4
     9d4:	2b c0       	rjmp	.+86     	; 0xa2c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9d6:	8c e0       	ldi	r24, 0x0C	; 12
     9d8:	89 bd       	out	0x29, r24	; 41
     9da:	8e e0       	ldi	r24, 0x0E	; 14
     9dc:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9de:	09 b4       	in	r0, 0x29	; 41
     9e0:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <__vector_10+0xd4>
     9e4:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9e8:	8f 7d       	andi	r24, 0xDF	; 223
     9ea:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9ee:	80 91 e1 00 	lds	r24, 0x00E1
     9f2:	8f 7e       	andi	r24, 0xEF	; 239
     9f4:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9f8:	80 91 e2 00 	lds	r24, 0x00E2
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a02:	80 91 e2 00 	lds	r24, 0x00E2
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a0c:	80 91 2b 01 	lds	r24, 0x012B
     a10:	88 23       	and	r24, r24
     a12:	11 f0       	breq	.+4      	; 0xa18 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <__vector_10+0x11c>
     a18:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     a1c:	87 ff       	sbrs	r24, 7
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 2f 01 	sts	0x012F, r24
     a2a:	8a d1       	rcall	.+788    	; 0xd40 <USB_Event_Stub>
     a2c:	80 91 e1 00 	lds	r24, 0x00E1
     a30:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a32:	22 c0       	rjmp	.+68     	; 0xa78 <__vector_10+0x16e>
     a34:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a38:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a3a:	1e c0       	rjmp	.+60     	; 0xa78 <__vector_10+0x16e>
     a3c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a40:	87 7f       	andi	r24, 0xF7	; 247
     a42:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	80 93 2f 01 	sts	0x012F, r24
     a4c:	10 92 2b 01 	sts	0x012B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a50:	80 91 e1 00 	lds	r24, 0x00E1
     a54:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     a56:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a5a:	80 91 e2 00 	lds	r24, 0x00E2
     a5e:	8e 7f       	andi	r24, 0xFE	; 254
     a60:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a64:	80 91 e2 00 	lds	r24, 0x00E2
     a68:	80 61       	ori	r24, 0x10	; 16
     a6a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a6e:	42 e0       	ldi	r20, 0x02	; 2
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	27 de       	rcall	.-946    	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv>
     a76:	64 d1       	rcall	.+712    	; 0xd40 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a78:	ff 91       	pop	r31
     a7a:	ef 91       	pop	r30
     a7c:	bf 91       	pop	r27
     a7e:	af 91       	pop	r26
     a80:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a82:	8f 91       	pop	r24
     a84:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a86:	6f 91       	pop	r22
     a88:	5f 91       	pop	r21
     a8a:	4f 91       	pop	r20
     a8c:	3f 91       	pop	r19
     a8e:	2f 91       	pop	r18
     a90:	0f 90       	pop	r0
     a92:	0b be       	out	0x3b, r0	; 59
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <USB_Device_ProcessControlRequest>:
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	aa 97       	sbiw	r28, 0x2a	; 42
     aaa:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	e0 e3       	ldi	r30, 0x30	; 48
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ab8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     abc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	e8 33       	cpi	r30, 0x38	; 56
     ac2:	f2 07       	cpc	r31, r18
     ac4:	c9 f7       	brne	.-14     	; 0xab8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     ac6:	e8 db       	rcall	.-2096   	; 0x298 <EVENT_USB_Device_ControlRequest>
     ac8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     acc:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     ace:	20 c1       	rjmp	.+576    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     ad0:	90 91 30 01 	lds	r25, 0x0130
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ad4:	80 91 31 01 	lds	r24, 0x0131

		switch (USB_ControlRequest.bRequest)
     ad8:	85 30       	cpi	r24, 0x05	; 5
     ada:	09 f4       	brne	.+2      	; 0xade <USB_Device_ProcessControlRequest+0x40>
     adc:	77 c0       	rjmp	.+238    	; 0xbcc <USB_Device_ProcessControlRequest+0x12e>
     ade:	30 f4       	brcc	.+12     	; 0xaec <USB_Device_ProcessControlRequest+0x4e>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	81 f1       	breq	.+96     	; 0xb44 <USB_Device_ProcessControlRequest+0xa6>
     ae4:	68 f0       	brcs	.+26     	; 0xb00 <USB_Device_ProcessControlRequest+0x62>
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	69 f1       	breq	.+90     	; 0xb44 <USB_Device_ProcessControlRequest+0xa6>
     aea:	12 c1       	rjmp	.+548    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     aec:	88 30       	cpi	r24, 0x08	; 8
     aee:	09 f4       	brne	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0x54>
     af0:	e1 c0       	rjmp	.+450    	; 0xcb4 <USB_Device_ProcessControlRequest+0x216>
     af2:	89 30       	cpi	r24, 0x09	; 9
     af4:	09 f4       	brne	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0x5a>
     af6:	f0 c0       	rjmp	.+480    	; 0xcd8 <USB_Device_ProcessControlRequest+0x23a>
     af8:	86 30       	cpi	r24, 0x06	; 6
     afa:	09 f0       	breq	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0x60>
     afc:	09 c1       	rjmp	.+530    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     afe:	88 c0       	rjmp	.+272    	; 0xc10 <USB_Device_ProcessControlRequest+0x172>
     b00:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b02:	81 f0       	breq	.+32     	; 0xb24 <USB_Device_ProcessControlRequest+0x86>
     b04:	92 38       	cpi	r25, 0x82	; 130
     b06:	09 f0       	breq	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0x6c>
     b08:	03 c1       	rjmp	.+518    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     b0a:	80 91 34 01 	lds	r24, 0x0134
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b0e:	8f 70       	andi	r24, 0x0F	; 15
     b10:	80 93 e9 00 	sts	0x00E9, r24
     b14:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b18:	85 fb       	bst	r24, 5
     b1a:	88 27       	eor	r24, r24
     b1c:	80 f9       	bld	r24, 0
     b1e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <USB_Device_ProcessControlRequest+0x92>
     b24:	80 91 2c 01 	lds	r24, 0x012C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b28:	90 91 2d 01 	lds	r25, 0x012D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b2c:	91 11       	cpse	r25, r1
     b2e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b30:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b34:	97 7f       	andi	r25, 0xF7	; 247
     b36:	90 93 e8 00 	sts	0x00E8, r25
     b3a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b3e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b42:	c3 c0       	rjmp	.+390    	; 0xcca <USB_Device_ProcessControlRequest+0x22c>
     b44:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b46:	2d 7f       	andi	r18, 0xFD	; 253
     b48:	09 f0       	breq	.+2      	; 0xb4c <USB_Device_ProcessControlRequest+0xae>
     b4a:	e2 c0       	rjmp	.+452    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     b4c:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b4e:	19 f0       	breq	.+6      	; 0xb56 <USB_Device_ProcessControlRequest+0xb8>
     b50:	92 30       	cpi	r25, 0x02	; 2
     b52:	61 f0       	breq	.+24     	; 0xb6c <USB_Device_ProcessControlRequest+0xce>
     b54:	dd c0       	rjmp	.+442    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     b56:	90 91 32 01 	lds	r25, 0x0132
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b5a:	91 30       	cpi	r25, 0x01	; 1
     b5c:	09 f0       	breq	.+2      	; 0xb60 <USB_Device_ProcessControlRequest+0xc2>
     b5e:	d8 c0       	rjmp	.+432    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     b60:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b62:	09 f0       	breq	.+2      	; 0xb66 <USB_Device_ProcessControlRequest+0xc8>
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	90 93 2d 01 	sts	0x012D, r25
     b6a:	2a c0       	rjmp	.+84     	; 0xbc0 <USB_Device_ProcessControlRequest+0x122>
     b6c:	90 91 32 01 	lds	r25, 0x0132

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b70:	91 11       	cpse	r25, r1
     b72:	26 c0       	rjmp	.+76     	; 0xbc0 <USB_Device_ProcessControlRequest+0x122>
     b74:	20 91 34 01 	lds	r18, 0x0134
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b78:	2f 70       	andi	r18, 0x0F	; 15
     b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b7c:	c9 c0       	rjmp	.+402    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     b7e:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b82:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b86:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b88:	1b c0       	rjmp	.+54     	; 0xbc0 <USB_Device_ProcessControlRequest+0x122>
     b8a:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b8c:	21 f4       	brne	.+8      	; 0xb96 <USB_Device_ProcessControlRequest+0xf8>
     b8e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b92:	80 62       	ori	r24, 0x20	; 32
     b94:	13 c0       	rjmp	.+38     	; 0xbbc <USB_Device_ProcessControlRequest+0x11e>
     b96:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b9a:	80 61       	ori	r24, 0x10	; 16
     b9c:	80 93 eb 00 	sts	0x00EB, r24
     ba0:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 2e       	mov	r0, r18
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <USB_Device_ProcessControlRequest+0x10c>
     ba8:	88 0f       	add	r24, r24
     baa:	0a 94       	dec	r0
     bac:	ea f7       	brpl	.-6      	; 0xba8 <USB_Device_ProcessControlRequest+0x10a>
     bae:	80 93 ea 00 	sts	0x00EA, r24
     bb2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     bb6:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	80 93 eb 00 	sts	0x00EB, r24
     bc0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	82 c0       	rjmp	.+260    	; 0xcd0 <USB_Device_ProcessControlRequest+0x232>
     bcc:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bce:	a0 c0       	rjmp	.+320    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     bd0:	10 91 32 01 	lds	r17, 0x0132
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bd4:	1f 77       	andi	r17, 0x7F	; 127
     bd6:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bda:	80 78       	andi	r24, 0x80	; 128
     bdc:	81 2b       	or	r24, r17
     bde:	80 93 e3 00 	sts	0x00E3, r24
     be2:	80 91 e8 00 	lds	r24, 0x00E8
     be6:	87 7f       	andi	r24, 0xF7	; 247
     be8:	80 93 e8 00 	sts	0x00E8, r24
     bec:	dd dd       	rcall	.-1094   	; 0x7a8 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bee:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bf2:	80 ff       	sbrs	r24, 0
     bf4:	fc cf       	rjmp	.-8      	; 0xbee <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     bf6:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     bfa:	80 68       	ori	r24, 0x80	; 128
     bfc:	80 93 e3 00 	sts	0x00E3, r24
     c00:	11 23       	and	r17, r17
     c02:	11 f0       	breq	.+4      	; 0xc08 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <USB_Device_ProcessControlRequest+0x16c>
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	80 93 2f 01 	sts	0x012F, r24
     c0e:	80 c0       	rjmp	.+256    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     c10:	90 58       	subi	r25, 0x80	; 128
     c12:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c14:	08 f0       	brcs	.+2      	; 0xc18 <USB_Device_ProcessControlRequest+0x17a>
     c16:	7c c0       	rjmp	.+248    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     c18:	80 91 32 01 	lds	r24, 0x0132
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c1c:	90 91 33 01 	lds	r25, 0x0133
     c20:	8c 3d       	cpi	r24, 0xDC	; 220
     c22:	23 e0       	ldi	r18, 0x03	; 3
     c24:	92 07       	cpc	r25, r18
     c26:	71 f5       	brne	.+92     	; 0xc84 <USB_Device_ProcessControlRequest+0x1e6>
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c2c:	8a e2       	ldi	r24, 0x2A	; 42
     c2e:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c30:	4f b7       	in	r20, 0x3f	; 63
     c32:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c34:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c36:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c3c:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c3e:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	50 93 57 00 	sts	0x0057, r21
     c46:	e4 91       	lpm	r30, Z
     c48:	20 ff       	sbrs	r18, 0
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
     c4c:	e2 95       	swap	r30
     c4e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c50:	3f 5f       	subi	r19, 0xFF	; 255
     c52:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c54:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	ea 30       	cpi	r30, 0x0A	; 10
     c5a:	10 f0       	brcs	.+4      	; 0xc60 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c5c:	c7 96       	adiw	r24, 0x37	; 55
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0x1c4>
     c60:	c0 96       	adiw	r24, 0x30	; 48
     c62:	8d 93       	st	X+, r24
     c64:	9d 93       	st	X+, r25
     c66:	2f 5f       	subi	r18, 0xFF	; 255
     c68:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c6a:	49 f7       	brne	.-46     	; 0xc3e <USB_Device_ProcessControlRequest+0x1a0>
     c6c:	4f bf       	out	0x3f, r20	; 63
     c6e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c72:	87 7f       	andi	r24, 0xF7	; 247
     c74:	80 93 e8 00 	sts	0x00E8, r24
     c78:	6a e2       	ldi	r22, 0x2A	; 42
     c7a:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	26 dc       	rcall	.-1972   	; 0x4ce <Endpoint_Write_Control_Stream_LE>
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <USB_Device_ProcessControlRequest+0x20a>
     c84:	ae 01       	movw	r20, r28
     c86:	4f 5f       	subi	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c8a:	60 91 34 01 	lds	r22, 0x0134
     c8e:	81 db       	rcall	.-2302   	; 0x392 <CALLBACK_USB_GetDescriptor>
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	09 f4       	brne	.+2      	; 0xc96 <USB_Device_ProcessControlRequest+0x1f8>
     c94:	3d c0       	rjmp	.+122    	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     c96:	20 91 e8 00 	lds	r18, 0x00E8
     c9a:	27 7f       	andi	r18, 0xF7	; 247
     c9c:	20 93 e8 00 	sts	0x00E8, r18
     ca0:	bc 01       	movw	r22, r24
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	ae dc       	rcall	.-1700   	; 0x604 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     ca8:	80 91 e8 00 	lds	r24, 0x00E8
     cac:	8b 77       	andi	r24, 0x7B	; 123
     cae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cb2:	2e c0       	rjmp	.+92     	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     cb4:	90 38       	cpi	r25, 0x80	; 128
     cb6:	61 f5       	brne	.+88     	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     cb8:	80 91 e8 00 	lds	r24, 0x00E8
     cbc:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     cbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc2:	80 91 2b 01 	lds	r24, 0x012B
     cc6:	80 93 f1 00 	sts	0x00F1, r24
     cca:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cce:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cd0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cd4:	69 dd       	rcall	.-1326   	; 0x7a8 <Endpoint_ClearStatusStage>
     cd6:	1c c0       	rjmp	.+56     	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     cd8:	91 11       	cpse	r25, r1
     cda:	1a c0       	rjmp	.+52     	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
     cdc:	90 91 32 01 	lds	r25, 0x0132
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ce0:	92 30       	cpi	r25, 0x02	; 2
     ce2:	b0 f4       	brcc	.+44     	; 0xd10 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ce4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ce8:	87 7f       	andi	r24, 0xF7	; 247
     cea:	80 93 e8 00 	sts	0x00E8, r24
     cee:	90 93 2b 01 	sts	0x012B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf2:	5a dd       	rcall	.-1356   	; 0x7a8 <Endpoint_ClearStatusStage>
     cf4:	80 91 2b 01 	lds	r24, 0x012B
     cf8:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <USB_Device_ProcessControlRequest+0x266>
     cfc:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     d00:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <USB_Device_ProcessControlRequest+0x26a>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <USB_Device_ProcessControlRequest+0x26c>
     d08:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d0a:	80 93 2f 01 	sts	0x012F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d0e:	ae da       	rcall	.-2724   	; 0x26c <EVENT_USB_Device_ConfigurationChanged>
     d10:	80 91 e8 00 	lds	r24, 0x00E8
     d14:	83 ff       	sbrs	r24, 3
     d16:	0a c0       	rjmp	.+20     	; 0xd2c <USB_Device_ProcessControlRequest+0x28e>
     d18:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d1c:	87 7f       	andi	r24, 0xF7	; 247
     d1e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d22:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d26:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d28:	80 93 eb 00 	sts	0x00EB, r24
     d2c:	aa 96       	adiw	r28, 0x2a	; 42
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d3c:	1f 91       	pop	r17
     d3e:	08 95       	ret

00000d40 <USB_Event_Stub>:
     d40:	08 95       	ret

00000d42 <USB_USBTask>:
     d42:	cf 93       	push	r28
     d44:	80 91 2f 01 	lds	r24, 0x012F
     d48:	88 23       	and	r24, r24
     d4a:	a9 f0       	breq	.+42     	; 0xd76 <USB_USBTask+0x34>
     d4c:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d50:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d52:	90 91 ec 00 	lds	r25, 0x00EC
     d56:	90 ff       	sbrs	r25, 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <USB_USBTask+0x1c>
     d5a:	90 e8       	ldi	r25, 0x80	; 128
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <USB_USBTask+0x1e>
     d5e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d60:	c9 2f       	mov	r28, r25
     d62:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d64:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d68:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d6c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d6e:	97 de       	rcall	.-722    	; 0xa9e <USB_Device_ProcessControlRequest>
     d70:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d72:	c0 93 e9 00 	sts	0x00E9, r28
     d76:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d78:	08 95       	ret

00000d7a <HID_Device_ProcessControlRequest>:
     d7a:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     d7c:	7f 92       	push	r7
     d7e:	8f 92       	push	r8
     d80:	9f 92       	push	r9
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	00 d0       	rcall	.+0      	; 0xd98 <HID_Device_ProcessControlRequest+0x1e>
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     da0:	ad b6       	in	r10, 0x3d	; 61
     da2:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     da4:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     da8:	83 ff       	sbrs	r24, 3
     daa:	02 c1       	rjmp	.+516    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     dac:	f7 01       	movw	r30, r14
     dae:	80 81       	ld	r24, Z
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	20 91 34 01 	lds	r18, 0x0134
     db6:	30 91 35 01 	lds	r19, 0x0135
     dba:	28 17       	cp	r18, r24
     dbc:	39 07       	cpc	r19, r25
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <HID_Device_ProcessControlRequest+0x48>
     dc0:	f7 c0       	rjmp	.+494    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     dc2:	80 91 31 01 	lds	r24, 0x0131
     dc6:	83 30       	cpi	r24, 0x03	; 3
     dc8:	09 f4       	brne	.+2      	; 0xdcc <HID_Device_ProcessControlRequest+0x52>
     dca:	99 c0       	rjmp	.+306    	; 0xefe <HID_Device_ProcessControlRequest+0x184>
     dcc:	30 f4       	brcc	.+12     	; 0xdda <HID_Device_ProcessControlRequest+0x60>
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	71 f0       	breq	.+28     	; 0xdee <HID_Device_ProcessControlRequest+0x74>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <HID_Device_ProcessControlRequest+0x5e>
     dd6:	d0 c0       	rjmp	.+416    	; 0xf78 <HID_Device_ProcessControlRequest+0x1fe>
     dd8:	eb c0       	rjmp	.+470    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     dda:	8a 30       	cpi	r24, 0x0A	; 10
     ddc:	09 f4       	brne	.+2      	; 0xde0 <HID_Device_ProcessControlRequest+0x66>
     dde:	b4 c0       	rjmp	.+360    	; 0xf48 <HID_Device_ProcessControlRequest+0x1ce>
     de0:	8b 30       	cpi	r24, 0x0B	; 11
     de2:	09 f4       	brne	.+2      	; 0xde6 <HID_Device_ProcessControlRequest+0x6c>
     de4:	9d c0       	rjmp	.+314    	; 0xf20 <HID_Device_ProcessControlRequest+0x1a6>
     de6:	89 30       	cpi	r24, 0x09	; 9
     de8:	09 f0       	breq	.+2      	; 0xdec <HID_Device_ProcessControlRequest+0x72>
     dea:	e2 c0       	rjmp	.+452    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     dec:	4b c0       	rjmp	.+150    	; 0xe84 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dee:	80 91 30 01 	lds	r24, 0x0130
     df2:	81 3a       	cpi	r24, 0xA1	; 161
     df4:	09 f0       	breq	.+2      	; 0xdf8 <HID_Device_ProcessControlRequest+0x7e>
     df6:	dc c0       	rjmp	.+440    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     df8:	8d b6       	in	r8, 0x3d	; 61
     dfa:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     dfc:	1a 82       	std	Y+2, r1	; 0x02
     dfe:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e00:	80 91 32 01 	lds	r24, 0x0132
     e04:	10 91 33 01 	lds	r17, 0x0133
     e08:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     e0a:	f7 01       	movw	r30, r14
     e0c:	40 85       	ldd	r20, Z+8	; 0x08
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	8d b7       	in	r24, 0x3d	; 61
     e12:	9e b7       	in	r25, 0x3e	; 62
     e14:	84 1b       	sub	r24, r20
     e16:	95 0b       	sbc	r25, r21
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	9e bf       	out	0x3e, r25	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	8d bf       	out	0x3d, r24	; 61
     e22:	ed b7       	in	r30, 0x3d	; 61
     e24:	fe b7       	in	r31, 0x3e	; 62
     e26:	31 96       	adiw	r30, 0x01	; 1
     e28:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	cf 01       	movw	r24, r30
     e30:	bc d1       	rcall	.+888    	; 0x11aa <memset>
     e32:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e34:	41 0f       	add	r20, r17
     e36:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     e38:	0f 5f       	subi	r16, 0xFF	; 255
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	96 01       	movw	r18, r12
     e3e:	be 01       	movw	r22, r28
     e40:	6d 5f       	subi	r22, 0xFD	; 253
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	c7 01       	movw	r24, r14
     e46:	45 da       	rcall	.-2934   	; 0x2d2 <CALLBACK_HID_Device_CreateHIDReport>
     e48:	f7 01       	movw	r30, r14
     e4a:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     e4c:	97 81       	ldd	r25, Z+7	; 0x07
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	21 f0       	breq	.+8      	; 0xe5a <HID_Device_ProcessControlRequest+0xe0>
     e52:	40 85       	ldd	r20, Z+8	; 0x08
     e54:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     e56:	b6 01       	movw	r22, r12
     e58:	9f d1       	rcall	.+830    	; 0x1198 <memcpy>
     e5a:	10 92 e9 00 	sts	0x00E9, r1
     e5e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e62:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e64:	80 93 e8 00 	sts	0x00E8, r24
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	81 11       	cpse	r24, r1
     e6c:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     e70:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e72:	7a 81       	ldd	r23, Y+2	; 0x02
     e74:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     e76:	2b db       	rcall	.-2474   	; 0x4ce <Endpoint_Write_Control_Stream_LE>
     e78:	80 91 e8 00 	lds	r24, 0x00E8
     e7c:	8b 77       	andi	r24, 0x7B	; 123
     e7e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <HID_Device_ProcessControlRequest+0x178>
     e84:	80 91 30 01 	lds	r24, 0x0130
     e88:	81 32       	cpi	r24, 0x21	; 33
     e8a:	09 f0       	breq	.+2      	; 0xe8e <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e8c:	91 c0       	rjmp	.+290    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     e8e:	8d b6       	in	r8, 0x3d	; 61
     e90:	9e b6       	in	r9, 0x3e	; 62
     e92:	00 91 36 01 	lds	r16, 0x0136
     e96:	10 91 37 01 	lds	r17, 0x0137
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     e9a:	70 90 32 01 	lds	r7, 0x0132
     e9e:	60 90 33 01 	lds	r6, 0x0133
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     ea2:	8d b7       	in	r24, 0x3d	; 61
     ea4:	9e b7       	in	r25, 0x3e	; 62
     ea6:	80 1b       	sub	r24, r16
     ea8:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	9e bf       	out	0x3e, r25	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	8d bf       	out	0x3d, r24	; 61
     eb4:	ed b7       	in	r30, 0x3d	; 61
     eb6:	fe b7       	in	r31, 0x3e	; 62
     eb8:	31 96       	adiw	r30, 0x01	; 1
     eba:	6f 01       	movw	r12, r30
     ebc:	80 91 e8 00 	lds	r24, 0x00E8
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec6:	b8 01       	movw	r22, r16
     ec8:	cf 01       	movw	r24, r30
     eca:	5e db       	rcall	.-2372   	; 0x588 <Endpoint_Read_Control_Stream_LE>
     ecc:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     ed0:	8e 77       	andi	r24, 0x7E	; 126
     ed2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	71 10       	cpse	r7, r1
     eda:	01 c0       	rjmp	.+2      	; 0xede <HID_Device_ProcessControlRequest+0x164>
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ee0:	02 1b       	sub	r16, r18
     ee2:	13 0b       	sbc	r17, r19
     ee4:	2c 0d       	add	r18, r12
     ee6:	3d 1d       	adc	r19, r13
     ee8:	4f ef       	ldi	r20, 0xFF	; 255
     eea:	46 0d       	add	r20, r6
     eec:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     eee:	c7 01       	movw	r24, r14
     ef0:	40 da       	rcall	.-2944   	; 0x372 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ef6:	9e be       	out	0x3e, r9	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	8d be       	out	0x3d, r8	; 61
     efc:	59 c0       	rjmp	.+178    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     efe:	80 91 30 01 	lds	r24, 0x0130
     f02:	81 3a       	cpi	r24, 0xA1	; 161
     f04:	09 f0       	breq	.+2      	; 0xf08 <HID_Device_ProcessControlRequest+0x18e>
     f06:	54 c0       	rjmp	.+168    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     f08:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	80 93 e8 00 	sts	0x00E8, r24
     f12:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f16:	80 ff       	sbrs	r24, 0
     f18:	fc cf       	rjmp	.-8      	; 0xf12 <HID_Device_ProcessControlRequest+0x198>
     f1a:	f7 01       	movw	r30, r14
     f1c:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f1e:	40 c0       	rjmp	.+128    	; 0xfa0 <HID_Device_ProcessControlRequest+0x226>
     f20:	80 91 30 01 	lds	r24, 0x0130
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f24:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     f26:	09 f0       	breq	.+2      	; 0xf2a <HID_Device_ProcessControlRequest+0x1b0>
     f28:	43 c0       	rjmp	.+134    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     f2a:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f2e:	87 7f       	andi	r24, 0xF7	; 247
     f30:	80 93 e8 00 	sts	0x00E8, r24
     f34:	39 dc       	rcall	.-1934   	; 0x7a8 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f36:	90 91 32 01 	lds	r25, 0x0132
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	91 11       	cpse	r25, r1
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     f44:	81 87       	std	Z+9, r24	; 0x09
     f46:	34 c0       	rjmp	.+104    	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     f48:	80 91 30 01 	lds	r24, 0x0130
     f4c:	81 32       	cpi	r24, 0x21	; 33
     f4e:	81 f5       	brne	.+96     	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     f50:	80 91 e8 00 	lds	r24, 0x00E8
     f54:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f56:	80 93 e8 00 	sts	0x00E8, r24
     f5a:	26 dc       	rcall	.-1972   	; 0x7a8 <Endpoint_ClearStatusStage>
     f5c:	80 91 32 01 	lds	r24, 0x0132
     f60:	90 91 33 01 	lds	r25, 0x0133
     f64:	88 27       	eor	r24, r24
     f66:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     f6c:	3a 95       	dec	r19
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <HID_Device_ProcessControlRequest+0x1ee>
     f70:	f7 01       	movw	r30, r14
     f72:	95 87       	std	Z+13, r25	; 0x0d
     f74:	84 87       	std	Z+12, r24	; 0x0c
     f76:	1c c0       	rjmp	.+56     	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     f78:	80 91 30 01 	lds	r24, 0x0130
     f7c:	81 3a       	cpi	r24, 0xA1	; 161
     f7e:	c1 f4       	brne	.+48     	; 0xfb0 <HID_Device_ProcessControlRequest+0x236>
     f80:	80 91 e8 00 	lds	r24, 0x00E8
     f84:	87 7f       	andi	r24, 0xF7	; 247
     f86:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f8a:	80 91 e8 00 	lds	r24, 0x00E8
     f8e:	80 ff       	sbrs	r24, 0
     f90:	fc cf       	rjmp	.-8      	; 0xf8a <HID_Device_ProcessControlRequest+0x210>
     f92:	f7 01       	movw	r30, r14
     f94:	84 85       	ldd	r24, Z+12	; 0x0c
     f96:	95 85       	ldd	r25, Z+13	; 0x0d
     f98:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f9a:	87 95       	ror	r24
     f9c:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f9e:	87 95       	ror	r24
     fa0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     fa4:	80 91 e8 00 	lds	r24, 0x00E8
     fa8:	8e 77       	andi	r24, 0x7E	; 126
     faa:	80 93 e8 00 	sts	0x00E8, r24
     fae:	fc db       	rcall	.-2056   	; 0x7a8 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb4:	be be       	out	0x3e, r11	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	ad be       	out	0x3d, r10	; 61
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
			}

			break;
	}
}
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	9f 90       	pop	r9
     fd6:	8f 90       	pop	r8
     fd8:	7f 90       	pop	r7
     fda:	6f 90       	pop	r6
     fdc:	08 95       	ret

00000fde <HID_Device_ConfigureEndpoints>:
     fde:	fc 01       	movw	r30, r24
     fe0:	39 96       	adiw	r30, 0x09	; 9
     fe2:	27 e0       	ldi	r18, 0x07	; 7
     fe4:	df 01       	movw	r26, r30
     fe6:	1d 92       	st	X+, r1
     fe8:	2a 95       	dec	r18
     fea:	e9 f7       	brne	.-6      	; 0xfe6 <HID_Device_ConfigureEndpoints+0x8>
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     ff0:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     ff2:	24 ef       	ldi	r18, 0xF4	; 244
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	35 87       	std	Z+13, r19	; 0x0d
     ff8:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     ffa:	23 e0       	ldi	r18, 0x03	; 3
     ffc:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	95 cb       	rjmp	.-2262   	; 0x72e <Endpoint_ConfigureEndpointTable>

00001004 <HID_Device_USBTask>:
    1004:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1006:	6f 92       	push	r6
    1008:	7f 92       	push	r7
    100a:	8f 92       	push	r8
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	00 d0       	rcall	.+0      	; 0x1024 <HID_Device_USBTask+0x20>
    1024:	1f 92       	push	r1
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    102c:	ad b6       	in	r10, 0x3d	; 61
    102e:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1030:	80 91 2f 01 	lds	r24, 0x012F
    1034:	84 30       	cpi	r24, 0x04	; 4
    1036:	09 f0       	breq	.+2      	; 0x103a <HID_Device_USBTask+0x36>
    1038:	8a c0       	rjmp	.+276    	; 0x114e <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    103a:	80 91 e4 00 	lds	r24, 0x00E4
    103e:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1042:	f7 01       	movw	r30, r14
    1044:	22 85       	ldd	r18, Z+10	; 0x0a
    1046:	33 85       	ldd	r19, Z+11	; 0x0b
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	09 f4       	brne	.+2      	; 0x1050 <HID_Device_USBTask+0x4c>
    104e:	7f c0       	rjmp	.+254    	; 0x114e <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1050:	81 81       	ldd	r24, Z+1	; 0x01
    1052:	8f 70       	andi	r24, 0x0F	; 15
    1054:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1058:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    105c:	85 ff       	sbrs	r24, 5
    105e:	77 c0       	rjmp	.+238    	; 0x114e <HID_Device_USBTask+0x14a>
    1060:	8d b6       	in	r8, 0x3d	; 61
    1062:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1064:	40 85       	ldd	r20, Z+8	; 0x08
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	8d b7       	in	r24, 0x3d	; 61
    106a:	9e b7       	in	r25, 0x3e	; 62
    106c:	84 1b       	sub	r24, r20
    106e:	95 0b       	sbc	r25, r21
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	9e bf       	out	0x3e, r25	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	8d bf       	out	0x3d, r24	; 61
    107a:	ed b7       	in	r30, 0x3d	; 61
    107c:	fe b7       	in	r31, 0x3e	; 62
    107e:	31 96       	adiw	r30, 0x01	; 1
    1080:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1082:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1084:	1a 82       	std	Y+2, r1	; 0x02
    1086:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	cf 01       	movw	r24, r30
    108e:	8d d0       	rcall	.+282    	; 0x11aa <memset>
    1090:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1092:	0f 5f       	subi	r16, 0xFF	; 255
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	96 01       	movw	r18, r12
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	be 01       	movw	r22, r28
    109c:	6d 5f       	subi	r22, 0xFD	; 253
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	c7 01       	movw	r24, r14
    10a2:	17 d9       	rcall	.-3538   	; 0x2d2 <CALLBACK_HID_Device_CreateHIDReport>
    10a4:	68 2e       	mov	r6, r24
    10a6:	f7 01       	movw	r30, r14
    10a8:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    10aa:	95 85       	ldd	r25, Z+13	; 0x0d
    10ac:	89 2b       	or	r24, r25
    10ae:	41 f0       	breq	.+16     	; 0x10c0 <HID_Device_USBTask+0xbc>
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	86 85       	ldd	r24, Z+14	; 0x0e
    10b4:	97 85       	ldd	r25, Z+15	; 0x0f
    10b6:	89 2b       	or	r24, r25
    10b8:	09 f0       	breq	.+2      	; 0x10bc <HID_Device_USBTask+0xb8>
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	72 2e       	mov	r7, r18
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <HID_Device_USBTask+0xbe>
    10c0:	71 2c       	mov	r7, r1
    10c2:	f7 01       	movw	r30, r14
    10c4:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    10c6:	17 81       	ldd	r17, Z+7	; 0x07
    10c8:	01 15       	cp	r16, r1
    10ca:	11 05       	cpc	r17, r1
    10cc:	89 f0       	breq	.+34     	; 0x10f0 <HID_Device_USBTask+0xec>
    10ce:	49 81       	ldd	r20, Y+1	; 0x01
    10d0:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    10d2:	b8 01       	movw	r22, r16
    10d4:	c6 01       	movw	r24, r12
    10d6:	53 d0       	rcall	.+166    	; 0x117e <memcmp>
    10d8:	55 24       	eor	r5, r5
    10da:	53 94       	inc	r5
    10dc:	89 2b       	or	r24, r25
    10de:	09 f4       	brne	.+2      	; 0x10e2 <HID_Device_USBTask+0xde>
    10e0:	51 2c       	mov	r5, r1
    10e2:	f7 01       	movw	r30, r14
    10e4:	40 85       	ldd	r20, Z+8	; 0x08
    10e6:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    10e8:	b6 01       	movw	r22, r12
    10ea:	c8 01       	movw	r24, r16
    10ec:	55 d0       	rcall	.+170    	; 0x1198 <memcpy>
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <HID_Device_USBTask+0xee>
    10f0:	51 2c       	mov	r5, r1
    10f2:	29 81       	ldd	r18, Y+1	; 0x01
    10f4:	3a 81       	ldd	r19, Y+2	; 0x02
    10f6:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    10f8:	f1 f0       	breq	.+60     	; 0x1136 <HID_Device_USBTask+0x132>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    10fa:	61 10       	cpse	r6, r1
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <HID_Device_USBTask+0x102>
    10fe:	51 10       	cpse	r5, r1
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <HID_Device_USBTask+0x102>
    1102:	70 fe       	sbrs	r7, 0
    1104:	18 c0       	rjmp	.+48     	; 0x1136 <HID_Device_USBTask+0x132>
    1106:	f7 01       	movw	r30, r14
    1108:	84 85       	ldd	r24, Z+12	; 0x0c
    110a:	95 85       	ldd	r25, Z+13	; 0x0d
    110c:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    110e:	86 87       	std	Z+14, r24	; 0x0e
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	8f 70       	andi	r24, 0x0F	; 15
    1114:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 11       	cpse	r24, r1
    111c:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1120:	69 81       	ldd	r22, Y+1	; 0x01
    1122:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1128:	c6 01       	movw	r24, r12
    112a:	89 d9       	rcall	.-3310   	; 0x43e <Endpoint_Write_Stream_LE>
    112c:	80 91 e8 00 	lds	r24, 0x00E8
    1130:	8e 77       	andi	r24, 0x7E	; 126
    1132:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1136:	80 91 e4 00 	lds	r24, 0x00E4
    113a:	90 91 e5 00 	lds	r25, 0x00E5
    113e:	f7 01       	movw	r30, r14
    1140:	93 87       	std	Z+11, r25	; 0x0b
    1142:	82 87       	std	Z+10, r24	; 0x0a
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1148:	9e be       	out	0x3e, r9	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	8d be       	out	0x3d, r8	; 61
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	be be       	out	0x3e, r11	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	ad be       	out	0x3d, r10	; 61
	}
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	5f 90       	pop	r5
    117c:	08 95       	ret

0000117e <memcmp>:
    117e:	fb 01       	movw	r30, r22
    1180:	dc 01       	movw	r26, r24
    1182:	04 c0       	rjmp	.+8      	; 0x118c <memcmp+0xe>
    1184:	8d 91       	ld	r24, X+
    1186:	01 90       	ld	r0, Z+
    1188:	80 19       	sub	r24, r0
    118a:	21 f4       	brne	.+8      	; 0x1194 <memcmp+0x16>
    118c:	41 50       	subi	r20, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	c8 f7       	brcc	.-14     	; 0x1184 <memcmp+0x6>
    1192:	88 1b       	sub	r24, r24
    1194:	99 0b       	sbc	r25, r25
    1196:	08 95       	ret

00001198 <memcpy>:
    1198:	fb 01       	movw	r30, r22
    119a:	dc 01       	movw	r26, r24
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <memcpy+0xa>
    119e:	01 90       	ld	r0, Z+
    11a0:	0d 92       	st	X+, r0
    11a2:	41 50       	subi	r20, 0x01	; 1
    11a4:	50 40       	sbci	r21, 0x00	; 0
    11a6:	d8 f7       	brcc	.-10     	; 0x119e <memcpy+0x6>
    11a8:	08 95       	ret

000011aa <memset>:
    11aa:	dc 01       	movw	r26, r24
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <memset+0x6>
    11ae:	6d 93       	st	X+, r22
    11b0:	41 50       	subi	r20, 0x01	; 1
    11b2:	50 40       	sbci	r21, 0x00	; 0
    11b4:	e0 f7       	brcc	.-8      	; 0x11ae <memset+0x4>
    11b6:	08 95       	ret

000011b8 <_exit>:
    11b8:	f8 94       	cli

000011ba <__stop_program>:
    11ba:	ff cf       	rjmp	.-2      	; 0x11ba <__stop_program>

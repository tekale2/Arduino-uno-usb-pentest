
AVRISP-MKII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000028aa  0000295e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028aa  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  008001a0  008001a0  000029fe  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000029fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000870  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000b3  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003323  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000608  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000099d8  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002779  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000365b  00000000  00000000  0000fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001154  00000000  00000000  000130e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000031e6  00000000  00000000  0001423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000625f  00000000  00000000  00017422  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007e0  00000000  00000000  0001d681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__vector_10>
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c7       	rjmp	.+3870   	; 0xf64 <__vector_17>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	9c c1       	rjmp	.+824    	; 0x38e <__vector_21>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop

00000098 <AVRISP_ProductString>:
      98:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

000000b2 <AVRISP_ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b2:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

000000c0 <AVRISP_LanguageString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c0:	04 03 09 04                                         ....

000000c4 <AVRISP_DeviceDescriptor>:
      c4:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d4:	03 01                                               ..

000000d6 <TimerCompareFromSCKDuration>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d6:	04 00 04 00 04 00 05 00 05 00 06 00 06 00 06 00     ................
	{
		uint8_t  HIDReportItem  = *ReportData;
      e6:	07 00 07 00 07 00 08 00 09 00 09 00 09 00 0a 00     ................
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f6:	0a 00 0b 00 0c 00 0c 00 0d 00 0e 00 0f 00 0f 00     ................
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	10 00 11 00 12 00 13 00 14 00 15 00 16 00 17 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	18 00 19 00 1b 00 1c 00 1e 00 1f 00 21 00 22 00     ............!.".
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	24 00 26 00 28 00 2a 00 2c 00 2e 00 31 00 33 00     $.&.(.*.,...1.3.
     136:	36 00 39 00 3b 00 3e 00 41 00 45 00 48 00 4c 00     6.9.;.>.A.E.H.L.
				ReportSize     -= 4;
     146:	4f 00 54 00 58 00 5c 00 61 00 65 00 6a 00 70 00     O.T.X.\.a.e.j.p.
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	75 00 7b 00 81 00 88 00 8e 00 96 00 9d 00 a5 00     u.{.............
				ReportSize     -= 2;
				ReportData     += 2;
     166:	ad 00 b5 00 be 00 c8 00 d2 00 dc 00 e7 00 f2 00     ................
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     176:	fe 00 0a 01 18 01 25 01 34 01 43 01 53 01 64 01     ......%.4.C.S.d.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	76 01 88 01 9b 01 af 01 c5 01 db 01 f3 01 0b 02     v...............
     196:	25 02 40 02 5c 02 7a 02 99 02 ba 02 dc 02 00 03     %.@.\.z.........
     1a6:	26 03 4e 03 77 03 a3 03 d1 03 01 04 32 04 67 04     &.N.w.......2.g.
     1b6:	9f 04 da 04 15 05 55 05 97 05 e1 05 28 06 76 06     ......U.....(.v.
     1c6:	c7 06 1f 07 7a 07 d7 07 33 08 a3 08 09 09 7a 09     ....z...3.....z.
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	f6 09 70 0a f7 0a 7c 0b 0d 0c ad 0c 48 0d f2 0d     ..p...|.....H...
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e6:	92 0e 41 0f 01 10 d5 10 97 11 98 12 87 13 78 14     ..A...........x.
     1f6:	7b 15 8c 16 a4 17 d0 18 09 1a 50 1b a2 1c 0b 1e     {.........P.....
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     206:	8c 1f 19 21 af 22 6f 24 37 26                       ...!."o$7&

00000210 <SPIMaskFromSCKDuration>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     210:	40 40 00 41 01 42 43 00                             @@.A.BC.

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	d0 e2       	ldi	r29, 0x20	; 32
     220:	de bf       	out	0x3e, r29	; 62
     222:	cd bf       	out	0x3d, r28	; 61

00000224 <__do_copy_data>:
     224:	11 e0       	ldi	r17, 0x01	; 1
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	ea ea       	ldi	r30, 0xAA	; 170
     22c:	f8 e2       	ldi	r31, 0x28	; 40
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	0b bf       	out	0x3b, r16	; 59
     232:	02 c0       	rjmp	.+4      	; 0x238 <__do_copy_data+0x14>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	07 90       	elpm	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	a0 3a       	cpi	r26, 0xA0	; 160
     23a:	b1 07       	cpc	r27, r17
     23c:	d9 f7       	brne	.-10     	; 0x234 <__do_copy_data+0x10>

0000023e <__do_clear_bss>:
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	a0 ea       	ldi	r26, 0xA0	; 160
     242:	b1 e0       	ldi	r27, 0x01	; 1
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a3 3b       	cpi	r26, 0xB3	; 179
     24a:	b1 07       	cpc	r27, r17
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	4e d0       	rcall	.+156    	; 0x2ec <main>
     250:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <_exit>

00000254 <__bad_interrupt>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <LEDs_SetAllLEDs>:
     256:	9b b1       	in	r25, 0x0b	; 11
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 2b       	or	r25, r24
     25c:	9b b9       	out	0x0b, r25	; 11
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	08 95       	ret

00000260 <SetupHardware>:
     260:	84 b7       	in	r24, 0x34	; 52
     262:	87 7f       	andi	r24, 0xF7	; 247
     264:	84 bf       	out	0x34, r24	; 52
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	80 93 60 00 	sts	0x0060, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	10 92 60 00 	sts	0x0060, r1
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	0f be       	out	0x3f, r0	; 63
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	80 e8       	ldi	r24, 0x80	; 128
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	80 93 61 00 	sts	0x0061, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     282:	90 93 61 00 	sts	0x0061, r25

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	0f be       	out	0x3f, r0	; 63
     288:	8a b1       	in	r24, 0x0a	; 10
     28a:	80 6f       	ori	r24, 0xF0	; 240
     28c:	8a b9       	out	0x0a, r24	; 10
     28e:	8b b1       	in	r24, 0x0b	; 11
				break;
     290:	8f 70       	andi	r24, 0x0F	; 15

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	8b b9       	out	0x0b, r24	; 11
     294:	0c 94 37 12 	jmp	0x246e	; 0x246e <USB_Init>

00000298 <EVENT_USB_Device_Connect>:
     298:	80 e3       	ldi	r24, 0x30	; 48
     29a:	dd cf       	rjmp	.-70     	; 0x256 <LEDs_SetAllLEDs>

0000029c <EVENT_USB_Device_Disconnect>:
     29c:	80 e1       	ldi	r24, 0x10	; 16
     29e:	db cf       	rjmp	.-74     	; 0x256 <LEDs_SetAllLEDs>

000002a0 <EVENT_USB_Device_ConfigurationChanged>:
				break;
     2a0:	cf 93       	push	r28

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	42 e3       	ldi	r20, 0x32	; 50
     2a4:	60 e8       	ldi	r22, 0x80	; 128
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	0e 94 95 11 	call	0x232a	; 0x232a <Endpoint_ConfigureEndpoint_Prv>
				break;
     2ac:	c8 2f       	mov	r28, r24

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	42 e3       	ldi	r20, 0x32	; 50
     2b0:	61 e8       	ldi	r22, 0x81	; 129
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	0e 94 95 11 	call	0x232a	; 0x232a <Endpoint_ConfigureEndpoint_Prv>
     2b8:	88 23       	and	r24, r24
     2ba:	21 f0       	breq	.+8      	; 0x2c4 <EVENT_USB_Device_ConfigurationChanged+0x24>
				break;
     2bc:	cc 23       	and	r28, r28
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	11 f0       	breq	.+4      	; 0x2c4 <EVENT_USB_Device_ConfigurationChanged+0x24>
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <EVENT_USB_Device_ConfigurationChanged+0x26>
     2c4:	80 e1       	ldi	r24, 0x10	; 16
     2c6:	cf 91       	pop	r28
     2c8:	c6 cf       	rjmp	.-116    	; 0x256 <LEDs_SetAllLEDs>

000002ca <AVRISP_Task>:
     2ca:	8e b3       	in	r24, 0x1e	; 30
				break;
     2cc:	84 30       	cpi	r24, 0x04	; 4
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	69 f4       	brne	.+26     	; 0x2ea <AVRISP_Task+0x20>
     2d0:	c9 d1       	rcall	.+914    	; 0x664 <V2Params_UpdateParamValues>
     2d2:	82 e0       	ldi	r24, 0x02	; 2
				break;
     2d4:	80 93 e9 00 	sts	0x00E9, r24

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d8:	80 91 e8 00 	lds	r24, 0x00E8

				if (ParserData->UsingReportIDs)
     2dc:	82 ff       	sbrs	r24, 2
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <AVRISP_Task+0x20>
     2e0:	80 e3       	ldi	r24, 0x30	; 48
     2e2:	b9 df       	rcall	.-142    	; 0x256 <LEDs_SetAllLEDs>
     2e4:	81 d0       	rcall	.+258    	; 0x3e8 <V2Protocol_ProcessCommand>
     2e6:	80 e2       	ldi	r24, 0x20	; 32
     2e8:	b6 cf       	rjmp	.-148    	; 0x256 <LEDs_SetAllLEDs>
     2ea:	08 95       	ret

000002ec <main>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	b9 df       	rcall	.-142    	; 0x260 <SetupHardware>
     2ee:	64 d0       	rcall	.+200    	; 0x3b8 <V2Protocol_Init>
     2f0:	80 e1       	ldi	r24, 0x10	; 16
     2f2:	b1 df       	rcall	.-158    	; 0x256 <LEDs_SetAllLEDs>
     2f4:	78 94       	sei
     2f6:	e9 df       	rcall	.-46     	; 0x2ca <AVRISP_Task>
     2f8:	0e 94 1e 14 	call	0x283c	; 0x283c <USB_USBTask>
     2fc:	fc cf       	rjmp	.-8      	; 0x2f6 <main+0xa>

000002fe <CALLBACK_USB_GetDescriptor>:
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <AVRISP_GetDescriptor>

00000300 <AVRISP_GetDescriptor>:
     300:	f9 01       	movw	r30, r18
     302:	10 82       	st	Z, r1
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	29 2f       	mov	r18, r25
     306:	33 27       	eor	r19, r19
     308:	22 30       	cpi	r18, 0x02	; 2
     30a:	31 05       	cpc	r19, r1
     30c:	59 f0       	breq	.+22     	; 0x324 <AVRISP_GetDescriptor+0x24>
     30e:	23 30       	cpi	r18, 0x03	; 3
     310:	31 05       	cpc	r19, r1
     312:	79 f0       	breq	.+30     	; 0x332 <AVRISP_GetDescriptor+0x32>
     314:	21 30       	cpi	r18, 0x01	; 1
     316:	31 05       	cpc	r19, r1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	91 f5       	brne	.+100    	; 0x37e <AVRISP_GetDescriptor+0x7e>
     31a:	82 e1       	ldi	r24, 0x12	; 18
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	24 ec       	ldi	r18, 0xC4	; 196
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	31 c0       	rjmp	.+98     	; 0x386 <AVRISP_GetDescriptor+0x86>
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	80 83       	st	Z, r24
     328:	80 e2       	ldi	r24, 0x20	; 32
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	2e e1       	ldi	r18, 0x1E	; 30
     32e:	31 e0       	ldi	r19, 0x01	; 1
     330:	2a c0       	rjmp	.+84     	; 0x386 <AVRISP_GetDescriptor+0x86>
     332:	99 27       	eor	r25, r25
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	91 05       	cpc	r25, r1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	c9 f0       	breq	.+50     	; 0x36c <AVRISP_GetDescriptor+0x6c>
     33a:	2c f4       	brge	.+10     	; 0x346 <AVRISP_GetDescriptor+0x46>
     33c:	89 2b       	or	r24, r25
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	f9 f4       	brne	.+62     	; 0x37e <AVRISP_GetDescriptor+0x7e>
     340:	e0 ec       	ldi	r30, 0xC0	; 192
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	18 c0       	rjmp	.+48     	; 0x376 <AVRISP_GetDescriptor+0x76>
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	91 05       	cpc	r25, r1
     34a:	99 f0       	breq	.+38     	; 0x372 <AVRISP_GetDescriptor+0x72>
     34c:	03 97       	sbiw	r24, 0x03	; 3
     34e:	b9 f4       	brne	.+46     	; 0x37e <AVRISP_GetDescriptor+0x7e>
     350:	80 91 00 01 	lds	r24, 0x0100
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	23 e3       	ldi	r18, 0x33	; 51
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	30 93 0f 01 	sts	0x010F, r19
     35e:	20 93 0e 01 	sts	0x010E, r18
     362:	22 e0       	ldi	r18, 0x02	; 2
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	20 83       	st	Z, r18
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	31 e0       	ldi	r19, 0x01	; 1
     36a:	0d c0       	rjmp	.+26     	; 0x386 <AVRISP_GetDescriptor+0x86>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	e2 eb       	ldi	r30, 0xB2	; 178
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <AVRISP_GetDescriptor+0x76>
     372:	e8 e9       	ldi	r30, 0x98	; 152
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	84 91       	lpm	r24, Z

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	9f 01       	movw	r18, r30
     37c:	04 c0       	rjmp	.+8      	; 0x386 <AVRISP_GetDescriptor+0x86>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	fa 01       	movw	r30, r20
				break;
     388:	31 83       	std	Z+1, r19	; 0x01

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	20 83       	st	Z, r18
     38c:	08 95       	ret

0000038e <__vector_21>:
     38e:	78 94       	sei
     390:	1f 92       	push	r1
     392:	0f 92       	push	r0
     394:	0f b6       	in	r0, 0x3f	; 63
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	0f 92       	push	r0
     398:	11 24       	eor	r1, r1
     39a:	8f 93       	push	r24
     39c:	8a b5       	in	r24, 0x2a	; 42
     39e:	88 23       	and	r24, r24
     3a0:	21 f0       	breq	.+8      	; 0x3aa <__vector_21+0x1c>
     3a2:	8a b5       	in	r24, 0x2a	; 42
     3a4:	81 50       	subi	r24, 0x01	; 1
     3a6:	8a bd       	out	0x2a, r24	; 42
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <__vector_21+0x1e>
     3aa:	15 bc       	out	0x25, r1	; 37
     3ac:	8f 91       	pop	r24
     3ae:	0f 90       	pop	r0
				break;
     3b0:	0f be       	out	0x3f, r0	; 63
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <V2Protocol_Init>:
     3b8:	ea e7       	ldi	r30, 0x7A	; 122
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	87 ea       	ldi	r24, 0xA7	; 167
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	80 83       	st	Z, r24
     3c0:	82 98       	cbi	0x10, 2	; 16
     3c2:	ae e7       	ldi	r26, 0x7E	; 126
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8c 91       	ld	r24, X
     3c8:	84 60       	ori	r24, 0x04	; 4
     3ca:	8c 93       	st	X, r24
     3cc:	82 e4       	ldi	r24, 0x42	; 66
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	80 93 7c 00 	sts	0x007C, r24
     3d2:	80 81       	ld	r24, Z

					while (CurrCollectionPath->Parent != NULL)
     3d4:	80 64       	ori	r24, 0x40	; 64
     3d6:	80 83       	st	Z, r24
     3d8:	8d e4       	ldi	r24, 0x4D	; 77
     3da:	87 bd       	out	0x27, r24	; 39
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	84 bd       	out	0x24, r24	; 36
     3e0:	80 93 6e 00 	sts	0x006E, r24
     3e4:	24 d1       	rcall	.+584    	; 0x62e <V2Params_LoadNonVolatileParamValues>
     3e6:	ec c5       	rjmp	.+3032   	; 0xfc0 <ISPTarget_ConfigureRescueClock>

000003e8 <V2Protocol_ProcessCommand>:
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	1f 92       	push	r1
     3f2:	cd b7       	in	r28, 0x3d	; 61
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	10 91 f1 00 	lds	r17, 0x00F1
     3fa:	84 e6       	ldi	r24, 0x64	; 100
     3fc:	8a bd       	out	0x2a, r24	; 42
     3fe:	85 e0       	ldi	r24, 0x05	; 5
     400:	85 bd       	out	0x25, r24	; 37
     402:	14 31       	cpi	r17, 0x14	; 20
     404:	09 f4       	brne	.+2      	; 0x408 <V2Protocol_ProcessCommand+0x20>
     406:	c3 c0       	rjmp	.+390    	; 0x58e <V2Protocol_ProcessCommand+0x1a6>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	e8 f5       	brcc	.+122    	; 0x484 <V2Protocol_ProcessCommand+0x9c>
     40a:	1a 30       	cpi	r17, 0x0A	; 10
     40c:	09 f4       	brne	.+2      	; 0x410 <V2Protocol_ProcessCommand+0x28>
     40e:	a8 c0       	rjmp	.+336    	; 0x560 <V2Protocol_ProcessCommand+0x178>
     410:	48 f5       	brcc	.+82     	; 0x464 <V2Protocol_ProcessCommand+0x7c>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	14 30       	cpi	r17, 0x04	; 4
     414:	18 f5       	brcc	.+70     	; 0x45c <V2Protocol_ProcessCommand+0x74>
     416:	12 30       	cpi	r17, 0x02	; 2
     418:	08 f0       	brcs	.+2      	; 0x41c <V2Protocol_ProcessCommand+0x34>
     41a:	51 c0       	rjmp	.+162    	; 0x4be <V2Protocol_ProcessCommand+0xd6>
     41c:	11 30       	cpi	r17, 0x01	; 1
     41e:	09 f0       	breq	.+2      	; 0x422 <V2Protocol_ProcessCommand+0x3a>

				if (UsageListSize)
     420:	c5 c0       	rjmp	.+394    	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     422:	80 91 e8 00 	lds	r24, 0x00E8
     426:	8b 77       	andi	r24, 0x7B	; 123
     428:	80 93 e8 00 	sts	0x00E8, r24
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	80 93 e9 00 	sts	0x00E9, r24
     432:	80 91 ec 00 	lds	r24, 0x00EC
     436:	81 60       	ori	r24, 0x01	; 1
     438:	80 93 ec 00 	sts	0x00EC, r24
     43c:	10 93 f1 00 	sts	0x00F1, r17

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	10 92 f1 00 	sts	0x00F1, r1
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	80 93 f1 00 	sts	0x00F1, r24
     44a:	40 e0       	ldi	r20, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	6a e0       	ldi	r22, 0x0A	; 10
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	85 e9       	ldi	r24, 0x95	; 149

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Endpoint_Write_Stream_LE>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     45a:	c4 c0       	rjmp	.+392    	; 0x5e4 <V2Protocol_ProcessCommand+0x1fc>
     45c:	16 30       	cpi	r17, 0x06	; 6
     45e:	09 f4       	brne	.+2      	; 0x462 <V2Protocol_ProcessCommand+0x7a>
     460:	59 c0       	rjmp	.+178    	; 0x514 <V2Protocol_ProcessCommand+0x12c>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	a4 c0       	rjmp	.+328    	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     464:	11 31       	cpi	r17, 0x11	; 17
     466:	09 f4       	brne	.+2      	; 0x46a <V2Protocol_ProcessCommand+0x82>
     468:	8d c0       	rjmp	.+282    	; 0x584 <V2Protocol_ProcessCommand+0x19c>
     46a:	28 f4       	brcc	.+10     	; 0x476 <V2Protocol_ProcessCommand+0x8e>
     46c:	10 31       	cpi	r17, 0x10	; 16
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	09 f0       	breq	.+2      	; 0x472 <V2Protocol_ProcessCommand+0x8a>
     470:	9d c0       	rjmp	.+314    	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     472:	74 d4       	rcall	.+2280   	; 0xd5c <ISPProtocol_EnterISPMode>
     474:	bc c0       	rjmp	.+376    	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     476:	12 31       	cpi	r17, 0x12	; 18
     478:	09 f4       	brne	.+2      	; 0x47c <V2Protocol_ProcessCommand+0x94>
     47a:	8c c0       	rjmp	.+280    	; 0x594 <V2Protocol_ProcessCommand+0x1ac>
     47c:	13 31       	cpi	r17, 0x13	; 19
     47e:	09 f4       	brne	.+2      	; 0x482 <V2Protocol_ProcessCommand+0x9a>
     480:	83 c0       	rjmp	.+262    	; 0x588 <V2Protocol_ProcessCommand+0x1a0>
     482:	94 c0       	rjmp	.+296    	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     484:	19 31       	cpi	r17, 0x19	; 25
     486:	09 f4       	brne	.+2      	; 0x48a <V2Protocol_ProcessCommand+0xa2>
     488:	8a c0       	rjmp	.+276    	; 0x59e <V2Protocol_ProcessCommand+0x1b6>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	60 f4       	brcc	.+24     	; 0x4a4 <V2Protocol_ProcessCommand+0xbc>
     48c:	16 31       	cpi	r17, 0x16	; 22
     48e:	09 f4       	brne	.+2      	; 0x492 <V2Protocol_ProcessCommand+0xaa>
     490:	7e c0       	rjmp	.+252    	; 0x58e <V2Protocol_ProcessCommand+0x1a6>
     492:	08 f4       	brcc	.+2      	; 0x496 <V2Protocol_ProcessCommand+0xae>
     494:	79 c0       	rjmp	.+242    	; 0x588 <V2Protocol_ProcessCommand+0x1a0>
     496:	17 31       	cpi	r17, 0x17	; 23
     498:	09 f4       	brne	.+2      	; 0x49c <V2Protocol_ProcessCommand+0xb4>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	81 c0       	rjmp	.+258    	; 0x59e <V2Protocol_ProcessCommand+0x1b6>
     49c:	18 31       	cpi	r17, 0x18	; 24
     49e:	09 f4       	brne	.+2      	; 0x4a2 <V2Protocol_ProcessCommand+0xba>
     4a0:	7b c0       	rjmp	.+246    	; 0x598 <V2Protocol_ProcessCommand+0x1b0>
     4a2:	84 c0       	rjmp	.+264    	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     4a4:	1d 31       	cpi	r17, 0x1D	; 29
     4a6:	09 f4       	brne	.+2      	; 0x4aa <V2Protocol_ProcessCommand+0xc2>
     4a8:	7d c0       	rjmp	.+250    	; 0x5a4 <V2Protocol_ProcessCommand+0x1bc>
     4aa:	08 f4       	brcc	.+2      	; 0x4ae <V2Protocol_ProcessCommand+0xc6>
				break;
     4ac:	75 c0       	rjmp	.+234    	; 0x598 <V2Protocol_ProcessCommand+0x1b0>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	10 35       	cpi	r17, 0x50	; 80
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <V2Protocol_ProcessCommand+0xcc>
     4b2:	7a c0       	rjmp	.+244    	; 0x5a8 <V2Protocol_ProcessCommand+0x1c0>
     4b4:	11 35       	cpi	r17, 0x51	; 81
     4b6:	09 f0       	breq	.+2      	; 0x4ba <V2Protocol_ProcessCommand+0xd2>
     4b8:	79 c0       	rjmp	.+242    	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     4ba:	c6 d7       	rcall	.+3980   	; 0x1448 <XPROGProtocol_SetMode>
     4bc:	98 c0       	rjmp	.+304    	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     4be:	00 91 f1 00 	lds	r16, 0x00F1
     4c2:	12 30       	cpi	r17, 0x02	; 2
     4c4:	11 f4       	brne	.+4      	; 0x4ca <V2Protocol_ProcessCommand+0xe2>
     4c6:	60 91 f1 00 	lds	r22, 0x00F1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	80 91 e8 00 	lds	r24, 0x00E8
     4ce:	8b 77       	andi	r24, 0x7B	; 123
     4d0:	80 93 e8 00 	sts	0x00E8, r24
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	80 93 e9 00 	sts	0x00E9, r24
     4da:	80 91 ec 00 	lds	r24, 0x00EC
     4de:	81 60       	ori	r24, 0x01	; 1
     4e0:	80 93 ec 00 	sts	0x00EC, r24
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	10 93 f1 00 	sts	0x00F1, r17
     4e8:	80 2f       	mov	r24, r16
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	d2 d0       	rcall	.+420    	; 0x692 <V2Params_GetParameterPrivileges>
     4ee:	69 81       	ldd	r22, Y+1	; 0x01
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	12 30       	cpi	r17, 0x02	; 2
     4f2:	39 f4       	brne	.+14     	; 0x502 <V2Protocol_ProcessCommand+0x11a>
     4f4:	81 ff       	sbrs	r24, 1
     4f6:	0c c0       	rjmp	.+24     	; 0x510 <V2Protocol_ProcessCommand+0x128>
     4f8:	10 92 f1 00 	sts	0x00F1, r1
     4fc:	80 2f       	mov	r24, r16
     4fe:	d9 d0       	rcall	.+434    	; 0x6b2 <V2Params_SetParameterValue>
     500:	71 c0       	rjmp	.+226    	; 0x5e4 <V2Protocol_ProcessCommand+0x1fc>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 ff       	sbrs	r24, 0
     504:	05 c0       	rjmp	.+10     	; 0x510 <V2Protocol_ProcessCommand+0x128>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	10 92 f1 00 	sts	0x00F1, r1
     50a:	80 2f       	mov	r24, r16
     50c:	ca d0       	rcall	.+404    	; 0x6a2 <V2Params_GetParameterValue>
     50e:	68 c0       	rjmp	.+208    	; 0x5e0 <V2Protocol_ProcessCommand+0x1f8>
     510:	80 ec       	ldi	r24, 0xC0	; 192
     512:	66 c0       	rjmp	.+204    	; 0x5e0 <V2Protocol_ProcessCommand+0x1f8>
     514:	40 e0       	ldi	r20, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	64 e0       	ldi	r22, 0x04	; 4
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	84 ea       	ldi	r24, 0xA4	; 164

					if (UsageListSize)
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 1e 10 	call	0x203c	; 0x203c <Endpoint_Read_Stream_BE>
     524:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	8b 77       	andi	r24, 0x7B	; 123
     52a:	80 93 e8 00 	sts	0x00E8, r24
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	80 93 e9 00 	sts	0x00E9, r24
     534:	80 91 ec 00 	lds	r24, 0x00EC
     538:	81 60       	ori	r24, 0x01	; 1
     53a:	80 93 ec 00 	sts	0x00EC, r24

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	80 91 a4 01 	lds	r24, 0x01A4
     542:	90 91 a5 01 	lds	r25, 0x01A5
     546:	a0 91 a6 01 	lds	r26, 0x01A6
						  UsageList[i - 1] = UsageList[i];
     54a:	b0 91 a7 01 	lds	r27, 0x01A7
     54e:	b7 ff       	sbrs	r27, 7
     550:	03 c0       	rjmp	.+6      	; 0x558 <V2Protocol_ProcessCommand+0x170>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 a3 01 	sts	0x01A3, r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	86 e0       	ldi	r24, 0x06	; 6
     55a:	80 93 f1 00 	sts	0x00F1, r24
     55e:	0f c0       	rjmp	.+30     	; 0x57e <V2Protocol_ProcessCommand+0x196>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	80 91 e8 00 	lds	r24, 0x00E8
     564:	8b 77       	andi	r24, 0x7B	; 123
     566:	80 93 e8 00 	sts	0x00E8, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	80 93 e9 00 	sts	0x00E9, r24
     570:	80 91 ec 00 	lds	r24, 0x00EC
     574:	81 60       	ori	r24, 0x01	; 1
     576:	80 93 ec 00 	sts	0x00EC, r24
     57a:	10 93 f1 00 	sts	0x00F1, r17
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	10 92 f1 00 	sts	0x00F1, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     582:	30 c0       	rjmp	.+96     	; 0x5e4 <V2Protocol_ProcessCommand+0x1fc>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	6e d4       	rcall	.+2268   	; 0xe62 <ISPProtocol_LeaveISPMode>
     586:	33 c0       	rjmp	.+102    	; 0x5ee <V2Protocol_ProcessCommand+0x206>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	81 2f       	mov	r24, r17
     58a:	d6 d0       	rcall	.+428    	; 0x738 <ISPProtocol_ProgramMemory>
     58c:	30 c0       	rjmp	.+96     	; 0x5ee <V2Protocol_ProcessCommand+0x206>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	81 2f       	mov	r24, r17
     590:	0e d2       	rcall	.+1052   	; 0x9ae <ISPProtocol_ReadMemory>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	2d c0       	rjmp	.+90     	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     594:	9a d4       	rcall	.+2356   	; 0xeca <ISPProtocol_ChipErase>
     596:	2b c0       	rjmp	.+86     	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     598:	81 2f       	mov	r24, r17
     59a:	a7 d2       	rcall	.+1358   	; 0xaea <ISPProtocol_ReadFuseLockSigOSCCAL>
     59c:	28 c0       	rjmp	.+80     	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     59e:	81 2f       	mov	r24, r17
     5a0:	ff d2       	rcall	.+1534   	; 0xba0 <ISPProtocol_WriteFuseLock>
     5a2:	25 c0       	rjmp	.+74     	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     5a4:	43 d3       	rcall	.+1670   	; 0xc2c <ISPProtocol_SPIMulti>
     5a6:	23 c0       	rjmp	.+70     	; 0x5ee <V2Protocol_ProcessCommand+0x206>
     5a8:	7f d7       	rcall	.+3838   	; 0x14a8 <XPROGProtocol_Command>
     5aa:	21 c0       	rjmp	.+66     	; 0x5ee <V2Protocol_ProcessCommand+0x206>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	20 91 f2 00 	lds	r18, 0x00F2
     5b0:	30 91 f3 00 	lds	r19, 0x00F3
     5b4:	80 91 e8 00 	lds	r24, 0x00E8
     5b8:	8b 77       	andi	r24, 0x7B	; 123
     5ba:	80 93 e8 00 	sts	0x00E8, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	20 34       	cpi	r18, 0x40	; 64
     5c0:	31 05       	cpc	r19, r1
     5c2:	19 f4       	brne	.+6      	; 0x5ca <V2Protocol_ProcessCommand+0x1e2>
     5c4:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     5c8:	f1 cf       	rjmp	.-30     	; 0x5ac <V2Protocol_ProcessCommand+0x1c4>
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	80 93 e9 00 	sts	0x00E9, r24
     5d0:	80 91 ec 00 	lds	r24, 0x00EC
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 93 ec 00 	sts	0x00EC, r24
     5da:	10 93 f1 00 	sts	0x00F1, r17
     5de:	89 ec       	ldi	r24, 0xC9	; 201
     5e0:	80 93 f1 00 	sts	0x00F1, r24
     5e4:	80 91 e8 00 	lds	r24, 0x00E8
     5e8:	8e 77       	andi	r24, 0x7E	; 126
     5ea:	80 93 e8 00 	sts	0x00E8, r24
     5ee:	15 bc       	out	0x25, r1	; 37
     5f0:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	80 93 e9 00 	sts	0x00E9, r24
     5fa:	80 91 ec 00 	lds	r24, 0x00EC
					  return HID_PARSE_InsufficientReportItems;
     5fe:	8e 7f       	andi	r24, 0xFE	; 254
     600:	80 93 ec 00 	sts	0x00EC, r24

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <V2Params_GetParamFromTable>:
     610:	ee e3       	ldi	r30, 0x3E	; 62
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	90 81       	ld	r25, Z
     616:	89 17       	cp	r24, r25
     618:	41 f0       	breq	.+16     	; 0x62a <V2Params_GetParamFromTable+0x1a>
     61a:	33 96       	adiw	r30, 0x03	; 3
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	ec 35       	cpi	r30, 0x5C	; 92
     620:	f9 07       	cpc	r31, r25
     622:	c1 f7       	brne	.-16     	; 0x614 <V2Params_GetParamFromTable+0x4>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	08 95       	ret
     62a:	cf 01       	movw	r24, r30
     62c:	08 95       	ret

0000062e <V2Params_LoadNonVolatileParamValues>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 39 14 	call	0x2872	; 0x2872 <__eerd_byte_usb1287>
     63a:	d8 2f       	mov	r29, r24
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 39 14 	call	0x2872	; 0x2872 <__eerd_byte_usb1287>
     644:	c8 2f       	mov	r28, r24
     646:	df 3f       	cpi	r29, 0xFF	; 255
     648:	21 f0       	breq	.+8      	; 0x652 <V2Params_LoadNonVolatileParamValues+0x24>
     64a:	8e e9       	ldi	r24, 0x9E	; 158
     64c:	e1 df       	rcall	.-62     	; 0x610 <V2Params_GetParamFromTable>
     64e:	fc 01       	movw	r30, r24
     650:	d2 83       	std	Z+2, r29	; 0x02
     652:	cf 3f       	cpi	r28, 0xFF	; 255
     654:	21 f0       	breq	.+8      	; 0x65e <V2Params_LoadNonVolatileParamValues+0x30>
     656:	88 e9       	ldi	r24, 0x98	; 152
     658:	db df       	rcall	.-74     	; 0x610 <V2Params_GetParamFromTable>
     65a:	fc 01       	movw	r30, r24
     65c:	c2 83       	std	Z+2, r28	; 0x02
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <V2Params_UpdateParamValues>:
     664:	84 e9       	ldi	r24, 0x94	; 148
     666:	d4 df       	rcall	.-88     	; 0x610 <V2Params_GetParamFromTable>
     668:	ea e7       	ldi	r30, 0x7A	; 122
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	20 81       	ld	r18, Z
     66e:	20 61       	ori	r18, 0x10	; 16
     670:	20 83       	st	Z, r18
     672:	40 91 78 00 	lds	r20, 0x0078
     676:	50 91 79 00 	lds	r21, 0x0079
     67a:	62 e3       	ldi	r22, 0x32	; 50
     67c:	64 9f       	mul	r22, r20
     67e:	90 01       	movw	r18, r0
     680:	65 9f       	mul	r22, r21
     682:	30 0d       	add	r19, r0
     684:	11 24       	eor	r1, r1
     686:	23 2f       	mov	r18, r19
					  ParserData->TotalReportItems++;
     688:	26 95       	lsr	r18
     68a:	26 95       	lsr	r18
     68c:	fc 01       	movw	r30, r24
     68e:	22 83       	std	Z+2, r18	; 0x02
     690:	08 95       	ret

00000692 <V2Params_GetParameterPrivileges>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	be df       	rcall	.-132    	; 0x610 <V2Params_GetParamFromTable>
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	19 f0       	breq	.+6      	; 0x69e <V2Params_GetParameterPrivileges+0xc>
     698:	fc 01       	movw	r30, r24
     69a:	81 81       	ldd	r24, Z+1	; 0x01
     69c:	08 95       	ret
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret

000006a2 <V2Params_GetParameterValue>:
     6a2:	b6 df       	rcall	.-148    	; 0x610 <V2Params_GetParamFromTable>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	19 f0       	breq	.+6      	; 0x6ae <V2Params_GetParameterValue+0xc>
     6a8:	fc 01       	movw	r30, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	82 81       	ldd	r24, Z+2	; 0x02
     6ac:	08 95       	ret
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret

000006b2 <V2Params_SetParameterValue>:
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	1f 92       	push	r1
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	18 2f       	mov	r17, r24
     6c0:	69 83       	std	Y+1, r22	; 0x01
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	a6 df       	rcall	.-180    	; 0x610 <V2Params_GetParamFromTable>
     6c4:	69 81       	ldd	r22, Y+1	; 0x01
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	89 f0       	breq	.+34     	; 0x6ec <V2Params_SetParameterValue+0x3a>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	fc 01       	movw	r30, r24
     6cc:	62 83       	std	Z+2, r22	; 0x02

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	1e 39       	cpi	r17, 0x9E	; 158
     6d0:	19 f4       	brne	.+6      	; 0x6d8 <V2Params_SetParameterValue+0x26>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <V2Params_SetParameterValue+0x2e>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	18 39       	cpi	r17, 0x98	; 152
     6da:	41 f4       	brne	.+16     	; 0x6ec <V2Params_SetParameterValue+0x3a>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0f 90       	pop	r0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__eeupd_byte_usb1287>
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	08 95       	ret

000006f6 <ISPTarget_TransferByte>:
     6f6:	90 91 5c 01 	lds	r25, 0x015C
     6fa:	99 23       	and	r25, r25
     6fc:	31 f0       	breq	.+12     	; 0x70a <ISPTarget_TransferByte+0x14>
     6fe:	8e bd       	out	0x2e, r24	; 46
     700:	0d b4       	in	r0, 0x2d	; 45
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <ISPTarget_TransferByte+0xa>
     706:	8e b5       	in	r24, 0x2e	; 46
     708:	08 95       	ret
     70a:	bf c4       	rjmp	.+2430   	; 0x108a <ISPTarget_TransferSoftSPIByte>

0000070c <ISPTarget_SendByte>:
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     70c:	90 91 5c 01 	lds	r25, 0x015C
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     710:	99 23       	and	r25, r25
     712:	29 f0       	breq	.+10     	; 0x71e <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     714:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <ISPTarget_SendByte+0xa>
     71c:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     71e:	b5 c4       	rjmp	.+2410   	; 0x108a <ISPTarget_TransferSoftSPIByte>

00000720 <ISPTarget_ReceiveByte>:
     720:	80 91 5c 01 	lds	r24, 0x015C
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     724:	88 23       	and	r24, r24
     726:	31 f0       	breq	.+12     	; 0x734 <ISPTarget_ReceiveByte+0x14>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     728:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     72a:	0d b4       	in	r0, 0x2d	; 45
     72c:	07 fe       	sbrs	r0, 7
     72e:	fd cf       	rjmp	.-6      	; 0x72a <ISPTarget_ReceiveByte+0xa>
				return SPDR;
     730:	8e b5       	in	r24, 0x2e	; 46
     732:	08 95       	ret
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	a9 c4       	rjmp	.+2386   	; 0x108a <ISPTarget_TransferSoftSPIByte>

00000738 <ISPProtocol_ProgramMemory>:
     738:	5f 92       	push	r5
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     73a:	6f 92       	push	r6
     73c:	7f 92       	push	r7
     73e:	8f 92       	push	r8
     740:	9f 92       	push	r9
     742:	af 92       	push	r10
     744:	bf 92       	push	r11
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	ca 50       	subi	r28, 0x0A	; 10
     75c:	d1 40       	sbci	r29, 0x01	; 1
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	18 2f       	mov	r17, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	69 e0       	ldi	r22, 0x09	; 9
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     77a:	6a 81       	ldd	r22, Y+2	; 0x02
     77c:	79 81       	ldd	r23, Y+1	; 0x01
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     77e:	7a 83       	std	Y+2, r23	; 0x02
     780:	69 83       	std	Y+1, r22	; 0x01

	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     782:	61 30       	cpi	r22, 0x01	; 1
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	78 07       	cpc	r23, r24
     788:	88 f0       	brcs	.+34     	; 0x7ac <ISPProtocol_ProgramMemory+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     78a:	80 91 e8 00 	lds	r24, 0x00E8
     78e:	8b 77       	andi	r24, 0x7B	; 123
     790:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     79a:	80 91 ec 00 	lds	r24, 0x00EC
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7a4:	10 93 f1 00 	sts	0x00F1, r17
     7a8:	80 ec       	ldi	r24, 0xC0	; 192
     7aa:	e3 c0       	rjmp	.+454    	; 0x972 <ISPProtocol_ProgramMemory+0x23a>
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	ce 01       	movw	r24, r28
     7b2:	0a 96       	adiw	r24, 0x0a	; 10
     7b4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	0a 96       	adiw	r24, 0x0a	; 10
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
     7be:	8f 73       	andi	r24, 0x3F	; 63
     7c0:	99 27       	eor	r25, r25

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     7c2:	89 2b       	or	r24, r25
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <ISPProtocol_ProgramMemory+0x9c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7c6:	80 91 e8 00 	lds	r24, 0x00E8
     7ca:	8b 77       	andi	r24, 0x7B	; 123
     7cc:	80 93 e8 00 	sts	0x00E8, r24
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     7d0:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     7d4:	80 91 e8 00 	lds	r24, 0x00E8
     7d8:	8b 77       	andi	r24, 0x7B	; 123
     7da:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7e4:	80 91 ec 00 	lds	r24, 0x00EC
     7e8:	81 60       	ori	r24, 0x01	; 1
     7ea:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
     7ee:	13 31       	cpi	r17, 0x13	; 19
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <ISPProtocol_ProgramMemory+0xbe>
     7f2:	98 84       	ldd	r9, Y+8	; 0x08
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <ISPProtocol_ProgramMemory+0xc0>
     7f6:	99 84       	ldd	r9, Y+9	; 0x09
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     7f8:	80 90 a4 01 	lds	r8, 0x01A4
     7fc:	70 90 a5 01 	lds	r7, 0x01A5
     800:	fe 01       	movw	r30, r28
     802:	3a 96       	adiw	r30, 0x0a	; 10
     804:	5f 01       	movw	r10, r30

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     806:	c1 2c       	mov	r12, r1
     808:	d1 2c       	mov	r13, r1
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
     80a:	e1 2c       	mov	r14, r1
     80c:	f1 2c       	mov	r15, r1
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     80e:	88 e0       	ldi	r24, 0x08	; 8
     810:	68 2e       	mov	r6, r24
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     812:	55 24       	eor	r5, r5
     814:	53 94       	inc	r5
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	c8 16       	cp	r12, r24
     81c:	d9 06       	cpc	r13, r25
     81e:	08 f0       	brcs	.+2      	; 0x822 <ISPProtocol_ProgramMemory+0xea>
     820:	78 c0       	rjmp	.+240    	; 0x912 <ISPProtocol_ProgramMemory+0x1da>
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     822:	f5 01       	movw	r30, r10
     824:	01 91       	ld	r16, Z+
     826:	5f 01       	movw	r10, r30
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     828:	9b 81       	ldd	r25, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     82a:	80 91 a3 01 	lds	r24, 0x01A3
     82e:	88 23       	and	r24, r24
     830:	69 f0       	breq	.+26     	; 0x84c <ISPProtocol_ProgramMemory+0x114>
		{
			ISPTarget_LoadExtendedAddress();
     832:	c6 5f       	subi	r28, 0xF6	; 246
     834:	de 4f       	sbci	r29, 0xFE	; 254
     836:	98 83       	st	Y, r25
     838:	ca 50       	subi	r28, 0x0A	; 10
     83a:	d1 40       	sbci	r29, 0x01	; 1
     83c:	79 d4       	rcall	.+2290   	; 0x1130 <ISPTarget_LoadExtendedAddress>
     83e:	10 92 a3 01 	sts	0x01A3, r1
			MustLoadExtendedAddress = false;
     842:	c6 5f       	subi	r28, 0xF6	; 246
     844:	de 4f       	sbci	r29, 0xFE	; 254
     846:	98 81       	ld	r25, Y
     848:	ca 50       	subi	r28, 0x0A	; 10
     84a:	d1 40       	sbci	r29, 0x01	; 1
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     84e:	c6 5f       	subi	r28, 0xF6	; 246
     850:	de 4f       	sbci	r29, 0xFE	; 254
     852:	98 83       	st	Y, r25
     854:	ca 50       	subi	r28, 0x0A	; 10
     856:	d1 40       	sbci	r29, 0x01	; 1
     858:	59 df       	rcall	.-334    	; 0x70c <ISPTarget_SendByte>
     85a:	80 91 a5 01 	lds	r24, 0x01A5
		ISPTarget_SendByte(CurrentAddress >> 8);
     85e:	56 df       	rcall	.-340    	; 0x70c <ISPTarget_SendByte>
     860:	80 91 a4 01 	lds	r24, 0x01A4
     864:	53 df       	rcall	.-346    	; 0x70c <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     866:	80 2f       	mov	r24, r16
     868:	51 df       	rcall	.-350    	; 0x70c <ISPTarget_SendByte>
     86a:	c6 5f       	subi	r28, 0xF6	; 246
     86c:	de 4f       	sbci	r29, 0xFE	; 254
		ISPTarget_SendByte(ByteToWrite);
     86e:	98 81       	ld	r25, Y
     870:	ca 50       	subi	r28, 0x0A	; 10
     872:	d1 40       	sbci	r29, 0x01	; 1

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     874:	13 31       	cpi	r17, 0x13	; 19
     876:	19 f4       	brne	.+6      	; 0x87e <ISPProtocol_ProgramMemory+0x146>
     878:	2d 81       	ldd	r18, Y+5	; 0x05
     87a:	26 25       	eor	r18, r6
     87c:	2d 83       	std	Y+5, r18	; 0x05
     87e:	e1 14       	cp	r14, r1
     880:	f1 04       	cpc	r15, r1
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     882:	79 f4       	brne	.+30     	; 0x8a2 <ISPProtocol_ProgramMemory+0x16a>
     884:	09 15       	cp	r16, r9
     886:	69 f0       	breq	.+26     	; 0x8a2 <ISPProtocol_ProgramMemory+0x16a>

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     888:	8f 81       	ldd	r24, Y+7	; 0x07
     88a:	c0 fe       	sbrs	r12, 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <ISPProtocol_ProgramMemory+0x15e>
     88e:	13 31       	cpi	r17, 0x13	; 19
     890:	11 f4       	brne	.+4      	; 0x896 <ISPProtocol_ProgramMemory+0x15e>
     892:	88 60       	ori	r24, 0x08	; 8
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     894:	01 c0       	rjmp	.+2      	; 0x898 <ISPProtocol_ProgramMemory+0x160>
     896:	87 7f       	andi	r24, 0xF7	; 247
     898:	8f 83       	std	Y+7, r24	; 0x07
     89a:	e0 90 a4 01 	lds	r14, 0x01A4
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     89e:	f0 90 a5 01 	lds	r15, 0x01A5
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     8a2:	90 fd       	sbrc	r25, 0

			PollAddress = (CurrentAddress & 0xFFFF);
     8a4:	11 c0       	rjmp	.+34     	; 0x8c8 <ISPProtocol_ProgramMemory+0x190>
     8a6:	e1 14       	cp	r14, r1
     8a8:	f1 04       	cpc	r15, r1
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <ISPProtocol_ProgramMemory+0x17c>
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     8ac:	93 fd       	sbrc	r25, 3
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <ISPProtocol_ProgramMemory+0x17c>
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     8b0:	99 7f       	andi	r25, 0xF9	; 249
     8b2:	92 60       	ori	r25, 0x02	; 2
     8b4:	0f 81       	ldd	r16, Y+7	; 0x07
     8b6:	2c 81       	ldd	r18, Y+4	; 0x04
     8b8:	49 2d       	mov	r20, r9
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     8ba:	b7 01       	movw	r22, r14
     8bc:	89 2f       	mov	r24, r25

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     8be:	41 d4       	rcall	.+2178   	; 0x1142 <ISPTarget_WaitForProgComplete>
     8c0:	81 11       	cpse	r24, r1
     8c2:	28 c0       	rjmp	.+80     	; 0x914 <ISPProtocol_ProgramMemory+0x1dc>
     8c4:	e1 2c       	mov	r14, r1
     8c6:	f1 2c       	mov	r15, r1
     8c8:	c0 fc       	sbrc	r12, 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <ISPProtocol_ProgramMemory+0x198>
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     8cc:	15 31       	cpi	r17, 0x15	; 21
     8ce:	e9 f4       	brne	.+58     	; 0x90a <ISPProtocol_ProgramMemory+0x1d2>
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     8d0:	80 91 a4 01 	lds	r24, 0x01A4
		}

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     8d4:	90 91 a5 01 	lds	r25, 0x01A5
     8d8:	a0 91 a6 01 	lds	r26, 0x01A6
		{
			CurrentAddress++;
     8dc:	b0 91 a7 01 	lds	r27, 0x01A7
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	a1 1d       	adc	r26, r1
     8e4:	b1 1d       	adc	r27, r1
     8e6:	80 93 a4 01 	sts	0x01A4, r24
     8ea:	90 93 a5 01 	sts	0x01A5, r25
     8ee:	a0 93 a6 01 	sts	0x01A6, r26
     8f2:	b0 93 a7 01 	sts	0x01A7, r27
     8f6:	13 31       	cpi	r17, 0x13	; 19
     8f8:	41 f4       	brne	.+16     	; 0x90a <ISPProtocol_ProgramMemory+0x1d2>
     8fa:	aa 27       	eor	r26, r26
     8fc:	bb 27       	eor	r27, r27
     8fe:	89 2b       	or	r24, r25
     900:	8a 2b       	or	r24, r26

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     902:	8b 2b       	or	r24, r27
     904:	11 f4       	brne	.+4      	; 0x90a <ISPProtocol_ProgramMemory+0x1d2>
     906:	50 92 a3 01 	sts	0x01A3, r5
     90a:	ff ef       	ldi	r31, 0xFF	; 255
     90c:	cf 1a       	sub	r12, r31
     90e:	df 0a       	sbc	r13, r31
     910:	82 cf       	rjmp	.-252    	; 0x816 <ISPProtocol_ProgramMemory+0xde>
			  MustLoadExtendedAddress = true;
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	9b 81       	ldd	r25, Y+3	; 0x03
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     916:	97 ff       	sbrs	r25, 7
     918:	2a c0       	rjmp	.+84     	; 0x96e <ISPProtocol_ProgramMemory+0x236>
     91a:	8e 81       	ldd	r24, Y+6	; 0x06
     91c:	f7 de       	rcall	.-530    	; 0x70c <ISPTarget_SendByte>
     91e:	87 2d       	mov	r24, r7
			  MustLoadExtendedAddress = true;
		}
	}

	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     920:	f5 de       	rcall	.-534    	; 0x70c <ISPTarget_SendByte>
     922:	88 2d       	mov	r24, r8
     924:	f3 de       	rcall	.-538    	; 0x70c <ISPTarget_SendByte>
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	f1 de       	rcall	.-542    	; 0x70c <ISPTarget_SendByte>
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
		ISPTarget_SendByte(PageStartAddress >> 8);
     92c:	85 ff       	sbrs	r24, 5
     92e:	06 c0       	rjmp	.+12     	; 0x93c <ISPProtocol_ProgramMemory+0x204>
     930:	e1 14       	cp	r14, r1
		ISPTarget_SendByte(PageStartAddress & 0xFF);
     932:	f1 04       	cpc	r15, r1
     934:	19 f4       	brne	.+6      	; 0x93c <ISPProtocol_ProgramMemory+0x204>
     936:	8f 7c       	andi	r24, 0xCF	; 207
		ISPTarget_SendByte(0x00);
     938:	80 61       	ori	r24, 0x10	; 16
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	0f 81       	ldd	r16, Y+7	; 0x07

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     93e:	2c 81       	ldd	r18, Y+4	; 0x04
     940:	49 2d       	mov	r20, r9
     942:	b7 01       	movw	r22, r14
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	fd d3       	rcall	.+2042   	; 0x1142 <ISPTarget_WaitForProgComplete>
     948:	13 31       	cpi	r17, 0x13	; 19
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     94a:	89 f4       	brne	.+34     	; 0x96e <ISPProtocol_ProgramMemory+0x236>
     94c:	40 91 a4 01 	lds	r20, 0x01A4
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     950:	50 91 a5 01 	lds	r21, 0x01A5
     954:	60 91 a6 01 	lds	r22, 0x01A6
     958:	70 91 a7 01 	lds	r23, 0x01A7
     95c:	66 27       	eor	r22, r22
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     95e:	77 27       	eor	r23, r23
     960:	45 2b       	or	r20, r21
     962:	46 2b       	or	r20, r22
     964:	47 2b       	or	r20, r23
     966:	19 f4       	brne	.+6      	; 0x96e <ISPProtocol_ProgramMemory+0x236>
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	90 93 a3 01 	sts	0x01A3, r25
     96e:	10 93 f1 00 	sts	0x00F1, r17
     972:	80 93 f1 00 	sts	0x00F1, r24
     976:	80 91 e8 00 	lds	r24, 0x00E8
     97a:	8e 77       	andi	r24, 0x7E	; 126
     97c:	80 93 e8 00 	sts	0x00E8, r24
		  MustLoadExtendedAddress = true;
     980:	c6 5f       	subi	r28, 0xF6	; 246
     982:	de 4f       	sbci	r29, 0xFE	; 254
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
	}

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	7f 90       	pop	r7
     9a8:	6f 90       	pop	r6
     9aa:	5f 90       	pop	r5
     9ac:	08 95       	ret

000009ae <ISPProtocol_ReadMemory>:
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <ISPProtocol_ReadMemory+0x10>
     9be:	1f 92       	push	r1
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     9c4:	f8 2e       	mov	r15, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	63 e0       	ldi	r22, 0x03	; 3
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     9da:	99 83       	std	Y+1, r25	; 0x01
     9dc:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9de:	80 91 e8 00 	lds	r24, 0x00E8
     9e2:	8b 77       	andi	r24, 0x7B	; 123
     9e4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     9ee:	80 91 ec 00 	lds	r24, 0x00EC
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9f8:	f0 92 f1 00 	sts	0x00F1, r15
     9fc:	10 92 f1 00 	sts	0x00F1, r1

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     a00:	00 e0       	ldi	r16, 0x00	; 0
     a02:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     a04:	98 e0       	ldi	r25, 0x08	; 8
     a06:	e9 2e       	mov	r14, r25
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     a08:	dd 24       	eor	r13, r13
     a0a:	d3 94       	inc	r13

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     a0c:	29 81       	ldd	r18, Y+1	; 0x01
     a0e:	3a 81       	ldd	r19, Y+2	; 0x02
     a10:	02 17       	cp	r16, r18
     a12:	13 07       	cpc	r17, r19
     a14:	08 f0       	brcs	.+2      	; 0xa18 <ISPProtocol_ReadMemory+0x6a>
     a16:	4a c0       	rjmp	.+148    	; 0xaac <ISPProtocol_ReadMemory+0xfe>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     a18:	80 91 a3 01 	lds	r24, 0x01A3
     a1c:	88 23       	and	r24, r24
     a1e:	19 f0       	breq	.+6      	; 0xa26 <ISPProtocol_ReadMemory+0x78>
		{
			ISPTarget_LoadExtendedAddress();
     a20:	87 d3       	rcall	.+1806   	; 0x1130 <ISPTarget_LoadExtendedAddress>
     a22:	10 92 a3 01 	sts	0x01A3, r1
			MustLoadExtendedAddress = false;
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     a28:	71 de       	rcall	.-798    	; 0x70c <ISPTarget_SendByte>
     a2a:	80 91 a5 01 	lds	r24, 0x01A5
		ISPTarget_SendByte(CurrentAddress >> 8);
     a2e:	6e de       	rcall	.-804    	; 0x70c <ISPTarget_SendByte>
     a30:	80 91 a4 01 	lds	r24, 0x01A4
     a34:	6b de       	rcall	.-810    	; 0x70c <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     a36:	74 de       	rcall	.-792    	; 0x720 <ISPTarget_ReceiveByte>
     a38:	80 93 f1 00 	sts	0x00F1, r24
     a3c:	80 91 e8 00 	lds	r24, 0x00E8
		Endpoint_Write_8(ISPTarget_ReceiveByte());
     a40:	85 fd       	sbrc	r24, 5
     a42:	07 c0       	rjmp	.+14     	; 0xa52 <ISPProtocol_ReadMemory+0xa4>
     a44:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a48:	8e 77       	andi	r24, 0x7E	; 126

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     a4a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a4e:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     a52:	84 e1       	ldi	r24, 0x14	; 20
     a54:	f8 12       	cpse	r15, r24
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <ISPProtocol_ReadMemory+0xb0>
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	8e 25       	eor	r24, r14
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     a5c:	8b 83       	std	Y+3, r24	; 0x03
     a5e:	00 fd       	sbrc	r16, 0
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <ISPProtocol_ReadMemory+0xba>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     a62:	86 e1       	ldi	r24, 0x16	; 22
     a64:	f8 12       	cpse	r15, r24
     a66:	1f c0       	rjmp	.+62     	; 0xaa6 <ISPProtocol_ReadMemory+0xf8>

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     a68:	40 91 a4 01 	lds	r20, 0x01A4
     a6c:	50 91 a5 01 	lds	r21, 0x01A5
     a70:	60 91 a6 01 	lds	r22, 0x01A6
		{
			CurrentAddress++;
     a74:	70 91 a7 01 	lds	r23, 0x01A7
     a78:	4f 5f       	subi	r20, 0xFF	; 255
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	6f 4f       	sbci	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	40 93 a4 01 	sts	0x01A4, r20
     a84:	50 93 a5 01 	sts	0x01A5, r21
     a88:	60 93 a6 01 	sts	0x01A6, r22
     a8c:	70 93 a7 01 	sts	0x01A7, r23
     a90:	86 e1       	ldi	r24, 0x16	; 22
     a92:	f8 16       	cp	r15, r24
     a94:	41 f0       	breq	.+16     	; 0xaa6 <ISPProtocol_ReadMemory+0xf8>
     a96:	66 27       	eor	r22, r22
     a98:	77 27       	eor	r23, r23

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     a9a:	45 2b       	or	r20, r21
     a9c:	46 2b       	or	r20, r22
     a9e:	47 2b       	or	r20, r23
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <ISPProtocol_ReadMemory+0xf8>
     aa2:	d0 92 a3 01 	sts	0x01A3, r13
     aa6:	0f 5f       	subi	r16, 0xFF	; 255
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	b0 cf       	rjmp	.-160    	; 0xa0c <ISPProtocol_ReadMemory+0x5e>
			  MustLoadExtendedAddress = true;
     aac:	10 92 f1 00 	sts	0x00F1, r1

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     ab0:	90 91 e8 00 	lds	r25, 0x00E8
     ab4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ab8:	8e 77       	andi	r24, 0x7E	; 126
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     aba:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     abe:	95 fd       	sbrc	r25, 5
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <ISPProtocol_ReadMemory+0x126>
     ac2:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     ac6:	80 91 e8 00 	lds	r24, 0x00E8

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     aca:	8e 77       	andi	r24, 0x7E	; 126
	{
		Endpoint_WaitUntilReady();
     acc:	80 93 e8 00 	sts	0x00E8, r24
     ad0:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
	}
}
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	08 95       	ret

00000aea <ISPProtocol_ReadFuseLockSigOSCCAL>:
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	29 97       	sbiw	r28, 0x09	; 9
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	b8 2e       	mov	r11, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	65 e0       	ldi	r22, 0x05	; 5
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b1e:	90 91 e8 00 	lds	r25, 0x00E8
     b22:	9b 77       	andi	r25, 0x7B	; 123
     b24:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b2e:	90 91 ec 00 	lds	r25, 0x00EC
     b32:	91 60       	ori	r25, 0x01	; 1
     b34:	90 93 ec 00 	sts	0x00EC, r25
     b38:	8e 01       	movw	r16, r28
     b3a:	0e 5f       	subi	r16, 0xFE	; 254
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	7e 01       	movw	r14, r28
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	e8 0e       	add	r14, r24
     b44:	f1 1c       	adc	r15, r1
     b46:	67 01       	movw	r12, r14

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     b48:	f8 01       	movw	r30, r16
     b4a:	81 91       	ld	r24, Z+
     b4c:	8f 01       	movw	r16, r30
     b4e:	d3 dd       	rcall	.-1114   	; 0x6f6 <ISPTarget_TransferByte>
     b50:	f7 01       	movw	r30, r14
     b52:	81 93       	st	Z+, r24
     b54:	7f 01       	movw	r14, r30
     b56:	0c 15       	cp	r16, r12
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     b58:	1d 05       	cpc	r17, r13
     b5a:	b1 f7       	brne	.-20     	; 0xb48 <ISPProtocol_ReadFuseLockSigOSCCAL+0x5e>
     b5c:	b0 92 f1 00 	sts	0x00F1, r11
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b60:	10 92 f1 00 	sts	0x00F1, r1
     b64:	89 81       	ldd	r24, Y+1	; 0x01
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     b66:	fe 01       	movw	r30, r28
     b68:	e8 0f       	add	r30, r24
     b6a:	f1 1d       	adc	r31, r1
     b6c:	85 81       	ldd	r24, Z+5	; 0x05
     b6e:	80 93 f1 00 	sts	0x00F1, r24
     b72:	10 92 f1 00 	sts	0x00F1, r1
     b76:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b7a:	8e 77       	andi	r24, 0x7E	; 126
     b7c:	80 93 e8 00 	sts	0x00E8, r24
     b80:	29 96       	adiw	r28, 0x09	; 9
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	08 95       	ret

00000ba0 <ISPProtocol_WriteFuseLock>:
     ba0:	df 92       	push	r13
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <ISPProtocol_WriteFuseLock+0x10>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <ISPProtocol_WriteFuseLock+0x12>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	d8 2e       	mov	r13, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	64 e0       	ldi	r22, 0x04	; 4
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bc8:	90 91 e8 00 	lds	r25, 0x00E8
     bcc:	9b 77       	andi	r25, 0x7B	; 123
     bce:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     bd8:	90 91 ec 00 	lds	r25, 0x00EC
     bdc:	91 60       	ori	r25, 0x01	; 1
     bde:	90 93 ec 00 	sts	0x00EC, r25
     be2:	8e 01       	movw	r16, r28
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	7e 01       	movw	r14, r28
     bea:	85 e0       	ldi	r24, 0x05	; 5
     bec:	e8 0e       	add	r14, r24
     bee:	f1 1c       	adc	r15, r1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     bf0:	f8 01       	movw	r30, r16
     bf2:	81 91       	ld	r24, Z+
     bf4:	8f 01       	movw	r16, r30
     bf6:	8a dd       	rcall	.-1260   	; 0x70c <ISPTarget_SendByte>
     bf8:	0e 15       	cp	r16, r14
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     bfa:	1f 05       	cpc	r17, r15
     bfc:	c9 f7       	brne	.-14     	; 0xbf0 <ISPProtocol_WriteFuseLock+0x50>
     bfe:	d0 92 f1 00 	sts	0x00F1, r13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c02:	10 92 f1 00 	sts	0x00F1, r1
     c06:	10 92 f1 00 	sts	0x00F1, r1
     c0a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c0e:	8e 77       	andi	r24, 0x7E	; 126
     c10:	80 93 e8 00 	sts	0x00E8, r24
     c14:	0f 90       	pop	r0

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <ISPProtocol_SPIMulti>:
     c2c:	ff 92       	push	r15

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	c2 50       	subi	r28, 0x02	; 2
     c3c:	d1 40       	sbci	r29, 0x01	; 1
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     c58:	69 81       	ldd	r22, Y+1	; 0x01
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	ce 01       	movw	r24, r28
     c62:	04 96       	adiw	r24, 0x04	; 4
     c64:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c68:	80 91 e8 00 	lds	r24, 0x00E8
     c6c:	8b 77       	andi	r24, 0x7B	; 123
     c6e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     c78:	80 91 ec 00 	lds	r24, 0x00EC
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c82:	8d e1       	ldi	r24, 0x1D	; 29
     c84:	80 93 f1 00 	sts	0x00F1, r24
     c88:	10 92 f1 00 	sts	0x00F1, r1
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SPI_MULTI);
	Endpoint_Write_8(STATUS_CMD_OK);

	uint8_t CurrTxPos = 0;
     c8c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	18 17       	cp	r17, r24
     c92:	78 f4       	brcc	.+30     	; 0xcb2 <ISPProtocol_SPIMulti+0x86>
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	18 17       	cp	r17, r24
     c98:	40 f4       	brcc	.+16     	; 0xcaa <ISPProtocol_SPIMulti+0x7e>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     c9a:	e4 e0       	ldi	r30, 0x04	; 4
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	ec 0f       	add	r30, r28
     ca0:	fd 1f       	adc	r31, r29
     ca2:	e1 0f       	add	r30, r17
     ca4:	f1 1d       	adc	r31, r1
     ca6:	80 81       	ld	r24, Z
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <ISPProtocol_SPIMulti+0x80>
		else
		  ISPTarget_SendByte(0);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	2f dd       	rcall	.-1442   	; 0x70c <ISPTarget_SendByte>
     cae:	1f 5f       	subi	r17, 0xFF	; 255

		CurrTxPos++;
     cb0:	ee cf       	rjmp	.-36     	; 0xc8e <ISPProtocol_SPIMulti+0x62>
     cb2:	00 e0       	ldi	r16, 0x00	; 0

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     cb6:	08 17       	cp	r16, r24
     cb8:	10 f5       	brcc	.+68     	; 0xcfe <ISPProtocol_SPIMulti+0xd2>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     cbc:	18 17       	cp	r17, r24
     cbe:	78 f4       	brcc	.+30     	; 0xcde <ISPProtocol_SPIMulti+0xb2>
     cc0:	ff 24       	eor	r15, r15
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     cc2:	f3 94       	inc	r15
     cc4:	f1 0e       	add	r15, r17
     cc6:	e4 e0       	ldi	r30, 0x04	; 4
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	ec 0f       	add	r30, r28
     ccc:	fd 1f       	adc	r31, r29
     cce:	e1 0f       	add	r30, r17
     cd0:	f1 1d       	adc	r31, r1
     cd2:	80 81       	ld	r24, Z
     cd4:	10 dd       	rcall	.-1504   	; 0x6f6 <ISPTarget_TransferByte>
     cd6:	80 93 f1 00 	sts	0x00F1, r24
     cda:	1f 2d       	mov	r17, r15
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <ISPProtocol_SPIMulti+0xb8>
     cde:	20 dd       	rcall	.-1472   	; 0x720 <ISPTarget_ReceiveByte>
     ce0:	80 93 f1 00 	sts	0x00F1, r24
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());
     ce4:	80 91 e8 00 	lds	r24, 0x00E8
     ce8:	85 fd       	sbrc	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cea:	07 c0       	rjmp	.+14     	; 0xcfa <ISPProtocol_SPIMulti+0xce>
     cec:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     cf0:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cf2:	80 93 e8 00 	sts	0x00E8, r24
     cf6:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     cfa:	0f 5f       	subi	r16, 0xFF	; 255
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     cfc:	db cf       	rjmp	.-74     	; 0xcb4 <ISPProtocol_SPIMulti+0x88>
     cfe:	10 92 f1 00 	sts	0x00F1, r1
		}

		CurrRxPos++;
     d02:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d06:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d0a:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d0c:	80 93 e8 00 	sts	0x00E8, r24
     d10:	95 fd       	sbrc	r25, 5
     d12:	09 c0       	rjmp	.+18     	; 0xd26 <ISPProtocol_SPIMulti+0xfa>
     d14:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     d18:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_WaitUntilReady();
     d1c:	8e 77       	andi	r24, 0x7E	; 126
     d1e:	80 93 e8 00 	sts	0x00E8, r24
     d22:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
     d26:	ce 5f       	subi	r28, 0xFE	; 254
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     d28:	de 4f       	sbci	r29, 0xFE	; 254
     d2a:	0f b6       	in	r0, 0x3f	; 63
	}
}
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	08 95       	ret

00000d40 <ISPProtocol_DelayMS>:
     d40:	88 23       	and	r24, r24
     d42:	59 f0       	breq	.+22     	; 0xd5a <ISPProtocol_DelayMS+0x1a>
     d44:	9a b5       	in	r25, 0x2a	; 42
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	while (DelayMS-- && TimeoutTicksRemaining)
     d46:	81 50       	subi	r24, 0x01	; 1
     d48:	99 23       	and	r25, r25
     d4a:	39 f0       	breq	.+14     	; 0xd5a <ISPProtocol_DelayMS+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4c:	ef ec       	ldi	r30, 0xCF	; 207
     d4e:	f7 e0       	ldi	r31, 0x07	; 7
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <ISPProtocol_DelayMS+0x10>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <ISPProtocol_DelayMS+0x16>
     d56:	00 00       	nop
     d58:	f3 cf       	rjmp	.-26     	; 0xd40 <ISPProtocol_DelayMS>
     d5a:	08 95       	ret

00000d5c <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	2f 97       	sbiw	r28, 0x0f	; 15
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	6b e0       	ldi	r22, 0x0B	; 11
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d8c:	80 91 e8 00 	lds	r24, 0x00E8
     d90:	8b 77       	andi	r24, 0x7B	; 123
     d92:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d9c:	80 91 ec 00 	lds	r24, 0x00EC
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     da6:	10 92 a4 01 	sts	0x01A4, r1
     daa:	10 92 a5 01 	sts	0x01A5, r1
     dae:	10 92 a6 01 	sts	0x01A6, r1
     db2:	10 92 a7 01 	sts	0x01A7, r1

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	c3 df       	rcall	.-122    	; 0xd40 <ISPProtocol_DelayMS>
     dba:	40 d1       	rcall	.+640    	; 0x103c <ISPTarget_EnableTargetISP>
	ISPTarget_EnableTargetISP();
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	8e d1       	rcall	.+796    	; 0x10dc <ISPTarget_ChangeTargetResetLine>

	ISPTarget_ChangeTargetResetLine(true);
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	be df       	rcall	.-132    	; 0xd40 <ISPProtocol_DelayMS>
     dc4:	7e 01       	movw	r14, r28
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     dc6:	8c e0       	ldi	r24, 0x0C	; 12
     dc8:	e8 0e       	add	r14, r24
     dca:	f1 1c       	adc	r15, r1
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9f ef       	ldi	r25, 0xFF	; 255
     dd0:	98 0f       	add	r25, r24
     dd2:	9c 83       	std	Y+4, r25	; 0x04

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     dd4:	88 23       	and	r24, r24
     dd6:	59 f1       	breq	.+86     	; 0xe2e <ISPProtocol_EnterISPMode+0xd2>
     dd8:	8a b5       	in	r24, 0x2a	; 42
     dda:	88 23       	and	r24, r24
     ddc:	41 f1       	breq	.+80     	; 0xe2e <ISPProtocol_EnterISPMode+0xd2>
     dde:	8e 01       	movw	r16, r28
     de0:	08 5f       	subi	r16, 0xF8	; 248
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	67 01       	movw	r12, r14
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	ab df       	rcall	.-170    	; 0xd40 <ISPProtocol_DelayMS>
     dea:	f8 01       	movw	r30, r16
     dec:	81 91       	ld	r24, Z+
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     dee:	8f 01       	movw	r16, r30
     df0:	82 dc       	rcall	.-1788   	; 0x6f6 <ISPTarget_TransferByte>
     df2:	f6 01       	movw	r30, r12
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     df4:	81 93       	st	Z+, r24
     df6:	6f 01       	movw	r12, r30
     df8:	0e 15       	cp	r16, r14
     dfa:	1f 05       	cpc	r17, r15
     dfc:	a1 f7       	brne	.-24     	; 0xde6 <ISPProtocol_EnterISPMode+0x8a>
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	88 23       	and	r24, r24
     e02:	51 f0       	breq	.+20     	; 0xe18 <ISPProtocol_EnterISPMode+0xbc>
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     e04:	eb e0       	ldi	r30, 0x0B	; 11
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ec 0f       	add	r30, r28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     e0a:	fd 1f       	adc	r31, r29
     e0c:	e8 0f       	add	r30, r24
     e0e:	f1 1d       	adc	r31, r1
     e10:	90 81       	ld	r25, Z
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	98 13       	cpse	r25, r24
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <ISPProtocol_EnterISPMode+0xc0>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0a c0       	rjmp	.+20     	; 0xe30 <ISPProtocol_EnterISPMode+0xd4>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	5e d1       	rcall	.+700    	; 0x10dc <ISPTarget_ChangeTargetResetLine>
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8e df       	rcall	.-228    	; 0xd40 <ISPProtocol_DelayMS>
		{
			ResponseStatus = STATUS_CMD_OK;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	5a d1       	rcall	.+692    	; 0x10dc <ISPTarget_ChangeTargetResetLine>
			break;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	8a df       	rcall	.-236    	; 0xd40 <ISPProtocol_DelayMS>
     e2c:	cf cf       	rjmp	.-98     	; 0xdcc <ISPProtocol_EnterISPMode+0x70>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     e2e:	80 ec       	ldi	r24, 0xC0	; 192
     e30:	90 e1       	ldi	r25, 0x10	; 16
     e32:	90 93 f1 00 	sts	0x00F1, r25
			ISPTarget_ChangeTargetResetLine(true);
     e36:	80 93 f1 00 	sts	0x00F1, r24
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     e3a:	80 91 e8 00 	lds	r24, 0x00E8
     e3e:	8e 77       	andi	r24, 0x7E	; 126
     e40:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e44:	2f 96       	adiw	r28, 0x0f	; 15
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	08 95       	ret

00000e62 <ISPProtocol_LeaveISPMode>:
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <ISPProtocol_LeaveISPMode+0xa>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	62 e0       	ldi	r22, 0x02	; 2
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e80:	08 ee       	ldi	r16, 0xE8	; 232
     e82:	10 e0       	ldi	r17, 0x00	; 0
     e84:	f8 01       	movw	r30, r16
     e86:	80 81       	ld	r24, Z
     e88:	8b 77       	andi	r24, 0x7B	; 123
     e8a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e92:	ec ee       	ldi	r30, 0xEC	; 236
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	50 df       	rcall	.-352    	; 0xd40 <ISPProtocol_DelayMS>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
	ISPTarget_ChangeTargetResetLine(false);
     ea2:	1c d1       	rcall	.+568    	; 0x10dc <ISPTarget_ChangeTargetResetLine>
     ea4:	9f d0       	rcall	.+318    	; 0xfe4 <ISPTarget_DisableTargetISP>
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
	ISPTarget_DisableTargetISP();
     ea8:	4b df       	rcall	.-362    	; 0xd40 <ISPProtocol_DelayMS>
     eaa:	e1 ef       	ldi	r30, 0xF1	; 241
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	81 e1       	ldi	r24, 0x11	; 17
     eb0:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eb2:	10 82       	st	Z, r1
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 81       	ld	r24, Z
     eb8:	8e 77       	andi	r24, 0x7E	; 126
     eba:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <ISPProtocol_ChipErase>:
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <ISPProtocol_ChipErase+0xe>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <ISPProtocol_ChipErase+0x10>
     eda:	00 d0       	rcall	.+0      	; 0xedc <ISPProtocol_ChipErase+0x12>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	66 e0       	ldi	r22, 0x06	; 6
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ef0:	80 91 e8 00 	lds	r24, 0x00E8
     ef4:	8b 77       	andi	r24, 0x7B	; 123
     ef6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     f00:	80 91 ec 00 	lds	r24, 0x00EC
     f04:	81 60       	ori	r24, 0x01	; 1
     f06:	80 93 ec 00 	sts	0x00EC, r24
     f0a:	8e 01       	movw	r16, r28
     f0c:	0d 5f       	subi	r16, 0xFD	; 253
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	7e 01       	movw	r14, r28
     f12:	87 e0       	ldi	r24, 0x07	; 7
     f14:	e8 0e       	add	r14, r24
     f16:	f1 1c       	adc	r15, r1

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     f18:	f8 01       	movw	r30, r16
     f1a:	81 91       	ld	r24, Z+
     f1c:	8f 01       	movw	r16, r30
     f1e:	f6 db       	rcall	.-2068   	; 0x70c <ISPTarget_SendByte>
     f20:	0e 15       	cp	r16, r14
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     f22:	1f 05       	cpc	r17, r15
     f24:	c9 f7       	brne	.-14     	; 0xf18 <ISPProtocol_ChipErase+0x4e>
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     f28:	81 11       	cpse	r24, r1
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <ISPProtocol_ChipErase+0x6a>
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     f2e:	08 df       	rcall	.-496    	; 0xd40 <ISPProtocol_DelayMS>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <ISPProtocol_ChipErase+0x6c>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;
     f34:	df d0       	rcall	.+446    	; 0x10f4 <ISPTarget_WaitWhileTargetBusy>
     f36:	92 e1       	ldi	r25, 0x12	; 18

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     f38:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f3c:	80 93 f1 00 	sts	0x00F1, r24
     f40:	80 91 e8 00 	lds	r24, 0x00E8
     f44:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f46:	80 93 e8 00 	sts	0x00E8, r24
     f4a:	26 96       	adiw	r28, 0x06	; 6
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <__vector_17>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	8f 93       	push	r24
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     f70:	19 99       	sbic	0x03, 1	; 3
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <__vector_17+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
     f74:	80 91 a1 01 	lds	r24, 0x01A1
     f78:	87 ff       	sbrs	r24, 7
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <__vector_17+0x1c>
		  PORTB |=  (1 << 2);
     f7c:	2a 9a       	sbi	0x05, 2	; 5
     f7e:	19 c0       	rjmp	.+50     	; 0xfb2 <__vector_17+0x4e>
		else
		  PORTB &= ~(1 << 2);
     f80:	2a 98       	cbi	0x05, 2	; 5
     f82:	17 c0       	rjmp	.+46     	; 0xfb2 <__vector_17+0x4e>
	}
	else
	{
		SoftSPI_Data <<= 1;
     f84:	80 91 a1 01 	lds	r24, 0x01A1
     f88:	88 0f       	add	r24, r24
     f8a:	80 93 a1 01 	sts	0x01A1, r24

		if (!(--SoftSPI_BitsRemaining))
     f8e:	80 91 a0 01 	lds	r24, 0x01A0
     f92:	81 50       	subi	r24, 0x01	; 1
     f94:	80 93 a0 01 	sts	0x01A0, r24
     f98:	81 11       	cpse	r24, r1
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <__vector_17+0x40>
		{
			TCCR1B = 0;
     f9c:	10 92 81 00 	sts	0x0081, r1
			TIFR1  = (1 << OCF1A);
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	86 bb       	out	0x16, r24	; 22
		}

		if (PINB & (1 << 3))
     fa4:	1b 9b       	sbis	0x03, 3	; 3
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <__vector_17+0x4e>
		  SoftSPI_Data |= (1 << 0);
     fa8:	80 91 a1 01 	lds	r24, 0x01A1
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	80 93 a1 01 	sts	0x01A1, r24
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
     fb2:	19 9a       	sbi	0x03, 1	; 3
}
     fb4:	8f 91       	pop	r24
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	0f 90       	pop	r0
     fbc:	1f 90       	pop	r1
     fbe:	18 95       	reti

00000fc0 <ISPTarget_ConfigureRescueClock>:
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
		#else
		DDRB |= (1 << 5);
     fc0:	25 9a       	sbi	0x04, 5	; 4
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
     fc2:	10 92 6f 00 	sts	0x006F, r1
		TCNT1  = 0;
     fc6:	10 92 85 00 	sts	0x0085, r1
     fca:	10 92 84 00 	sts	0x0084, r1
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
     fce:	10 92 89 00 	sts	0x0089, r1
     fd2:	10 92 88 00 	sts	0x0088, r1
		TCCR1A = (1 << COM1A0);
     fd6:	80 e4       	ldi	r24, 0x40	; 64
     fd8:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = ((1 << WGM12) | (1 << CS10));
     fdc:	89 e0       	ldi	r24, 0x09	; 9
     fde:	80 93 81 00 	sts	0x0081, r24
     fe2:	08 95       	ret

00000fe4 <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
     fe4:	80 91 5c 01 	lds	r24, 0x015C
     fe8:	88 23       	and	r24, r24
     fea:	49 f0       	breq	.+18     	; 0xffe <ISPTarget_DisableTargetISP+0x1a>

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void);
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     fec:	84 b1       	in	r24, 0x04	; 4
     fee:	89 7f       	andi	r24, 0xF9	; 249
     ff0:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
     ff2:	85 b1       	in	r24, 0x05	; 5
     ff4:	86 7f       	andi	r24, 0xF6	; 246
     ff6:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
     ff8:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
     ffa:	1d bc       	out	0x2d, r1	; 45
     ffc:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
     ffe:	84 b1       	in	r24, 0x04	; 4
    1000:	89 7f       	andi	r24, 0xF9	; 249
    1002:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
    1004:	85 b1       	in	r24, 0x05	; 5
    1006:	86 7f       	andi	r24, 0xF6	; 246
    1008:	85 b9       	out	0x05, r24	; 5

		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
    100a:	da cf       	rjmp	.-76     	; 0xfc0 <ISPTarget_ConfigureRescueClock>

0000100c <ISPTarget_ConfigureSoftwareSPI>:
    100c:	92 e0       	ldi	r25, 0x02	; 2
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
    100e:	90 93 6f 00 	sts	0x006F, r25
	TCNT1  = 0;
    1012:	10 92 85 00 	sts	0x0085, r1
    1016:	10 92 84 00 	sts	0x0084, r1
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
    101a:	e8 2f       	mov	r30, r24
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	e8 53       	subi	r30, 0x38	; 56
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	85 91       	lpm	r24, Z+
    1028:	94 91       	lpm	r25, Z
    102a:	90 93 89 00 	sts	0x0089, r25
    102e:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 0;
    1032:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
    1036:	10 92 81 00 	sts	0x0081, r1
    103a:	08 95       	ret

0000103c <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
    103c:	88 e9       	ldi	r24, 0x98	; 152
    103e:	31 db       	rcall	.-2462   	; 0x6a2 <V2Params_GetParameterValue>
    1040:	87 30       	cpi	r24, 0x07	; 7

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
    1042:	d0 f4       	brcc	.+52     	; 0x1078 <ISPTarget_EnableTargetISP+0x3c>
    1044:	91 e0       	ldi	r25, 0x01	; 1
	{
		HardwareSPIMode = true;
    1046:	90 93 5c 01 	sts	0x015C, r25
    104a:	e8 2f       	mov	r30, r24

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	e0 5f       	subi	r30, 0xF0	; 240
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	e4 91       	lpm	r30, Z
    1054:	20 9a       	sbi	0x04, 0	; 4
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
    1056:	28 9a       	sbi	0x05, 0	; 5
				PORTB |= (1 << 0);
    1058:	84 b1       	in	r24, 0x04	; 4

				DDRB  |=  ((1 << 1) | (1 << 2));
    105a:	86 60       	ori	r24, 0x06	; 6
    105c:	84 b9       	out	0x04, r24	; 4
    105e:	23 98       	cbi	0x04, 3	; 4
				DDRB  &= ~(1 << 3);
    1060:	2b 9a       	sbi	0x05, 3	; 5
				PORTB |=  (1 << 3);
    1062:	8d b5       	in	r24, 0x2d	; 45

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
    1064:	e6 ff       	sbrs	r30, 6

				DDRB  |=  ((1 << 1) | (1 << 2));
				DDRB  &= ~(1 << 3);
				PORTB |=  (1 << 3);

				if (SPIOptions & SPI_USE_DOUBLESPEED)
    1066:	02 c0       	rjmp	.+4      	; 0x106c <ISPTarget_EnableTargetISP+0x30>
    1068:	81 60       	ori	r24, 0x01	; 1
				  SPSR |= (1 << SPI2X);
    106a:	01 c0       	rjmp	.+2      	; 0x106e <ISPTarget_EnableTargetISP+0x32>
    106c:	8e 7f       	andi	r24, 0xFE	; 254
				else
				  SPSR &= ~(1 << SPI2X);
    106e:	8d bd       	out	0x2d, r24	; 45
    1070:	20 98       	cbi	0x04, 0	; 4

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    1072:	e0 65       	ori	r30, 0x50	; 80

				SPCR  = ((1 << SPE) | SPIOptions);
    1074:	ec bd       	out	0x2c, r30	; 44
    1076:	08 95       	ret
    1078:	10 92 5c 01 	sts	0x015C, r1
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    107c:	94 b1       	in	r25, 0x04	; 4

		DDRB  |= ((1 << 1) | (1 << 2));
    107e:	96 60       	ori	r25, 0x06	; 6
    1080:	94 b9       	out	0x04, r25	; 4
    1082:	95 b1       	in	r25, 0x05	; 5
		PORTB |= ((1 << 0) | (1 << 3));
    1084:	99 60       	ori	r25, 0x09	; 9
    1086:	95 b9       	out	0x05, r25	; 5
    1088:	c1 cf       	rjmp	.-126    	; 0x100c <ISPTarget_ConfigureSoftwareSPI>

0000108a <ISPTarget_TransferSoftSPIByte>:

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
    108a:	80 93 a1 01 	sts	0x01A1, r24
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
	SoftSPI_BitsRemaining = 8;
    108e:	88 e0       	ldi	r24, 0x08	; 8
    1090:	80 93 a0 01 	sts	0x01A0, r24

	/* Set initial MOSI pin state according to the byte to be transferred */
	if (SoftSPI_Data & (1 << 7))
    1094:	80 91 a1 01 	lds	r24, 0x01A1
    1098:	87 ff       	sbrs	r24, 7
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    109c:	2a 9a       	sbi	0x05, 2	; 5
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    10a0:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    10a2:	10 92 85 00 	sts	0x0085, r1
    10a6:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    10aa:	8a e0       	ldi	r24, 0x0A	; 10
    10ac:	80 93 81 00 	sts	0x0081, r24
	while (SoftSPI_BitsRemaining && TimeoutTicksRemaining);
    10b0:	80 91 a0 01 	lds	r24, 0x01A0
    10b4:	88 23       	and	r24, r24
    10b6:	19 f0       	breq	.+6      	; 0x10be <ISPTarget_TransferSoftSPIByte+0x34>
    10b8:	8a b5       	in	r24, 0x2a	; 42
    10ba:	81 11       	cpse	r24, r1
    10bc:	f9 cf       	rjmp	.-14     	; 0x10b0 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    10be:	10 92 81 00 	sts	0x0081, r1

	return SoftSPI_Data;
    10c2:	80 91 a1 01 	lds	r24, 0x01A1
}
    10c6:	08 95       	ret

000010c8 <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    10c8:	90 91 5c 01 	lds	r25, 0x015C
    10cc:	99 23       	and	r25, r25
    10ce:	29 f0       	breq	.+10     	; 0x10da <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    10d2:	0d b4       	in	r0, 0x2d	; 45
    10d4:	07 fe       	sbrs	r0, 7
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <ISPTarget_SendByte+0xa>
    10d8:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10da:	d7 cf       	rjmp	.-82     	; 0x108a <ISPTarget_TransferSoftSPIByte>

000010dc <ISPTarget_ChangeTargetResetLine>:
    10dc:	88 23       	and	r24, r24
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    10de:	39 f0       	breq	.+14     	; 0x10ee <ISPTarget_ChangeTargetResetLine+0x12>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    10e0:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    10e2:	8e e9       	ldi	r24, 0x9E	; 158
    10e4:	de da       	rcall	.-2628   	; 0x6a2 <V2Params_GetParameterValue>
    10e6:	81 11       	cpse	r24, r1
    10e8:	03 c0       	rjmp	.+6      	; 0x10f0 <ISPTarget_ChangeTargetResetLine+0x14>
    10ea:	2c 9a       	sbi	0x05, 4	; 5
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    10ec:	08 95       	ret
    10ee:	24 98       	cbi	0x04, 4	; 4
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    10f0:	2c 98       	cbi	0x05, 4	; 5
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10f2:	08 95       	ret

000010f4 <ISPTarget_WaitWhileTargetBusy>:
    10f4:	80 ef       	ldi	r24, 0xF0	; 240
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
	do
	{
		ISPTarget_SendByte(0xF0);
    10f6:	e8 df       	rcall	.-48     	; 0x10c8 <ISPTarget_SendByte>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
		ISPTarget_SendByte(0x00);
    10fa:	e6 df       	rcall	.-52     	; 0x10c8 <ISPTarget_SendByte>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	e4 df       	rcall	.-56     	; 0x10c8 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    1100:	80 91 5c 01 	lds	r24, 0x015C
    1104:	88 23       	and	r24, r24
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    1106:	31 f0       	breq	.+12     	; 0x1114 <ISPTarget_WaitWhileTargetBusy+0x20>
    1108:	1e bc       	out	0x2e, r1	; 46
    110a:	0d b4       	in	r0, 0x2d	; 45
    110c:	07 fe       	sbrs	r0, 7
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    110e:	fd cf       	rjmp	.-6      	; 0x110a <ISPTarget_WaitWhileTargetBusy+0x16>
				while (!(SPSR & (1 << SPIF)));
    1110:	8e b5       	in	r24, 0x2e	; 46
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <ISPTarget_WaitWhileTargetBusy+0x24>
    1114:	80 e0       	ldi	r24, 0x00	; 0
				return SPDR;
    1116:	b9 df       	rcall	.-142    	; 0x108a <ISPTarget_TransferSoftSPIByte>
    1118:	80 ff       	sbrs	r24, 0
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <ISPTarget_WaitWhileTargetBusy+0x2e>
    111c:	8a b5       	in	r24, 0x2a	; 42
    111e:	81 11       	cpse	r24, r1
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && TimeoutTicksRemaining);
    1120:	e9 cf       	rjmp	.-46     	; 0x10f4 <ISPTarget_WaitWhileTargetBusy>
    1122:	8a b5       	in	r24, 0x2a	; 42
    1124:	88 23       	and	r24, r24
    1126:	11 f0       	breq	.+4      	; 0x112c <ISPTarget_WaitWhileTargetBusy+0x38>
    1128:	80 e0       	ldi	r24, 0x00	; 0

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
    112a:	08 95       	ret
    112c:	81 e8       	ldi	r24, 0x81	; 129
    112e:	08 95       	ret

00001130 <ISPTarget_LoadExtendedAddress>:
    1130:	8d e4       	ldi	r24, 0x4D	; 77
    1132:	ca df       	rcall	.-108    	; 0x10c8 <ISPTarget_SendByte>
    1134:	80 e0       	ldi	r24, 0x00	; 0
}
    1136:	c8 df       	rcall	.-112    	; 0x10c8 <ISPTarget_SendByte>
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
    1138:	80 91 a6 01 	lds	r24, 0x01A6
	ISPTarget_SendByte(CurrentAddress >> 16);
    113c:	c5 df       	rcall	.-118    	; 0x10c8 <ISPTarget_SendByte>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	c3 cf       	rjmp	.-122    	; 0x10c8 <ISPTarget_SendByte>

00001142 <ISPTarget_WaitForProgComplete>:
    1142:	0f 93       	push	r16
	ISPTarget_SendByte(0x00);
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    114a:	eb 01       	movw	r28, r22
    114c:	14 2f       	mov	r17, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    114e:	8e 77       	andi	r24, 0x7E	; 126
    1150:	e8 2f       	mov	r30, r24
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	e8 30       	cpi	r30, 0x08	; 8
    1156:	f1 05       	cpc	r31, r1
    1158:	71 f1       	breq	.+92     	; 0x11b6 <ISPTarget_WaitForProgComplete+0x74>
    115a:	34 f4       	brge	.+12     	; 0x1168 <ISPTarget_WaitForProgComplete+0x26>
    115c:	e2 30       	cpi	r30, 0x02	; 2
    115e:	f1 05       	cpc	r31, r1
    1160:	59 f0       	breq	.+22     	; 0x1178 <ISPTarget_WaitForProgComplete+0x36>
    1162:	34 97       	sbiw	r30, 0x04	; 4
    1164:	a9 f0       	breq	.+42     	; 0x1190 <ISPTarget_WaitForProgComplete+0x4e>
    1166:	29 c0       	rjmp	.+82     	; 0x11ba <ISPTarget_WaitForProgComplete+0x78>
    1168:	e0 32       	cpi	r30, 0x20	; 32
    116a:	f1 05       	cpc	r31, r1
    116c:	89 f0       	breq	.+34     	; 0x1190 <ISPTarget_WaitForProgComplete+0x4e>
    116e:	e0 34       	cpi	r30, 0x40	; 64
    1170:	f1 05       	cpc	r31, r1
    1172:	09 f1       	breq	.+66     	; 0x11b6 <ISPTarget_WaitForProgComplete+0x74>
    1174:	70 97       	sbiw	r30, 0x10	; 16
    1176:	09 f5       	brne	.+66     	; 0x11ba <ISPTarget_WaitForProgComplete+0x78>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    1178:	82 2f       	mov	r24, r18
    117a:	e2 dd       	rcall	.-1084   	; 0xd40 <ISPProtocol_DelayMS>
    117c:	1e c0       	rjmp	.+60     	; 0x11ba <ISPTarget_WaitForProgComplete+0x78>
    117e:	0d b4       	in	r0, 0x2d	; 45
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <ISPTarget_WaitForProgComplete+0x3c>
    1184:	8e b5       	in	r24, 0x2e	; 46
				return SPDR;
    1186:	81 13       	cpse	r24, r17
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
    1188:	12 c0       	rjmp	.+36     	; 0x11ae <ISPTarget_WaitForProgComplete+0x6c>
    118a:	8a b5       	in	r24, 0x2a	; 42
    118c:	88 23       	and	r24, r24
    118e:	79 f0       	breq	.+30     	; 0x11ae <ISPTarget_WaitForProgComplete+0x6c>
    1190:	80 2f       	mov	r24, r16
			break;
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
    1192:	9a df       	rcall	.-204    	; 0x10c8 <ISPTarget_SendByte>
    1194:	8d 2f       	mov	r24, r29
    1196:	98 df       	rcall	.-208    	; 0x10c8 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress >> 8);
    1198:	8c 2f       	mov	r24, r28
    119a:	96 df       	rcall	.-212    	; 0x10c8 <ISPTarget_SendByte>
    119c:	80 91 5c 01 	lds	r24, 0x015C
				ISPTarget_SendByte(PollAddress & 0xFF);
    11a0:	88 23       	and	r24, r24
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <ISPTarget_WaitForProgComplete+0x66>
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    11a4:	1e bc       	out	0x2e, r1	; 46
    11a6:	eb cf       	rjmp	.-42     	; 0x117e <ISPTarget_WaitForProgComplete+0x3c>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	6f df       	rcall	.-290    	; 0x108a <ISPTarget_TransferSoftSPIByte>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11ac:	ec cf       	rjmp	.-40     	; 0x1186 <ISPTarget_WaitForProgComplete+0x44>
    11ae:	8a b5       	in	r24, 0x2a	; 42
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
    11b0:	88 23       	and	r24, r24
    11b2:	29 f0       	breq	.+10     	; 0x11be <ISPTarget_WaitForProgComplete+0x7c>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <ISPTarget_WaitForProgComplete+0x78>
    11b6:	9e df       	rcall	.-196    	; 0x10f4 <ISPTarget_WaitWhileTargetBusy>
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);

			if (!(TimeoutTicksRemaining))
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <ISPTarget_WaitForProgComplete+0x7e>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <ISPTarget_WaitForProgComplete+0x7e>
    11be:	80 e8       	ldi	r24, 0x80	; 128
			  ProgrammingStatus = STATUS_CMD_TOUT;

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    11c0:	94 e6       	ldi	r25, 0x64	; 100
    11c2:	9a bd       	out	0x2a, r25	; 42
			break;
    11c4:	df 91       	pop	r29
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
    11ca:	0f 91       	pop	r16
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    11cc:	08 95       	ret

000011ce <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
    11ce:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
    11d0:	69 2f       	mov	r22, r25
    11d2:	78 2f       	mov	r23, r24
    11d4:	83 2f       	mov	r24, r19
    11d6:	92 2f       	mov	r25, r18
    11d8:	08 95       	ret

000011da <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	c8 50       	subi	r28, 0x08	; 8
    11f4:	d1 40       	sbci	r29, 0x01	; 1
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	68 e0       	ldi	r22, 0x08	; 8
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	cf d6       	rcall	.+3486   	; 0x1fac <Endpoint_Read_Stream_LE>
    120e:	6b 81       	ldd	r22, Y+3	; 0x03
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    1210:	7c 81       	ldd	r23, Y+4	; 0x04
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	db df       	rcall	.-74     	; 0x11ce <SwapEndian_32>
    1218:	6b 83       	std	Y+3, r22	; 0x03
    121a:	7c 83       	std	Y+4, r23	; 0x04
    121c:	8d 83       	std	Y+5, r24	; 0x05
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	7f 81       	ldd	r23, Y+7	; 0x07
    1222:	68 85       	ldd	r22, Y+8	; 0x08
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    1224:	6f 83       	std	Y+7, r22	; 0x07
    1226:	78 87       	std	Y+8, r23	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
    122c:	ce 01       	movw	r24, r28
    122e:	09 96       	adiw	r24, 0x09	; 9
    1230:	bd d6       	rcall	.+3450   	; 0x1fac <Endpoint_Read_Stream_LE>
    1232:	8f 81       	ldd	r24, Y+7	; 0x07
    1234:	98 85       	ldd	r25, Y+8	; 0x08
    1236:	09 96       	adiw	r24, 0x09	; 9

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1238:	8f 73       	andi	r24, 0x3F	; 63
    123a:	99 27       	eor	r25, r25
    123c:	89 2b       	or	r24, r25
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
    123e:	39 f4       	brne	.+14     	; 0x124e <XPROGProtocol_WriteMemory+0x74>
    1240:	80 91 e8 00 	lds	r24, 0x00E8
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1244:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1246:	80 93 e8 00 	sts	0x00E8, r24
    124a:	0e 94 c8 11 	call	0x2390	; 0x2390 <Endpoint_WaitUntilReady>
    124e:	80 91 e8 00 	lds	r24, 0x00E8
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    1252:	8b 77       	andi	r24, 0x7B	; 123
    1254:	80 93 e8 00 	sts	0x00E8, r24
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    125e:	80 91 ec 00 	lds	r24, 0x00EC
    1262:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1264:	80 93 ec 00 	sts	0x00EC, r24
    1268:	80 91 a2 01 	lds	r24, 0x01A2
    126c:	81 11       	cpse	r24, r1

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    126e:	2d c0       	rjmp	.+90     	; 0x12ca <XPROGProtocol_WriteMemory+0xf0>
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	21 50       	subi	r18, 0x01	; 1
    1274:	eb 80       	ldd	r14, Y+3	; 0x03
    1276:	fc 80       	ldd	r15, Y+4	; 0x04
    1278:	0d 81       	ldd	r16, Y+5	; 0x05
    127a:	1e 81       	ldd	r17, Y+6	; 0x06
    127c:	26 30       	cpi	r18, 0x06	; 6
    127e:	a0 f4       	brcc	.+40     	; 0x12a8 <XPROGProtocol_WriteMemory+0xce>
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	f9 01       	movw	r30, r18
    1284:	e9 58       	subi	r30, 0x89	; 137
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	80 81       	ld	r24, Z
    128a:	f9 01       	movw	r30, r18
    128c:	ef 58       	subi	r30, 0x8F	; 143
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	90 81       	ld	r25, Z
    1292:	f9 01       	movw	r30, r18
    1294:	e5 59       	subi	r30, 0x95	; 149
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	60 81       	ld	r22, Z
    129a:	f9 01       	movw	r30, r18
    129c:	eb 59       	subi	r30, 0x9B	; 155
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
    12a0:	20 81       	ld	r18, Z
    12a2:	22 23       	and	r18, r18
    12a4:	d9 f1       	breq	.+118    	; 0x131c <XPROGProtocol_WriteMemory+0x142>
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <XPROGProtocol_WriteMemory+0xd4>
    12a8:	66 e2       	ldi	r22, 0x26	; 38
    12aa:	93 e2       	ldi	r25, 0x23	; 35
    12ac:	8e e2       	ldi	r24, 0x2E	; 46
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    12ae:	af 80       	ldd	r10, Y+7	; 0x07
    12b0:	b8 84       	ldd	r11, Y+8	; 0x08
    12b2:	9e 01       	movw	r18, r28
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    12b4:	27 5f       	subi	r18, 0xF7	; 247
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	69 01       	movw	r12, r18
    12ba:	2a 81       	ldd	r18, Y+2	; 0x02
    12bc:	48 2f       	mov	r20, r24
    12be:	89 2f       	mov	r24, r25
    12c0:	31 d4       	rcall	.+2146   	; 0x1b24 <XMEGANVM_WritePageMemory>
    12c2:	81 11       	cpse	r24, r1
    12c4:	0b c0       	rjmp	.+22     	; 0x12dc <XPROGProtocol_WriteMemory+0x102>
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <XPROGProtocol_WriteMemory+0x104>
    12ca:	4f 81       	ldd	r20, Y+7	; 0x07
    12cc:	58 85       	ldd	r21, Y+8	; 0x08
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData[0]))))
		{
			ReturnStatus = XPROG_ERR_TIMEOUT;
    12ce:	be 01       	movw	r22, r28
    12d0:	67 5f       	subi	r22, 0xF7	; 247
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	c9 d5       	rcall	.+2962   	; 0x1e6c <TINYNVM_WriteMemory>
    12da:	f3 cf       	rjmp	.-26     	; 0x12c2 <XPROGProtocol_WriteMemory+0xe8>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e5       	ldi	r25, 0x50	; 80
    12e0:	90 93 f1 00 	sts	0x00F1, r25
    12e4:	94 e0       	ldi	r25, 0x04	; 4
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    12e6:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12ea:	80 93 f1 00 	sts	0x00F1, r24
    12ee:	80 91 e8 00 	lds	r24, 0x00E8
    12f2:	8e 77       	andi	r24, 0x7E	; 126
    12f4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12f8:	c8 5f       	subi	r28, 0xF8	; 248
    12fa:	de 4f       	sbci	r29, 0xFE	; 254
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	08 95       	ret
    131c:	29 85       	ldd	r18, Y+9	; 0x09
    131e:	b8 01       	movw	r22, r16
    1320:	a7 01       	movw	r20, r14
    1322:	d1 d3       	rcall	.+1954   	; 0x1ac6 <XMEGANVM_WriteByteMemory>
    1324:	ce cf       	rjmp	.-100    	; 0x12c2 <XPROGProtocol_WriteMemory+0xe8>

00001326 <XPROGProtocol_ReadMemory>:

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	c7 50       	subi	r28, 0x07	; 7
    1330:	d1 40       	sbci	r29, 0x01	; 1

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	67 e0       	ldi	r22, 0x07	; 7
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	ce 01       	movw	r24, r28
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	9e 4f       	sbci	r25, 0xFE	; 254
    134a:	30 d6       	rcall	.+3168   	; 0x1fac <Endpoint_Read_Stream_LE>
    134c:	ce 5f       	subi	r28, 0xFE	; 254
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    134e:	de 4f       	sbci	r29, 0xFE	; 254
    1350:	68 81       	ld	r22, Y
    1352:	79 81       	ldd	r23, Y+1	; 0x01
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	c2 50       	subi	r28, 0x02	; 2
    135a:	d1 40       	sbci	r29, 0x01	; 1
    135c:	38 df       	rcall	.-400    	; 0x11ce <SwapEndian_32>
    135e:	ce 5f       	subi	r28, 0xFE	; 254
    1360:	de 4f       	sbci	r29, 0xFE	; 254
    1362:	68 83       	st	Y, r22
    1364:	79 83       	std	Y+1, r23	; 0x01
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	c2 50       	subi	r28, 0x02	; 2
    136c:	d1 40       	sbci	r29, 0x01	; 1
    136e:	ca 5f       	subi	r28, 0xFA	; 250
    1370:	de 4f       	sbci	r29, 0xFE	; 254
    1372:	88 81       	ld	r24, Y
    1374:	c6 50       	subi	r28, 0x06	; 6
    1376:	d1 40       	sbci	r29, 0x01	; 1
    1378:	c9 5f       	subi	r28, 0xF9	; 249
    137a:	de 4f       	sbci	r29, 0xFE	; 254
    137c:	98 81       	ld	r25, Y
    137e:	c7 50       	subi	r28, 0x07	; 7
    1380:	d1 40       	sbci	r29, 0x01	; 1
    1382:	ca 5f       	subi	r28, 0xFA	; 250
    1384:	de 4f       	sbci	r29, 0xFE	; 254
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    1386:	98 83       	st	Y, r25
    1388:	c6 50       	subi	r28, 0x06	; 6
    138a:	d1 40       	sbci	r29, 0x01	; 1
    138c:	c9 5f       	subi	r28, 0xF9	; 249
    138e:	de 4f       	sbci	r29, 0xFE	; 254
    1390:	88 83       	st	Y, r24
    1392:	c7 50       	subi	r28, 0x07	; 7
    1394:	d1 40       	sbci	r29, 0x01	; 1
    1396:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    139a:	8b 77       	andi	r24, 0x7B	; 123
    139c:	80 93 e8 00 	sts	0x00E8, r24
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13a6:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	80 93 ec 00 	sts	0x00EC, r24
    13b0:	80 91 a2 01 	lds	r24, 0x01A2
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    13b4:	ca 5f       	subi	r28, 0xFA	; 250
    13b6:	de 4f       	sbci	r29, 0xFE	; 254
    13b8:	28 81       	ld	r18, Y
    13ba:	39 81       	ldd	r19, Y+1	; 0x01
    13bc:	c6 50       	subi	r28, 0x06	; 6
    13be:	d1 40       	sbci	r29, 0x01	; 1
    13c0:	81 11       	cpse	r24, r1
    13c2:	12 c0       	rjmp	.+36     	; 0x13e8 <XPROGProtocol_ReadMemory+0xc2>
    13c4:	ce 5f       	subi	r28, 0xFE	; 254
    13c6:	de 4f       	sbci	r29, 0xFE	; 254
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    13c8:	68 81       	ld	r22, Y
    13ca:	79 81       	ldd	r23, Y+1	; 0x01
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	c2 50       	subi	r28, 0x02	; 2
    13d2:	d1 40       	sbci	r29, 0x01	; 1
    13d4:	ae 01       	movw	r20, r28
    13d6:	4f 5f       	subi	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	31 d3       	rcall	.+1634   	; 0x1a3e <XMEGANVM_ReadMemory>
    13dc:	88 23       	and	r24, r24
    13de:	11 f0       	breq	.+4      	; 0x13e4 <XPROGProtocol_ReadMemory+0xbe>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <XPROGProtocol_ReadMemory+0xda>
    13e4:	83 e0       	ldi	r24, 0x03	; 3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    13e6:	0c c0       	rjmp	.+24     	; 0x1400 <XPROGProtocol_ReadMemory+0xda>
    13e8:	a9 01       	movw	r20, r18

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPROG_ERR_TIMEOUT;
    13ea:	be 01       	movw	r22, r28
    13ec:	6f 5f       	subi	r22, 0xFF	; 255
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	ce 5f       	subi	r28, 0xFE	; 254
    13f2:	de 4f       	sbci	r29, 0xFE	; 254
    13f4:	88 81       	ld	r24, Y
    13f6:	99 81       	ldd	r25, Y+1	; 0x01
    13f8:	c2 50       	subi	r28, 0x02	; 2
    13fa:	d1 40       	sbci	r29, 0x01	; 1
    13fc:	0a d5       	rcall	.+2580   	; 0x1e12 <TINYNVM_ReadMemory>
    13fe:	ee cf       	rjmp	.-36     	; 0x13dc <XPROGProtocol_ReadMemory+0xb6>
    1400:	90 e5       	ldi	r25, 0x50	; 80
    1402:	90 93 f1 00 	sts	0x00F1, r25
    1406:	95 e0       	ldi	r25, 0x05	; 5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1408:	90 93 f1 00 	sts	0x00F1, r25
    140c:	80 93 f1 00 	sts	0x00F1, r24
    1410:	81 11       	cpse	r24, r1
    1412:	0b c0       	rjmp	.+22     	; 0x142a <XPROGProtocol_ReadMemory+0x104>
    1414:	ca 5f       	subi	r28, 0xFA	; 250
    1416:	de 4f       	sbci	r29, 0xFE	; 254

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPROG_ERR_OK)
    1418:	68 81       	ld	r22, Y
    141a:	79 81       	ldd	r23, Y+1	; 0x01
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
    141c:	c6 50       	subi	r28, 0x06	; 6
    141e:	d1 40       	sbci	r29, 0x01	; 1
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	79 d5       	rcall	.+2802   	; 0x1f1c <Endpoint_Write_Stream_LE>
    142a:	80 91 e8 00 	lds	r24, 0x00E8
    142e:	8e 77       	andi	r24, 0x7E	; 126
    1430:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1434:	c9 5f       	subi	r28, 0xF9	; 249
    1436:	de 4f       	sbci	r29, 0xFE	; 254
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62

	Endpoint_ClearIN();
}
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <XPROGProtocol_SetMode>:
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	1f 92       	push	r1
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	a6 d5       	rcall	.+2892   	; 0x1fac <Endpoint_Read_Stream_LE>
    1460:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1464:	8b 77       	andi	r24, 0x7B	; 123
    1466:	80 93 e8 00 	sts	0x00E8, r24
    146a:	83 e0       	ldi	r24, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    146c:	80 93 e9 00 	sts	0x00E9, r24
    1470:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	80 93 ec 00 	sts	0x00EC, r24
    147a:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    147c:	80 93 a2 01 	sts	0x01A2, r24
    1480:	81 e5       	ldi	r24, 0x51	; 81
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1482:	80 93 f1 00 	sts	0x00F1, r24
    1486:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPROG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	11 f0       	breq	.+4      	; 0x1490 <XPROGProtocol_SetMode+0x48>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <XPROGProtocol_SetMode+0x4a>
    1490:	80 ec       	ldi	r24, 0xC0	; 192
    1492:	80 93 f1 00 	sts	0x00F1, r24
    1496:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    149a:	8e 77       	andi	r24, 0x7E	; 126
    149c:	80 93 e8 00 	sts	0x00E8, r24
    14a0:	0f 90       	pop	r0
	Endpoint_ClearIN();
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <XPROGProtocol_Command>:
    14a8:	cf 93       	push	r28

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    14aa:	df 93       	push	r29
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <XPROGProtocol_Command+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <XPROGProtocol_Command+0x8>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <XPROGProtocol_Command+0xa>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14b6:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <XPROGProtocol_Command+0x18>
    14be:	92 c0       	rjmp	.+292    	; 0x15e4 <XPROGProtocol_Command+0x13c>
    14c0:	38 f4       	brcc	.+14     	; 0x14d0 <XPROGProtocol_Command+0x28>
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	71 f1       	breq	.+92     	; 0x1522 <XPROGProtocol_Command+0x7a>
    14c6:	08 f0       	brcs	.+2      	; 0x14ca <XPROGProtocol_Command+0x22>
    14c8:	49 c0       	rjmp	.+146    	; 0x155c <XPROGProtocol_Command+0xb4>
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	51 f0       	breq	.+20     	; 0x14e2 <XPROGProtocol_Command+0x3a>
    14ce:	29 c1       	rjmp	.+594    	; 0x1722 <XPROGProtocol_Command+0x27a>
    14d0:	86 30       	cpi	r24, 0x06	; 6
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <XPROGProtocol_Command+0x2e>
    14d4:	8b c0       	rjmp	.+278    	; 0x15ec <XPROGProtocol_Command+0x144>
    14d6:	08 f4       	brcc	.+2      	; 0x14da <XPROGProtocol_Command+0x32>
    14d8:	87 c0       	rjmp	.+270    	; 0x15e8 <XPROGProtocol_Command+0x140>
    14da:	87 30       	cpi	r24, 0x07	; 7
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <XPROGProtocol_Command+0x38>
    14de:	cf c0       	rjmp	.+414    	; 0x167e <XPROGProtocol_Command+0x1d6>
    14e0:	20 c1       	rjmp	.+576    	; 0x1722 <XPROGProtocol_Command+0x27a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14e2:	80 91 e8 00 	lds	r24, 0x00E8
    14e6:	8b 77       	andi	r24, 0x7B	; 123
    14e8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    14f2:	80 91 ec 00 	lds	r24, 0x00EC
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    14fc:	80 91 a2 01 	lds	r24, 0x01A2
    1500:	81 11       	cpse	r24, r1
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <XPROGProtocol_Command+0x60>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    1504:	1c d2       	rcall	.+1080   	; 0x193e <XMEGANVM_EnablePDI>
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <XPROGProtocol_Command+0x6a>
    1508:	82 30       	cpi	r24, 0x02	; 2
	else if (XPROG_SelectedProtocol == XPROG_PROTOCOL_TPI)
    150a:	11 f4       	brne	.+4      	; 0x1510 <XPROGProtocol_Command+0x68>
    150c:	3c d4       	rcall	.+2168   	; 0x1d86 <TINYNVM_EnableTPI>
	  NVMBusEnabled = TINYNVM_EnableTPI();
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <XPROGProtocol_Command+0x6a>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e5       	ldi	r25, 0x50	; 80
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
    1514:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	90 93 f1 00 	sts	0x00F1, r25
    151e:	89 27       	eor	r24, r25
    1520:	f9 c0       	rjmp	.+498    	; 0x1714 <XPROGProtocol_Command+0x26c>
	else if (XPROG_SelectedProtocol == XPROG_PROTOCOL_TPI)
	  NVMBusEnabled = TINYNVM_EnableTPI();

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_ENTER_PROGMODE);
	Endpoint_Write_8(NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED);
    1522:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1526:	8b 77       	andi	r24, 0x7B	; 123
    1528:	80 93 e8 00 	sts	0x00E8, r24
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1532:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 93 ec 00 	sts	0x00EC, r24
    153c:	80 91 a2 01 	lds	r24, 0x01A2
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    1540:	81 11       	cpse	r24, r1
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <XPROGProtocol_Command+0xa0>
    1544:	3b d2       	rcall	.+1142   	; 0x19bc <XMEGANVM_DisablePDI>
    1546:	01 c0       	rjmp	.+2      	; 0x154a <XPROGProtocol_Command+0xa2>
	  XMEGANVM_DisablePDI();
    1548:	59 d4       	rcall	.+2226   	; 0x1dfc <TINYNVM_DisableTPI>
    154a:	80 e5       	ldi	r24, 0x50	; 80
    154c:	80 93 f1 00 	sts	0x00F1, r24
	else
	  TINYNVM_DisableTPI();
    1550:	82 e0       	ldi	r24, 0x02	; 2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1552:	80 93 f1 00 	sts	0x00F1, r24
    1556:	10 92 f1 00 	sts	0x00F1, r1
    155a:	de c0       	rjmp	.+444    	; 0x1718 <XPROGProtocol_Command+0x270>
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	65 e0       	ldi	r22, 0x05	; 5
    1562:	70 e0       	ldi	r23, 0x00	; 0
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	21 d5       	rcall	.+2626   	; 0x1fac <Endpoint_Read_Stream_LE>
    156a:	6a 81       	ldd	r22, Y+2	; 0x02
    156c:	7b 81       	ldd	r23, Y+3	; 0x03
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	2d de       	rcall	.-934    	; 0x11ce <SwapEndian_32>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    1574:	6a 83       	std	Y+2, r22	; 0x02
    1576:	7b 83       	std	Y+3, r23	; 0x03
    1578:	8c 83       	std	Y+4, r24	; 0x04
    157a:	9d 83       	std	Y+5, r25	; 0x05
    157c:	80 91 e8 00 	lds	r24, 0x00E8
    1580:	8b 77       	andi	r24, 0x7B	; 123
    1582:	80 93 e8 00 	sts	0x00E8, r24
    1586:	83 e0       	ldi	r24, 0x03	; 3
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1588:	80 93 e9 00 	sts	0x00E9, r24
    158c:	80 91 ec 00 	lds	r24, 0x00EC
    1590:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1592:	80 93 ec 00 	sts	0x00EC, r24
    1596:	80 91 a2 01 	lds	r24, 0x01A2
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	81 11       	cpse	r24, r1
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <XPROGProtocol_Command+0x120>
    15a0:	e1 50       	subi	r30, 0x01	; 1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    15a2:	e8 30       	cpi	r30, 0x08	; 8
    15a4:	28 f4       	brcc	.+10     	; 0x15b0 <XPROGProtocol_Command+0x108>
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	e3 58       	subi	r30, 0x83	; 131
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	80 81       	ld	r24, Z
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <XPROGProtocol_Command+0x10a>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	4a 81       	ldd	r20, Y+2	; 0x02
    15b4:	5b 81       	ldd	r21, Y+3	; 0x03
    15b6:	6c 81       	ldd	r22, Y+4	; 0x04
    15b8:	7d 81       	ldd	r23, Y+5	; 0x05
    15ba:	26 d3       	rcall	.+1612   	; 0x1c08 <XMEGANVM_EraseMemory>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
    15bc:	88 23       	and	r24, r24
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    15be:	11 f0       	breq	.+4      	; 0x15c4 <XPROGProtocol_Command+0x11c>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <XPROGProtocol_Command+0x132>
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <XPROGProtocol_Command+0x132>
    15c8:	e1 30       	cpi	r30, 0x01	; 1
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <XPROGProtocol_Command+0x128>
    15cc:	80 e1       	ldi	r24, 0x10	; 16
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <XPROGProtocol_Command+0x12a>
    15d0:	84 e1       	ldi	r24, 0x14	; 20
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPROG_ERR_TIMEOUT;
    15d2:	6a 81       	ldd	r22, Y+2	; 0x02
    15d4:	7b 81       	ldd	r23, Y+3	; 0x03
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPROG_ERASE_CHIP)
    15d6:	85 d4       	rcall	.+2314   	; 0x1ee2 <TINYNVM_EraseMemory>
    15d8:	f1 cf       	rjmp	.-30     	; 0x15bc <XPROGProtocol_Command+0x114>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
    15da:	90 e5       	ldi	r25, 0x50	; 80
    15dc:	90 93 f1 00 	sts	0x00F1, r25
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    15e0:	93 e0       	ldi	r25, 0x03	; 3
    15e2:	96 c0       	rjmp	.+300    	; 0x1710 <XPROGProtocol_Command+0x268>
    15e4:	fa dd       	rcall	.-1036   	; 0x11da <XPROGProtocol_WriteMemory>
    15e6:	9d c0       	rjmp	.+314    	; 0x1722 <XPROGProtocol_Command+0x27a>
    15e8:	9e de       	rcall	.-708    	; 0x1326 <XPROGProtocol_ReadMemory>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15ea:	9b c0       	rjmp	.+310    	; 0x1722 <XPROGProtocol_Command+0x27a>
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	70 e0       	ldi	r23, 0x00	; 0
			break;
		case XPROG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPROG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    15f4:	ce 01       	movw	r24, r28
    15f6:	06 96       	adiw	r24, 0x06	; 6
			break;
    15f8:	d9 d4       	rcall	.+2482   	; 0x1fac <Endpoint_Read_Stream_LE>
		case XPROG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    15fa:	80 91 e8 00 	lds	r24, 0x00E8
			break;
    15fe:	8b 77       	andi	r24, 0x7B	; 123
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
    1600:	80 93 e8 00 	sts	0x00E8, r24
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 93 e9 00 	sts	0x00E9, r24
    160a:	80 91 ec 00 	lds	r24, 0x00EC
    160e:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1610:	80 93 ec 00 	sts	0x00EC, r24
    1614:	80 91 a2 01 	lds	r24, 0x01A2
    1618:	81 11       	cpse	r24, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    161a:	12 c0       	rjmp	.+36     	; 0x1640 <XPROGProtocol_Command+0x198>
    161c:	8e 81       	ldd	r24, Y+6	; 0x06
    161e:	81 30       	cpi	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1620:	21 f0       	breq	.+8      	; 0x162a <XPROGProtocol_Command+0x182>
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	21 f0       	breq	.+8      	; 0x162e <XPROGProtocol_Command+0x186>
    1626:	88 e7       	ldi	r24, 0x78	; 120
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <XPROGProtocol_Command+0x188>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    162a:	88 e3       	ldi	r24, 0x38	; 56
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <XPROGProtocol_Command+0x188>
    162e:	89 e3       	ldi	r24, 0x39	; 57
    1630:	be 01       	movw	r22, r28
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
    1632:	6f 5f       	subi	r22, 0xFF	; 255
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	cd d1       	rcall	.+922    	; 0x19d2 <XMEGANVM_GetMemoryCRC>
    1638:	88 23       	and	r24, r24
    163a:	21 f0       	breq	.+8      	; 0x1644 <XPROGProtocol_Command+0x19c>
				break;
			case XPROG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
				break;
			default:
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <XPROGProtocol_Command+0x19e>

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
		{
			case XPROG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <XPROGProtocol_Command+0x19e>
				break;
			case XPROG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
    1644:	83 e0       	ldi	r24, 0x03	; 3
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    1646:	90 e5       	ldi	r25, 0x50	; 80
    1648:	90 93 f1 00 	sts	0x00F1, r25
    164c:	96 e0       	ldi	r25, 0x06	; 6
    164e:	90 93 f1 00 	sts	0x00F1, r25
    1652:	80 93 f1 00 	sts	0x00F1, r24
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    1656:	81 11       	cpse	r24, r1
		  ReturnStatus = XPROG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPROG_ERR_FAILED;
    1658:	5f c0       	rjmp	.+190    	; 0x1718 <XPROGProtocol_Command+0x270>
    165a:	89 81       	ldd	r24, Y+1	; 0x01
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
		  ReturnStatus = XPROG_ERR_TIMEOUT;
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    165e:	ab 81       	ldd	r26, Y+3	; 0x03
    1660:	bc 81       	ldd	r27, Y+4	; 0x04
    1662:	cd 01       	movw	r24, r26
    1664:	aa 27       	eor	r26, r26
    1666:	bb 27       	eor	r27, r27
    1668:	80 93 f1 00 	sts	0x00F1, r24
    166c:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPROG_ERR_OK)
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	ab 81       	ldd	r26, Y+3	; 0x03
	{
		Endpoint_Write_8(MemoryCRC >> 16);
    1672:	bc 81       	ldd	r27, Y+4	; 0x04
    1674:	80 93 f1 00 	sts	0x00F1, r24
    1678:	89 2f       	mov	r24, r25
    167a:	99 27       	eor	r25, r25
    167c:	4b c0       	rjmp	.+150    	; 0x1714 <XPROGProtocol_Command+0x26c>
    167e:	80 91 f1 00 	lds	r24, 0x00F1
    1682:	83 30       	cpi	r24, 0x03	; 3
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
    1684:	41 f1       	breq	.+80     	; 0x16d6 <XPROGProtocol_Command+0x22e>
    1686:	68 f4       	brcc	.+26     	; 0x16a2 <XPROGProtocol_Command+0x1fa>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	a1 f0       	breq	.+40     	; 0x16b4 <XPROGProtocol_Command+0x20c>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	71 f5       	brne	.+92     	; 0x16ec <XPROGProtocol_Command+0x244>
				UEDATX = (Data >> 8);
    1690:	80 91 f1 00 	lds	r24, 0x00F1
    1694:	90 91 f1 00 	lds	r25, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1698:	90 93 5f 01 	sts	0x015F, r25
	uint8_t ReturnStatus = XPROG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    169c:	80 93 60 01 	sts	0x0160, r24
    16a0:	23 c0       	rjmp	.+70     	; 0x16e8 <XPROGProtocol_Command+0x240>
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	e9 f0       	breq	.+58     	; 0x16e0 <XPROGProtocol_Command+0x238>
    16a6:	85 30       	cpi	r24, 0x05	; 5
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    16a8:	09 f5       	brne	.+66     	; 0x16ec <XPROGProtocol_Command+0x244>
    16aa:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
    16ae:	80 91 f1 00 	lds	r24, 0x00F1
	{
		case XPROG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
    16b2:	1a c0       	rjmp	.+52     	; 0x16e8 <XPROGProtocol_Command+0x240>
    16b4:	80 91 f1 00 	lds	r24, 0x00F1
    16b8:	90 91 f1 00 	lds	r25, 0x00F1
	uint8_t ReturnStatus = XPROG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    16bc:	20 91 f1 00 	lds	r18, 0x00F1
    16c0:	30 91 f1 00 	lds	r19, 0x00F1
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    16c4:	30 93 61 01 	sts	0x0161, r19
				Dummy = UEDATX;
    16c8:	20 93 62 01 	sts	0x0162, r18
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    16cc:	90 93 63 01 	sts	0x0163, r25
				Data.Bytes[2] = UEDATX;
    16d0:	80 93 64 01 	sts	0x0164, r24
				Data.Bytes[1] = UEDATX;
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <XPROGProtocol_Command+0x240>
    16d6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
    16da:	80 93 5e 01 	sts	0x015E, r24
	{
		case XPROG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <XPROGProtocol_Command+0x240>
    16e0:	80 91 f1 00 	lds	r24, 0x00F1
    16e4:	80 93 5d 01 	sts	0x015D, r24
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <XPROGProtocol_Command+0x246>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16ee:	90 91 e8 00 	lds	r25, 0x00E8
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
    16f2:	9b 77       	andi	r25, 0x7B	; 123
    16f4:	90 93 e8 00 	sts	0x00E8, r25
    16f8:	93 e0       	ldi	r25, 0x03	; 3
    16fa:	90 93 e9 00 	sts	0x00E9, r25
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
    16fe:	90 91 ec 00 	lds	r25, 0x00EC
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    1702:	91 60       	ori	r25, 0x01	; 1
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPROG_ERR_FAILED;
    1704:	90 93 ec 00 	sts	0x00EC, r25
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1708:	90 e5       	ldi	r25, 0x50	; 80
    170a:	90 93 f1 00 	sts	0x00F1, r25
    170e:	97 e0       	ldi	r25, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1710:	90 93 f1 00 	sts	0x00F1, r25
    1714:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1718:	80 91 e8 00 	lds	r24, 0x00E8
    171c:	8e 77       	andi	r24, 0x7E	; 126
    171e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1722:	26 96       	adiw	r28, 0x06	; 6
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	df 91       	pop	r29
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
    1734:	4d 99       	sbic	0x09, 5	; 9
    1736:	fe cf       	rjmp	.-4      	; 0x1734 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
    1738:	4d 9b       	sbis	0x09, 5	; 9
    173a:	fe cf       	rjmp	.-4      	; 0x1738 <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
    173c:	4d 99       	sbic	0x09, 5	; 9
    173e:	fe cf       	rjmp	.-4      	; 0x173c <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
    1740:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    1742:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    1744:	80 91 c9 00 	lds	r24, 0x00C9
    1748:	8f 7e       	andi	r24, 0xEF	; 239
    174a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
    174e:	80 91 c9 00 	lds	r24, 0x00C9
    1752:	88 60       	ori	r24, 0x08	; 8
    1754:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	80 93 a8 01 	sts	0x01A8, r24
    175e:	08 95       	ret

00001760 <XPROGTarget_SetRxMode>:
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    1760:	80 91 c8 00 	lds	r24, 0x00C8
    1764:	86 ff       	sbrs	r24, 6
    1766:	fc cf       	rjmp	.-8      	; 0x1760 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    1768:	80 91 c8 00 	lds	r24, 0x00C8
    176c:	80 64       	ori	r24, 0x40	; 64
    176e:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
    1772:	80 91 c9 00 	lds	r24, 0x00C9
    1776:	87 7f       	andi	r24, 0xF7	; 247
    1778:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
    177c:	80 91 c9 00 	lds	r24, 0x00C9
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
    1786:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    1788:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    178a:	10 92 a8 01 	sts	0x01A8, r1
    178e:	08 95       	ret

00001790 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    1790:	80 91 a8 01 	lds	r24, 0x01A8
    1794:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    1796:	e4 df       	rcall	.-56     	; 0x1760 <XPROGTarget_SetRxMode>
    1798:	80 ec       	ldi	r24, 0xC0	; 192

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    179a:	80 93 c8 00 	sts	0x00C8, r24
    179e:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
    17a2:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
    17a6:	8a b1       	in	r24, 0x0a	; 10

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    17a8:	87 7d       	andi	r24, 0xD7	; 215
    17aa:	8a b9       	out	0x0a, r24	; 10
    17ac:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    17ae:	83 7d       	andi	r24, 0xD3	; 211
    17b0:	8b b9       	out	0x0b, r24	; 11
    17b2:	08 95       	ret

000017b4 <XPROGTarget_DisableTargetTPI>:
    17b4:	80 91 a8 01 	lds	r24, 0x01A8

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    17b8:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    17ba:	d2 df       	rcall	.-92     	; 0x1760 <XPROGTarget_SetRxMode>
    17bc:	80 91 c8 00 	lds	r24, 0x00C8

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    17c0:	80 6c       	ori	r24, 0xC0	; 192
    17c2:	80 93 c8 00 	sts	0x00C8, r24
    17c6:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
    17ca:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
    17ce:	8a b1       	in	r24, 0x0a	; 10

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    17d0:	87 7d       	andi	r24, 0xD7	; 215
    17d2:	8a b9       	out	0x0a, r24	; 10
    17d4:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    17d6:	83 7d       	andi	r24, 0xD3	; 211
    17d8:	8b b9       	out	0x0b, r24	; 11
    17da:	24 98       	cbi	0x04, 4	; 4

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    17dc:	2c 98       	cbi	0x05, 4	; 5
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    17de:	08 95       	ret

000017e0 <XPROGTarget_SendByte>:
    17e0:	cf 93       	push	r28
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    17e2:	df 93       	push	r29
    17e4:	1f 92       	push	r1
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    17ea:	90 91 a8 01 	lds	r25, 0x01A8
    17ee:	91 11       	cpse	r25, r1
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <XPROGTarget_SendByte+0x18>
	  XPROGTarget_SetTxMode();
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	9f df       	rcall	.-194    	; 0x1734 <XPROGTarget_SetTxMode>
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	90 91 c8 00 	lds	r25, 0x00C8

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    17fc:	95 ff       	sbrs	r25, 5
    17fe:	fc cf       	rjmp	.-8      	; 0x17f8 <XPROGTarget_SendByte+0x18>
    1800:	90 91 c8 00 	lds	r25, 0x00C8
	UCSR1A |= (1 << TXC1);
    1804:	90 64       	ori	r25, 0x40	; 64
    1806:	90 93 c8 00 	sts	0x00C8, r25
    180a:	80 93 ce 00 	sts	0x00CE, r24
	UDR1    = Byte;
    180e:	0f 90       	pop	r0
}
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <XPROGTarget_ReceiveByte>:
    1816:	80 91 a8 01 	lds	r24, 0x01A8
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    181a:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    181c:	a1 df       	rcall	.-190    	; 0x1760 <XPROGTarget_SetRxMode>
    181e:	80 91 c8 00 	lds	r24, 0x00C8

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
    1822:	87 fd       	sbrc	r24, 7
    1824:	03 c0       	rjmp	.+6      	; 0x182c <XPROGTarget_ReceiveByte+0x16>
    1826:	8a b5       	in	r24, 0x2a	; 42
    1828:	81 11       	cpse	r24, r1
    182a:	f9 cf       	rjmp	.-14     	; 0x181e <XPROGTarget_ReceiveByte+0x8>
    182c:	80 91 ce 00 	lds	r24, 0x00CE

	return UDR1;
    1830:	08 95       	ret

00001832 <XPROGTarget_SendIdle>:
}
    1832:	80 91 a8 01 	lds	r24, 0x01A8

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1836:	81 11       	cpse	r24, r1
    1838:	01 c0       	rjmp	.+2      	; 0x183c <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    183a:	7c df       	rcall	.-264    	; 0x1734 <XPROGTarget_SetTxMode>
    183c:	8c e0       	ldi	r24, 0x0C	; 12
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    183e:	4d 99       	sbic	0x09, 5	; 9

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    1840:	fe cf       	rjmp	.-4      	; 0x183e <XPROGTarget_SendIdle+0xc>
    1842:	4d 9b       	sbis	0x09, 5	; 9
		while (!(PIND & (1 << 5)));
    1844:	fe cf       	rjmp	.-4      	; 0x1842 <XPROGTarget_SendIdle+0x10>
    1846:	4d 99       	sbic	0x09, 5	; 9
		while (PIND & (1 << 5));
    1848:	fe cf       	rjmp	.-4      	; 0x1846 <XPROGTarget_SendIdle+0x14>
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	c1 f7       	brne	.-16     	; 0x183e <XPROGTarget_SendIdle+0xc>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    184e:	08 95       	ret

00001850 <XPROGTarget_EnableTargetPDI>:
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    1850:	10 92 a8 01 	sts	0x01A8, r1
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1854:	8a b1       	in	r24, 0x0a	; 10
    1856:	88 62       	ori	r24, 0x28	; 40
    1858:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    185a:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    185c:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    185e:	87 ec       	ldi	r24, 0xC7	; 199
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <XPROGTarget_EnableTargetPDI+0x12>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <XPROGTarget_EnableTargetPDI+0x18>
    1868:	00 00       	nop
	_delay_us(100);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	90 93 cd 00 	sts	0x00CD, r25
    1872:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    187c:	8f e6       	ldi	r24, 0x6F	; 111
    187e:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1882:	d7 df       	rcall	.-82     	; 0x1832 <XPROGTarget_SendIdle>
    1884:	d6 cf       	rjmp	.-84     	; 0x1832 <XPROGTarget_SendIdle>

00001886 <XPROGTarget_EnableTargetTPI>:
	XPROGTarget_SendIdle();
    1886:	10 92 a8 01 	sts	0x01A8, r1
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    188a:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    188c:	2c 98       	cbi	0x05, 4	; 5
    188e:	87 ec       	ldi	r24, 0xC7	; 199
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <XPROGTarget_EnableTargetTPI+0xc>
    1896:	00 c0       	rjmp	.+0      	; 0x1898 <XPROGTarget_EnableTargetTPI+0x12>
    1898:	00 00       	nop
	_delay_us(100);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    189a:	8a b1       	in	r24, 0x0a	; 10
    189c:	88 62       	ori	r24, 0x28	; 40
    189e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    18a0:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	90 93 cd 00 	sts	0x00CD, r25
    18aa:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    18ae:	88 e0       	ldi	r24, 0x08	; 8
    18b0:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    18b4:	8f e6       	ldi	r24, 0x6F	; 111
    18b6:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    18ba:	bb df       	rcall	.-138    	; 0x1832 <XPROGTarget_SendIdle>
    18bc:	ba cf       	rjmp	.-140    	; 0x1832 <XPROGTarget_SendIdle>

000018be <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <XMEGANVM_SendAddress+0x8>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	18 2f       	mov	r17, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    18cc:	86 2f       	mov	r24, r22
    18ce:	79 83       	std	Y+1, r23	; 0x01
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	86 df       	rcall	.-244    	; 0x17e0 <XPROGTarget_SendByte>
    18d4:	79 81       	ldd	r23, Y+1	; 0x01
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    18d6:	87 2f       	mov	r24, r23
    18d8:	83 df       	rcall	.-250    	; 0x17e0 <XPROGTarget_SendByte>
    18da:	81 2f       	mov	r24, r17
    18dc:	81 df       	rcall	.-254    	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	89 2f       	mov	r24, r25
    18e2:	0f 90       	pop	r0
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    18e4:	0f 90       	pop	r0
    18e6:	df 91       	pop	r29
}
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	79 cf       	rjmp	.-270    	; 0x17e0 <XPROGTarget_SendByte>

000018ee <XMEGANVM_SendNVMRegAddress>:
    18ee:	40 91 61 01 	lds	r20, 0x0161
{
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    18f2:	50 91 62 01 	lds	r21, 0x0162
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    18f6:	60 91 63 01 	lds	r22, 0x0163
    18fa:	70 91 64 01 	lds	r23, 0x0164
    18fe:	48 2b       	or	r20, r24

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    1900:	cb 01       	movw	r24, r22
    1902:	ba 01       	movw	r22, r20
    1904:	dc cf       	rjmp	.-72     	; 0x18be <XMEGANVM_SendAddress>

00001906 <XMEGANVM_WaitWhileNVMBusBusy>:
    1906:	80 e8       	ldi	r24, 0x80	; 128
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
    1908:	6b df       	rcall	.-298    	; 0x17e0 <XPROGTarget_SendByte>
    190a:	85 df       	rcall	.-246    	; 0x1816 <XPROGTarget_ReceiveByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    190c:	9a b5       	in	r25, 0x2a	; 42
    190e:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1910:	21 f0       	breq	.+8      	; 0x191a <XMEGANVM_WaitWhileNVMBusBusy+0x14>
    1912:	81 ff       	sbrs	r24, 1
    1914:	f8 cf       	rjmp	.-16     	; 0x1906 <XMEGANVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret
		  return true;
    191a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    191c:	08 95       	ret

0000191e <XMEGANVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    191e:	8b e6       	ldi	r24, 0x6B	; 107
    1920:	5f df       	rcall	.-322    	; 0x17e0 <XPROGTarget_SendByte>
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1922:	8f e0       	ldi	r24, 0x0F	; 15
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1924:	e4 df       	rcall	.-56     	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	5b df       	rcall	.-330    	; 0x17e0 <XPROGTarget_SendByte>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
    192a:	75 df       	rcall	.-278    	; 0x1816 <XPROGTarget_ReceiveByte>
    192c:	9a b5       	in	r25, 0x2a	; 42
    192e:	99 23       	and	r25, r25

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1930:	21 f0       	breq	.+8      	; 0x193a <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
    1932:	87 fd       	sbrc	r24, 7

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1934:	f8 cf       	rjmp	.-16     	; 0x1926 <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	08 95       	ret

0000193e <XMEGANVM_EnablePDI>:
		  return true;
    193e:	df 92       	push	r13
	}
}
    1940:	ef 92       	push	r14

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	28 97       	sbiw	r28, 0x08	; 8
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    195c:	79 df       	rcall	.-270    	; 0x1850 <XPROGTarget_EnableTargetPDI>
    195e:	81 ec       	ldi	r24, 0xC1	; 193

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
    1960:	3f df       	rcall	.-386    	; 0x17e0 <XPROGTarget_SendByte>
    1962:	89 e5       	ldi	r24, 0x59	; 89
    1964:	3d df       	rcall	.-390    	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    1966:	82 ec       	ldi	r24, 0xC2	; 194
    1968:	3b df       	rcall	.-394    	; 0x17e0 <XPROGTarget_SendByte>
    196a:	82 e0       	ldi	r24, 0x02	; 2

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
    196c:	39 df       	rcall	.-398    	; 0x17e0 <XPROGTarget_SendByte>
    196e:	80 ee       	ldi	r24, 0xE0	; 224
    1970:	37 df       	rcall	.-402    	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    1972:	8e 01       	movw	r16, r28
    1974:	07 5f       	subi	r16, 0xF7	; 247
    1976:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	7c 01       	movw	r14, r24
    197e:	88 e0       	ldi	r24, 0x08	; 8
    1980:	d8 2e       	mov	r13, r24
    1982:	e5 e8       	ldi	r30, 0x85	; 133
    1984:	f1 e0       	ldi	r31, 0x01	; 1
    1986:	d7 01       	movw	r26, r14
    1988:	8d 2d       	mov	r24, r13
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    198a:	01 90       	ld	r0, Z+
    198c:	0d 92       	st	X+, r0
    198e:	8a 95       	dec	r24
    1990:	e1 f7       	brne	.-8      	; 0x198a <XMEGANVM_EnablePDI+0x4c>
    1992:	f8 01       	movw	r30, r16
    1994:	82 91       	ld	r24, -Z
    1996:	8f 01       	movw	r16, r30
    1998:	23 df       	rcall	.-442    	; 0x17e0 <XPROGTarget_SendByte>
    199a:	0e 15       	cp	r16, r14
    199c:	1f 05       	cpc	r17, r15
    199e:	89 f7       	brne	.-30     	; 0x1982 <XMEGANVM_EnablePDI+0x44>
    19a0:	28 96       	adiw	r28, 0x08	; 8
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	df 91       	pop	r29
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
}
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	a5 cf       	rjmp	.-182    	; 0x1906 <XMEGANVM_WaitWhileNVMBusBusy>

000019bc <XMEGANVM_DisablePDI>:
    19bc:	a4 df       	rcall	.-184    	; 0x1906 <XMEGANVM_WaitWhileNVMBusBusy>
    19be:	81 ec       	ldi	r24, 0xC1	; 193
    19c0:	0f df       	rcall	.-482    	; 0x17e0 <XPROGTarget_SendByte>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0d df       	rcall	.-486    	; 0x17e0 <XPROGTarget_SendByte>
    19c6:	81 e8       	ldi	r24, 0x81	; 129
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    19c8:	0b df       	rcall	.-490    	; 0x17e0 <XPROGTarget_SendByte>
    19ca:	25 df       	rcall	.-438    	; 0x1816 <XPROGTarget_ReceiveByte>
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
    19cc:	81 11       	cpse	r24, r1
    19ce:	f7 cf       	rjmp	.-18     	; 0x19be <XMEGANVM_DisablePDI+0x2>
    19d0:	df ce       	rjmp	.-578    	; 0x1790 <XPROGTarget_DisableTargetPDI>

000019d2 <XMEGANVM_GetMemoryCRC>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	18 2f       	mov	r17, r24

	XPROGTarget_DisableTargetPDI();
    19da:	eb 01       	movw	r28, r22
    19dc:	18 82       	st	Y, r1
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
	*CRCDest = 0;
    19de:	19 82       	std	Y+1, r1	; 0x01
    19e0:	1a 82       	std	Y+2, r1	; 0x02
    19e2:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19e4:	9c df       	rcall	.-200    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    19e6:	88 23       	and	r24, r24
    19e8:	29 f1       	breq	.+74     	; 0x1a34 <XMEGANVM_GetMemoryCRC+0x62>
    19ea:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    19ec:	f9 de       	rcall	.-526    	; 0x17e0 <XPROGTarget_SendByte>
    19ee:	8a e0       	ldi	r24, 0x0A	; 10
    19f0:	7e df       	rcall	.-260    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19f2:	81 2f       	mov	r24, r17
    19f4:	f5 de       	rcall	.-534    	; 0x17e0 <XPROGTarget_SendByte>
    19f6:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(CRCCommand);
    19f8:	f3 de       	rcall	.-538    	; 0x17e0 <XPROGTarget_SendByte>
    19fa:	8b e0       	ldi	r24, 0x0B	; 11
    19fc:	78 df       	rcall	.-272    	; 0x18ee <XMEGANVM_SendNVMRegAddress>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	ef de       	rcall	.-546    	; 0x17e0 <XPROGTarget_SendByte>
    1a02:	81 df       	rcall	.-254    	; 0x1906 <XMEGANVM_WaitWhileNVMBusBusy>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1a04:	88 23       	and	r24, r24
    1a06:	b1 f0       	breq	.+44     	; 0x1a34 <XMEGANVM_GetMemoryCRC+0x62>
    1a08:	8a df       	rcall	.-236    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1a0a:	88 23       	and	r24, r24
    1a0c:	99 f0       	breq	.+38     	; 0x1a34 <XMEGANVM_GetMemoryCRC+0x62>
    1a0e:	8b e6       	ldi	r24, 0x6B	; 107

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1a10:	e7 de       	rcall	.-562    	; 0x17e0 <XPROGTarget_SendByte>
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	6c df       	rcall	.-296    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1a16:	80 ea       	ldi	r24, 0xA0	; 160
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a18:	e3 de       	rcall	.-570    	; 0x17e0 <XPROGTarget_SendByte>
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	e1 de       	rcall	.-574    	; 0x17e0 <XPROGTarget_SendByte>
    1a1e:	84 e2       	ldi	r24, 0x24	; 36
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1a20:	df de       	rcall	.-578    	; 0x17e0 <XPROGTarget_SendByte>
    1a22:	13 e0       	ldi	r17, 0x03	; 3
    1a24:	f8 de       	rcall	.-528    	; 0x1816 <XPROGTarget_ReceiveByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1a26:	89 93       	st	Y+, r24
    1a28:	11 50       	subi	r17, 0x01	; 1
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <XMEGANVM_GetMemoryCRC+0x52>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1a2c:	9a b5       	in	r25, 0x2a	; 42
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	91 11       	cpse	r25, r1
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <XMEGANVM_GetMemoryCRC+0x64>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	df 91       	pop	r29

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	08 95       	ret

00001a3e <XMEGANVM_ReadMemory>:
    1a3e:	cf 92       	push	r12
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
	XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
    1a48:	1f 93       	push	r17
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	6b 01       	movw	r12, r22
    1a50:	7c 01       	movw	r14, r24
    1a52:	ea 01       	movw	r28, r20
}
    1a54:	89 01       	movw	r16, r18
    1a56:	63 df       	rcall	.-314    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1a58:	88 23       	and	r24, r24
    1a5a:	61 f1       	breq	.+88     	; 0x1ab4 <XMEGANVM_ReadMemory+0x76>
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a5c:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1a5e:	c0 de       	rcall	.-640    	; 0x17e0 <XPROGTarget_SendByte>
    1a60:	8a e0       	ldi	r24, 0x0A	; 10
    1a62:	45 df       	rcall	.-374    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a64:	83 e4       	ldi	r24, 0x43	; 67
    1a66:	bc de       	rcall	.-648    	; 0x17e0 <XPROGTarget_SendByte>
    1a68:	02 30       	cpi	r16, 0x02	; 2
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1a6a:	11 05       	cpc	r17, r1
    1a6c:	b8 f0       	brcs	.+46     	; 0x1a9c <XMEGANVM_ReadMemory+0x5e>
    1a6e:	8b e6       	ldi	r24, 0x6B	; 107

	if (ReadSize > 1)
    1a70:	b7 de       	rcall	.-658    	; 0x17e0 <XPROGTarget_SendByte>
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 01       	movw	r22, r12
	{
		/* Load the PDI pointer register with the start address we want to read from */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1a76:	23 df       	rcall	.-442    	; 0x18be <XMEGANVM_SendAddress>
    1a78:	80 ea       	ldi	r24, 0xA0	; 160
    1a7a:	b2 de       	rcall	.-668    	; 0x17e0 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(ReadAddress);
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	80 0f       	add	r24, r16
    1a80:	af de       	rcall	.-674    	; 0x17e0 <XPROGTarget_SendByte>
    1a82:	84 e2       	ldi	r24, 0x24	; 36

		/* Send the REPEAT command with the specified number of bytes to read */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1a84:	ad de       	rcall	.-678    	; 0x17e0 <XPROGTarget_SendByte>
    1a86:	0c 0f       	add	r16, r28
    1a88:	1d 1f       	adc	r17, r29
		XPROGTarget_SendByte(ReadSize - 1);
    1a8a:	c0 17       	cp	r28, r16
    1a8c:	d1 07       	cpc	r29, r17
    1a8e:	69 f0       	breq	.+26     	; 0x1aaa <XMEGANVM_ReadMemory+0x6c>
    1a90:	8a b5       	in	r24, 0x2a	; 42

		/* Send a LD command with indirect access and post-increment to read out the bytes */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1a92:	88 23       	and	r24, r24
    1a94:	51 f0       	breq	.+20     	; 0x1aaa <XMEGANVM_ReadMemory+0x6c>
    1a96:	bf de       	rcall	.-642    	; 0x1816 <XPROGTarget_ReceiveByte>
    1a98:	89 93       	st	Y+, r24
    1a9a:	f7 cf       	rjmp	.-18     	; 0x1a8a <XMEGANVM_ReadMemory+0x4c>
		while (ReadSize-- && TimeoutTicksRemaining)
    1a9c:	8c e0       	ldi	r24, 0x0C	; 12
    1a9e:	a0 de       	rcall	.-704    	; 0x17e0 <XPROGTarget_SendByte>
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	0c df       	rcall	.-488    	; 0x18be <XMEGANVM_SendAddress>
    1aa6:	b7 de       	rcall	.-658    	; 0x1816 <XPROGTarget_ReceiveByte>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1aa8:	88 83       	st	Y, r24
    1aaa:	9a b5       	in	r25, 0x2a	; 42
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	91 11       	cpse	r25, r1
	}
	else
	{
		/* Send a LDS command with the read address to read out the requested byte */
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <XMEGANVM_ReadMemory+0x76>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	df 91       	pop	r29
		XMEGANVM_SendAddress(ReadAddress);
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
	}

	return (TimeoutTicksRemaining > 0);
    1ac4:	08 95       	ret

00001ac6 <XMEGANVM_WriteByteMemory>:
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
}
    1ace:	df 93       	push	r29
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <XMEGANVM_WriteByteMemory+0xc>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <XMEGANVM_WriteByteMemory+0xe>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	f8 2e       	mov	r15, r24
    1ada:	12 2f       	mov	r17, r18
    1adc:	49 83       	std	Y+1, r20	; 0x01
    1ade:	5a 83       	std	Y+2, r21	; 0x02
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ae0:	6b 83       	std	Y+3, r22	; 0x03
    1ae2:	7c 83       	std	Y+4, r23	; 0x04
    1ae4:	1c df       	rcall	.-456    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1ae6:	08 2f       	mov	r16, r24
    1ae8:	88 23       	and	r24, r24
    1aea:	89 f0       	breq	.+34     	; 0x1b0e <XMEGANVM_WriteByteMemory+0x48>
    1aec:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1aee:	78 de       	rcall	.-784    	; 0x17e0 <XPROGTarget_SendByte>
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	fd de       	rcall	.-518    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1af4:	8f 2d       	mov	r24, r15
    1af6:	74 de       	rcall	.-792    	; 0x17e0 <XPROGTarget_SendByte>
    1af8:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(WriteCommand);
    1afa:	72 de       	rcall	.-796    	; 0x17e0 <XPROGTarget_SendByte>
    1afc:	49 81       	ldd	r20, Y+1	; 0x01
    1afe:	5a 81       	ldd	r21, Y+2	; 0x02

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b00:	6b 81       	ldd	r22, Y+3	; 0x03
    1b02:	7c 81       	ldd	r23, Y+4	; 0x04
    1b04:	cb 01       	movw	r24, r22
	XMEGANVM_SendAddress(WriteAddress);
    1b06:	ba 01       	movw	r22, r20
    1b08:	da de       	rcall	.-588    	; 0x18be <XMEGANVM_SendAddress>
    1b0a:	81 2f       	mov	r24, r17
    1b0c:	69 de       	rcall	.-814    	; 0x17e0 <XPROGTarget_SendByte>
    1b0e:	80 2f       	mov	r24, r16
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
	XPROGTarget_SendByte(Byte);
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28

	return true;
}
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	08 95       	ret

00001b24 <XMEGANVM_WritePageMemory>:
    1b24:	4f 92       	push	r4
    1b26:	5f 92       	push	r5
    1b28:	6f 92       	push	r6
    1b2a:	7f 92       	push	r7
    1b2c:	8f 92       	push	r8
    1b2e:	9f 92       	push	r9
    1b30:	af 92       	push	r10
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    1b32:	bf 92       	push	r11
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	c8 2f       	mov	r28, r24
    1b46:	d6 2f       	mov	r29, r22
    1b48:	84 2e       	mov	r8, r20
    1b4a:	92 2e       	mov	r9, r18
    1b4c:	27 01       	movw	r4, r14
    1b4e:	38 01       	movw	r6, r16
	if (PageMode & XPROG_PAGEMODE_ERASE)
    1b50:	20 ff       	sbrs	r18, 0
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <XMEGANVM_WritePageMemory+0x52>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b54:	e4 de       	rcall	.-568    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1b56:	81 11       	cpse	r24, r1
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <XMEGANVM_WritePageMemory+0x3a>
    1b5a:	c0 e0       	ldi	r28, 0x00	; 0
		  return false;
    1b5c:	43 c0       	rjmp	.+134    	; 0x1be4 <XMEGANVM_WritePageMemory+0xc0>
    1b5e:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b60:	3f de       	rcall	.-898    	; 0x17e0 <XPROGTarget_SendByte>
    1b62:	8a e0       	ldi	r24, 0x0A	; 10
    1b64:	c4 de       	rcall	.-632    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b66:	8d 2f       	mov	r24, r29
    1b68:	3b de       	rcall	.-906    	; 0x17e0 <XPROGTarget_SendByte>
    1b6a:	8c e4       	ldi	r24, 0x4C	; 76
		XPROGTarget_SendByte(EraseBuffCommand);
    1b6c:	39 de       	rcall	.-910    	; 0x17e0 <XPROGTarget_SendByte>
    1b6e:	8b e0       	ldi	r24, 0x0B	; 11
    1b70:	be de       	rcall	.-644    	; 0x18ee <XMEGANVM_SendNVMRegAddress>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	35 de       	rcall	.-918    	; 0x17e0 <XPROGTarget_SendByte>
    1b76:	a1 14       	cp	r10, r1
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1b78:	b1 04       	cpc	r11, r1
    1b7a:	21 f4       	brne	.+8      	; 0x1b84 <XMEGANVM_WritePageMemory+0x60>
    1b7c:	91 fc       	sbrc	r9, 1
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1b7e:	20 c0       	rjmp	.+64     	; 0x1bc0 <XMEGANVM_WritePageMemory+0x9c>
    1b80:	c1 e0       	ldi	r28, 0x01	; 1
    1b82:	30 c0       	rjmp	.+96     	; 0x1be4 <XMEGANVM_WritePageMemory+0xc0>
	}

	if (WriteSize)
    1b84:	cc de       	rcall	.-616    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1b86:	88 23       	and	r24, r24
    1b88:	41 f3       	breq	.-48     	; 0x1b5a <XMEGANVM_WritePageMemory+0x36>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
    1b8a:	8c e4       	ldi	r24, 0x4C	; 76
    1b8c:	29 de       	rcall	.-942    	; 0x17e0 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
    1b8e:	8a e0       	ldi	r24, 0x0A	; 10
    1b90:	ae de       	rcall	.-676    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
	}

	if (WriteSize)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b92:	8c 2f       	mov	r24, r28
    1b94:	25 de       	rcall	.-950    	; 0x17e0 <XPROGTarget_SendByte>
    1b96:	8b e6       	ldi	r24, 0x6B	; 107
    1b98:	23 de       	rcall	.-954    	; 0x17e0 <XPROGTarget_SendByte>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b9a:	c3 01       	movw	r24, r6
    1b9c:	b2 01       	movw	r22, r4
    1b9e:	8f de       	rcall	.-738    	; 0x18be <XMEGANVM_SendAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ba0:	80 ea       	ldi	r24, 0xA0	; 160
    1ba2:	1e de       	rcall	.-964    	; 0x17e0 <XPROGTarget_SendByte>
    1ba4:	8f ef       	ldi	r24, 0xFF	; 255
		XPROGTarget_SendByte(WriteBuffCommand);
    1ba6:	8a 0d       	add	r24, r10
    1ba8:	1b de       	rcall	.-970    	; 0x17e0 <XPROGTarget_SendByte>
    1baa:	84 e6       	ldi	r24, 0x64	; 100

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1bac:	19 de       	rcall	.-974    	; 0x17e0 <XPROGTarget_SendByte>
    1bae:	e6 01       	movw	r28, r12
    1bb0:	ac 0c       	add	r10, r12
		XMEGANVM_SendAddress(WriteAddress);
    1bb2:	bd 1c       	adc	r11, r13
    1bb4:	ca 15       	cp	r28, r10
    1bb6:	db 05       	cpc	r29, r11
    1bb8:	09 f3       	breq	.-62     	; 0x1b7c <XMEGANVM_WritePageMemory+0x58>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1bba:	89 91       	ld	r24, Y+
    1bbc:	11 de       	rcall	.-990    	; 0x17e0 <XPROGTarget_SendByte>
    1bbe:	fa cf       	rjmp	.-12     	; 0x1bb4 <XMEGANVM_WritePageMemory+0x90>
		XPROGTarget_SendByte(WriteSize - 1);
    1bc0:	ae de       	rcall	.-676    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1bc2:	c8 2f       	mov	r28, r24
    1bc4:	88 23       	and	r24, r24
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <XMEGANVM_WritePageMemory+0xa6>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1bc8:	c8 cf       	rjmp	.-112    	; 0x1b5a <XMEGANVM_WritePageMemory+0x36>
    1bca:	8c e4       	ldi	r24, 0x4C	; 76
    1bcc:	09 de       	rcall	.-1006   	; 0x17e0 <XPROGTarget_SendByte>
    1bce:	8a e0       	ldi	r24, 0x0A	; 10
    1bd0:	8e de       	rcall	.-740    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1bd2:	88 2d       	mov	r24, r8
		while (WriteSize--)
    1bd4:	05 de       	rcall	.-1014   	; 0x17e0 <XPROGTarget_SendByte>
    1bd6:	8c e4       	ldi	r24, 0x4C	; 76
    1bd8:	03 de       	rcall	.-1018   	; 0x17e0 <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1bda:	c3 01       	movw	r24, r6
    1bdc:	b2 01       	movw	r22, r4
    1bde:	6f de       	rcall	.-802    	; 0x18be <XMEGANVM_SendAddress>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1be2:	fe dd       	rcall	.-1028   	; 0x17e0 <XPROGTarget_SendByte>
    1be4:	8c 2f       	mov	r24, r28
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	af 90       	pop	r10
		XPROGTarget_SendByte(WritePageCommand);
    1bfa:	9f 90       	pop	r9
    1bfc:	8f 90       	pop	r8
    1bfe:	7f 90       	pop	r7

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c00:	6f 90       	pop	r6
    1c02:	5f 90       	pop	r5
    1c04:	4f 90       	pop	r4
		XMEGANVM_SendAddress(WriteAddress);
    1c06:	08 95       	ret

00001c08 <XMEGANVM_EraseMemory>:
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
		XPROGTarget_SendByte(0x00);
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <XMEGANVM_EraseMemory+0x8>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <XMEGANVM_EraseMemory+0xa>
    1c12:	cd b7       	in	r28, 0x3d	; 61
	}

	return true;
}
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	18 2f       	mov	r17, r24
    1c18:	49 83       	std	Y+1, r20	; 0x01
    1c1a:	5a 83       	std	Y+2, r21	; 0x02
    1c1c:	6b 83       	std	Y+3, r22	; 0x03
    1c1e:	7c 83       	std	Y+4, r23	; 0x04
    1c20:	7e de       	rcall	.-772    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1c22:	49 81       	ldd	r20, Y+1	; 0x01
    1c24:	5a 81       	ldd	r21, Y+2	; 0x02
    1c26:	6b 81       	ldd	r22, Y+3	; 0x03
    1c28:	7c 81       	ldd	r23, Y+4	; 0x04
    1c2a:	88 23       	and	r24, r24
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <XMEGANVM_EraseMemory+0x28>
    1c2e:	67 c0       	rjmp	.+206    	; 0x1cfe <XMEGANVM_EraseMemory+0xf6>
    1c30:	8c e4       	ldi	r24, 0x4C	; 76
    1c32:	10 34       	cpi	r17, 0x40	; 64
    1c34:	29 f4       	brne	.+10     	; 0x1c40 <XMEGANVM_EraseMemory+0x38>
    1c36:	d4 dd       	rcall	.-1112   	; 0x17e0 <XPROGTarget_SendByte>

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c38:	8a e0       	ldi	r24, 0x0A	; 10
    1c3a:	59 de       	rcall	.-846    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c3c:	80 e4       	ldi	r24, 0x40	; 64
    1c3e:	40 c0       	rjmp	.+128    	; 0x1cc0 <XMEGANVM_EraseMemory+0xb8>
    1c40:	49 83       	std	Y+1, r20	; 0x01
		XPROGTarget_SendByte(EraseCommand);
    1c42:	5a 83       	std	Y+2, r21	; 0x02
    1c44:	6b 83       	std	Y+3, r22	; 0x03
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c46:	7c 83       	std	Y+4, r23	; 0x04
    1c48:	10 33       	cpi	r17, 0x30	; 48
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <XMEGANVM_EraseMemory+0x46>
    1c4c:	40 c0       	rjmp	.+128    	; 0x1cce <XMEGANVM_EraseMemory+0xc6>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1c4e:	c8 dd       	rcall	.-1136   	; 0x17e0 <XPROGTarget_SendByte>
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	4d de       	rcall	.-870    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c54:	86 e3       	ldi	r24, 0x36	; 54
    1c56:	c4 dd       	rcall	.-1144   	; 0x17e0 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c58:	8c e4       	ldi	r24, 0x4C	; 76
    1c5a:	c2 dd       	rcall	.-1148   	; 0x17e0 <XPROGTarget_SendByte>
    1c5c:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1c5e:	47 de       	rcall	.-882    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	be dd       	rcall	.-1156   	; 0x17e0 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c64:	5c de       	rcall	.-840    	; 0x191e <XMEGANVM_WaitWhileNVMControllerBusy>
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <XMEGANVM_EraseMemory+0x64>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1c6a:	49 c0       	rjmp	.+146    	; 0x1cfe <XMEGANVM_EraseMemory+0xf6>
    1c6c:	8c e4       	ldi	r24, 0x4C	; 76
    1c6e:	b8 dd       	rcall	.-1168   	; 0x17e0 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1c70:	8a e0       	ldi	r24, 0x0A	; 10
    1c72:	3d de       	rcall	.-902    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1c74:	83 e3       	ldi	r24, 0x33	; 51

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1c76:	b4 dd       	rcall	.-1176   	; 0x17e0 <XPROGTarget_SendByte>
    1c78:	8b e6       	ldi	r24, 0x6B	; 107
    1c7a:	b2 dd       	rcall	.-1180   	; 0x17e0 <XPROGTarget_SendByte>
    1c7c:	49 81       	ldd	r20, Y+1	; 0x01
    1c7e:	5a 81       	ldd	r21, Y+2	; 0x02
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c80:	6b 81       	ldd	r22, Y+3	; 0x03
    1c82:	7c 81       	ldd	r23, Y+4	; 0x04
    1c84:	cb 01       	movw	r24, r22
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c86:	ba 01       	movw	r22, r20
    1c88:	1a de       	rcall	.-972    	; 0x18be <XMEGANVM_SendAddress>
    1c8a:	80 ea       	ldi	r24, 0xA0	; 160
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1c8c:	a9 dd       	rcall	.-1198   	; 0x17e0 <XPROGTarget_SendByte>
    1c8e:	80 91 5f 01 	lds	r24, 0x015F

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1c92:	81 50       	subi	r24, 0x01	; 1
    1c94:	a5 dd       	rcall	.-1206   	; 0x17e0 <XPROGTarget_SendByte>
    1c96:	84 e6       	ldi	r24, 0x64	; 100
		XMEGANVM_SendAddress(Address);
    1c98:	a3 dd       	rcall	.-1210   	; 0x17e0 <XPROGTarget_SendByte>
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	21 2f       	mov	r18, r17
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	80 91 5f 01 	lds	r24, 0x015F
    1ca4:	90 91 60 01 	lds	r25, 0x0160

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1ca8:	28 17       	cp	r18, r24
    1caa:	39 07       	cpc	r19, r25
    1cac:	20 f4       	brcc	.+8      	; 0x1cb6 <XMEGANVM_EraseMemory+0xae>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	97 dd       	rcall	.-1234   	; 0x17e0 <XPROGTarget_SendByte>
    1cb2:	1f 5f       	subi	r17, 0xFF	; 255
    1cb4:	f3 cf       	rjmp	.-26     	; 0x1c9c <XMEGANVM_EraseMemory+0x94>
    1cb6:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1cb8:	93 dd       	rcall	.-1242   	; 0x17e0 <XPROGTarget_SendByte>
    1cba:	8a e0       	ldi	r24, 0x0A	; 10
    1cbc:	18 de       	rcall	.-976    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1cbe:	80 e3       	ldi	r24, 0x30	; 48
    1cc0:	8f dd       	rcall	.-1250   	; 0x17e0 <XPROGTarget_SendByte>
    1cc2:	8c e4       	ldi	r24, 0x4C	; 76
    1cc4:	8d dd       	rcall	.-1254   	; 0x17e0 <XPROGTarget_SendByte>
    1cc6:	8b e0       	ldi	r24, 0x0B	; 11
    1cc8:	12 de       	rcall	.-988    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <XMEGANVM_EraseMemory+0xe4>
    1cce:	88 dd       	rcall	.-1264   	; 0x17e0 <XPROGTarget_SendByte>
    1cd0:	8a e0       	ldi	r24, 0x0A	; 10
		  XPROGTarget_SendByte(0x00);
    1cd2:	0d de       	rcall	.-998    	; 0x18ee <XMEGANVM_SendNVMRegAddress>
    1cd4:	81 2f       	mov	r24, r17
    1cd6:	84 dd       	rcall	.-1272   	; 0x17e0 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1cd8:	8c e4       	ldi	r24, 0x4C	; 76
    1cda:	82 dd       	rcall	.-1276   	; 0x17e0 <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1cdc:	49 81       	ldd	r20, Y+1	; 0x01
    1cde:	5a 81       	ldd	r21, Y+2	; 0x02
    1ce0:	6b 81       	ldd	r22, Y+3	; 0x03
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ce2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	ba 01       	movw	r22, r20
		XPROGTarget_SendByte(EraseCommand);
    1ce8:	ea dd       	rcall	.-1068   	; 0x18be <XMEGANVM_SendAddress>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	79 dd       	rcall	.-1294   	; 0x17e0 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1cf4:	0f 90       	pop	r0
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1cfa:	1f 91       	pop	r17
    1cfc:	04 ce       	rjmp	.-1016   	; 0x1906 <XMEGANVM_WaitWhileNVMBusBusy>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	0f 90       	pop	r0
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
		XPROGTarget_SendByte(EraseCommand);
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1d0e:	08 95       	ret

00001d10 <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once - use function to reduce code size */
	XPROGTarget_SendByte(TPI_CMD_SOUT(Address));
    1d10:	98 2f       	mov	r25, r24
    1d12:	9f 70       	andi	r25, 0x0F	; 15
    1d14:	90 69       	ori	r25, 0x90	; 144
    1d16:	80 73       	andi	r24, 0x30	; 48
    1d18:	88 0f       	add	r24, r24
    1d1a:	89 2b       	or	r24, r25
    1d1c:	61 cd       	rjmp	.-1342   	; 0x17e0 <XPROGTarget_SendByte>

00001d1e <TINYNVM_SendPointerAddress>:
    1d1e:	1f 93       	push	r17

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	1f 92       	push	r1
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	18 2f       	mov	r17, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1d2c:	88 e6       	ldi	r24, 0x68	; 104
    1d2e:	99 83       	std	Y+1, r25	; 0x01
    1d30:	57 dd       	rcall	.-1362   	; 0x17e0 <XPROGTarget_SendByte>
    1d32:	81 2f       	mov	r24, r17
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    1d34:	55 dd       	rcall	.-1366   	; 0x17e0 <XPROGTarget_SendByte>
    1d36:	89 e6       	ldi	r24, 0x69	; 105
    1d38:	53 dd       	rcall	.-1370   	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1d3a:	99 81       	ldd	r25, Y+1	; 0x01
    1d3c:	89 2f       	mov	r24, r25
    1d3e:	0f 90       	pop	r0
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
}
    1d44:	1f 91       	pop	r17
    1d46:	4c cd       	rjmp	.-1384   	; 0x17e0 <XPROGTarget_SendByte>

00001d48 <TINYNVM_WaitWhileNVMBusBusy>:
    1d48:	80 e8       	ldi	r24, 0x80	; 128
    1d4a:	4a dd       	rcall	.-1388   	; 0x17e0 <XPROGTarget_SendByte>
{
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1d4c:	64 dd       	rcall	.-1336   	; 0x1816 <XPROGTarget_ReceiveByte>
    1d4e:	9a b5       	in	r25, 0x2a	; 42
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS(TPI_REG_STATUS));

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1d50:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <TINYNVM_WaitWhileNVMBusBusy+0x14>
    1d54:	81 ff       	sbrs	r24, 1
    1d56:	f8 cf       	rjmp	.-16     	; 0x1d48 <TINYNVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	08 95       	ret
		  return true;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d5e:	08 95       	ret

00001d60 <TINYNVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1d60:	80 91 5d 01 	lds	r24, 0x015D
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once - use function to reduce code size */
	XPROGTarget_SendByte(TPI_CMD_SIN(Address));
    1d64:	98 2f       	mov	r25, r24
    1d66:	9f 70       	andi	r25, 0x0F	; 15
    1d68:	90 61       	ori	r25, 0x10	; 16
    1d6a:	80 73       	andi	r24, 0x30	; 48
    1d6c:	88 0f       	add	r24, r24
    1d6e:	89 2b       	or	r24, r25
    1d70:	37 dd       	rcall	.-1426   	; 0x17e0 <XPROGTarget_SendByte>
    1d72:	51 dd       	rcall	.-1374   	; 0x1816 <XPROGTarget_ReceiveByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1d74:	9a b5       	in	r25, 0x2a	; 42
    1d76:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1d78:	21 f0       	breq	.+8      	; 0x1d82 <TINYNVM_WaitWhileNVMControllerBusy+0x22>
    1d7a:	87 fd       	sbrc	r24, 7
    1d7c:	f1 cf       	rjmp	.-30     	; 0x1d60 <TINYNVM_WaitWhileNVMControllerBusy>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	08 95       	ret
		  return true;
    1d82:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d84:	08 95       	ret

00001d86 <TINYNVM_EnableTPI>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the TPI interface was enabled successfully, \c false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	28 97       	sbiw	r28, 0x08	; 8
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1da4:	70 dd       	rcall	.-1312   	; 0x1886 <XPROGTarget_EnableTargetTPI>
    1da6:	82 ec       	ldi	r24, 0xC2	; 194

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_CTRL));
    1da8:	1b dd       	rcall	.-1482   	; 0x17e0 <XPROGTarget_SendByte>
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	19 dd       	rcall	.-1486   	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    1dae:	80 ee       	ldi	r24, 0xE0	; 224
    1db0:	17 dd       	rcall	.-1490   	; 0x17e0 <XPROGTarget_SendByte>
    1db2:	8e 01       	movw	r16, r28

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1db4:	07 5f       	subi	r16, 0xF7	; 247
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	7c 01       	movw	r14, r24
    1dbe:	88 e0       	ldi	r24, 0x08	; 8
    1dc0:	d8 2e       	mov	r13, r24
    1dc2:	ed e8       	ldi	r30, 0x8D	; 141
    1dc4:	f1 e0       	ldi	r31, 0x01	; 1
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1dc6:	d7 01       	movw	r26, r14
    1dc8:	8d 2d       	mov	r24, r13
    1dca:	01 90       	ld	r0, Z+
    1dcc:	0d 92       	st	X+, r0
    1dce:	8a 95       	dec	r24
    1dd0:	e1 f7       	brne	.-8      	; 0x1dca <TINYNVM_EnableTPI+0x44>
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	82 91       	ld	r24, -Z
    1dd6:	8f 01       	movw	r16, r30
    1dd8:	03 dd       	rcall	.-1530   	; 0x17e0 <XPROGTarget_SendByte>
    1dda:	0e 15       	cp	r16, r14
    1ddc:	1f 05       	cpc	r17, r15
    1dde:	89 f7       	brne	.-30     	; 0x1dc2 <TINYNVM_EnableTPI+0x3c>
    1de0:	28 96       	adiw	r28, 0x08	; 8
    1de2:	0f b6       	in	r0, 0x3f	; 63
	XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_CTRL));
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
}
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	a6 cf       	rjmp	.-180    	; 0x1d48 <TINYNVM_WaitWhileNVMBusBusy>

00001dfc <TINYNVM_DisableTPI>:
    1dfc:	a5 df       	rcall	.-182    	; 0x1d48 <TINYNVM_WaitWhileNVMBusBusy>
    1dfe:	80 ec       	ldi	r24, 0xC0	; 192
    1e00:	ef dc       	rcall	.-1570   	; 0x17e0 <XPROGTarget_SendByte>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1e04:	ed dc       	rcall	.-1574   	; 0x17e0 <XPROGTarget_SendByte>
    1e06:	80 e8       	ldi	r24, 0x80	; 128

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_STATUS));
		XPROGTarget_SendByte(0x00);
    1e08:	eb dc       	rcall	.-1578   	; 0x17e0 <XPROGTarget_SendByte>
    1e0a:	05 dd       	rcall	.-1526   	; 0x1816 <XPROGTarget_ReceiveByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS(TPI_REG_STATUS));
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	f7 cf       	rjmp	.-18     	; 0x1dfe <TINYNVM_DisableTPI+0x2>
    1e10:	d1 cc       	rjmp	.-1630   	; 0x17b4 <XPROGTarget_DisableTargetTPI>

00001e12 <TINYNVM_ReadMemory>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17

	XPROGTarget_DisableTargetTPI();
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1e1e:	ec 01       	movw	r28, r24
    1e20:	7b 01       	movw	r14, r22
    1e22:	8a 01       	movw	r16, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e24:	9d df       	rcall	.-198    	; 0x1d60 <TINYNVM_WaitWhileNVMControllerBusy>
    1e26:	88 23       	and	r24, r24
    1e28:	d1 f0       	breq	.+52     	; 0x1e5e <TINYNVM_ReadMemory+0x4c>
    1e2a:	80 91 5e 01 	lds	r24, 0x015E
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1e2e:	70 df       	rcall	.-288    	; 0x1d10 <TINYNVM_SendWriteNVMRegister>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	d6 dc       	rcall	.-1620   	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1e34:	ce 01       	movw	r24, r28
    1e36:	73 df       	rcall	.-282    	; 0x1d1e <TINYNVM_SendPointerAddress>
    1e38:	e7 01       	movw	r28, r14

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1e3a:	0e 0d       	add	r16, r14
    1e3c:	1f 1d       	adc	r17, r15
    1e3e:	c0 17       	cp	r28, r16
    1e40:	d1 07       	cpc	r29, r17
    1e42:	41 f0       	breq	.+16     	; 0x1e54 <TINYNVM_ReadMemory+0x42>
    1e44:	8a b5       	in	r24, 0x2a	; 42

	while (ReadSize-- && TimeoutTicksRemaining)
    1e46:	88 23       	and	r24, r24
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <TINYNVM_ReadMemory+0x42>
    1e4a:	84 e2       	ldi	r24, 0x24	; 36
    1e4c:	c9 dc       	rcall	.-1646   	; 0x17e0 <XPROGTarget_SendByte>
    1e4e:	e3 dc       	rcall	.-1594   	; 0x1816 <XPROGTarget_ReceiveByte>
    1e50:	89 93       	st	Y+, r24
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD(TPI_POINTER_INDIRECT_PI));
    1e52:	f5 cf       	rjmp	.-22     	; 0x1e3e <TINYNVM_ReadMemory+0x2c>
    1e54:	9a b5       	in	r25, 0x2a	; 42
    1e56:	81 e0       	ldi	r24, 0x01	; 1
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1e58:	91 11       	cpse	r25, r1
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <TINYNVM_ReadMemory+0x4c>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	df 91       	pop	r29
	}

	return (TimeoutTicksRemaining > 0);
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
}
    1e6a:	08 95       	ret

00001e6c <TINYNVM_WriteMemory>:
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1e78:	df 93       	push	r29
    1e7a:	7c 01       	movw	r14, r24
    1e7c:	8b 01       	movw	r16, r22
    1e7e:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e80:	6f df       	rcall	.-290    	; 0x1d60 <TINYNVM_WaitWhileNVMControllerBusy>
    1e82:	d8 2e       	mov	r13, r24
    1e84:	81 11       	cpse	r24, r1
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <TINYNVM_WriteMemory+0x20>
    1e88:	d1 2c       	mov	r13, r1
	  return false;
    1e8a:	22 c0       	rjmp	.+68     	; 0x1ed0 <TINYNVM_WriteMemory+0x64>
    1e8c:	c0 ff       	sbrs	r28, 0

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1e8e:	06 c0       	rjmp	.+12     	; 0x1e9c <TINYNVM_WriteMemory+0x30>
    1e90:	f8 01       	movw	r30, r16
	  WriteBuffer[WriteLength++] = 0xFF;
    1e92:	ec 0f       	add	r30, r28
    1e94:	fd 1f       	adc	r31, r29
    1e96:	8f ef       	ldi	r24, 0xFF	; 255
    1e98:	80 83       	st	Z, r24
    1e9a:	21 96       	adiw	r28, 0x01	; 1
    1e9c:	80 91 5e 01 	lds	r24, 0x015E

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1ea0:	37 df       	rcall	.-402    	; 0x1d10 <TINYNVM_SendWriteNVMRegister>
    1ea2:	8d e1       	ldi	r24, 0x1D	; 29
    1ea4:	9d dc       	rcall	.-1734   	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1ea6:	c7 01       	movw	r24, r14
    1ea8:	3a df       	rcall	.-396    	; 0x1d1e <TINYNVM_SendPointerAddress>
    1eaa:	20 97       	sbiw	r28, 0x00	; 0

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1eac:	89 f0       	breq	.+34     	; 0x1ed0 <TINYNVM_WriteMemory+0x64>
    1eae:	58 df       	rcall	.-336    	; 0x1d60 <TINYNVM_WaitWhileNVMControllerBusy>
    1eb0:	88 23       	and	r24, r24

	while (WriteLength)
    1eb2:	51 f3       	breq	.-44     	; 0x1e88 <TINYNVM_WriteMemory+0x1c>
    1eb4:	84 e6       	ldi	r24, 0x64	; 100
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1eb6:	94 dc       	rcall	.-1752   	; 0x17e0 <XPROGTarget_SendByte>
    1eb8:	f8 01       	movw	r30, r16
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 dc       	rcall	.-1758   	; 0x17e0 <XPROGTarget_SendByte>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT_PI));
    1ebe:	84 e6       	ldi	r24, 0x64	; 100
    1ec0:	8f dc       	rcall	.-1762   	; 0x17e0 <XPROGTarget_SendByte>
    1ec2:	f8 01       	movw	r30, r16
		XPROGTarget_SendByte(*(WriteBuffer++));
    1ec4:	81 81       	ldd	r24, Z+1	; 0x01
    1ec6:	8c dc       	rcall	.-1768   	; 0x17e0 <XPROGTarget_SendByte>
    1ec8:	22 97       	sbiw	r28, 0x02	; 2
    1eca:	0e 5f       	subi	r16, 0xFE	; 254

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT_PI));
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	ed cf       	rjmp	.-38     	; 0x1eaa <TINYNVM_WriteMemory+0x3e>
    1ed0:	8d 2d       	mov	r24, r13
		XPROGTarget_SendByte(*(WriteBuffer++));
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	08 95       	ret

00001ee2 <TINYNVM_EraseMemory>:
	}

	return true;
}
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	18 2f       	mov	r17, r24
    1eea:	eb 01       	movw	r28, r22
    1eec:	39 df       	rcall	.-398    	; 0x1d60 <TINYNVM_WaitWhileNVMControllerBusy>
    1eee:	88 23       	and	r24, r24
    1ef0:	81 f0       	breq	.+32     	; 0x1f12 <TINYNVM_EraseMemory+0x30>
    1ef2:	80 91 5e 01 	lds	r24, 0x015E
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1ef6:	0c df       	rcall	.-488    	; 0x1d10 <TINYNVM_SendWriteNVMRegister>
    1ef8:	81 2f       	mov	r24, r17
    1efa:	72 dc       	rcall	.-1820   	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(EraseCommand);
    1efc:	ce 01       	movw	r24, r28
    1efe:	81 60       	ori	r24, 0x01	; 1
    1f00:	0e df       	rcall	.-484    	; 0x1d1e <TINYNVM_SendPointerAddress>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1f02:	80 e6       	ldi	r24, 0x60	; 96
    1f04:	6d dc       	rcall	.-1830   	; 0x17e0 <XPROGTarget_SendByte>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	6b dc       	rcall	.-1834   	; 0x17e0 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT));
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
	XPROGTarget_SendByte(0x00);
    1f10:	27 cf       	rjmp	.-434    	; 0x1d60 <TINYNVM_WaitWhileNVMControllerBusy>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	df 91       	pop	r29
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	return true;
}
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	08 95       	ret

00001f1c <Endpoint_Write_Stream_LE>:
	TINYNVM_SendPointerAddress(Address | 0x0001);
	XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT));
	XPROGTarget_SendByte(0x00);

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
	  return false;

	return true;
}
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f2a:	df 93       	push	r29
    1f2c:	7c 01       	movw	r14, r24
    1f2e:	8b 01       	movw	r16, r22
    1f30:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f32:	2e d2       	rcall	.+1116   	; 0x2390 <Endpoint_WaitUntilReady>
    1f34:	81 11       	cpse	r24, r1
    1f36:	31 c0       	rjmp	.+98     	; 0x1f9a <Endpoint_Write_Stream_LE+0x7e>
    1f38:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1f3a:	31 f0       	breq	.+12     	; 0x1f48 <Endpoint_Write_Stream_LE+0x2c>
    1f3c:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1f3e:	99 81       	ldd	r25, Y+1	; 0x01
    1f40:	08 1b       	sub	r16, r24
    1f42:	19 0b       	sbc	r17, r25
    1f44:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1f46:	f9 1e       	adc	r15, r25
    1f48:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1f4a:	d1 2c       	mov	r13, r1
    1f4c:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1f4e:	11 05       	cpc	r17, r1
    1f50:	19 f1       	breq	.+70     	; 0x1f98 <Endpoint_Write_Stream_LE+0x7c>
    1f52:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f56:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <Endpoint_Write_Stream_LE+0x66>
    1f5a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f5e:	8e 77       	andi	r24, 0x7E	; 126
    1f60:	80 93 e8 00 	sts	0x00E8, r24
    1f64:	6b d4       	rcall	.+2262   	; 0x283c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1f66:	20 97       	sbiw	r28, 0x00	; 0
    1f68:	41 f0       	breq	.+16     	; 0x1f7a <Endpoint_Write_Stream_LE+0x5e>
			#endif

			if (BytesProcessed != NULL)
    1f6a:	88 81       	ld	r24, Y
    1f6c:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    1f6e:	8c 0d       	add	r24, r12
    1f70:	9d 1d       	adc	r25, r13
    1f72:	99 83       	std	Y+1, r25	; 0x01
    1f74:	88 83       	st	Y, r24
    1f76:	85 e0       	ldi	r24, 0x05	; 5
    1f78:	10 c0       	rjmp	.+32     	; 0x1f9a <Endpoint_Write_Stream_LE+0x7e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f7a:	0a d2       	rcall	.+1044   	; 0x2390 <Endpoint_WaitUntilReady>
    1f7c:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f7e:	31 f3       	breq	.-52     	; 0x1f4c <Endpoint_Write_Stream_LE+0x30>
    1f80:	0c c0       	rjmp	.+24     	; 0x1f9a <Endpoint_Write_Stream_LE+0x7e>
    1f82:	f7 01       	movw	r30, r14
    1f84:	81 91       	ld	r24, Z+
    1f86:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f88:	80 93 f1 00 	sts	0x00F1, r24
    1f8c:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f8e:	11 09       	sbc	r17, r1
    1f90:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1f92:	cf 1a       	sub	r12, r31
    1f94:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    1f96:	da cf       	rjmp	.-76     	; 0x1f4c <Endpoint_Write_Stream_LE+0x30>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1f9e:	1f 91       	pop	r17
}
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	08 95       	ret

00001fac <Endpoint_Read_Stream_LE>:
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	7c 01       	movw	r14, r24
    1fbe:	8b 01       	movw	r16, r22
    1fc0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fc2:	e6 d1       	rcall	.+972    	; 0x2390 <Endpoint_WaitUntilReady>
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	31 c0       	rjmp	.+98     	; 0x202a <Endpoint_Read_Stream_LE+0x7e>
    1fc8:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1fca:	31 f0       	breq	.+12     	; 0x1fd8 <Endpoint_Read_Stream_LE+0x2c>
    1fcc:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1fce:	99 81       	ldd	r25, Y+1	; 0x01
    1fd0:	08 1b       	sub	r16, r24
    1fd2:	19 0b       	sbc	r17, r25
    1fd4:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1fd6:	f9 1e       	adc	r15, r25
    1fd8:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1fda:	d1 2c       	mov	r13, r1
    1fdc:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1fde:	11 05       	cpc	r17, r1
    1fe0:	19 f1       	breq	.+70     	; 0x2028 <Endpoint_Read_Stream_LE+0x7c>
    1fe2:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1fe6:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <Endpoint_Read_Stream_LE+0x66>
    1fea:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fee:	8b 77       	andi	r24, 0x7B	; 123
    1ff0:	80 93 e8 00 	sts	0x00E8, r24
    1ff4:	23 d4       	rcall	.+2118   	; 0x283c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1ff6:	20 97       	sbiw	r28, 0x00	; 0
    1ff8:	41 f0       	breq	.+16     	; 0x200a <Endpoint_Read_Stream_LE+0x5e>
			#endif

			if (BytesProcessed != NULL)
    1ffa:	88 81       	ld	r24, Y
    1ffc:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    1ffe:	8c 0d       	add	r24, r12
    2000:	9d 1d       	adc	r25, r13
    2002:	99 83       	std	Y+1, r25	; 0x01
    2004:	88 83       	st	Y, r24
    2006:	85 e0       	ldi	r24, 0x05	; 5
    2008:	10 c0       	rjmp	.+32     	; 0x202a <Endpoint_Read_Stream_LE+0x7e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    200a:	c2 d1       	rcall	.+900    	; 0x2390 <Endpoint_WaitUntilReady>
    200c:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    200e:	31 f3       	breq	.-52     	; 0x1fdc <Endpoint_Read_Stream_LE+0x30>
    2010:	0c c0       	rjmp	.+24     	; 0x202a <Endpoint_Read_Stream_LE+0x7e>
    2012:	80 91 f1 00 	lds	r24, 0x00F1
    2016:	f7 01       	movw	r30, r14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2018:	81 93       	st	Z+, r24
    201a:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    201c:	01 50       	subi	r16, 0x01	; 1
    201e:	11 09       	sbc	r17, r1
    2020:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2022:	cf 1a       	sub	r12, r31
    2024:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    2026:	da cf       	rjmp	.-76     	; 0x1fdc <Endpoint_Read_Stream_LE+0x30>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    202e:	1f 91       	pop	r17
}
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	08 95       	ret

0000203c <Endpoint_Read_Stream_BE>:
    203c:	cf 92       	push	r12
    203e:	df 92       	push	r13
    2040:	ef 92       	push	r14
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2042:	ff 92       	push	r15
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	6c 01       	movw	r12, r24
    204e:	8b 01       	movw	r16, r22
    2050:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2052:	9e d1       	rcall	.+828    	; 0x2390 <Endpoint_WaitUntilReady>
    2054:	81 11       	cpse	r24, r1
    2056:	38 c0       	rjmp	.+112    	; 0x20c8 <Endpoint_Read_Stream_BE+0x8c>
    2058:	e8 01       	movw	r28, r16

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    205a:	21 97       	sbiw	r28, 0x01	; 1
    205c:	cc 0d       	add	r28, r12
    205e:	dd 1d       	adc	r29, r13
    2060:	e1 14       	cp	r14, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2062:	f1 04       	cpc	r15, r1
    2064:	39 f0       	breq	.+14     	; 0x2074 <Endpoint_Read_Stream_BE+0x38>
    2066:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	08 1b       	sub	r16, r24
    206e:	19 0b       	sbc	r17, r25
    2070:	c8 1b       	sub	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2072:	d9 0b       	sbc	r29, r25
    2074:	c1 2c       	mov	r12, r1
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2076:	d1 2c       	mov	r13, r1
    2078:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    207a:	11 05       	cpc	r17, r1
    207c:	21 f1       	breq	.+72     	; 0x20c6 <Endpoint_Read_Stream_BE+0x8a>
    207e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2082:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2084:	16 c0       	rjmp	.+44     	; 0x20b2 <Endpoint_Read_Stream_BE+0x76>
    2086:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    208a:	8b 77       	andi	r24, 0x7B	; 123
    208c:	80 93 e8 00 	sts	0x00E8, r24
    2090:	d5 d3       	rcall	.+1962   	; 0x283c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    2092:	e1 14       	cp	r14, r1
    2094:	f1 04       	cpc	r15, r1
			#endif

			if (BytesProcessed != NULL)
    2096:	49 f0       	breq	.+18     	; 0x20aa <Endpoint_Read_Stream_BE+0x6e>
    2098:	f7 01       	movw	r30, r14
    209a:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	8c 0d       	add	r24, r12
    20a0:	9d 1d       	adc	r25, r13
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	85 e0       	ldi	r24, 0x05	; 5
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <Endpoint_Read_Stream_BE+0x8c>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    20aa:	72 d1       	rcall	.+740    	; 0x2390 <Endpoint_WaitUntilReady>
    20ac:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    20ae:	21 f3       	breq	.-56     	; 0x2078 <Endpoint_Read_Stream_BE+0x3c>
    20b0:	0b c0       	rjmp	.+22     	; 0x20c8 <Endpoint_Read_Stream_BE+0x8c>
    20b2:	80 91 f1 00 	lds	r24, 0x00F1
    20b6:	88 83       	st	Y, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20b8:	21 97       	sbiw	r28, 0x01	; 1
    20ba:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    20bc:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    20be:	ff ef       	ldi	r31, 0xFF	; 255
			Length--;
    20c0:	cf 1a       	sub	r12, r31
    20c2:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    20c4:	d9 cf       	rjmp	.-78     	; 0x2078 <Endpoint_Read_Stream_BE+0x3c>
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    20cc:	1f 91       	pop	r17
}
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	df 90       	pop	r13
    20d6:	cf 90       	pop	r12
    20d8:	08 95       	ret

000020da <Endpoint_Write_Control_Stream_LE>:
    20da:	20 91 b1 01 	lds	r18, 0x01B1
    20de:	30 91 b2 01 	lds	r19, 0x01B2
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    20e2:	26 17       	cp	r18, r22
    20e4:	37 07       	cpc	r19, r23
    20e6:	48 f0       	brcs	.+18     	; 0x20fa <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    20e8:	61 15       	cp	r22, r1
    20ea:	71 05       	cpc	r23, r1
    20ec:	39 f4       	brne	.+14     	; 0x20fc <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20ee:	20 91 e8 00 	lds	r18, 0x00E8
    20f2:	2e 77       	andi	r18, 0x7E	; 126
    20f4:	20 93 e8 00 	sts	0x00E8, r18
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <Endpoint_Write_Control_Stream_LE+0x22>
    20fa:	b9 01       	movw	r22, r18
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2100:	61 15       	cp	r22, r1
    2102:	71 05       	cpc	r23, r1
    2104:	91 f1       	breq	.+100    	; 0x216a <__stack+0x6b>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2106:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2108:	88 23       	and	r24, r24
    210a:	e1 f1       	breq	.+120    	; 0x2184 <__stack+0x85>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    210c:	85 30       	cpi	r24, 0x05	; 5
    210e:	e1 f1       	breq	.+120    	; 0x2188 <__stack+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2110:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2114:	83 fd       	sbrc	r24, 3
    2116:	3a c0       	rjmp	.+116    	; 0x218c <__stack+0x8d>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2118:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    211c:	82 ff       	sbrs	r24, 2
    211e:	06 c0       	rjmp	.+12     	; 0x212c <__stack+0x2d>
    2120:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2124:	82 ff       	sbrs	r24, 2
    2126:	24 c0       	rjmp	.+72     	; 0x2170 <__stack+0x71>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    212c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2130:	80 ff       	sbrs	r24, 0
    2132:	e6 cf       	rjmp	.-52     	; 0x2100 <__stack+0x1>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2134:	80 91 f2 00 	lds	r24, 0x00F2
    2138:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    213c:	61 15       	cp	r22, r1
    213e:	71 05       	cpc	r23, r1
    2140:	51 f0       	breq	.+20     	; 0x2156 <__stack+0x57>
    2142:	80 31       	cpi	r24, 0x10	; 16
    2144:	91 05       	cpc	r25, r1
    2146:	38 f4       	brcc	.+14     	; 0x2156 <__stack+0x57>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2148:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    214a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    214e:	61 50       	subi	r22, 0x01	; 1
    2150:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	f3 cf       	rjmp	.-26     	; 0x213c <__stack+0x3d>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2156:	21 e0       	ldi	r18, 0x01	; 1
    2158:	40 97       	sbiw	r24, 0x10	; 16
    215a:	09 f0       	breq	.+2      	; 0x215e <__stack+0x5f>
    215c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    215e:	80 91 e8 00 	lds	r24, 0x00E8
    2162:	8e 77       	andi	r24, 0x7E	; 126
    2164:	80 93 e8 00 	sts	0x00E8, r24
    2168:	cb cf       	rjmp	.-106    	; 0x2100 <__stack+0x1>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    216a:	21 11       	cpse	r18, r1
    216c:	cc cf       	rjmp	.-104    	; 0x2106 <__stack+0x7>
    216e:	d8 cf       	rjmp	.-80     	; 0x2120 <__stack+0x21>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2170:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2172:	88 23       	and	r24, r24
    2174:	39 f0       	breq	.+14     	; 0x2184 <__stack+0x85>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2176:	85 30       	cpi	r24, 0x05	; 5
    2178:	39 f0       	breq	.+14     	; 0x2188 <__stack+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    217a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    217e:	83 ff       	sbrs	r24, 3
    2180:	cf cf       	rjmp	.-98     	; 0x2120 <__stack+0x21>
    2182:	04 c0       	rjmp	.+8      	; 0x218c <__stack+0x8d>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    218c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    218e:	08 95       	ret

00002190 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2190:	20 91 b1 01 	lds	r18, 0x01B1
    2194:	30 91 b2 01 	lds	r19, 0x01B2
    2198:	26 17       	cp	r18, r22
    219a:	37 07       	cpc	r19, r23
    219c:	48 f0       	brcs	.+18     	; 0x21b0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    219e:	61 15       	cp	r22, r1
    21a0:	71 05       	cpc	r23, r1
    21a2:	39 f4       	brne	.+14     	; 0x21b2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21a4:	20 91 e8 00 	lds	r18, 0x00E8
    21a8:	2e 77       	andi	r18, 0x7E	; 126
    21aa:	20 93 e8 00 	sts	0x00E8, r18
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <Endpoint_Write_Control_PStream_LE+0x22>
    21b0:	b9 01       	movw	r22, r18
    21b2:	fc 01       	movw	r30, r24
    21b4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21b6:	61 15       	cp	r22, r1
    21b8:	71 05       	cpc	r23, r1
    21ba:	a9 f1       	breq	.+106    	; 0x2226 <Endpoint_Write_Control_PStream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21bc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21be:	88 23       	and	r24, r24
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <Endpoint_Write_Control_PStream_LE+0x34>
    21c2:	3e c0       	rjmp	.+124    	; 0x2240 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21c4:	85 30       	cpi	r24, 0x05	; 5
    21c6:	09 f4       	brne	.+2      	; 0x21ca <Endpoint_Write_Control_PStream_LE+0x3a>
    21c8:	3d c0       	rjmp	.+122    	; 0x2244 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    21ce:	83 fd       	sbrc	r24, 3
    21d0:	3b c0       	rjmp	.+118    	; 0x2248 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    21d6:	82 ff       	sbrs	r24, 2
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <Endpoint_Write_Control_PStream_LE+0x56>
    21da:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    21de:	82 ff       	sbrs	r24, 2
    21e0:	25 c0       	rjmp	.+74     	; 0x222c <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21e6:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    21ea:	80 ff       	sbrs	r24, 0
    21ec:	e4 cf       	rjmp	.-56     	; 0x21b6 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    21ee:	80 91 f2 00 	lds	r24, 0x00F2
    21f2:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21f6:	61 15       	cp	r22, r1
    21f8:	71 05       	cpc	r23, r1
    21fa:	59 f0       	breq	.+22     	; 0x2212 <Endpoint_Write_Control_PStream_LE+0x82>
    21fc:	80 31       	cpi	r24, 0x10	; 16
    21fe:	91 05       	cpc	r25, r1
    2200:	40 f4       	brcc	.+16     	; 0x2212 <Endpoint_Write_Control_PStream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2202:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2204:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2208:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    220a:	61 50       	subi	r22, 0x01	; 1
    220c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	f2 cf       	rjmp	.-28     	; 0x21f6 <Endpoint_Write_Control_PStream_LE+0x66>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	40 97       	sbiw	r24, 0x10	; 16
    2216:	09 f0       	breq	.+2      	; 0x221a <Endpoint_Write_Control_PStream_LE+0x8a>
    2218:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    221a:	80 91 e8 00 	lds	r24, 0x00E8
    221e:	8e 77       	andi	r24, 0x7E	; 126
    2220:	80 93 e8 00 	sts	0x00E8, r24
    2224:	c8 cf       	rjmp	.-112    	; 0x21b6 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2226:	21 11       	cpse	r18, r1
    2228:	c9 cf       	rjmp	.-110    	; 0x21bc <Endpoint_Write_Control_PStream_LE+0x2c>
    222a:	d7 cf       	rjmp	.-82     	; 0x21da <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    222c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    222e:	88 23       	and	r24, r24
    2230:	39 f0       	breq	.+14     	; 0x2240 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2232:	85 30       	cpi	r24, 0x05	; 5
    2234:	39 f0       	breq	.+14     	; 0x2244 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2236:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    223a:	83 ff       	sbrs	r24, 3
    223c:	ce cf       	rjmp	.-100    	; 0x21da <Endpoint_Write_Control_PStream_LE+0x4a>
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <Endpoint_Write_Control_PStream_LE+0xb8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2248:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    224a:	08 95       	ret

0000224c <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    225a:	20 91 b1 01 	lds	r18, 0x01B1
    225e:	30 91 b2 01 	lds	r19, 0x01B2
    2262:	26 17       	cp	r18, r22
    2264:	37 07       	cpc	r19, r23
    2266:	40 f0       	brcs	.+16     	; 0x2278 <Endpoint_Write_Control_EStream_LE+0x2c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2268:	20 97       	sbiw	r28, 0x00	; 0
    226a:	39 f4       	brne	.+14     	; 0x227a <Endpoint_Write_Control_EStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    226c:	20 91 e8 00 	lds	r18, 0x00E8
    2270:	2e 77       	andi	r18, 0x7E	; 126
    2272:	20 93 e8 00 	sts	0x00E8, r18
    2276:	01 c0       	rjmp	.+2      	; 0x227a <Endpoint_Write_Control_EStream_LE+0x2e>
    2278:	e9 01       	movw	r28, r18
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    227a:	9c 01       	movw	r18, r24
    227c:	40 e0       	ldi	r20, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    227e:	20 97       	sbiw	r28, 0x00	; 0
    2280:	d9 f1       	breq	.+118    	; 0x22f8 <Endpoint_Write_Control_EStream_LE+0xac>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2282:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2284:	88 23       	and	r24, r24
    2286:	09 f4       	brne	.+2      	; 0x228a <Endpoint_Write_Control_EStream_LE+0x3e>
    2288:	44 c0       	rjmp	.+136    	; 0x2312 <Endpoint_Write_Control_EStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    228a:	85 30       	cpi	r24, 0x05	; 5
    228c:	09 f4       	brne	.+2      	; 0x2290 <Endpoint_Write_Control_EStream_LE+0x44>
    228e:	43 c0       	rjmp	.+134    	; 0x2316 <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2290:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2294:	83 fd       	sbrc	r24, 3
    2296:	41 c0       	rjmp	.+130    	; 0x231a <Endpoint_Write_Control_EStream_LE+0xce>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2298:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    229c:	82 ff       	sbrs	r24, 2
    229e:	06 c0       	rjmp	.+12     	; 0x22ac <Endpoint_Write_Control_EStream_LE+0x60>
    22a0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    22a4:	82 ff       	sbrs	r24, 2
    22a6:	2b c0       	rjmp	.+86     	; 0x22fe <Endpoint_Write_Control_EStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	38 c0       	rjmp	.+112    	; 0x231c <Endpoint_Write_Control_EStream_LE+0xd0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22ac:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    22b0:	80 ff       	sbrs	r24, 0
    22b2:	e5 cf       	rjmp	.-54     	; 0x227e <Endpoint_Write_Control_EStream_LE+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    22b4:	00 91 f2 00 	lds	r16, 0x00F2
    22b8:	10 91 f3 00 	lds	r17, 0x00F3
    22bc:	79 01       	movw	r14, r18
    22be:	e0 1a       	sub	r14, r16
    22c0:	f1 0a       	sbc	r15, r17
    22c2:	c7 01       	movw	r24, r14
    22c4:	80 0f       	add	r24, r16
    22c6:	91 1f       	adc	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    22c8:	20 97       	sbiw	r28, 0x00	; 0
    22ca:	51 f0       	breq	.+20     	; 0x22e0 <Endpoint_Write_Control_EStream_LE+0x94>
    22cc:	00 31       	cpi	r16, 0x10	; 16
    22ce:	11 05       	cpc	r17, r1
    22d0:	38 f4       	brcc	.+14     	; 0x22e0 <Endpoint_Write_Control_EStream_LE+0x94>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    22d2:	cf d2       	rcall	.+1438   	; 0x2872 <__eerd_byte_usb1287>
    22d4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22d8:	21 97       	sbiw	r28, 0x01	; 1
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    22da:	0f 5f       	subi	r16, 0xFF	; 255
				BytesInEndpoint++;
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	f1 cf       	rjmp	.-30     	; 0x22c2 <Endpoint_Write_Control_EStream_LE+0x76>
    22e0:	41 e0       	ldi	r20, 0x01	; 1
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    22e2:	00 31       	cpi	r16, 0x10	; 16
    22e4:	11 05       	cpc	r17, r1
    22e6:	09 f0       	breq	.+2      	; 0x22ea <Endpoint_Write_Control_EStream_LE+0x9e>
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	20 91 e8 00 	lds	r18, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22ee:	2e 77       	andi	r18, 0x7E	; 126
    22f0:	20 93 e8 00 	sts	0x00E8, r18
    22f4:	9c 01       	movw	r18, r24
    22f6:	c3 cf       	rjmp	.-122    	; 0x227e <Endpoint_Write_Control_EStream_LE+0x32>
    22f8:	41 11       	cpse	r20, r1
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    22fa:	c3 cf       	rjmp	.-122    	; 0x2282 <Endpoint_Write_Control_EStream_LE+0x36>
    22fc:	d1 cf       	rjmp	.-94     	; 0x22a0 <Endpoint_Write_Control_EStream_LE+0x54>
    22fe:	8e b3       	in	r24, 0x1e	; 30
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2300:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2302:	39 f0       	breq	.+14     	; 0x2312 <Endpoint_Write_Control_EStream_LE+0xc6>
    2304:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2306:	39 f0       	breq	.+14     	; 0x2316 <Endpoint_Write_Control_EStream_LE+0xca>
    2308:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    230c:	83 ff       	sbrs	r24, 3
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    230e:	c8 cf       	rjmp	.-112    	; 0x22a0 <Endpoint_Write_Control_EStream_LE+0x54>
    2310:	04 c0       	rjmp	.+8      	; 0x231a <Endpoint_Write_Control_EStream_LE+0xce>
    2312:	82 e0       	ldi	r24, 0x02	; 2
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2314:	03 c0       	rjmp	.+6      	; 0x231c <Endpoint_Write_Control_EStream_LE+0xd0>
    2316:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2318:	01 c0       	rjmp	.+2      	; 0x231c <Endpoint_Write_Control_EStream_LE+0xd0>
    231a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    231c:	df 91       	pop	r29
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	08 95       	ret

0000232a <Endpoint_ConfigureEndpoint_Prv>:
    232a:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    232c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    2330:	eb ee       	ldi	r30, 0xEB	; 235
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	81 60       	ori	r24, 0x01	; 1
    2338:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    233a:	ed ee       	ldi	r30, 0xED	; 237
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    2340:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    2344:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2346:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    234a:	88 1f       	adc	r24, r24
    234c:	88 27       	eor	r24, r24
    234e:	88 1f       	adc	r24, r24
    2350:	08 95       	ret

00002352 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2352:	80 91 ab 01 	lds	r24, 0x01AB
    2356:	87 fd       	sbrc	r24, 7
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    235a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    235e:	80 ff       	sbrs	r24, 0
    2360:	0d c0       	rjmp	.+26     	; 0x237c <Endpoint_ClearStatusStage+0x2a>
    2362:	10 c0       	rjmp	.+32     	; 0x2384 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2364:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2368:	82 fd       	sbrc	r24, 2
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    236c:	8e b3       	in	r24, 0x1e	; 30
    236e:	81 11       	cpse	r24, r1
    2370:	f9 cf       	rjmp	.-14     	; 0x2364 <Endpoint_ClearStatusStage+0x12>
    2372:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2374:	80 91 e8 00 	lds	r24, 0x00E8
    2378:	8b 77       	andi	r24, 0x7B	; 123
    237a:	07 c0       	rjmp	.+14     	; 0x238a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    237c:	8e b3       	in	r24, 0x1e	; 30
    237e:	81 11       	cpse	r24, r1
    2380:	ec cf       	rjmp	.-40     	; 0x235a <Endpoint_ClearStatusStage+0x8>
    2382:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2384:	80 91 e8 00 	lds	r24, 0x00E8
    2388:	8e 77       	andi	r24, 0x7E	; 126
    238a:	80 93 e8 00 	sts	0x00E8, r24
    238e:	08 95       	ret

00002390 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2390:	80 91 e4 00 	lds	r24, 0x00E4
    2394:	90 91 e5 00 	lds	r25, 0x00E5
    2398:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    239a:	20 91 ec 00 	lds	r18, 0x00EC
    239e:	20 ff       	sbrs	r18, 0
    23a0:	20 c0       	rjmp	.+64     	; 0x23e2 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23a2:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    23a6:	20 fd       	sbrc	r18, 0
    23a8:	20 c0       	rjmp	.+64     	; 0x23ea <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    23aa:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    23ac:	22 23       	and	r18, r18
    23ae:	89 f0       	breq	.+34     	; 0x23d2 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    23b0:	25 30       	cpi	r18, 0x05	; 5
    23b2:	89 f0       	breq	.+34     	; 0x23d6 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    23b4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    23b8:	25 fd       	sbrc	r18, 5
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <Endpoint_WaitUntilReady+0x4a>
    23bc:	20 91 e4 00 	lds	r18, 0x00E4
    23c0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	41 f3       	breq	.-48     	; 0x239a <Endpoint_WaitUntilReady+0xa>
    23ca:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    23cc:	41 f0       	breq	.+16     	; 0x23de <Endpoint_WaitUntilReady+0x4e>
    23ce:	c9 01       	movw	r24, r18
    23d0:	e4 cf       	rjmp	.-56     	; 0x239a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    23de:	84 e0       	ldi	r24, 0x04	; 4
    23e0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23e2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    23e6:	22 ff       	sbrs	r18, 2
    23e8:	e0 cf       	rjmp	.-64     	; 0x23aa <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	08 95       	ret

000023ee <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    23f6:	49 d0       	rcall	.+146    	; 0x248a <USB_INT_DisableAllInterrupts>
    23f8:	50 d0       	rcall	.+160    	; 0x249a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23fa:	c8 ed       	ldi	r28, 0xD8	; 216
    23fc:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    23fe:	88 81       	ld	r24, Y
    2400:	8f 77       	andi	r24, 0x7F	; 127
    2402:	88 83       	st	Y, r24
    2404:	88 81       	ld	r24, Y
    2406:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    2408:	88 83       	st	Y, r24
    240a:	88 81       	ld	r24, Y
    240c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    240e:	88 83       	st	Y, r24
    2410:	e7 ed       	ldi	r30, 0xD7	; 215
    2412:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    2414:	80 81       	ld	r24, Z
    2416:	80 68       	ori	r24, 0x80	; 128
    2418:	80 83       	st	Z, r24
    241a:	19 bc       	out	0x29, r1	; 41
    241c:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    241e:	10 92 a9 01 	sts	0x01A9, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    2422:	00 ee       	ldi	r16, 0xE0	; 224
    2424:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2426:	f8 01       	movw	r30, r16
    2428:	80 81       	ld	r24, Z
    242a:	8b 7f       	andi	r24, 0xFB	; 251
    242c:	80 83       	st	Z, r24
    242e:	88 81       	ld	r24, Y
    2430:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2432:	88 83       	st	Y, r24
    2434:	42 e1       	ldi	r20, 0x12	; 18
    2436:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	77 df       	rcall	.-274    	; 0x232a <Endpoint_ConfigureEndpoint_Prv>
    243c:	e1 ee       	ldi	r30, 0xE1	; 225
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2442:	8e 7f       	andi	r24, 0xFE	; 254
    2444:	80 83       	st	Z, r24
    2446:	e2 ee       	ldi	r30, 0xE2	; 226
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    244c:	81 60       	ori	r24, 0x01	; 1
    244e:	80 83       	st	Z, r24
    2450:	80 81       	ld	r24, Z
    2452:	88 60       	ori	r24, 0x08	; 8
    2454:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2456:	f8 01       	movw	r30, r16
    2458:	80 81       	ld	r24, Z
    245a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    245c:	80 83       	st	Z, r24
    245e:	88 81       	ld	r24, Y
    2460:	80 61       	ori	r24, 0x10	; 16
    2462:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret

0000246e <USB_Init>:
    246e:	e8 ed       	ldi	r30, 0xD8	; 216
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2474:	8f 7e       	andi	r24, 0xEF	; 239
    2476:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2478:	e7 ed       	ldi	r30, 0xD7	; 215
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	81 60       	ori	r24, 0x01	; 1
    2480:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	80 93 aa 01 	sts	0x01AA, r24

	USB_ResetInterface();
    2488:	b2 cf       	rjmp	.-156    	; 0x23ee <USB_ResetInterface>

0000248a <USB_INT_DisableAllInterrupts>:
    248a:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	8c 7f       	andi	r24, 0xFC	; 252
    2492:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2494:	10 92 e2 00 	sts	0x00E2, r1
    2498:	08 95       	ret

0000249a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    249a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    249e:	10 92 e1 00 	sts	0x00E1, r1
    24a2:	08 95       	ret

000024a4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    24a4:	1f 92       	push	r1
    24a6:	0f 92       	push	r0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	0f 92       	push	r0
    24ac:	11 24       	eor	r1, r1
    24ae:	0b b6       	in	r0, 0x3b	; 59
    24b0:	0f 92       	push	r0
    24b2:	2f 93       	push	r18
    24b4:	3f 93       	push	r19
    24b6:	4f 93       	push	r20
    24b8:	5f 93       	push	r21
    24ba:	6f 93       	push	r22
    24bc:	7f 93       	push	r23
    24be:	8f 93       	push	r24
    24c0:	9f 93       	push	r25
    24c2:	af 93       	push	r26
    24c4:	bf 93       	push	r27
    24c6:	ef 93       	push	r30
    24c8:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    24ca:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    24ce:	80 ff       	sbrs	r24, 0
    24d0:	1d c0       	rjmp	.+58     	; 0x250c <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    24d2:	80 91 d8 00 	lds	r24, 0x00D8
    24d6:	80 ff       	sbrs	r24, 0
    24d8:	19 c0       	rjmp	.+50     	; 0x250c <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    24da:	80 91 da 00 	lds	r24, 0x00DA
    24de:	8e 7f       	andi	r24, 0xFE	; 254
    24e0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    24e4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    24e8:	80 ff       	sbrs	r24, 0
    24ea:	0c c0       	rjmp	.+24     	; 0x2504 <__vector_10+0x60>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    24ec:	8c e0       	ldi	r24, 0x0C	; 12
    24ee:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    24f0:	8e e0       	ldi	r24, 0x0E	; 14
    24f2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    24f4:	09 b4       	in	r0, 0x29	; 41
    24f6:	00 fe       	sbrs	r0, 0
    24f8:	fd cf       	rjmp	.-6      	; 0x24f4 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    24fe:	0e 94 4c 01 	call	0x298	; 0x298 <EVENT_USB_Device_Connect>
    2502:	04 c0       	rjmp	.+8      	; 0x250c <__vector_10+0x68>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2504:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2506:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    2508:	0e 94 4e 01 	call	0x29c	; 0x29c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    250c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2510:	80 ff       	sbrs	r24, 0
    2512:	17 c0       	rjmp	.+46     	; 0x2542 <__vector_10+0x9e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2514:	80 91 e2 00 	lds	r24, 0x00E2
    2518:	80 ff       	sbrs	r24, 0
    251a:	13 c0       	rjmp	.+38     	; 0x2542 <__vector_10+0x9e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    251c:	80 91 e2 00 	lds	r24, 0x00E2
    2520:	8e 7f       	andi	r24, 0xFE	; 254
    2522:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2526:	80 91 e2 00 	lds	r24, 0x00E2
    252a:	80 61       	ori	r24, 0x10	; 16
    252c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2530:	80 91 d8 00 	lds	r24, 0x00D8
    2534:	80 62       	ori	r24, 0x20	; 32
    2536:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    253a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    253c:	85 e0       	ldi	r24, 0x05	; 5
    253e:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    2540:	7c d1       	rcall	.+760    	; 0x283a <USB_Event_Stub>
    2542:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2546:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2548:	2e c0       	rjmp	.+92     	; 0x25a6 <__vector_10+0x102>
    254a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    254e:	84 ff       	sbrs	r24, 4
    2550:	2a c0       	rjmp	.+84     	; 0x25a6 <__vector_10+0x102>
    2552:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2554:	89 bd       	out	0x29, r24	; 41
    2556:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2558:	89 bd       	out	0x29, r24	; 41
    255a:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    255c:	00 fe       	sbrs	r0, 0
    255e:	fd cf       	rjmp	.-6      	; 0x255a <__vector_10+0xb6>
    2560:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2564:	8f 7d       	andi	r24, 0xDF	; 223
    2566:	80 93 d8 00 	sts	0x00D8, r24
    256a:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    256e:	8f 7e       	andi	r24, 0xEF	; 239
    2570:	80 93 e1 00 	sts	0x00E1, r24
    2574:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2578:	8f 7e       	andi	r24, 0xEF	; 239
    257a:	80 93 e2 00 	sts	0x00E2, r24
    257e:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2582:	81 60       	ori	r24, 0x01	; 1
    2584:	80 93 e2 00 	sts	0x00E2, r24
    2588:	80 91 a9 01 	lds	r24, 0x01A9
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    258c:	88 23       	and	r24, r24
    258e:	11 f0       	breq	.+4      	; 0x2594 <__vector_10+0xf0>
    2590:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <__vector_10+0xfe>
    2594:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2598:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <__vector_10+0xfc>
    259c:	83 e0       	ldi	r24, 0x03	; 3
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <__vector_10+0xfe>
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	8e bb       	out	0x1e, r24	; 30
    25a4:	4a d1       	rcall	.+660    	; 0x283a <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    25a6:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    25aa:	83 ff       	sbrs	r24, 3
    25ac:	21 c0       	rjmp	.+66     	; 0x25f0 <__vector_10+0x14c>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    25ae:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    25b2:	83 ff       	sbrs	r24, 3
    25b4:	1d c0       	rjmp	.+58     	; 0x25f0 <__vector_10+0x14c>
    25b6:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    25ba:	87 7f       	andi	r24, 0xF7	; 247
    25bc:	80 93 e1 00 	sts	0x00E1, r24
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	8e bb       	out	0x1e, r24	; 30
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    25c4:	10 92 a9 01 	sts	0x01A9, r1
		USB_Device_ConfigurationNumber = 0;
    25c8:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    25cc:	8e 7f       	andi	r24, 0xFE	; 254
    25ce:	80 93 e1 00 	sts	0x00E1, r24
    25d2:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    25d6:	8e 7f       	andi	r24, 0xFE	; 254
    25d8:	80 93 e2 00 	sts	0x00E2, r24
    25dc:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    25e0:	80 61       	ori	r24, 0x10	; 16
    25e2:	80 93 e2 00 	sts	0x00E2, r24
    25e6:	42 e1       	ldi	r20, 0x12	; 18
    25e8:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	9e de       	rcall	.-708    	; 0x232a <Endpoint_ConfigureEndpoint_Prv>
    25ee:	25 d1       	rcall	.+586    	; 0x283a <USB_Event_Stub>
    25f0:	ff 91       	pop	r31
    25f2:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    25f4:	bf 91       	pop	r27
    25f6:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    25f8:	9f 91       	pop	r25
    25fa:	8f 91       	pop	r24
    25fc:	7f 91       	pop	r23
    25fe:	6f 91       	pop	r22
    2600:	5f 91       	pop	r21
    2602:	4f 91       	pop	r20
    2604:	3f 91       	pop	r19
    2606:	2f 91       	pop	r18
    2608:	0f 90       	pop	r0
    260a:	0b be       	out	0x3b, r0	; 59
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	0f 90       	pop	r0
    2612:	1f 90       	pop	r1
    2614:	18 95       	reti

00002616 <USB_Device_ProcessControlRequest>:
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	00 d0       	rcall	.+0      	; 0x261e <USB_Device_ProcessControlRequest+0x8>
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    261e:	1f 92       	push	r1
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	eb ea       	ldi	r30, 0xAB	; 171
    2626:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2628:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    262c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	e3 3b       	cpi	r30, 0xB3	; 179
    2632:	f8 07       	cpc	r31, r24
    2634:	c9 f7       	brne	.-14     	; 0x2628 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2636:	01 d1       	rcall	.+514    	; 0x283a <USB_Event_Stub>
    2638:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    263c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    263e:	e8 c0       	rjmp	.+464    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    2640:	90 91 ab 01 	lds	r25, 0x01AB
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2644:	80 91 ac 01 	lds	r24, 0x01AC

		switch (USB_ControlRequest.bRequest)
    2648:	85 30       	cpi	r24, 0x05	; 5
    264a:	09 f4       	brne	.+2      	; 0x264e <USB_Device_ProcessControlRequest+0x38>
    264c:	65 c0       	rjmp	.+202    	; 0x2718 <USB_Device_ProcessControlRequest+0x102>
    264e:	30 f4       	brcc	.+12     	; 0x265c <USB_Device_ProcessControlRequest+0x46>
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	59 f1       	breq	.+86     	; 0x26aa <USB_Device_ProcessControlRequest+0x94>
    2654:	68 f0       	brcs	.+26     	; 0x2670 <USB_Device_ProcessControlRequest+0x5a>
    2656:	83 30       	cpi	r24, 0x03	; 3
    2658:	41 f1       	breq	.+80     	; 0x26aa <USB_Device_ProcessControlRequest+0x94>
    265a:	da c0       	rjmp	.+436    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    265c:	88 30       	cpi	r24, 0x08	; 8
    265e:	09 f4       	brne	.+2      	; 0x2662 <USB_Device_ProcessControlRequest+0x4c>
    2660:	a9 c0       	rjmp	.+338    	; 0x27b4 <USB_Device_ProcessControlRequest+0x19e>
    2662:	89 30       	cpi	r24, 0x09	; 9
    2664:	09 f4       	brne	.+2      	; 0x2668 <USB_Device_ProcessControlRequest+0x52>
    2666:	b8 c0       	rjmp	.+368    	; 0x27d8 <USB_Device_ProcessControlRequest+0x1c2>
    2668:	86 30       	cpi	r24, 0x06	; 6
    266a:	09 f0       	breq	.+2      	; 0x266e <USB_Device_ProcessControlRequest+0x58>
    266c:	d1 c0       	rjmp	.+418    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    266e:	75 c0       	rjmp	.+234    	; 0x275a <USB_Device_ProcessControlRequest+0x144>
    2670:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2672:	81 f0       	breq	.+32     	; 0x2694 <USB_Device_ProcessControlRequest+0x7e>
    2674:	92 38       	cpi	r25, 0x82	; 130
    2676:	09 f0       	breq	.+2      	; 0x267a <USB_Device_ProcessControlRequest+0x64>
    2678:	cb c0       	rjmp	.+406    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    267a:	80 91 af 01 	lds	r24, 0x01AF
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    267e:	8f 70       	andi	r24, 0x0F	; 15
    2680:	80 93 e9 00 	sts	0x00E9, r24
    2684:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2688:	95 fb       	bst	r25, 5
    268a:	99 27       	eor	r25, r25
    268c:	90 f9       	bld	r25, 0
    268e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <USB_Device_ProcessControlRequest+0x80>
    2694:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2696:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    269a:	87 7f       	andi	r24, 0xF7	; 247
    269c:	80 93 e8 00 	sts	0x00E8, r24
    26a0:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    26a4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    26a8:	90 c0       	rjmp	.+288    	; 0x27ca <USB_Device_ProcessControlRequest+0x1b4>
    26aa:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    26ac:	2d 7f       	andi	r18, 0xFD	; 253
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <USB_Device_ProcessControlRequest+0x9c>
    26b0:	af c0       	rjmp	.+350    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    26b2:	92 30       	cpi	r25, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <USB_Device_ProcessControlRequest+0xa2>
    26b6:	ac c0       	rjmp	.+344    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    26b8:	90 91 ad 01 	lds	r25, 0x01AD

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    26bc:	91 11       	cpse	r25, r1
    26be:	26 c0       	rjmp	.+76     	; 0x270c <USB_Device_ProcessControlRequest+0xf6>
    26c0:	20 91 af 01 	lds	r18, 0x01AF
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    26c4:	2f 70       	andi	r18, 0x0F	; 15
    26c6:	09 f4       	brne	.+2      	; 0x26ca <USB_Device_ProcessControlRequest+0xb4>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    26c8:	a3 c0       	rjmp	.+326    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    26ca:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26ce:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    26d2:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    26d4:	1b c0       	rjmp	.+54     	; 0x270c <USB_Device_ProcessControlRequest+0xf6>
    26d6:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    26d8:	21 f4       	brne	.+8      	; 0x26e2 <USB_Device_ProcessControlRequest+0xcc>
    26da:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    26de:	80 62       	ori	r24, 0x20	; 32
    26e0:	13 c0       	rjmp	.+38     	; 0x2708 <USB_Device_ProcessControlRequest+0xf2>
    26e2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    26e6:	80 61       	ori	r24, 0x10	; 16
    26e8:	80 93 eb 00 	sts	0x00EB, r24
    26ec:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 2e       	mov	r0, r18
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <USB_Device_ProcessControlRequest+0xe0>
    26f4:	88 0f       	add	r24, r24
    26f6:	0a 94       	dec	r0
    26f8:	ea f7       	brpl	.-6      	; 0x26f4 <USB_Device_ProcessControlRequest+0xde>
    26fa:	80 93 ea 00 	sts	0x00EA, r24
    26fe:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    2702:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2706:	88 60       	ori	r24, 0x08	; 8
    2708:	80 93 eb 00 	sts	0x00EB, r24
    270c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2710:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2714:	87 7f       	andi	r24, 0xF7	; 247
    2716:	5c c0       	rjmp	.+184    	; 0x27d0 <USB_Device_ProcessControlRequest+0x1ba>
    2718:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    271a:	7a c0       	rjmp	.+244    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    271c:	10 91 ad 01 	lds	r17, 0x01AD
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2720:	1f 77       	andi	r17, 0x7F	; 127
    2722:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2726:	80 78       	andi	r24, 0x80	; 128
    2728:	81 2b       	or	r24, r17
    272a:	80 93 e3 00 	sts	0x00E3, r24
    272e:	80 91 e8 00 	lds	r24, 0x00E8
    2732:	87 7f       	andi	r24, 0xF7	; 247
    2734:	80 93 e8 00 	sts	0x00E8, r24
    2738:	0c de       	rcall	.-1000   	; 0x2352 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    273a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    273e:	80 ff       	sbrs	r24, 0
    2740:	fc cf       	rjmp	.-8      	; 0x273a <USB_Device_ProcessControlRequest+0x124>

	while (!(Endpoint_IsINReady()));
    2742:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2746:	80 68       	ori	r24, 0x80	; 128
    2748:	80 93 e3 00 	sts	0x00E3, r24
    274c:	11 23       	and	r17, r17
    274e:	11 f0       	breq	.+4      	; 0x2754 <USB_Device_ProcessControlRequest+0x13e>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <USB_Device_ProcessControlRequest+0x140>
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	8e bb       	out	0x1e, r24	; 30
    2758:	5b c0       	rjmp	.+182    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    275a:	90 58       	subi	r25, 0x80	; 128
    275c:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    275e:	08 f0       	brcs	.+2      	; 0x2762 <USB_Device_ProcessControlRequest+0x14c>
    2760:	57 c0       	rjmp	.+174    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    2762:	9e 01       	movw	r18, r28
    2764:	2d 5f       	subi	r18, 0xFD	; 253
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	ae 01       	movw	r20, r28
    276a:	4f 5f       	subi	r20, 0xFF	; 255
    276c:	5f 4f       	sbci	r21, 0xFF	; 255
    276e:	60 91 af 01 	lds	r22, 0x01AF
    2772:	80 91 ad 01 	lds	r24, 0x01AD
    2776:	90 91 ae 01 	lds	r25, 0x01AE
    277a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <CALLBACK_USB_GetDescriptor>
    277e:	bc 01       	movw	r22, r24
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	09 f4       	brne	.+2      	; 0x2786 <USB_Device_ProcessControlRequest+0x170>
    2784:	45 c0       	rjmp	.+138    	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    2786:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    278a:	87 7f       	andi	r24, 0xF7	; 247
    278c:	80 93 e8 00 	sts	0x00E8, r24
    2790:	2b 81       	ldd	r18, Y+3	; 0x03
    2792:	89 81       	ldd	r24, Y+1	; 0x01
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	21 11       	cpse	r18, r1
    2798:	02 c0       	rjmp	.+4      	; 0x279e <USB_Device_ProcessControlRequest+0x188>
    279a:	fa dc       	rcall	.-1548   	; 0x2190 <Endpoint_Write_Control_PStream_LE>
    279c:	05 c0       	rjmp	.+10     	; 0x27a8 <USB_Device_ProcessControlRequest+0x192>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    279e:	21 30       	cpi	r18, 0x01	; 1
    27a0:	11 f4       	brne	.+4      	; 0x27a6 <USB_Device_ProcessControlRequest+0x190>
    27a2:	54 dd       	rcall	.-1368   	; 0x224c <Endpoint_Write_Control_EStream_LE>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    27a4:	01 c0       	rjmp	.+2      	; 0x27a8 <USB_Device_ProcessControlRequest+0x192>
    27a6:	99 dc       	rcall	.-1742   	; 0x20da <Endpoint_Write_Control_Stream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    27a8:	80 91 e8 00 	lds	r24, 0x00E8
    27ac:	8b 77       	andi	r24, 0x7B	; 123
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    27ae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    27b2:	2e c0       	rjmp	.+92     	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    27b4:	90 38       	cpi	r25, 0x80	; 128
    27b6:	61 f5       	brne	.+88     	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    27b8:	80 91 e8 00 	lds	r24, 0x00E8
    27bc:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    27be:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27c2:	80 91 a9 01 	lds	r24, 0x01A9
    27c6:	80 93 f1 00 	sts	0x00F1, r24
    27ca:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    27ce:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    27d0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    27d4:	be dd       	rcall	.-1156   	; 0x2352 <Endpoint_ClearStatusStage>
    27d6:	1c c0       	rjmp	.+56     	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    27d8:	91 11       	cpse	r25, r1
    27da:	1a c0       	rjmp	.+52     	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
    27dc:	90 91 ad 01 	lds	r25, 0x01AD
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    27e0:	92 30       	cpi	r25, 0x02	; 2
    27e2:	b0 f4       	brcc	.+44     	; 0x2810 <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    27e4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    27e8:	87 7f       	andi	r24, 0xF7	; 247
    27ea:	80 93 e8 00 	sts	0x00E8, r24
    27ee:	90 93 a9 01 	sts	0x01A9, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27f2:	af dd       	rcall	.-1186   	; 0x2352 <Endpoint_ClearStatusStage>
    27f4:	80 91 a9 01 	lds	r24, 0x01A9
    27f8:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <USB_Device_ProcessControlRequest+0x1ee>
    27fc:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    2800:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <USB_Device_ProcessControlRequest+0x1f2>
    2804:	84 e0       	ldi	r24, 0x04	; 4
    2806:	01 c0       	rjmp	.+2      	; 0x280a <USB_Device_ProcessControlRequest+0x1f4>
    2808:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    280a:	8e bb       	out	0x1e, r24	; 30
    280c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2810:	80 91 e8 00 	lds	r24, 0x00E8
    2814:	83 ff       	sbrs	r24, 3
    2816:	0a c0       	rjmp	.+20     	; 0x282c <USB_Device_ProcessControlRequest+0x216>
    2818:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    281c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    281e:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2822:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2826:	80 62       	ori	r24, 0x20	; 32
    2828:	80 93 eb 00 	sts	0x00EB, r24
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2830:	0f 90       	pop	r0
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	08 95       	ret

0000283a <USB_Event_Stub>:
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    283a:	08 95       	ret

0000283c <USB_USBTask>:
    283c:	cf 93       	push	r28
    283e:	8e b3       	in	r24, 0x1e	; 30
    2840:	88 23       	and	r24, r24
    2842:	a9 f0       	breq	.+42     	; 0x286e <USB_USBTask+0x32>
    2844:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2848:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    284a:	90 91 ec 00 	lds	r25, 0x00EC
    284e:	90 ff       	sbrs	r25, 0
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <USB_USBTask+0x1a>
    2852:	90 e8       	ldi	r25, 0x80	; 128
    2854:	01 c0       	rjmp	.+2      	; 0x2858 <USB_USBTask+0x1c>
    2856:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2858:	c9 2f       	mov	r28, r25
    285a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    285c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2860:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2864:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2866:	d7 de       	rcall	.-594    	; 0x2616 <USB_Device_ProcessControlRequest>
    2868:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    286a:	c0 93 e9 00 	sts	0x00E9, r28
    286e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2870:	08 95       	ret

00002872 <__eerd_byte_usb1287>:
    2872:	f9 99       	sbic	0x1f, 1	; 31
    2874:	fe cf       	rjmp	.-4      	; 0x2872 <__eerd_byte_usb1287>
    2876:	92 bd       	out	0x22, r25	; 34
    2878:	81 bd       	out	0x21, r24	; 33
    287a:	f8 9a       	sbi	0x1f, 0	; 31
    287c:	99 27       	eor	r25, r25
    287e:	80 b5       	in	r24, 0x20	; 32
    2880:	08 95       	ret

00002882 <__eeupd_byte_usb1287>:
    2882:	26 2f       	mov	r18, r22

00002884 <__eeupd_r18_usb1287>:
    2884:	f9 99       	sbic	0x1f, 1	; 31
    2886:	fe cf       	rjmp	.-4      	; 0x2884 <__eeupd_r18_usb1287>
    2888:	92 bd       	out	0x22, r25	; 34
    288a:	81 bd       	out	0x21, r24	; 33
    288c:	f8 9a       	sbi	0x1f, 0	; 31
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	00 b4       	in	r0, 0x20	; 32
    2892:	02 16       	cp	r0, r18
    2894:	39 f0       	breq	.+14     	; 0x28a4 <__eeupd_r18_usb1287+0x20>
    2896:	1f ba       	out	0x1f, r1	; 31
    2898:	20 bd       	out	0x20, r18	; 32
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	fa 9a       	sbi	0x1f, 2	; 31
    28a0:	f9 9a       	sbi	0x1f, 1	; 31
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	08 95       	ret

000028a6 <_exit>:
    28a6:	f8 94       	cli

000028a8 <__stop_program>:
    28a8:	ff cf       	rjmp	.-2      	; 0x28a8 <__stop_program>

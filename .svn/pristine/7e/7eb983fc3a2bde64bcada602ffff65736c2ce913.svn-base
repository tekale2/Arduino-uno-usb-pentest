
Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d2e  00000dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  00000dc4  2**0
                  ALLOC
  3 .stab         00000924  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e1  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000350  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005413  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001625  00000000  00000000  00006f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024f3  00000000  00000000  00008562  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008dc  00000000  00000000  0000aa58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025e1  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b17  00000000  00000000  0000d915  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e8  00000000  00000000  0001142c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	a0 c0       	rjmp	.+320    	; 0x142 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	3b c4       	rjmp	.+2166   	; 0x8a0 <__vector_10>
  2a:	00 00       	nop
  2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
  2e:	00 00       	nop
  30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop
  74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
  76:	00 00       	nop
  78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
  82:	00 00       	nop
  84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
  86:	00 00       	nop
  88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
  8e:	00 00       	nop
  90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	00 00                                               ..

000000ba <ManufacturerString>:
  ba:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  ca:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d4 <LanguageString>:
  d4:	04 03 09 04                                         ....

000000d8 <ConfigurationDescriptor>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d8:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  e8:	02 00 09 21 11 01 00 01 22 36 00 07 05 81 03 08     ...!...."6......
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
  f8:	00 05                                               ..

000000fa <DeviceDescriptor>:
  fa:	12 01 10 01 00 00 00 08 eb 03 41 20 01 00 01 02     ..........A ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10a:	00 01                                               ..

0000010c <MouseReport>:
 10c:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 11c:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 12c:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
 13c:	75 08 81 06 c0 c0                                   u.....

00000142 <__ctors_end>:
 142:	11 24       	eor	r1, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	1f be       	out	0x3f, r1	; 63
 146:	cf ef       	ldi	r28, 0xFF	; 255
				ReportData     += 4;
 148:	d0 e2       	ldi	r29, 0x20	; 32
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
				break;
 14e:	11 e0       	ldi	r17, 0x01	; 1

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	a0 e0       	ldi	r26, 0x00	; 0
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	ee e2       	ldi	r30, 0x2E	; 46
 156:	fd e0       	ldi	r31, 0x0D	; 13
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	0b bf       	out	0x3b, r16	; 59
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
 15e:	07 90       	elpm	r0, Z+
 160:	0d 92       	st	X+, r0
				ReportSize     -= 2;
 162:	a2 30       	cpi	r26, 0x02	; 2
 164:	b1 07       	cpc	r27, r17
				ReportData     += 2;
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
 168:	11 e0       	ldi	r17, 0x01	; 1
 16a:	a2 e0       	ldi	r26, 0x02	; 2
				break;
 16c:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a6 31       	cpi	r26, 0x16	; 22
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	5e d1       	rcall	.+700    	; 0x436 <main>
				ReportSize     -= 1;
 17a:	d7 c5       	rjmp	.+2990   	; 0xd2a <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <LEDs_SetAllLEDs>:
				ReportData     += 1;
 17e:	9b b1       	in	r25, 0x0b	; 11
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	98 2b       	or	r25, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	9b b9       	out	0x0b, r25	; 11
 186:	08 95       	ret

00000188 <SetupHardware>:
 188:	84 b7       	in	r24, 0x34	; 52
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	84 bf       	out	0x34, r24	; 52
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	80 93 60 00 	sts	0x0060, r24
 198:	10 92 60 00 	sts	0x0060, r1
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	80 93 61 00 	sts	0x0061, r24

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	90 93 61 00 	sts	0x0061, r25
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	84 b1       	in	r24, 0x04	; 4
 1b2:	8f 71       	andi	r24, 0x1F	; 31
				break;
 1b4:	84 b9       	out	0x04, r24	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	8d b1       	in	r24, 0x0d	; 13
 1b8:	8f 7c       	andi	r24, 0xCF	; 207
 1ba:	8d b9       	out	0x0d, r24	; 13
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	80 6e       	ori	r24, 0xE0	; 224
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	8e b1       	in	r24, 0x0e	; 14
 1c4:	80 63       	ori	r24, 0x30	; 48
 1c6:	8e b9       	out	0x0e, r24	; 14
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	80 6f       	ori	r24, 0xF0	; 240
 1cc:	8a b9       	out	0x0a, r24	; 10
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	6a 98       	cbi	0x0d, 2	; 13
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	72 9a       	sbi	0x0e, 2	; 14
 1d8:	48 c3       	rjmp	.+1680   	; 0x86a <USB_Init>

000001da <EVENT_USB_Device_Connect>:
 1da:	80 ea       	ldi	r24, 0xA0	; 160
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	d0 df       	rcall	.-96     	; 0x17e <LEDs_SetAllLEDs>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 00 01 	sts	0x0100, r24
 1e4:	08 95       	ret

000001e6 <EVENT_USB_Device_Disconnect>:
 1e6:	80 e1       	ldi	r24, 0x10	; 16
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	ca cf       	rjmp	.-108    	; 0x17e <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_ConfigurationChanged>:
 1ea:	42 e0       	ldi	r20, 0x02	; 2
				break;
 1ec:	61 ec       	ldi	r22, 0xC1	; 193
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	71 d2       	rcall	.+1250   	; 0x6d4 <Endpoint_ConfigureEndpoint_Prv>
 1f2:	90 91 e2 00 	lds	r25, 0x00E2
 1f6:	94 60       	ori	r25, 0x04	; 4
 1f8:	90 93 e2 00 	sts	0x00E2, r25
 1fc:	88 23       	and	r24, r24
 1fe:	11 f0       	breq	.+4      	; 0x204 <EVENT_USB_Device_ConfigurationChanged+0x1a>
 200:	80 e6       	ldi	r24, 0x60	; 96
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	01 c0       	rjmp	.+2      	; 0x206 <EVENT_USB_Device_ConfigurationChanged+0x1c>
 204:	80 e9       	ldi	r24, 0x90	; 144
				break;
 206:	bb cf       	rjmp	.-138    	; 0x17e <LEDs_SetAllLEDs>

00000208 <EVENT_USB_Device_StartOfFrame>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	80 91 05 01 	lds	r24, 0x0105
 20c:	90 91 06 01 	lds	r25, 0x0106
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	29 f0       	breq	.+10     	; 0x21e <EVENT_USB_Device_StartOfFrame+0x16>
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	90 93 06 01 	sts	0x0106, r25
 21a:	80 93 05 01 	sts	0x0105, r24
 21e:	08 95       	ret

00000220 <CreateMouseReport>:
 220:	fc 01       	movw	r30, r24
 222:	93 b1       	in	r25, 0x03	; 3
 224:	8c b1       	in	r24, 0x0c	; 12
 226:	80 95       	com	r24
 228:	80 73       	andi	r24, 0x30	; 48
 22a:	86 95       	lsr	r24
 22c:	90 95       	com	r25
 22e:	90 7e       	andi	r25, 0xE0	; 224
 230:	89 2b       	or	r24, r25
 232:	9c b1       	in	r25, 0x0c	; 12
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	90 95       	com	r25
 236:	10 82       	st	Z, r1
 238:	11 82       	std	Z+1, r1	; 0x01
 23a:	12 82       	std	Z+2, r1	; 0x02
 23c:	87 ff       	sbrs	r24, 7
 23e:	02 c0       	rjmp	.+4      	; 0x244 <CreateMouseReport+0x24>
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	03 c0       	rjmp	.+6      	; 0x24a <CreateMouseReport+0x2a>
 244:	84 ff       	sbrs	r24, 4
 246:	02 c0       	rjmp	.+4      	; 0x24c <CreateMouseReport+0x2c>
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	22 83       	std	Z+2, r18	; 0x02
 24c:	86 ff       	sbrs	r24, 6
 24e:	02 c0       	rjmp	.+4      	; 0x254 <CreateMouseReport+0x34>
 250:	2f ef       	ldi	r18, 0xFF	; 255
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	03 c0       	rjmp	.+6      	; 0x25a <CreateMouseReport+0x3a>
 254:	83 ff       	sbrs	r24, 3
 256:	02 c0       	rjmp	.+4      	; 0x25c <CreateMouseReport+0x3c>
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	21 83       	std	Z+1, r18	; 0x01
 25c:	85 ff       	sbrs	r24, 5
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	03 c0       	rjmp	.+6      	; 0x266 <CreateMouseReport+0x46>
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
 266:	92 ff       	sbrs	r25, 2
 268:	03 c0       	rjmp	.+6      	; 0x270 <CreateMouseReport+0x50>
 26a:	80 81       	ld	r24, Z
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 83       	st	Z, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	08 95       	ret

00000272 <EVENT_USB_Device_ControlRequest>:
				break;
 272:	cf 93       	push	r28

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <EVENT_USB_Device_ControlRequest+0x6>
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	80 91 0f 01 	lds	r24, 0x010F
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 282:	83 30       	cpi	r24, 0x03	; 3
				break;
 284:	29 f1       	breq	.+74     	; 0x2d0 <EVENT_USB_Device_ControlRequest+0x5e>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	30 f4       	brcc	.+12     	; 0x294 <EVENT_USB_Device_ControlRequest+0x22>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	51 f0       	breq	.+20     	; 0x2a0 <EVENT_USB_Device_ControlRequest+0x2e>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	09 f4       	brne	.+2      	; 0x292 <EVENT_USB_Device_ControlRequest+0x20>
				break;
 290:	5b c0       	rjmp	.+182    	; 0x348 <EVENT_USB_Device_ControlRequest+0xd6>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	73 c0       	rjmp	.+230    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 294:	8a 30       	cpi	r24, 0x0A	; 10
 296:	09 f4       	brne	.+2      	; 0x29a <EVENT_USB_Device_ControlRequest+0x28>
 298:	3e c0       	rjmp	.+124    	; 0x316 <EVENT_USB_Device_ControlRequest+0xa4>
 29a:	8b 30       	cpi	r24, 0x0B	; 11
 29c:	31 f1       	breq	.+76     	; 0x2ea <EVENT_USB_Device_ControlRequest+0x78>
 29e:	6d c0       	rjmp	.+218    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
				break;
 2a0:	80 91 0e 01 	lds	r24, 0x010E

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a4:	81 3a       	cpi	r24, 0xA1	; 161
 2a6:	09 f0       	breq	.+2      	; 0x2aa <EVENT_USB_Device_ControlRequest+0x38>
 2a8:	68 c0       	rjmp	.+208    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 2aa:	ce 01       	movw	r24, r28
				break;
 2ac:	01 96       	adiw	r24, 0x01	; 1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	b8 df       	rcall	.-144    	; 0x220 <CreateMouseReport>
 2b0:	80 91 e8 00 	lds	r24, 0x00E8
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	80 93 e8 00 	sts	0x00E8, r24
 2ba:	63 e0       	ldi	r22, 0x03	; 3
				break;
 2bc:	70 e0       	ldi	r23, 0x00	; 0
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	4b d1       	rcall	.+662    	; 0x55a <Endpoint_Write_Control_Stream_LE>
 2c4:	80 91 e8 00 	lds	r24, 0x00E8
 2c8:	8b 77       	andi	r24, 0x7B	; 123
 2ca:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	55 c0       	rjmp	.+170    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 2d0:	80 91 0e 01 	lds	r24, 0x010E
				break;
 2d4:	81 3a       	cpi	r24, 0xA1	; 161

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	09 f0       	breq	.+2      	; 0x2da <EVENT_USB_Device_ControlRequest+0x68>
 2d8:	50 c0       	rjmp	.+160    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 2da:	80 91 e8 00 	lds	r24, 0x00E8

				if (ParserData->UsingReportIDs)
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	80 93 e8 00 	sts	0x00E8, r24
 2e4:	80 91 00 01 	lds	r24, 0x0100
 2e8:	40 c0       	rjmp	.+128    	; 0x36a <EVENT_USB_Device_ControlRequest+0xf8>
 2ea:	80 91 0e 01 	lds	r24, 0x010E
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ee:	81 32       	cpi	r24, 0x21	; 33
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x82>
 2f2:	43 c0       	rjmp	.+134    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 2f4:	80 91 e8 00 	lds	r24, 0x00E8
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	80 93 e8 00 	sts	0x00E8, r24
 2fe:	1f d2       	rcall	.+1086   	; 0x73e <Endpoint_ClearStatusStage>
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	80 91 10 01 	lds	r24, 0x0110
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 306:	90 91 11 01 	lds	r25, 0x0111
 30a:	89 2b       	or	r24, r25
 30c:	09 f4       	brne	.+2      	; 0x310 <EVENT_USB_Device_ControlRequest+0x9e>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	20 93 00 01 	sts	0x0100, r18
 314:	32 c0       	rjmp	.+100    	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 316:	80 91 0e 01 	lds	r24, 0x010E
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 31a:	81 32       	cpi	r24, 0x21	; 33
 31c:	71 f5       	brne	.+92     	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 31e:	80 91 e8 00 	lds	r24, 0x00E8
 322:	87 7f       	andi	r24, 0xF7	; 247
 324:	80 93 e8 00 	sts	0x00E8, r24
 328:	0a d2       	rcall	.+1044   	; 0x73e <Endpoint_ClearStatusStage>
 32a:	80 91 10 01 	lds	r24, 0x0110
 32e:	90 91 11 01 	lds	r25, 0x0111
 332:	88 27       	eor	r24, r24
 334:	36 e0       	ldi	r19, 0x06	; 6
 336:	96 95       	lsr	r25
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	87 95       	ror	r24
 33a:	3a 95       	dec	r19
 33c:	e1 f7       	brne	.-8      	; 0x336 <EVENT_USB_Device_ControlRequest+0xc4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	90 93 08 01 	sts	0x0108, r25
 342:	80 93 07 01 	sts	0x0107, r24
 346:	19 c0       	rjmp	.+50     	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 348:	80 91 0e 01 	lds	r24, 0x010E
 34c:	81 3a       	cpi	r24, 0xA1	; 161
 34e:	a9 f4       	brne	.+42     	; 0x37a <EVENT_USB_Device_ControlRequest+0x108>
 350:	80 91 e8 00 	lds	r24, 0x00E8
 354:	87 7f       	andi	r24, 0xF7	; 247
 356:	80 93 e8 00 	sts	0x00E8, r24
 35a:	80 91 07 01 	lds	r24, 0x0107
 35e:	90 91 08 01 	lds	r25, 0x0108
 362:	96 95       	lsr	r25
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	80 93 f1 00 	sts	0x00F1, r24
					}
				}

				ParserData->UsingReportIDs = true;
 36e:	80 91 e8 00 	lds	r24, 0x00E8
 372:	8e 77       	andi	r24, 0x7E	; 126
 374:	80 93 e8 00 	sts	0x00E8, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	e2 d1       	rcall	.+964    	; 0x73e <Endpoint_ClearStatusStage>
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <SendNextReport>:
 386:	cf 93       	push	r28
				break;
 388:	df 93       	push	r29

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	00 d0       	rcall	.+0      	; 0x38c <SendNextReport+0x6>
 38c:	1f 92       	push	r1
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	ce 01       	movw	r24, r28
 394:	01 96       	adiw	r24, 0x01	; 1
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	44 df       	rcall	.-376    	; 0x220 <CreateMouseReport>
 398:	43 e0       	ldi	r20, 0x03	; 3
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	be 01       	movw	r22, r28
 39e:	6f 5f       	subi	r22, 0xFF	; 255
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	b4 d4       	rcall	.+2408   	; 0xd10 <memcmp>
 3a8:	2b 81       	ldd	r18, Y+3	; 0x03
 3aa:	21 11       	cpse	r18, r1
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <SendNextReport+0x38>
 3ae:	2a 81       	ldd	r18, Y+2	; 0x02
				break;
 3b0:	41 e0       	ldi	r20, 0x01	; 1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	21 11       	cpse	r18, r1
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <SendNextReport+0x3a>
 3b6:	89 2b       	or	r24, r25
 3b8:	19 f4       	brne	.+6      	; 0x3c0 <SendNextReport+0x3a>
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <SendNextReport+0x3a>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	80 91 07 01 	lds	r24, 0x0107
 3c4:	90 91 08 01 	lds	r25, 0x0108
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <SendNextReport+0x5c>
 3cc:	20 91 05 01 	lds	r18, 0x0105
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3d0:	30 91 06 01 	lds	r19, 0x0106

					while (CurrCollectionPath->Parent != NULL)
 3d4:	23 2b       	or	r18, r19
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <SendNextReport+0x5c>
 3d8:	90 93 06 01 	sts	0x0106, r25
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	80 93 05 01 	sts	0x0105, r24
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 e9 00 	sts	0x00E9, r24
 3e8:	80 91 e8 00 	lds	r24, 0x00E8
 3ec:	85 ff       	sbrs	r24, 5
 3ee:	17 c0       	rjmp	.+46     	; 0x41e <SendNextReport+0x98>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	44 23       	and	r20, r20
 3f2:	a9 f0       	breq	.+42     	; 0x41e <SendNextReport+0x98>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	9a 81       	ldd	r25, Y+2	; 0x02
 3f8:	ab 81       	ldd	r26, Y+3	; 0x03
 3fa:	80 93 02 01 	sts	0x0102, r24
 3fe:	90 93 03 01 	sts	0x0103, r25
 402:	a0 93 04 01 	sts	0x0104, r26
 406:	40 e0       	ldi	r20, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	5b d0       	rcall	.+182    	; 0x4ca <Endpoint_Write_Stream_LE>
 414:	80 91 e8 00 	lds	r24, 0x00E8
 418:	8e 77       	andi	r24, 0x7E	; 126
 41a:	80 93 e8 00 	sts	0x00E8, r24
 41e:	0f 90       	pop	r0

				if (UsageListSize)
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <Mouse_Task>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	80 91 0d 01 	lds	r24, 0x010D
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	09 f4       	brne	.+2      	; 0x434 <Mouse_Task+0xa>
 432:	a9 cf       	rjmp	.-174    	; 0x386 <SendNextReport>
 434:	08 95       	ret

00000436 <main>:
 436:	a8 de       	rcall	.-688    	; 0x188 <SetupHardware>
 438:	80 e1       	ldi	r24, 0x10	; 16
 43a:	a1 de       	rcall	.-702    	; 0x17e <LEDs_SetAllLEDs>
 43c:	78 94       	sei
 43e:	f5 df       	rcall	.-22     	; 0x42a <Mouse_Task>

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	4b d4       	rcall	.+2198   	; 0xcd8 <USB_USBTask>
 442:	fd cf       	rjmp	.-6      	; 0x43e <main+0x8>

00000444 <CALLBACK_USB_GetDescriptor>:
 444:	29 2f       	mov	r18, r25
 446:	33 27       	eor	r19, r19
 448:	23 30       	cpi	r18, 0x03	; 3
 44a:	31 05       	cpc	r19, r1
					  UsageList[i - 1] = UsageList[i];
 44c:	b9 f0       	breq	.+46     	; 0x47c <CALLBACK_USB_GetDescriptor+0x38>
 44e:	5c f4       	brge	.+22     	; 0x466 <CALLBACK_USB_GetDescriptor+0x22>
 450:	21 30       	cpi	r18, 0x01	; 1
 452:	31 05       	cpc	r19, r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	69 f1       	breq	.+90     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x6c>
 456:	22 30       	cpi	r18, 0x02	; 2
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	31 05       	cpc	r19, r1
 45a:	79 f5       	brne	.+94     	; 0x4ba <CALLBACK_USB_GetDescriptor+0x76>
 45c:	82 e2       	ldi	r24, 0x22	; 34
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	28 ed       	ldi	r18, 0xD8	; 216
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	2e c0       	rjmp	.+92     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x7e>
 466:	21 32       	cpi	r18, 0x21	; 33
 468:	31 05       	cpc	r19, r1
 46a:	e9 f0       	breq	.+58     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x62>
 46c:	22 32       	cpi	r18, 0x22	; 34
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	31 05       	cpc	r19, r1
 470:	21 f5       	brne	.+72     	; 0x4ba <CALLBACK_USB_GetDescriptor+0x76>
 472:	86 e3       	ldi	r24, 0x36	; 54
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	2c e0       	ldi	r18, 0x0C	; 12
 478:	31 e0       	ldi	r19, 0x01	; 1
 47a:	23 c0       	rjmp	.+70     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x7e>
 47c:	99 27       	eor	r25, r25
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	91 05       	cpc	r25, r1
 482:	41 f0       	breq	.+16     	; 0x494 <CALLBACK_USB_GetDescriptor+0x50>
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	91 05       	cpc	r25, r1
 488:	41 f0       	breq	.+16     	; 0x49a <CALLBACK_USB_GetDescriptor+0x56>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	89 2b       	or	r24, r25
 48c:	b1 f4       	brne	.+44     	; 0x4ba <CALLBACK_USB_GetDescriptor+0x76>
 48e:	e4 ed       	ldi	r30, 0xD4	; 212
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	05 c0       	rjmp	.+10     	; 0x49e <CALLBACK_USB_GetDescriptor+0x5a>
 494:	ea eb       	ldi	r30, 0xBA	; 186
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <CALLBACK_USB_GetDescriptor+0x5a>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	e8 e9       	ldi	r30, 0x98	; 152
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	84 91       	lpm	r24, Z
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	9f 01       	movw	r18, r30
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x7e>
 4a6:	89 e0       	ldi	r24, 0x09	; 9
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	2a ee       	ldi	r18, 0xEA	; 234
				break;
 4ac:	30 e0       	ldi	r19, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x7e>
 4b0:	82 e1       	ldi	r24, 0x12	; 18
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	2a ef       	ldi	r18, 0xFA	; 250
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x7e>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	fa 01       	movw	r30, r20
 4c4:	31 83       	std	Z+1, r19	; 0x01
 4c6:	20 83       	st	Z, r18
 4c8:	08 95       	ret

000004ca <Endpoint_Write_Stream_LE>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	7c 01       	movw	r14, r24
 4dc:	8b 01       	movw	r16, r22
 4de:	ea 01       	movw	r28, r20
 4e0:	4f d1       	rcall	.+670    	; 0x780 <Endpoint_WaitUntilReady>
 4e2:	81 11       	cpse	r24, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	31 c0       	rjmp	.+98     	; 0x548 <Endpoint_Write_Stream_LE+0x7e>
 4e6:	20 97       	sbiw	r28, 0x00	; 0
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <Endpoint_Write_Stream_LE+0x2c>
 4ea:	88 81       	ld	r24, Y
 4ec:	99 81       	ldd	r25, Y+1	; 0x01
 4ee:	08 1b       	sub	r16, r24
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	19 0b       	sbc	r17, r25
 4f2:	e8 0e       	add	r14, r24
 4f4:	f9 1e       	adc	r15, r25
 4f6:	c1 2c       	mov	r12, r1
 4f8:	d1 2c       	mov	r13, r1
 4fa:	01 15       	cp	r16, r1
 4fc:	11 05       	cpc	r17, r1
 4fe:	19 f1       	breq	.+70     	; 0x546 <Endpoint_Write_Stream_LE+0x7c>
 500:	80 91 e8 00 	lds	r24, 0x00E8
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 504:	85 fd       	sbrc	r24, 5
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	14 c0       	rjmp	.+40     	; 0x530 <Endpoint_Write_Stream_LE+0x66>
 508:	80 91 e8 00 	lds	r24, 0x00E8
 50c:	8e 77       	andi	r24, 0x7E	; 126
 50e:	80 93 e8 00 	sts	0x00E8, r24
 512:	e2 d3       	rcall	.+1988   	; 0xcd8 <USB_USBTask>
 514:	20 97       	sbiw	r28, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	41 f0       	breq	.+16     	; 0x528 <Endpoint_Write_Stream_LE+0x5e>
 518:	88 81       	ld	r24, Y
 51a:	99 81       	ldd	r25, Y+1	; 0x01
 51c:	8c 0d       	add	r24, r12

					if (UsageListSize)
 51e:	9d 1d       	adc	r25, r13
 520:	99 83       	std	Y+1, r25	; 0x01
 522:	88 83       	st	Y, r24
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	10 c0       	rjmp	.+32     	; 0x548 <Endpoint_Write_Stream_LE+0x7e>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	2b d1       	rcall	.+598    	; 0x780 <Endpoint_WaitUntilReady>
 52a:	88 23       	and	r24, r24
 52c:	31 f3       	breq	.-52     	; 0x4fa <Endpoint_Write_Stream_LE+0x30>
 52e:	0c c0       	rjmp	.+24     	; 0x548 <Endpoint_Write_Stream_LE+0x7e>
 530:	f7 01       	movw	r30, r14
 532:	81 91       	ld	r24, Z+
 534:	7f 01       	movw	r14, r30
 536:	80 93 f1 00 	sts	0x00F1, r24
 53a:	01 50       	subi	r16, 0x01	; 1
 53c:	11 09       	sbc	r17, r1

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	ff ef       	ldi	r31, 0xFF	; 255
 540:	cf 1a       	sub	r12, r31
 542:	df 0a       	sbc	r13, r31
 544:	da cf       	rjmp	.-76     	; 0x4fa <Endpoint_Write_Stream_LE+0x30>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	df 91       	pop	r29
						  UsageList[i - 1] = UsageList[i];
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	cf 90       	pop	r12
 558:	08 95       	ret

0000055a <Endpoint_Write_Control_Stream_LE>:
 55a:	20 91 14 01 	lds	r18, 0x0114
 55e:	30 91 15 01 	lds	r19, 0x0115
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 562:	26 17       	cp	r18, r22
 564:	37 07       	cpc	r19, r23
 566:	48 f0       	brcs	.+18     	; 0x57a <Endpoint_Write_Control_Stream_LE+0x20>
 568:	61 15       	cp	r22, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	71 05       	cpc	r23, r1
 56c:	39 f4       	brne	.+14     	; 0x57c <Endpoint_Write_Control_Stream_LE+0x22>
 56e:	20 91 e8 00 	lds	r18, 0x00E8
 572:	2e 77       	andi	r18, 0x7E	; 126
 574:	20 93 e8 00 	sts	0x00E8, r18
 578:	01 c0       	rjmp	.+2      	; 0x57c <Endpoint_Write_Control_Stream_LE+0x22>
 57a:	b9 01       	movw	r22, r18
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	fc 01       	movw	r30, r24
 57e:	20 e0       	ldi	r18, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	99 f1       	breq	.+102    	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x92>
 586:	80 91 0d 01 	lds	r24, 0x010D
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 58a:	88 23       	and	r24, r24
 58c:	e9 f1       	breq	.+122    	; 0x608 <Endpoint_Write_Control_Stream_LE+0xae>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	85 30       	cpi	r24, 0x05	; 5
 590:	e9 f1       	breq	.+122    	; 0x60c <Endpoint_Write_Control_Stream_LE+0xb2>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	80 91 e8 00 	lds	r24, 0x00E8
 596:	83 fd       	sbrc	r24, 3
 598:	3b c0       	rjmp	.+118    	; 0x610 <Endpoint_Write_Control_Stream_LE+0xb6>
 59a:	80 91 e8 00 	lds	r24, 0x00E8
 59e:	82 ff       	sbrs	r24, 2
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <Endpoint_Write_Control_Stream_LE+0x54>
 5a2:	80 91 e8 00 	lds	r24, 0x00E8
 5a6:	82 ff       	sbrs	r24, 2
 5a8:	24 c0       	rjmp	.+72     	; 0x5f2 <Endpoint_Write_Control_Stream_LE+0x98>
 5aa:	80 e0       	ldi	r24, 0x00	; 0

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	08 95       	ret
 5ae:	80 91 e8 00 	lds	r24, 0x00E8
 5b2:	80 ff       	sbrs	r24, 0
 5b4:	e5 cf       	rjmp	.-54     	; 0x580 <Endpoint_Write_Control_Stream_LE+0x26>
 5b6:	80 91 f2 00 	lds	r24, 0x00F2
 5ba:	90 91 f3 00 	lds	r25, 0x00F3

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5be:	61 15       	cp	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	51 f0       	breq	.+20     	; 0x5d8 <Endpoint_Write_Control_Stream_LE+0x7e>
 5c4:	88 30       	cpi	r24, 0x08	; 8
 5c6:	91 05       	cpc	r25, r1
 5c8:	38 f4       	brcc	.+14     	; 0x5d8 <Endpoint_Write_Control_Stream_LE+0x7e>
 5ca:	21 91       	ld	r18, Z+
 5cc:	20 93 f1 00 	sts	0x00F1, r18
 5d0:	61 50       	subi	r22, 0x01	; 1
 5d2:	71 09       	sbc	r23, r1
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	f3 cf       	rjmp	.-26     	; 0x5be <Endpoint_Write_Control_Stream_LE+0x64>
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	08 97       	sbiw	r24, 0x08	; 8
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <Endpoint_Write_Control_Stream_LE+0x86>
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	80 91 e8 00 	lds	r24, 0x00E8
 5e4:	8e 77       	andi	r24, 0x7E	; 126
 5e6:	80 93 e8 00 	sts	0x00E8, r24
 5ea:	ca cf       	rjmp	.-108    	; 0x580 <Endpoint_Write_Control_Stream_LE+0x26>
 5ec:	21 11       	cpse	r18, r1
 5ee:	cb cf       	rjmp	.-106    	; 0x586 <Endpoint_Write_Control_Stream_LE+0x2c>
 5f0:	d8 cf       	rjmp	.-80     	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0x48>
 5f2:	80 91 0d 01 	lds	r24, 0x010D

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f6:	88 23       	and	r24, r24
 5f8:	39 f0       	breq	.+14     	; 0x608 <Endpoint_Write_Control_Stream_LE+0xae>
 5fa:	85 30       	cpi	r24, 0x05	; 5
 5fc:	39 f0       	breq	.+14     	; 0x60c <Endpoint_Write_Control_Stream_LE+0xb2>
					  return HID_PARSE_InsufficientReportItems;
 5fe:	80 91 e8 00 	lds	r24, 0x00E8

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	83 ff       	sbrs	r24, 3
 604:	ce cf       	rjmp	.-100    	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0x48>
 606:	04 c0       	rjmp	.+8      	; 0x610 <Endpoint_Write_Control_Stream_LE+0xb6>
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	08 95       	ret
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	08 95       	ret
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	08 95       	ret

00000614 <Endpoint_Write_Control_PStream_LE>:
 614:	20 91 14 01 	lds	r18, 0x0114
 618:	30 91 15 01 	lds	r19, 0x0115
 61c:	26 17       	cp	r18, r22
 61e:	37 07       	cpc	r19, r23
 620:	48 f0       	brcs	.+18     	; 0x634 <Endpoint_Write_Control_PStream_LE+0x20>
 622:	61 15       	cp	r22, r1
 624:	71 05       	cpc	r23, r1
 626:	39 f4       	brne	.+14     	; 0x636 <Endpoint_Write_Control_PStream_LE+0x22>
 628:	20 91 e8 00 	lds	r18, 0x00E8
 62c:	2e 77       	andi	r18, 0x7E	; 126
 62e:	20 93 e8 00 	sts	0x00E8, r18
 632:	01 c0       	rjmp	.+2      	; 0x636 <Endpoint_Write_Control_PStream_LE+0x22>
 634:	b9 01       	movw	r22, r18
 636:	fc 01       	movw	r30, r24
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	61 15       	cp	r22, r1
 63c:	71 05       	cpc	r23, r1
 63e:	b1 f1       	breq	.+108    	; 0x6ac <Endpoint_Write_Control_PStream_LE+0x98>
 640:	80 91 0d 01 	lds	r24, 0x010D
 644:	88 23       	and	r24, r24
 646:	09 f4       	brne	.+2      	; 0x64a <Endpoint_Write_Control_PStream_LE+0x36>
 648:	3f c0       	rjmp	.+126    	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0xb4>
 64a:	85 30       	cpi	r24, 0x05	; 5
 64c:	09 f4       	brne	.+2      	; 0x650 <Endpoint_Write_Control_PStream_LE+0x3c>
 64e:	3e c0       	rjmp	.+124    	; 0x6cc <Endpoint_Write_Control_PStream_LE+0xb8>
 650:	80 91 e8 00 	lds	r24, 0x00E8
 654:	83 fd       	sbrc	r24, 3
 656:	3c c0       	rjmp	.+120    	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0xbc>
 658:	80 91 e8 00 	lds	r24, 0x00E8
 65c:	82 ff       	sbrs	r24, 2
 65e:	06 c0       	rjmp	.+12     	; 0x66c <Endpoint_Write_Control_PStream_LE+0x58>
 660:	80 91 e8 00 	lds	r24, 0x00E8
 664:	82 ff       	sbrs	r24, 2
 666:	25 c0       	rjmp	.+74     	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0x9e>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret
 66c:	80 91 e8 00 	lds	r24, 0x00E8
 670:	80 ff       	sbrs	r24, 0
 672:	e3 cf       	rjmp	.-58     	; 0x63a <Endpoint_Write_Control_PStream_LE+0x26>
 674:	80 91 f2 00 	lds	r24, 0x00F2
 678:	90 91 f3 00 	lds	r25, 0x00F3
 67c:	61 15       	cp	r22, r1
 67e:	71 05       	cpc	r23, r1
 680:	59 f0       	breq	.+22     	; 0x698 <Endpoint_Write_Control_PStream_LE+0x84>
 682:	88 30       	cpi	r24, 0x08	; 8
 684:	91 05       	cpc	r25, r1
 686:	40 f4       	brcc	.+16     	; 0x698 <Endpoint_Write_Control_PStream_LE+0x84>
					  ParserData->TotalReportItems++;
 688:	24 91       	lpm	r18, Z
 68a:	20 93 f1 00 	sts	0x00F1, r18
 68e:	31 96       	adiw	r30, 0x01	; 1
 690:	61 50       	subi	r22, 0x01	; 1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	71 09       	sbc	r23, r1
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	f2 cf       	rjmp	.-28     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x68>
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	08 97       	sbiw	r24, 0x08	; 8
 69c:	09 f0       	breq	.+2      	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x8c>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	80 91 e8 00 	lds	r24, 0x00E8
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	8e 77       	andi	r24, 0x7E	; 126
 6a6:	80 93 e8 00 	sts	0x00E8, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	c7 cf       	rjmp	.-114    	; 0x63a <Endpoint_Write_Control_PStream_LE+0x26>
 6ac:	21 11       	cpse	r18, r1
 6ae:	c8 cf       	rjmp	.-112    	; 0x640 <Endpoint_Write_Control_PStream_LE+0x2c>
 6b0:	d7 cf       	rjmp	.-82     	; 0x660 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	80 91 0d 01 	lds	r24, 0x010D
 6b6:	88 23       	and	r24, r24
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0xb4>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	85 30       	cpi	r24, 0x05	; 5
 6bc:	39 f0       	breq	.+14     	; 0x6cc <Endpoint_Write_Control_PStream_LE+0xb8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	80 91 e8 00 	lds	r24, 0x00E8
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	83 ff       	sbrs	r24, 3
 6c4:	cd cf       	rjmp	.-102    	; 0x660 <Endpoint_Write_Control_PStream_LE+0x4c>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0xbc>
 6c8:	82 e0       	ldi	r24, 0x02	; 2
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	08 95       	ret
 6cc:	83 e0       	ldi	r24, 0x03	; 3

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	08 95       	ret
 6d0:	81 e0       	ldi	r24, 0x01	; 1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	08 95       	ret

000006d4 <Endpoint_ConfigureEndpoint_Prv>:
 6d4:	98 2f       	mov	r25, r24
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	97 30       	cpi	r25, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	58 f5       	brcc	.+86     	; 0x730 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 6da:	90 93 e9 00 	sts	0x00E9, r25
 6de:	98 17       	cp	r25, r24
 6e0:	39 f0       	breq	.+14     	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 6e2:	70 91 ec 00 	lds	r23, 0x00EC
 6e6:	20 91 ed 00 	lds	r18, 0x00ED
 6ea:	50 91 f0 00 	lds	r21, 0x00F0
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <Endpoint_ConfigureEndpoint_Prv+0x22>
 6f0:	24 2f       	mov	r18, r20
 6f2:	76 2f       	mov	r23, r22
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	21 ff       	sbrs	r18, 1
 6f8:	19 c0       	rjmp	.+50     	; 0x72c <Endpoint_ConfigureEndpoint_Prv+0x58>
 6fa:	30 91 eb 00 	lds	r19, 0x00EB
 6fe:	3e 7f       	andi	r19, 0xFE	; 254
 700:	30 93 eb 00 	sts	0x00EB, r19
 704:	30 91 ed 00 	lds	r19, 0x00ED
 708:	3d 7f       	andi	r19, 0xFD	; 253
 70a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 70e:	30 91 eb 00 	lds	r19, 0x00EB
 712:	31 60       	ori	r19, 0x01	; 1
 714:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 718:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 71c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 720:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 724:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 728:	27 ff       	sbrs	r18, 7
 72a:	07 c0       	rjmp	.+14     	; 0x73a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 72c:	9f 5f       	subi	r25, 0xFF	; 255
 72e:	d3 cf       	rjmp	.-90     	; 0x6d6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 730:	8f 70       	andi	r24, 0x0F	; 15
 732:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 73a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 73c:	08 95       	ret

0000073e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 73e:	80 91 0e 01 	lds	r24, 0x010E
 742:	87 fd       	sbrc	r24, 7
 744:	05 c0       	rjmp	.+10     	; 0x750 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 746:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 74a:	80 ff       	sbrs	r24, 0
 74c:	0e c0       	rjmp	.+28     	; 0x76a <Endpoint_ClearStatusStage+0x2c>
 74e:	12 c0       	rjmp	.+36     	; 0x774 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 750:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 754:	82 fd       	sbrc	r24, 2
 756:	05 c0       	rjmp	.+10     	; 0x762 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 758:	80 91 0d 01 	lds	r24, 0x010D
 75c:	81 11       	cpse	r24, r1
 75e:	f8 cf       	rjmp	.-16     	; 0x750 <Endpoint_ClearStatusStage+0x12>
 760:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 762:	80 91 e8 00 	lds	r24, 0x00E8
 766:	8b 77       	andi	r24, 0x7B	; 123
 768:	08 c0       	rjmp	.+16     	; 0x77a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 76a:	80 91 0d 01 	lds	r24, 0x010D
 76e:	81 11       	cpse	r24, r1
 770:	ea cf       	rjmp	.-44     	; 0x746 <Endpoint_ClearStatusStage+0x8>
 772:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 774:	80 91 e8 00 	lds	r24, 0x00E8
 778:	8e 77       	andi	r24, 0x7E	; 126
 77a:	80 93 e8 00 	sts	0x00E8, r24
 77e:	08 95       	ret

00000780 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 780:	80 91 e4 00 	lds	r24, 0x00E4
 784:	90 91 e5 00 	lds	r25, 0x00E5
 788:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 78a:	20 91 ec 00 	lds	r18, 0x00EC
 78e:	20 ff       	sbrs	r18, 0
 790:	21 c0       	rjmp	.+66     	; 0x7d4 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 792:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 796:	20 fd       	sbrc	r18, 0
 798:	21 c0       	rjmp	.+66     	; 0x7dc <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 79a:	20 91 0d 01 	lds	r18, 0x010D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 79e:	22 23       	and	r18, r18
 7a0:	89 f0       	breq	.+34     	; 0x7c4 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7a2:	25 30       	cpi	r18, 0x05	; 5
 7a4:	89 f0       	breq	.+34     	; 0x7c8 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7a6:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7aa:	25 fd       	sbrc	r18, 5
 7ac:	0f c0       	rjmp	.+30     	; 0x7cc <Endpoint_WaitUntilReady+0x4c>
 7ae:	20 91 e4 00 	lds	r18, 0x00E4
 7b2:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7b6:	28 17       	cp	r18, r24
 7b8:	39 07       	cpc	r19, r25
 7ba:	39 f3       	breq	.-50     	; 0x78a <Endpoint_WaitUntilReady+0xa>
 7bc:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7be:	41 f0       	breq	.+16     	; 0x7d0 <Endpoint_WaitUntilReady+0x50>
 7c0:	c9 01       	movw	r24, r18
 7c2:	e3 cf       	rjmp	.-58     	; 0x78a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7d4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 7d8:	22 ff       	sbrs	r18, 2
 7da:	df cf       	rjmp	.-66     	; 0x79a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	08 95       	ret

000007e0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7e8:	4e d0       	rcall	.+156    	; 0x886 <USB_INT_DisableAllInterrupts>
 7ea:	55 d0       	rcall	.+170    	; 0x896 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7ec:	c8 ed       	ldi	r28, 0xD8	; 216
 7ee:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7f0:	88 81       	ld	r24, Y
 7f2:	8f 77       	andi	r24, 0x7F	; 127
 7f4:	88 83       	st	Y, r24
 7f6:	88 81       	ld	r24, Y
 7f8:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7fa:	88 83       	st	Y, r24
 7fc:	88 81       	ld	r24, Y
 7fe:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 800:	88 83       	st	Y, r24
 802:	e7 ed       	ldi	r30, 0xD7	; 215
 804:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 806:	80 81       	ld	r24, Z
 808:	80 68       	ori	r24, 0x80	; 128
 80a:	80 83       	st	Z, r24
 80c:	19 bc       	out	0x29, r1	; 41
 80e:	10 92 0d 01 	sts	0x010D, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 812:	10 92 09 01 	sts	0x0109, r1
	USB_Device_ConfigurationNumber  = 0;
 816:	10 92 0b 01 	sts	0x010B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 81a:	10 92 0a 01 	sts	0x010A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 81e:	00 ee       	ldi	r16, 0xE0	; 224
 820:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 822:	f8 01       	movw	r30, r16
 824:	80 81       	ld	r24, Z
 826:	8b 7f       	andi	r24, 0xFB	; 251
 828:	80 83       	st	Z, r24
 82a:	88 81       	ld	r24, Y
 82c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 82e:	88 83       	st	Y, r24
 830:	42 e0       	ldi	r20, 0x02	; 2
 832:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	4e df       	rcall	.-356    	; 0x6d4 <Endpoint_ConfigureEndpoint_Prv>
 838:	e1 ee       	ldi	r30, 0xE1	; 225
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 83e:	8e 7f       	andi	r24, 0xFE	; 254
 840:	80 83       	st	Z, r24
 842:	e2 ee       	ldi	r30, 0xE2	; 226
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 848:	81 60       	ori	r24, 0x01	; 1
 84a:	80 83       	st	Z, r24
 84c:	80 81       	ld	r24, Z
 84e:	88 60       	ori	r24, 0x08	; 8
 850:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 852:	f8 01       	movw	r30, r16
 854:	80 81       	ld	r24, Z
 856:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 858:	80 83       	st	Z, r24
 85a:	88 81       	ld	r24, Y
 85c:	80 61       	ori	r24, 0x10	; 16
 85e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 866:	0f 91       	pop	r16
 868:	08 95       	ret

0000086a <USB_Init>:
 86a:	e8 ed       	ldi	r30, 0xD8	; 216
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 870:	8f 7e       	andi	r24, 0xEF	; 239
 872:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 874:	e7 ed       	ldi	r30, 0xD7	; 215
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	80 93 0c 01 	sts	0x010C, r24

	USB_ResetInterface();
 884:	ad cf       	rjmp	.-166    	; 0x7e0 <USB_ResetInterface>

00000886 <USB_INT_DisableAllInterrupts>:
 886:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	8c 7f       	andi	r24, 0xFC	; 252
 88e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 890:	10 92 e2 00 	sts	0x00E2, r1
 894:	08 95       	ret

00000896 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 896:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 89a:	10 92 e1 00 	sts	0x00E1, r1
 89e:	08 95       	ret

000008a0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	0b b6       	in	r0, 0x3b	; 59
 8ac:	0f 92       	push	r0
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8c6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8ca:	82 ff       	sbrs	r24, 2
 8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 8ce:	80 91 e2 00 	lds	r24, 0x00E2
 8d2:	82 ff       	sbrs	r24, 2
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 8d6:	80 91 e1 00 	lds	r24, 0x00E1
 8da:	8b 7f       	andi	r24, 0xFB	; 251
 8dc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 8e0:	93 dc       	rcall	.-1754   	; 0x208 <EVENT_USB_Device_StartOfFrame>
 8e2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 8e6:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 8e8:	1d c0       	rjmp	.+58     	; 0x924 <__vector_10+0x84>
 8ea:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 8ee:	80 ff       	sbrs	r24, 0
 8f0:	19 c0       	rjmp	.+50     	; 0x924 <__vector_10+0x84>
 8f2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8f6:	8e 7f       	andi	r24, 0xFE	; 254
 8f8:	80 93 da 00 	sts	0x00DA, r24
 8fc:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 900:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 902:	0c c0       	rjmp	.+24     	; 0x91c <__vector_10+0x7c>
 904:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 906:	89 bd       	out	0x29, r24	; 41
 908:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 90a:	89 bd       	out	0x29, r24	; 41
 90c:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 90e:	00 fe       	sbrs	r0, 0
 910:	fd cf       	rjmp	.-6      	; 0x90c <__vector_10+0x6c>
 912:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 914:	80 93 0d 01 	sts	0x010D, r24
 918:	60 dc       	rcall	.-1856   	; 0x1da <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 91a:	04 c0       	rjmp	.+8      	; 0x924 <__vector_10+0x84>
 91c:	19 bc       	out	0x29, r1	; 41
 91e:	10 92 0d 01 	sts	0x010D, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 922:	61 dc       	rcall	.-1854   	; 0x1e6 <EVENT_USB_Device_Disconnect>
 924:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 928:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 92a:	18 c0       	rjmp	.+48     	; 0x95c <__vector_10+0xbc>
 92c:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 930:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 932:	14 c0       	rjmp	.+40     	; 0x95c <__vector_10+0xbc>
 934:	80 91 e2 00 	lds	r24, 0x00E2
 938:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 93a:	80 93 e2 00 	sts	0x00E2, r24
 93e:	80 91 e2 00 	lds	r24, 0x00E2
 942:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 944:	80 93 e2 00 	sts	0x00E2, r24
 948:	80 91 d8 00 	lds	r24, 0x00D8
 94c:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 94e:	80 93 d8 00 	sts	0x00D8, r24
 952:	19 bc       	out	0x29, r1	; 41
 954:	85 e0       	ldi	r24, 0x05	; 5
 956:	80 93 0d 01 	sts	0x010D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 95a:	bd d1       	rcall	.+890    	; 0xcd6 <USB_Event_Stub>
 95c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 960:	84 ff       	sbrs	r24, 4
 962:	2f c0       	rjmp	.+94     	; 0x9c2 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 964:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 968:	84 ff       	sbrs	r24, 4
 96a:	2b c0       	rjmp	.+86     	; 0x9c2 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 96c:	8c e0       	ldi	r24, 0x0C	; 12
 96e:	89 bd       	out	0x29, r24	; 41
 970:	8e e0       	ldi	r24, 0x0E	; 14
 972:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 974:	09 b4       	in	r0, 0x29	; 41
 976:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 978:	fd cf       	rjmp	.-6      	; 0x974 <__vector_10+0xd4>
 97a:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 97e:	8f 7d       	andi	r24, 0xDF	; 223
 980:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 984:	80 91 e1 00 	lds	r24, 0x00E1
 988:	8f 7e       	andi	r24, 0xEF	; 239
 98a:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 98e:	80 91 e2 00 	lds	r24, 0x00E2
 992:	8f 7e       	andi	r24, 0xEF	; 239
 994:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 998:	80 91 e2 00 	lds	r24, 0x00E2
 99c:	81 60       	ori	r24, 0x01	; 1
 99e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9a2:	80 91 09 01 	lds	r24, 0x0109
 9a6:	88 23       	and	r24, r24
 9a8:	11 f0       	breq	.+4      	; 0x9ae <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9aa:	84 e0       	ldi	r24, 0x04	; 4
 9ac:	07 c0       	rjmp	.+14     	; 0x9bc <__vector_10+0x11c>
 9ae:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 9b2:	87 ff       	sbrs	r24, 7
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9b6:	83 e0       	ldi	r24, 0x03	; 3
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	80 93 0d 01 	sts	0x010D, r24
 9c0:	8a d1       	rcall	.+788    	; 0xcd6 <USB_Event_Stub>
 9c2:	80 91 e1 00 	lds	r24, 0x00E1
 9c6:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9c8:	22 c0       	rjmp	.+68     	; 0xa0e <__vector_10+0x16e>
 9ca:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9ce:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9d0:	1e c0       	rjmp	.+60     	; 0xa0e <__vector_10+0x16e>
 9d2:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 9d6:	87 7f       	andi	r24, 0xF7	; 247
 9d8:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	80 93 0d 01 	sts	0x010D, r24
 9e2:	10 92 09 01 	sts	0x0109, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 9e6:	80 91 e1 00 	lds	r24, 0x00E1
 9ea:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 9ec:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9f0:	80 91 e2 00 	lds	r24, 0x00E2
 9f4:	8e 7f       	andi	r24, 0xFE	; 254
 9f6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9fa:	80 91 e2 00 	lds	r24, 0x00E2
 9fe:	80 61       	ori	r24, 0x10	; 16
 a00:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a04:	42 e0       	ldi	r20, 0x02	; 2
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	64 de       	rcall	.-824    	; 0x6d4 <Endpoint_ConfigureEndpoint_Prv>
 a0c:	64 d1       	rcall	.+712    	; 0xcd6 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a0e:	ff 91       	pop	r31
 a10:	ef 91       	pop	r30
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a18:	8f 91       	pop	r24
 a1a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a1c:	6f 91       	pop	r22
 a1e:	5f 91       	pop	r21
 a20:	4f 91       	pop	r20
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	0f 90       	pop	r0
 a28:	0b be       	out	0x3b, r0	; 59
 a2a:	0f 90       	pop	r0
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	0f 90       	pop	r0
 a30:	1f 90       	pop	r1
 a32:	18 95       	reti

00000a34 <USB_Device_ProcessControlRequest>:
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	aa 97       	sbiw	r28, 0x2a	; 42
 a40:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a42:	f8 94       	cli
 a44:	de bf       	out	0x3e, r29	; 62
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	cd bf       	out	0x3d, r28	; 61
 a4a:	ee e0       	ldi	r30, 0x0E	; 14
 a4c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a4e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a52:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a54:	21 e0       	ldi	r18, 0x01	; 1
 a56:	e6 31       	cpi	r30, 0x16	; 22
 a58:	f2 07       	cpc	r31, r18
 a5a:	c9 f7       	brne	.-14     	; 0xa4e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a5c:	0a dc       	rcall	.-2028   	; 0x272 <EVENT_USB_Device_ControlRequest>
 a5e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a62:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a64:	20 c1       	rjmp	.+576    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 a66:	90 91 0e 01 	lds	r25, 0x010E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a6a:	80 91 0f 01 	lds	r24, 0x010F

		switch (USB_ControlRequest.bRequest)
 a6e:	85 30       	cpi	r24, 0x05	; 5
 a70:	09 f4       	brne	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0x40>
 a72:	77 c0       	rjmp	.+238    	; 0xb62 <USB_Device_ProcessControlRequest+0x12e>
 a74:	30 f4       	brcc	.+12     	; 0xa82 <USB_Device_ProcessControlRequest+0x4e>
 a76:	81 30       	cpi	r24, 0x01	; 1
 a78:	81 f1       	breq	.+96     	; 0xada <USB_Device_ProcessControlRequest+0xa6>
 a7a:	68 f0       	brcs	.+26     	; 0xa96 <USB_Device_ProcessControlRequest+0x62>
 a7c:	83 30       	cpi	r24, 0x03	; 3
 a7e:	69 f1       	breq	.+90     	; 0xada <USB_Device_ProcessControlRequest+0xa6>
 a80:	12 c1       	rjmp	.+548    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 a82:	88 30       	cpi	r24, 0x08	; 8
 a84:	09 f4       	brne	.+2      	; 0xa88 <USB_Device_ProcessControlRequest+0x54>
 a86:	e1 c0       	rjmp	.+450    	; 0xc4a <USB_Device_ProcessControlRequest+0x216>
 a88:	89 30       	cpi	r24, 0x09	; 9
 a8a:	09 f4       	brne	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x5a>
 a8c:	f0 c0       	rjmp	.+480    	; 0xc6e <USB_Device_ProcessControlRequest+0x23a>
 a8e:	86 30       	cpi	r24, 0x06	; 6
 a90:	09 f0       	breq	.+2      	; 0xa94 <USB_Device_ProcessControlRequest+0x60>
 a92:	09 c1       	rjmp	.+530    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 a94:	88 c0       	rjmp	.+272    	; 0xba6 <USB_Device_ProcessControlRequest+0x172>
 a96:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a98:	81 f0       	breq	.+32     	; 0xaba <USB_Device_ProcessControlRequest+0x86>
 a9a:	92 38       	cpi	r25, 0x82	; 130
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0x6c>
 a9e:	03 c1       	rjmp	.+518    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 aa0:	80 91 12 01 	lds	r24, 0x0112
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa4:	8f 70       	andi	r24, 0x0F	; 15
 aa6:	80 93 e9 00 	sts	0x00E9, r24
 aaa:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 aae:	85 fb       	bst	r24, 5
 ab0:	88 27       	eor	r24, r24
 ab2:	80 f9       	bld	r24, 0
 ab4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <USB_Device_ProcessControlRequest+0x92>
 aba:	80 91 0a 01 	lds	r24, 0x010A
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 abe:	90 91 0b 01 	lds	r25, 0x010B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ac2:	91 11       	cpse	r25, r1
 ac4:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ac6:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aca:	97 7f       	andi	r25, 0xF7	; 247
 acc:	90 93 e8 00 	sts	0x00E8, r25
 ad0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ad4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 ad8:	c3 c0       	rjmp	.+390    	; 0xc60 <USB_Device_ProcessControlRequest+0x22c>
 ada:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 adc:	2d 7f       	andi	r18, 0xFD	; 253
 ade:	09 f0       	breq	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0xae>
 ae0:	e2 c0       	rjmp	.+452    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 ae2:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ae4:	19 f0       	breq	.+6      	; 0xaec <USB_Device_ProcessControlRequest+0xb8>
 ae6:	92 30       	cpi	r25, 0x02	; 2
 ae8:	61 f0       	breq	.+24     	; 0xb02 <USB_Device_ProcessControlRequest+0xce>
 aea:	dd c0       	rjmp	.+442    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 aec:	90 91 10 01 	lds	r25, 0x0110
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 af0:	91 30       	cpi	r25, 0x01	; 1
 af2:	09 f0       	breq	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0xc2>
 af4:	d8 c0       	rjmp	.+432    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 af6:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 af8:	09 f0       	breq	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0xc8>
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	90 93 0b 01 	sts	0x010B, r25
 b00:	2a c0       	rjmp	.+84     	; 0xb56 <USB_Device_ProcessControlRequest+0x122>
 b02:	90 91 10 01 	lds	r25, 0x0110

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b06:	91 11       	cpse	r25, r1
 b08:	26 c0       	rjmp	.+76     	; 0xb56 <USB_Device_ProcessControlRequest+0x122>
 b0a:	20 91 12 01 	lds	r18, 0x0112
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b0e:	2f 70       	andi	r18, 0x0F	; 15
 b10:	09 f4       	brne	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b12:	c9 c0       	rjmp	.+402    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 b14:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b18:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b1c:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b1e:	1b c0       	rjmp	.+54     	; 0xb56 <USB_Device_ProcessControlRequest+0x122>
 b20:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b22:	21 f4       	brne	.+8      	; 0xb2c <USB_Device_ProcessControlRequest+0xf8>
 b24:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b28:	80 62       	ori	r24, 0x20	; 32
 b2a:	13 c0       	rjmp	.+38     	; 0xb52 <USB_Device_ProcessControlRequest+0x11e>
 b2c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b30:	80 61       	ori	r24, 0x10	; 16
 b32:	80 93 eb 00 	sts	0x00EB, r24
 b36:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	02 2e       	mov	r0, r18
 b3c:	01 c0       	rjmp	.+2      	; 0xb40 <USB_Device_ProcessControlRequest+0x10c>
 b3e:	88 0f       	add	r24, r24
 b40:	0a 94       	dec	r0
 b42:	ea f7       	brpl	.-6      	; 0xb3e <USB_Device_ProcessControlRequest+0x10a>
 b44:	80 93 ea 00 	sts	0x00EA, r24
 b48:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b4c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b50:	88 60       	ori	r24, 0x08	; 8
 b52:	80 93 eb 00 	sts	0x00EB, r24
 b56:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b5a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b5e:	87 7f       	andi	r24, 0xF7	; 247
 b60:	82 c0       	rjmp	.+260    	; 0xc66 <USB_Device_ProcessControlRequest+0x232>
 b62:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b64:	a0 c0       	rjmp	.+320    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 b66:	10 91 10 01 	lds	r17, 0x0110
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b6a:	1f 77       	andi	r17, 0x7F	; 127
 b6c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b70:	80 78       	andi	r24, 0x80	; 128
 b72:	81 2b       	or	r24, r17
 b74:	80 93 e3 00 	sts	0x00E3, r24
 b78:	80 91 e8 00 	lds	r24, 0x00E8
 b7c:	87 7f       	andi	r24, 0xF7	; 247
 b7e:	80 93 e8 00 	sts	0x00E8, r24
 b82:	dd dd       	rcall	.-1094   	; 0x73e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b84:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b88:	80 ff       	sbrs	r24, 0
 b8a:	fc cf       	rjmp	.-8      	; 0xb84 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b8c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b90:	80 68       	ori	r24, 0x80	; 128
 b92:	80 93 e3 00 	sts	0x00E3, r24
 b96:	11 23       	and	r17, r17
 b98:	11 f0       	breq	.+4      	; 0xb9e <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b9a:	83 e0       	ldi	r24, 0x03	; 3
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <USB_Device_ProcessControlRequest+0x16c>
 b9e:	82 e0       	ldi	r24, 0x02	; 2
 ba0:	80 93 0d 01 	sts	0x010D, r24
 ba4:	80 c0       	rjmp	.+256    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 ba6:	90 58       	subi	r25, 0x80	; 128
 ba8:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 baa:	08 f0       	brcs	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0x17a>
 bac:	7c c0       	rjmp	.+248    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 bae:	80 91 10 01 	lds	r24, 0x0110
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bb2:	90 91 11 01 	lds	r25, 0x0111
 bb6:	8c 3d       	cpi	r24, 0xDC	; 220
 bb8:	23 e0       	ldi	r18, 0x03	; 3
 bba:	92 07       	cpc	r25, r18
 bbc:	71 f5       	brne	.+92     	; 0xc1a <USB_Device_ProcessControlRequest+0x1e6>
 bbe:	83 e0       	ldi	r24, 0x03	; 3
 bc0:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bc2:	8a e2       	ldi	r24, 0x2A	; 42
 bc4:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bc6:	4f b7       	in	r20, 0x3f	; 63
 bc8:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bca:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bcc:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bce:	20 e0       	ldi	r18, 0x00	; 0
 bd0:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bd2:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bd4:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	50 93 57 00 	sts	0x0057, r21
 bdc:	e4 91       	lpm	r30, Z
 bde:	20 ff       	sbrs	r18, 0
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 be2:	e2 95       	swap	r30
 be4:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 be6:	3f 5f       	subi	r19, 0xFF	; 255
 be8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bea:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	ea 30       	cpi	r30, 0x0A	; 10
 bf0:	10 f0       	brcs	.+4      	; 0xbf6 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bf2:	c7 96       	adiw	r24, 0x37	; 55
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0x1c4>
 bf6:	c0 96       	adiw	r24, 0x30	; 48
 bf8:	8d 93       	st	X+, r24
 bfa:	9d 93       	st	X+, r25
 bfc:	2f 5f       	subi	r18, 0xFF	; 255
 bfe:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c00:	49 f7       	brne	.-46     	; 0xbd4 <USB_Device_ProcessControlRequest+0x1a0>
 c02:	4f bf       	out	0x3f, r20	; 63
 c04:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c08:	87 7f       	andi	r24, 0xF7	; 247
 c0a:	80 93 e8 00 	sts	0x00E8, r24
 c0e:	6a e2       	ldi	r22, 0x2A	; 42
 c10:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c12:	ce 01       	movw	r24, r28
 c14:	01 96       	adiw	r24, 0x01	; 1
 c16:	a1 dc       	rcall	.-1726   	; 0x55a <Endpoint_Write_Control_Stream_LE>
 c18:	12 c0       	rjmp	.+36     	; 0xc3e <USB_Device_ProcessControlRequest+0x20a>
 c1a:	ae 01       	movw	r20, r28
 c1c:	4f 5f       	subi	r20, 0xFF	; 255
 c1e:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c20:	60 91 12 01 	lds	r22, 0x0112
 c24:	0f dc       	rcall	.-2018   	; 0x444 <CALLBACK_USB_GetDescriptor>
 c26:	00 97       	sbiw	r24, 0x00	; 0
 c28:	09 f4       	brne	.+2      	; 0xc2c <USB_Device_ProcessControlRequest+0x1f8>
 c2a:	3d c0       	rjmp	.+122    	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 c2c:	20 91 e8 00 	lds	r18, 0x00E8
 c30:	27 7f       	andi	r18, 0xF7	; 247
 c32:	20 93 e8 00 	sts	0x00E8, r18
 c36:	bc 01       	movw	r22, r24
 c38:	89 81       	ldd	r24, Y+1	; 0x01
 c3a:	9a 81       	ldd	r25, Y+2	; 0x02
 c3c:	eb dc       	rcall	.-1578   	; 0x614 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c3e:	80 91 e8 00 	lds	r24, 0x00E8
 c42:	8b 77       	andi	r24, 0x7B	; 123
 c44:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c48:	2e c0       	rjmp	.+92     	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 c4a:	90 38       	cpi	r25, 0x80	; 128
 c4c:	61 f5       	brne	.+88     	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 c4e:	80 91 e8 00 	lds	r24, 0x00E8
 c52:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c54:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c58:	80 91 09 01 	lds	r24, 0x0109
 c5c:	80 93 f1 00 	sts	0x00F1, r24
 c60:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c64:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c66:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c6a:	69 dd       	rcall	.-1326   	; 0x73e <Endpoint_ClearStatusStage>
 c6c:	1c c0       	rjmp	.+56     	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 c6e:	91 11       	cpse	r25, r1
 c70:	1a c0       	rjmp	.+52     	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
 c72:	90 91 10 01 	lds	r25, 0x0110
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c76:	92 30       	cpi	r25, 0x02	; 2
 c78:	b0 f4       	brcc	.+44     	; 0xca6 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c7a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c7e:	87 7f       	andi	r24, 0xF7	; 247
 c80:	80 93 e8 00 	sts	0x00E8, r24
 c84:	90 93 09 01 	sts	0x0109, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c88:	5a dd       	rcall	.-1356   	; 0x73e <Endpoint_ClearStatusStage>
 c8a:	80 91 09 01 	lds	r24, 0x0109
 c8e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c90:	04 c0       	rjmp	.+8      	; 0xc9a <USB_Device_ProcessControlRequest+0x266>
 c92:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c96:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <USB_Device_ProcessControlRequest+0x26a>
 c9a:	84 e0       	ldi	r24, 0x04	; 4
 c9c:	01 c0       	rjmp	.+2      	; 0xca0 <USB_Device_ProcessControlRequest+0x26c>
 c9e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ca0:	80 93 0d 01 	sts	0x010D, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 ca4:	a2 da       	rcall	.-2748   	; 0x1ea <EVENT_USB_Device_ConfigurationChanged>
 ca6:	80 91 e8 00 	lds	r24, 0x00E8
 caa:	83 ff       	sbrs	r24, 3
 cac:	0a c0       	rjmp	.+20     	; 0xcc2 <USB_Device_ProcessControlRequest+0x28e>
 cae:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 cb2:	87 7f       	andi	r24, 0xF7	; 247
 cb4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cb8:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cbc:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cbe:	80 93 eb 00 	sts	0x00EB, r24
 cc2:	aa 96       	adiw	r28, 0x2a	; 42
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cc8:	de bf       	out	0x3e, r29	; 62
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	cd bf       	out	0x3d, r28	; 61
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 cd2:	1f 91       	pop	r17
 cd4:	08 95       	ret

00000cd6 <USB_Event_Stub>:
 cd6:	08 95       	ret

00000cd8 <USB_USBTask>:
 cd8:	cf 93       	push	r28
 cda:	80 91 0d 01 	lds	r24, 0x010D
 cde:	88 23       	and	r24, r24
 ce0:	a9 f0       	breq	.+42     	; 0xd0c <USB_USBTask+0x34>
 ce2:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ce6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ce8:	90 91 ec 00 	lds	r25, 0x00EC
 cec:	90 ff       	sbrs	r25, 0
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <USB_USBTask+0x1c>
 cf0:	90 e8       	ldi	r25, 0x80	; 128
 cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <USB_USBTask+0x1e>
 cf4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cf6:	c9 2f       	mov	r28, r25
 cf8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cfa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cfe:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d02:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 d04:	97 de       	rcall	.-722    	; 0xa34 <USB_Device_ProcessControlRequest>
 d06:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d08:	c0 93 e9 00 	sts	0x00E9, r28
 d0c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d0e:	08 95       	ret

00000d10 <memcmp>:
 d10:	fb 01       	movw	r30, r22
 d12:	dc 01       	movw	r26, r24
 d14:	04 c0       	rjmp	.+8      	; 0xd1e <memcmp+0xe>
 d16:	8d 91       	ld	r24, X+
 d18:	01 90       	ld	r0, Z+
 d1a:	80 19       	sub	r24, r0
 d1c:	21 f4       	brne	.+8      	; 0xd26 <memcmp+0x16>
 d1e:	41 50       	subi	r20, 0x01	; 1
 d20:	50 40       	sbci	r21, 0x00	; 0
 d22:	c8 f7       	brcc	.-14     	; 0xd16 <memcmp+0x6>
 d24:	88 1b       	sub	r24, r24
 d26:	99 0b       	sbc	r25, r25
 d28:	08 95       	ret

00000d2a <_exit>:
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>


MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001822  000018b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011a  0080011a  000018d0  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000051a2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b0  00000000  00000000  000051b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000057b3  00000000  00000000  00005563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a74  00000000  00000000  0000ad16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002631  00000000  00000000  0000c78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009ec  00000000  00000000  0000edbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000261a  00000000  00000000  0000f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003cb9  00000000  00000000  00011dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d0  00000000  00000000  00015a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c1       	rjmp	.+730    	; 0x2e0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c1       	rjmp	.+726    	; 0x2e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c1       	rjmp	.+722    	; 0x2e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c1       	rjmp	.+718    	; 0x2e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c1       	rjmp	.+714    	; 0x2e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c1       	rjmp	.+710    	; 0x2e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c1       	rjmp	.+706    	; 0x2e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c1       	rjmp	.+702    	; 0x2e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c1       	rjmp	.+698    	; 0x2e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	49 c6       	rjmp	.+3218   	; 0xcbc <__vector_10>
      2a:	00 00       	nop
      2c:	59 c1       	rjmp	.+690    	; 0x2e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c1       	rjmp	.+686    	; 0x2e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c1       	rjmp	.+682    	; 0x2e0 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	53 c1       	rjmp	.+678    	; 0x2e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c1       	rjmp	.+674    	; 0x2e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c1       	rjmp	.+670    	; 0x2e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c1       	rjmp	.+666    	; 0x2e0 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	4b c1       	rjmp	.+662    	; 0x2e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c1       	rjmp	.+658    	; 0x2e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c1       	rjmp	.+654    	; 0x2e0 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	45 c1       	rjmp	.+650    	; 0x2e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c1       	rjmp	.+646    	; 0x2e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c1       	rjmp	.+638    	; 0x2e0 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	3d c1       	rjmp	.+634    	; 0x2e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c1       	rjmp	.+630    	; 0x2e0 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	39 c1       	rjmp	.+626    	; 0x2e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c1       	rjmp	.+622    	; 0x2e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c1       	rjmp	.+618    	; 0x2e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c1       	rjmp	.+614    	; 0x2e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c1       	rjmp	.+610    	; 0x2e0 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	2f c1       	rjmp	.+606    	; 0x2e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c1       	rjmp	.+602    	; 0x2e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c1       	rjmp	.+598    	; 0x2e0 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	29 c1       	rjmp	.+594    	; 0x2e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c1       	rjmp	.+590    	; 0x2e0 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	25 c1       	rjmp	.+586    	; 0x2e0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4574>:
      98:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000000b2 <__c.4567>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     102:	1b 5b 33 37 6d 00                                   .[37m.

00000108 <__c.4560>:
     108:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000137 <__c.4555>:
     137:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
				ReportSize     -= 4;
     147:	2e 0d 0a 00                                         ....

0000014b <__c.4553>:
				ReportData     += 4;
     14b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15b:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
				ReportSize     -= 2;
				ReportData     += 2;
     16b:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17b:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000189 <__c.4550>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     189:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     199:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1a9:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1b9:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1c9:	37 6d 00                                            7m.

000001cc <__c.4548>:
     1cc:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1dc:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001e6 <__c.4546>:
     1e6:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1f6:	69 63 65 2e 0d 0a 00                                ice....

000001fd <__c.4544>:
     1fd:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     20d:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     21d:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000227 <__c.4541>:
     227:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     237:	61 74 61 2e 0d 0a 00                                ata....

0000023e <__c.4536>:
     23e:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     24e:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000025d <__c.4531>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     25d:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     26d:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000027a <__c.4522>:

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27a:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 48     .[36mMouse HID H

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28a:	6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67     ost Demo running
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     29a:	2e 0d 0a 1b 5b 33 37 6d 00 00                       ....[37m..

000002a4 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e2       	ldi	r29, 0x20	; 32
				break;
     2ac:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	e2 e2       	ldi	r30, 0x22	; 34
     2b8:	f8 e1       	ldi	r31, 0x18	; 24
     2ba:	00 e0       	ldi	r16, 0x00	; 0
				break;
     2bc:	0b bf       	out	0x3b, r16	; 59
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 31       	cpi	r26, 0x1A	; 26
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
				break;
     2cc:	aa e1       	ldi	r26, 0x1A	; 26
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
				break;
     2d4:	ac 33       	cpi	r26, 0x3C	; 60

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	1c d1       	rcall	.+568    	; 0x514 <main>

				if (ParserData->UsingReportIDs)
     2dc:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <_exit>

000002e0 <__bad_interrupt>:
     2e0:	8f ce       	rjmp	.-738    	; 0x0 <__vectors>

000002e2 <LEDs_SetAllLEDs>:
     2e2:	9b b1       	in	r25, 0x0b	; 11
     2e4:	9f 70       	andi	r25, 0x0F	; 15
     2e6:	98 2b       	or	r25, r24
     2e8:	9b b9       	out	0x0b, r25	; 11
     2ea:	08 95       	ret

000002ec <SetupHardware>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	84 b7       	in	r24, 0x34	; 52
     2ee:	87 7f       	andi	r24, 0xF7	; 247
     2f0:	84 bf       	out	0x34, r24	; 52
     2f2:	88 e1       	ldi	r24, 0x18	; 24
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	80 93 60 00 	sts	0x0060, r24
     2fc:	10 92 60 00 	sts	0x0060, r1
     300:	0f be       	out	0x3f, r0	; 63
     302:	90 e0       	ldi	r25, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	80 e8       	ldi	r24, 0x80	; 128
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	80 93 61 00 	sts	0x0061, r24
     30e:	90 93 61 00 	sts	0x0061, r25
     312:	0f be       	out	0x3f, r0	; 63
     314:	83 e3       	ldi	r24, 0x33	; 51
     316:	90 e0       	ldi	r25, 0x00	; 0
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	90 93 cd 00 	sts	0x00CD, r25
     31c:	80 93 cc 00 	sts	0x00CC, r24
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	80 93 ca 00 	sts	0x00CA, r24
     326:	10 92 c8 00 	sts	0x00C8, r1
     32a:	88 e1       	ldi	r24, 0x18	; 24
     32c:	80 93 c9 00 	sts	0x00C9, r24
     330:	53 9a       	sbi	0x0a, 3	; 10
     332:	5a 9a       	sbi	0x0b, 2	; 11
     334:	8a b1       	in	r24, 0x0a	; 10
     336:	80 6f       	ori	r24, 0xF0	; 240
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	8a b9       	out	0x0a, r24	; 10
     33a:	8b b1       	in	r24, 0x0b	; 11
     33c:	8f 70       	andi	r24, 0x0F	; 15
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	8b b9       	out	0x0b, r24	; 11
     340:	a2 d4       	rcall	.+2372   	; 0xc86 <USB_Init>
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	67 c7       	rjmp	.+3790   	; 0x1216 <Serial_CreateStream>

00000348 <EVENT_USB_Host_DeviceAttached>:
     348:	8d e5       	ldi	r24, 0x5D	; 93
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	a5 d7       	rcall	.+3914   	; 0x1298 <puts_P>
     34e:	80 ea       	ldi	r24, 0xA0	; 160
     350:	c8 cf       	rjmp	.-112    	; 0x2e2 <LEDs_SetAllLEDs>

00000352 <EVENT_USB_Host_DeviceUnattached>:
     352:	8e e3       	ldi	r24, 0x3E	; 62
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	a0 d7       	rcall	.+3904   	; 0x1298 <puts_P>
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	c3 cf       	rjmp	.-122    	; 0x2e2 <LEDs_SetAllLEDs>

0000035c <EVENT_USB_Host_DeviceEnumerationComplete>:
     35c:	cf 93       	push	r28
     35e:	87 e2       	ldi	r24, 0x27	; 39
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	9a d7       	rcall	.+3892   	; 0x1298 <puts_P>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	fb d0       	rcall	.+502    	; 0x55c <ProcessConfigurationDescriptor>
     366:	c8 2f       	mov	r28, r24
     368:	88 23       	and	r24, r24
     36a:	a9 f0       	breq	.+42     	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	19 f4       	brne	.+6      	; 0x376 <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
     370:	8d ef       	ldi	r24, 0xFD	; 253
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	02 c0       	rjmp	.+4      	; 0x37a <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
     376:	86 ee       	ldi	r24, 0xE6	; 230

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	8e d7       	rcall	.+3868   	; 0x1298 <puts_P>
     37c:	1f 92       	push	r1
     37e:	cf 93       	push	r28
     380:	8c ec       	ldi	r24, 0xCC	; 204
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	9f 93       	push	r25
     386:	8f 93       	push	r24
				break;
     388:	64 d7       	rcall	.+3784   	; 0x1252 <printf_P>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	80 e9       	ldi	r24, 0x90	; 144
     394:	2d c0       	rjmp	.+90     	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	ef d6       	rcall	.+3550   	; 0x1178 <USB_Host_SetDeviceConfiguration>
     39a:	88 23       	and	r24, r24
     39c:	29 f0       	breq	.+10     	; 0x3a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     39e:	1f 92       	push	r1
     3a0:	8f 93       	push	r24
     3a2:	89 e8       	ldi	r24, 0x89	; 137
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	ee cf       	rjmp	.-36     	; 0x384 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	e1 e0       	ldi	r30, 0x01	; 1
     3ac:	f1 e0       	ldi	r31, 0x01	; 1
     3ae:	af e1       	ldi	r26, 0x1F	; 31
				break;
     3b0:	b1 e0       	ldi	r27, 0x01	; 1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	01 90       	ld	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	8a 95       	dec	r24
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     3ba:	10 92 a7 00 	sts	0x00A7, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	df d5       	rcall	.+3006   	; 0xf82 <USB_Host_SendControlRequest>
     3c4:	88 23       	and	r24, r24
     3c6:	81 f0       	breq	.+32     	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     3c8:	1f 92       	push	r1
     3ca:	8f 93       	push	r24
     3cc:	8b e4       	ldi	r24, 0x4B	; 75
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24

					while (CurrCollectionPath->Parent != NULL)
     3d4:	3e d7       	rcall	.+3708   	; 0x1252 <printf_P>
     3d6:	80 e9       	ldi	r24, 0x90	; 144
     3d8:	84 df       	rcall	.-248    	; 0x2e2 <LEDs_SetAllLEDs>
     3da:	0f 90       	pop	r0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	cf 91       	pop	r28
     3e6:	c8 c6       	rjmp	.+3472   	; 0x1178 <USB_Host_SetDeviceConfiguration>
     3e8:	87 e3       	ldi	r24, 0x37	; 55
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	55 d7       	rcall	.+3754   	; 0x1298 <puts_P>
     3ee:	80 e6       	ldi	r24, 0x60	; 96
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	cf 91       	pop	r28
     3f2:	77 cf       	rjmp	.-274    	; 0x2e2 <LEDs_SetAllLEDs>

000003f4 <EVENT_USB_Host_HostError>:
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	da d3       	rcall	.+1972   	; 0xbb6 <USB_Disable>
     402:	1f 92       	push	r1
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	8f 93       	push	r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	88 e0       	ldi	r24, 0x08	; 8
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	20 d7       	rcall	.+3648   	; 0x1252 <printf_P>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	80 e9       	ldi	r24, 0x90	; 144
     414:	66 df       	rcall	.-308    	; 0x2e2 <LEDs_SetAllLEDs>
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	ff cf       	rjmp	.-2      	; 0x41e <EVENT_USB_Host_HostError+0x2a>

00000420 <EVENT_USB_Host_DeviceEnumerationFailed>:

				if (UsageListSize)
     420:	90 91 27 01 	lds	r25, 0x0127
     424:	1f 92       	push	r1
     426:	9f 93       	push	r25
     428:	1f 92       	push	r1
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	6f 93       	push	r22
     42c:	1f 92       	push	r1
     42e:	8f 93       	push	r24
     430:	82 eb       	ldi	r24, 0xB2	; 178
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9f 93       	push	r25
     436:	8f 93       	push	r24
     438:	0c d7       	rcall	.+3608   	; 0x1252 <printf_P>
     43a:	8d b7       	in	r24, 0x3d	; 61
     43c:	9e b7       	in	r25, 0x3e	; 62
     43e:	08 96       	adiw	r24, 0x08	; 8

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	9e bf       	out	0x3e, r25	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	8d bf       	out	0x3d, r24	; 61
     44a:	80 e9       	ldi	r24, 0x90	; 144
					  UsageList[i - 1] = UsageList[i];
     44c:	4a cf       	rjmp	.-364    	; 0x2e2 <LEDs_SetAllLEDs>

0000044e <MouseHost_Task>:
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <MouseHost_Task+0x6>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	80 91 27 01 	lds	r24, 0x0127
     45e:	8b 30       	cpi	r24, 0x0B	; 11
     460:	09 f0       	breq	.+2      	; 0x464 <MouseHost_Task+0x16>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	52 c0       	rjmp	.+164    	; 0x508 <MouseHost_Task+0xba>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 a7 00 	sts	0x00A7, r24
     46a:	80 91 a9 00 	lds	r24, 0x00A9
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	8f 7b       	andi	r24, 0xBF	; 191
     470:	80 93 a9 00 	sts	0x00A9, r24
     474:	80 91 a6 00 	lds	r24, 0x00A6
     478:	80 fd       	sbrc	r24, 0
     47a:	03 c0       	rjmp	.+6      	; 0x482 <MouseHost_Task+0x34>
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	31 df       	rcall	.-414    	; 0x2e2 <LEDs_SetAllLEDs>
     480:	3e c0       	rjmp	.+124    	; 0x4fe <MouseHost_Task+0xb0>
     482:	80 91 a6 00 	lds	r24, 0x00A6
     486:	85 ff       	sbrs	r24, 5
     488:	35 c0       	rjmp	.+106    	; 0x4f4 <MouseHost_Task+0xa6>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	63 e0       	ldi	r22, 0x03	; 3
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	98 d2       	rcall	.+1328   	; 0x9c8 <Pipe_Read_Stream_LE>
     498:	8a 81       	ldd	r24, Y+2	; 0x02
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	18 16       	cp	r1, r24
     49c:	24 f0       	brlt	.+8      	; 0x4a6 <MouseHost_Task+0x58>
     49e:	88 23       	and	r24, r24
     4a0:	19 f0       	breq	.+6      	; 0x4a8 <MouseHost_Task+0x5a>
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <MouseHost_Task+0x5a>
     4a6:	80 e1       	ldi	r24, 0x10	; 16
     4a8:	9b 81       	ldd	r25, Y+3	; 0x03
     4aa:	19 16       	cp	r1, r25
				break;
     4ac:	14 f4       	brge	.+4      	; 0x4b2 <MouseHost_Task+0x64>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	80 68       	ori	r24, 0x80	; 128
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <MouseHost_Task+0x68>
     4b2:	91 11       	cpse	r25, r1
     4b4:	80 64       	ori	r24, 0x40	; 64
     4b6:	99 81       	ldd	r25, Y+1	; 0x01
     4b8:	91 11       	cpse	r25, r1
     4ba:	80 ef       	ldi	r24, 0xF0	; 240
     4bc:	12 df       	rcall	.-476    	; 0x2e2 <LEDs_SetAllLEDs>
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	1f 92       	push	r1
     4c2:	8f 93       	push	r24
     4c4:	2b 81       	ldd	r18, Y+3	; 0x03
     4c6:	82 2f       	mov	r24, r18
     4c8:	99 27       	eor	r25, r25
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	87 fd       	sbrc	r24, 7
     4cc:	90 95       	com	r25
     4ce:	9f 93       	push	r25
     4d0:	2f 93       	push	r18
     4d2:	2a 81       	ldd	r18, Y+2	; 0x02
     4d4:	82 2f       	mov	r24, r18
     4d6:	99 27       	eor	r25, r25
     4d8:	87 fd       	sbrc	r24, 7
     4da:	90 95       	com	r25
     4dc:	9f 93       	push	r25
     4de:	2f 93       	push	r18
     4e0:	88 e9       	ldi	r24, 0x98	; 152
     4e2:	90 e0       	ldi	r25, 0x00	; 0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	b4 d6       	rcall	.+3432   	; 0x1252 <printf_P>
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	80 91 a6 00 	lds	r24, 0x00A6
     4f8:	8e 77       	andi	r24, 0x7E	; 126
     4fa:	80 93 a6 00 	sts	0x00A6, r24
     4fe:	80 91 a9 00 	lds	r24, 0x00A9
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 64       	ori	r24, 0x40	; 64
     504:	80 93 a9 00 	sts	0x00A9, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <main>:
     514:	eb de       	rcall	.-554    	; 0x2ec <SetupHardware>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	8a e7       	ldi	r24, 0x7A	; 122
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	be d6       	rcall	.+3452   	; 0x1298 <puts_P>
     51c:	80 e1       	ldi	r24, 0x10	; 16

					if (UsageListSize)
     51e:	e1 de       	rcall	.-574    	; 0x2e2 <LEDs_SetAllLEDs>
     520:	78 94       	sei
     522:	95 df       	rcall	.-214    	; 0x44e <MouseHost_Task>
     524:	50 d6       	rcall	.+3232   	; 0x11c6 <USB_USBTask>
     526:	fd cf       	rjmp	.-6      	; 0x522 <main+0xe>

00000528 <DComp_NextMouseInterface>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	fc 01       	movw	r30, r24
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	84 30       	cpi	r24, 0x04	; 4
     52e:	41 f4       	brne	.+16     	; 0x540 <DComp_NextMouseInterface+0x18>
     530:	85 81       	ldd	r24, Z+5	; 0x05
     532:	83 30       	cpi	r24, 0x03	; 3
     534:	29 f4       	brne	.+10     	; 0x540 <DComp_NextMouseInterface+0x18>
     536:	87 81       	ldd	r24, Z+7	; 0x07
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	11 f4       	brne	.+4      	; 0x540 <DComp_NextMouseInterface+0x18>
     53c:	80 e0       	ldi	r24, 0x00	; 0

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	08 95       	ret
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	08 95       	ret

00000544 <DComp_NextMouseInterfaceDataEndpoint>:
     544:	fc 01       	movw	r30, r24
     546:	81 81       	ldd	r24, Z+1	; 0x01
     548:	85 30       	cpi	r24, 0x05	; 5
						  UsageList[i - 1] = UsageList[i];
     54a:	21 f0       	breq	.+8      	; 0x554 <DComp_NextMouseInterfaceDataEndpoint+0x10>
     54c:	84 30       	cpi	r24, 0x04	; 4
     54e:	21 f4       	brne	.+8      	; 0x558 <DComp_NextMouseInterfaceDataEndpoint+0x14>
     550:	81 e0       	ldi	r24, 0x01	; 1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	08 95       	ret
     554:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	08 95       	ret
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	08 95       	ret

0000055c <ProcessConfigurationDescriptor>:
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	c4 50       	subi	r28, 0x04	; 4
     56e:	d2 40       	sbci	r29, 0x02	; 2
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	ae 01       	movw	r20, r28
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	4f 5f       	subi	r20, 0xFF	; 255
     57e:	5f 4f       	sbci	r21, 0xFF	; 255
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	cd 5f       	subi	r28, 0xFD	; 253
     582:	dd 4f       	sbci	r29, 0xFD	; 253
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	59 83       	std	Y+1, r21	; 0x01
     586:	48 83       	st	Y, r20
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	c3 50       	subi	r28, 0x03	; 3
     58a:	d2 40       	sbci	r29, 0x02	; 2
     58c:	20 e0       	ldi	r18, 0x00	; 0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	32 e0       	ldi	r19, 0x02	; 2
     590:	be 01       	movw	r22, r28

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7d 4f       	sbci	r23, 0xFD	; 253
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	40 d4       	rcall	.+2176   	; 0xe1a <USB_Host_GetDeviceConfigDescriptor>
     59a:	85 30       	cpi	r24, 0x05	; 5
     59c:	09 f4       	brne	.+2      	; 0x5a0 <ProcessConfigurationDescriptor+0x44>
     59e:	43 c0       	rjmp	.+134    	; 0x626 <ProcessConfigurationDescriptor+0xca>
     5a0:	86 30       	cpi	r24, 0x06	; 6
     5a2:	21 f0       	breq	.+8      	; 0x5ac <ProcessConfigurationDescriptor+0x50>
     5a4:	88 23       	and	r24, r24
     5a6:	21 f0       	breq	.+8      	; 0x5b0 <ProcessConfigurationDescriptor+0x54>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	40 c0       	rjmp	.+128    	; 0x62c <ProcessConfigurationDescriptor+0xd0>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	3e c0       	rjmp	.+124    	; 0x62c <ProcessConfigurationDescriptor+0xd0>
     5b0:	00 e0       	ldi	r16, 0x00	; 0
     5b2:	10 e0       	ldi	r17, 0x00	; 0
     5b4:	01 15       	cp	r16, r1
     5b6:	11 05       	cpc	r17, r1
     5b8:	91 f4       	brne	.+36     	; 0x5de <ProcessConfigurationDescriptor+0x82>
     5ba:	44 e9       	ldi	r20, 0x94	; 148

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	52 e0       	ldi	r21, 0x02	; 2
     5be:	be 01       	movw	r22, r28
     5c0:	6d 5f       	subi	r22, 0xFD	; 253
     5c2:	7d 4f       	sbci	r23, 0xFD	; 253
     5c4:	ce 01       	movw	r24, r28
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
     5c8:	9d 4f       	sbci	r25, 0xFD	; 253
     5ca:	81 d4       	rcall	.+2306   	; 0xece <USB_GetNextDescriptorComp>
     5cc:	81 11       	cpse	r24, r1
     5ce:	2d c0       	rjmp	.+90     	; 0x62a <ProcessConfigurationDescriptor+0xce>
     5d0:	cd 5f       	subi	r28, 0xFD	; 253
     5d2:	dd 4f       	sbci	r29, 0xFD	; 253
     5d4:	08 81       	ld	r16, Y
     5d6:	19 81       	ldd	r17, Y+1	; 0x01
     5d8:	c3 50       	subi	r28, 0x03	; 3
     5da:	d2 40       	sbci	r29, 0x02	; 2
     5dc:	eb cf       	rjmp	.-42     	; 0x5b4 <ProcessConfigurationDescriptor+0x58>
     5de:	42 ea       	ldi	r20, 0xA2	; 162
     5e0:	52 e0       	ldi	r21, 0x02	; 2
     5e2:	be 01       	movw	r22, r28
     5e4:	6d 5f       	subi	r22, 0xFD	; 253
     5e6:	7d 4f       	sbci	r23, 0xFD	; 253
     5e8:	ce 01       	movw	r24, r28
     5ea:	8f 5f       	subi	r24, 0xFF	; 255
     5ec:	9d 4f       	sbci	r25, 0xFD	; 253
     5ee:	6f d4       	rcall	.+2270   	; 0xece <USB_GetNextDescriptorComp>
     5f0:	81 11       	cpse	r24, r1
     5f2:	e3 cf       	rjmp	.-58     	; 0x5ba <ProcessConfigurationDescriptor+0x5e>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	cd 5f       	subi	r28, 0xFD	; 253
     5f6:	dd 4f       	sbci	r29, 0xFD	; 253
     5f8:	e8 80       	ld	r14, Y
     5fa:	f9 80       	ldd	r15, Y+1	; 0x01
     5fc:	c3 50       	subi	r28, 0x03	; 3
					  return HID_PARSE_InsufficientReportItems;
     5fe:	d2 40       	sbci	r29, 0x02	; 2
     600:	f7 01       	movw	r30, r14

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	42 81       	ldd	r20, Z+2	; 0x02
     604:	47 ff       	sbrs	r20, 7
     606:	d6 cf       	rjmp	.-84     	; 0x5b4 <ProcessConfigurationDescriptor+0x58>
     608:	e1 14       	cp	r14, r1
     60a:	f1 04       	cpc	r15, r1
     60c:	99 f2       	breq	.-90     	; 0x5b4 <ProcessConfigurationDescriptor+0x58>
     60e:	24 81       	ldd	r18, Z+4	; 0x04
     610:	35 81       	ldd	r19, Z+5	; 0x05
     612:	01 e0       	ldi	r16, 0x01	; 1
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	81 e8       	ldi	r24, 0x81	; 129
     618:	24 d2       	rcall	.+1096   	; 0xa62 <Pipe_ConfigurePipe>
     61a:	f7 01       	movw	r30, r14
     61c:	86 81       	ldd	r24, Z+6	; 0x06
     61e:	80 93 ad 00 	sts	0x00AD, r24
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	03 c0       	rjmp	.+6      	; 0x62c <ProcessConfigurationDescriptor+0xd0>
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	01 c0       	rjmp	.+2      	; 0x62c <ProcessConfigurationDescriptor+0xd0>
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	cc 5f       	subi	r28, 0xFC	; 252
     62e:	dd 4f       	sbci	r29, 0xFD	; 253
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	08 95       	ret

00000648 <USB_Host_ResetDevice>:
     648:	80 91 9e 00 	lds	r24, 0x009E
     64c:	81 70       	andi	r24, 0x01	; 1
     64e:	90 91 a0 00 	lds	r25, 0x00A0
     652:	9d 7f       	andi	r25, 0xFD	; 253
     654:	90 93 a0 00 	sts	0x00A0, r25
     658:	90 91 9e 00 	lds	r25, 0x009E
     65c:	92 60       	ori	r25, 0x02	; 2
     65e:	90 93 9e 00 	sts	0x009E, r25
     662:	90 91 9e 00 	lds	r25, 0x009E
     666:	91 fd       	sbrc	r25, 1
     668:	fc cf       	rjmp	.-8      	; 0x662 <USB_Host_ResetDevice+0x1a>
     66a:	90 91 9e 00 	lds	r25, 0x009E
     66e:	91 60       	ori	r25, 0x01	; 1
     670:	90 93 9e 00 	sts	0x009E, r25
     674:	10 92 1d 01 	sts	0x011D, r1
     678:	90 91 a0 00 	lds	r25, 0x00A0
     67c:	90 72       	andi	r25, 0x20	; 32
     67e:	20 91 a0 00 	lds	r18, 0x00A0
     682:	2f 7d       	andi	r18, 0xDF	; 223
     684:	20 93 a0 00 	sts	0x00A0, r18
					  ParserData->TotalReportItems++;
     688:	20 91 9f 00 	lds	r18, 0x009F
     68c:	2f 7d       	andi	r18, 0xDF	; 223
     68e:	20 93 9f 00 	sts	0x009F, r18

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	2a e0       	ldi	r18, 0x0A	; 10
     694:	30 91 9f 00 	lds	r19, 0x009F
     698:	35 ff       	sbrs	r19, 5
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <USB_Host_ResetDevice+0x6a>
     69c:	20 91 9f 00 	lds	r18, 0x009F
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	2f 7d       	andi	r18, 0xDF	; 223
     6a2:	20 93 9f 00 	sts	0x009F, r18
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a6:	20 91 9f 00 	lds	r18, 0x009F
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	2d 7f       	andi	r18, 0xFD	; 253
     6ac:	20 93 9f 00 	sts	0x009F, r18
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <USB_Host_ResetDevice+0x7a>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	ef ec       	ldi	r30, 0xCF	; 207
     6b4:	f7 e0       	ldi	r31, 0x07	; 7
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <USB_Host_ResetDevice+0x6e>
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <USB_Host_ResetDevice+0x74>
     6bc:	00 00       	nop

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	21 50       	subi	r18, 0x01	; 1
     6c0:	49 f7       	brne	.-46     	; 0x694 <USB_Host_ResetDevice+0x4c>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	99 23       	and	r25, r25
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <USB_Host_ResetDevice+0x88>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	90 91 a0 00 	lds	r25, 0x00A0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	90 62       	ori	r25, 0x20	; 32
     6cc:	90 93 a0 00 	sts	0x00A0, r25

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6d0:	81 11       	cpse	r24, r1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <USB_Host_ResetDevice+0x96>
     6d4:	80 91 9e 00 	lds	r24, 0x009E
}
     6d8:	8e 7f       	andi	r24, 0xFE	; 254
     6da:	80 93 9e 00 	sts	0x009E, r24
     6de:	80 91 a0 00 	lds	r24, 0x00A0
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	80 93 a0 00 	sts	0x00A0, r24
     6e8:	08 95       	ret

000006ea <USB_Host_WaitMS>:
     6ea:	20 91 9e 00 	lds	r18, 0x009E
     6ee:	21 70       	andi	r18, 0x01	; 1
     6f0:	90 91 a0 00 	lds	r25, 0x00A0
     6f4:	90 72       	andi	r25, 0x20	; 32
     6f6:	30 91 a0 00 	lds	r19, 0x00A0
     6fa:	3f 7d       	andi	r19, 0xDF	; 223
     6fc:	30 93 a0 00 	sts	0x00A0, r19
     700:	30 91 9f 00 	lds	r19, 0x009F
     704:	3f 7d       	andi	r19, 0xDF	; 223
     706:	30 93 9f 00 	sts	0x009F, r19
     70a:	30 91 9e 00 	lds	r19, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     70e:	31 60       	ori	r19, 0x01	; 1
     710:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     714:	88 23       	and	r24, r24
     716:	39 f1       	breq	.+78     	; 0x766 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     718:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     71c:	35 ff       	sbrs	r19, 5
     71e:	06 c0       	rjmp	.+12     	; 0x72c <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     720:	30 91 9f 00 	lds	r19, 0x009F
     724:	3f 7d       	andi	r19, 0xDF	; 223
     726:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     72a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     72c:	30 91 27 01 	lds	r19, 0x0127
     730:	31 30       	cpi	r19, 0x01	; 1
     732:	c1 f0       	breq	.+48     	; 0x764 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     734:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     738:	34 ff       	sbrs	r19, 4
     73a:	09 c0       	rjmp	.+18     	; 0x74e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     73c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     740:	80 91 a6 00 	lds	r24, 0x00A6
     744:	8f 7e       	andi	r24, 0xEF	; 239
     746:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     74a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     74c:	0c c0       	rjmp	.+24     	; 0x766 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     74e:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     752:	31 ff       	sbrs	r19, 1
     754:	df cf       	rjmp	.-66     	; 0x714 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     756:	80 91 a6 00 	lds	r24, 0x00A6
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     760:	83 e0       	ldi	r24, 0x03	; 3

			break;
     762:	01 c0       	rjmp	.+2      	; 0x766 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     764:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     766:	21 11       	cpse	r18, r1
     768:	05 c0       	rjmp	.+10     	; 0x774 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     76a:	20 91 9e 00 	lds	r18, 0x009E
     76e:	2e 7f       	andi	r18, 0xFE	; 254
     770:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     774:	99 23       	and	r25, r25
     776:	29 f0       	breq	.+10     	; 0x782 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     778:	90 91 a0 00 	lds	r25, 0x00A0
     77c:	90 62       	ori	r25, 0x20	; 32
     77e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     782:	08 95       	ret

00000784 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	28 97       	sbiw	r28, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     79c:	80 91 27 01 	lds	r24, 0x0127
     7a0:	85 30       	cpi	r24, 0x05	; 5
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <USB_Host_ProcessNextHostState+0x22>
     7a4:	9c c0       	rjmp	.+312    	; 0x8de <USB_Host_ProcessNextHostState+0x15a>
     7a6:	68 f4       	brcc	.+26     	; 0x7c2 <USB_Host_ProcessNextHostState+0x3e>
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	e1 f1       	breq	.+120    	; 0x824 <USB_Host_ProcessNextHostState+0xa0>
     7ac:	18 f4       	brcc	.+6      	; 0x7b4 <USB_Host_ProcessNextHostState+0x30>
     7ae:	88 23       	and	r24, r24
     7b0:	d9 f0       	breq	.+54     	; 0x7e8 <USB_Host_ProcessNextHostState+0x64>
     7b2:	ff c0       	rjmp	.+510    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	09 f4       	brne	.+2      	; 0x7ba <USB_Host_ProcessNextHostState+0x36>
     7b8:	3f c0       	rjmp	.+126    	; 0x838 <USB_Host_ProcessNextHostState+0xb4>
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <USB_Host_ProcessNextHostState+0x3c>
     7be:	67 c0       	rjmp	.+206    	; 0x88e <USB_Host_ProcessNextHostState+0x10a>
     7c0:	f8 c0       	rjmp	.+496    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     7c2:	87 30       	cpi	r24, 0x07	; 7
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <USB_Host_ProcessNextHostState+0x44>
     7c6:	a6 c0       	rjmp	.+332    	; 0x914 <USB_Host_ProcessNextHostState+0x190>
     7c8:	08 f4       	brcc	.+2      	; 0x7cc <USB_Host_ProcessNextHostState+0x48>
     7ca:	96 c0       	rjmp	.+300    	; 0x8f8 <USB_Host_ProcessNextHostState+0x174>
     7cc:	88 30       	cpi	r24, 0x08	; 8
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <USB_Host_ProcessNextHostState+0x4e>
     7d0:	bf c0       	rjmp	.+382    	; 0x950 <USB_Host_ProcessNextHostState+0x1cc>
     7d2:	89 30       	cpi	r24, 0x09	; 9
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <USB_Host_ProcessNextHostState+0x54>
     7d6:	ed c0       	rjmp	.+474    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7de:	8a e0       	ldi	r24, 0x0A	; 10
     7e0:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     7e4:	bb dd       	rcall	.-1162   	; 0x35c <EVENT_USB_Host_DeviceEnumerationComplete>
     7e6:	e5 c0       	rjmp	.+458    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
			break;
     7e8:	00 91 1b 01 	lds	r16, 0x011B
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7ec:	10 91 1c 01 	lds	r17, 0x011C
     7f0:	01 15       	cp	r16, r1
     7f2:	11 05       	cpc	r17, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <USB_Host_ProcessNextHostState+0x74>
     7f6:	dd c0       	rjmp	.+442    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7fa:	77 df       	rcall	.-274    	; 0x6ea <USB_Host_WaitMS>
     7fc:	88 23       	and	r24, r24
     7fe:	31 f0       	breq	.+12     	; 0x80c <USB_Host_ProcessNextHostState+0x88>
     800:	90 91 1a 01 	lds	r25, 0x011A
				{
					USB_HostState = PostWaitState;
     804:	90 93 27 01 	sts	0x0127, r25
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	c5 c0       	rjmp	.+394    	; 0x996 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     80c:	01 50       	subi	r16, 0x01	; 1
					break;
     80e:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     810:	10 93 1c 01 	sts	0x011C, r17
     814:	00 93 1b 01 	sts	0x011B, r16
     818:	01 2b       	or	r16, r17
     81a:	09 f0       	breq	.+2      	; 0x81e <USB_Host_ProcessNextHostState+0x9a>
     81c:	ca c0       	rjmp	.+404    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     81e:	80 91 1a 01 	lds	r24, 0x011A
				  USB_HostState = PostWaitState;
     822:	07 c0       	rjmp	.+14     	; 0x832 <USB_Host_ProcessNextHostState+0xae>
     824:	88 ee       	ldi	r24, 0xE8	; 232
     826:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     828:	90 93 1c 01 	sts	0x011C, r25
     82c:	80 93 1b 01 	sts	0x011B, r24
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	80 93 27 01 	sts	0x0127, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     836:	bd c0       	rjmp	.+378    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     838:	80 91 1b 01 	lds	r24, 0x011B
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     83c:	90 91 1c 01 	lds	r25, 0x011C
     840:	9c 01       	movw	r18, r24
     842:	21 50       	subi	r18, 0x01	; 1
     844:	31 09       	sbc	r19, r1
     846:	30 93 1c 01 	sts	0x011C, r19
     84a:	20 93 1b 01 	sts	0x011B, r18
     84e:	89 2b       	or	r24, r25
     850:	39 f0       	breq	.+14     	; 0x860 <USB_Host_ProcessNextHostState+0xdc>
     852:	8f ec       	ldi	r24, 0xCF	; 207
     854:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <USB_Host_ProcessNextHostState+0xd2>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <USB_Host_ProcessNextHostState+0xd8>
     85c:	00 00       	nop
     85e:	a9 c0       	rjmp	.+338    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     860:	77 98       	cbi	0x0e, 7	; 14
     862:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     866:	80 61       	ori	r24, 0x10	; 16
     868:	80 93 d8 00 	sts	0x00D8, r24
     86c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     870:	8b 7f       	andi	r24, 0xFB	; 251
     872:	80 93 dd 00 	sts	0x00DD, r24
     876:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     87a:	80 61       	ori	r24, 0x10	; 16
     87c:	80 93 d7 00 	sts	0x00D7, r24
     880:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     884:	82 60       	ori	r24, 0x02	; 2
     886:	80 93 dd 00 	sts	0x00DD, r24
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	d2 cf       	rjmp	.-92     	; 0x832 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     88e:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     892:	80 ff       	sbrs	r24, 0
     894:	8e c0       	rjmp	.+284    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     896:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     89a:	8e 7f       	andi	r24, 0xFE	; 254
     89c:	80 93 9f 00 	sts	0x009F, r24
     8a0:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8a4:	8d 7f       	andi	r24, 0xFD	; 253
     8a6:	80 93 9f 00 	sts	0x009F, r24
     8aa:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     8ae:	8d 7f       	andi	r24, 0xFD	; 253
     8b0:	80 93 df 00 	sts	0x00DF, r24
     8b4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     8b8:	82 60       	ori	r24, 0x02	; 2
     8ba:	80 93 de 00 	sts	0x00DE, r24
     8be:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8c2:	81 60       	ori	r24, 0x01	; 1
     8c4:	80 93 9e 00 	sts	0x009E, r24
     8c8:	34 d1       	rcall	.+616    	; 0xb32 <Pipe_ClearPipes>
     8ca:	10 92 27 01 	sts	0x0127, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8ce:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 1c 01 	sts	0x011C, r25
     8d6:	80 93 1b 01 	sts	0x011B, r24
     8da:	85 e0       	ldi	r24, 0x05	; 5
     8dc:	0a c0       	rjmp	.+20     	; 0x8f2 <USB_Host_ProcessNextHostState+0x16e>
     8de:	b4 de       	rcall	.-664    	; 0x648 <USB_Host_ResetDevice>
     8e0:	10 92 27 01 	sts	0x0127, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8e4:	88 ec       	ldi	r24, 0xC8	; 200
     8e6:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8e8:	90 93 1c 01 	sts	0x011C, r25
     8ec:	80 93 1b 01 	sts	0x011B, r24
     8f0:	86 e0       	ldi	r24, 0x06	; 6
     8f2:	80 93 1a 01 	sts	0x011A, r24
     8f6:	5d c0       	rjmp	.+186    	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     8f8:	01 e0       	ldi	r16, 0x01	; 1
     8fa:	20 e4       	ldi	r18, 0x40	; 64
     8fc:	30 e0       	ldi	r19, 0x00	; 0
			break;
     8fe:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	ae d0       	rcall	.+348    	; 0xa62 <Pipe_ConfigurePipe>
     906:	81 11       	cpse	r24, r1
     908:	03 c0       	rjmp	.+6      	; 0x910 <USB_Host_ProcessNextHostState+0x18c>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	43 c0       	rjmp	.+134    	; 0x996 <USB_Host_ProcessNextHostState+0x212>
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	8f cf       	rjmp	.-226    	; 0x832 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     914:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     916:	e9 e0       	ldi	r30, 0x09	; 9
     918:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     91a:	af e1       	ldi	r26, 0x1F	; 31
     91c:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     91e:	01 90       	ld	r0, Z+
     920:	0d 92       	st	X+, r0
     922:	8a 95       	dec	r24
     924:	e1 f7       	brne	.-8      	; 0x91e <USB_Host_ProcessNextHostState+0x19a>
     926:	10 92 a7 00 	sts	0x00A7, r1
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	29 d3       	rcall	.+1618   	; 0xf82 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     930:	81 11       	cpse	r24, r1
     932:	30 c0       	rjmp	.+96     	; 0x994 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     934:	88 85       	ldd	r24, Y+8	; 0x08
     936:	80 93 00 01 	sts	0x0100, r24
     93a:	86 de       	rcall	.-756    	; 0x648 <USB_Host_ResetDevice>
     93c:	10 92 27 01 	sts	0x0127, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     940:	88 ec       	ldi	r24, 0xC8	; 200
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 1c 01 	sts	0x011C, r25

			USB_Host_ResetDevice();
     948:	80 93 1b 01 	sts	0x011B, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     94c:	88 e0       	ldi	r24, 0x08	; 8
     94e:	d1 cf       	rjmp	.-94     	; 0x8f2 <USB_Host_ProcessNextHostState+0x16e>
     950:	20 91 00 01 	lds	r18, 0x0100
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	01 e0       	ldi	r16, 0x01	; 1
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     95e:	81 d0       	rcall	.+258    	; 0xa62 <Pipe_ConfigurePipe>
     960:	88 23       	and	r24, r24
     962:	99 f2       	breq	.-90     	; 0x90a <USB_Host_ProcessNextHostState+0x186>
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	e1 e1       	ldi	r30, 0x11	; 17
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	af e1       	ldi	r26, 0x1F	; 31
     96c:	b1 e0       	ldi	r27, 0x01	; 1
     96e:	01 90       	ld	r0, Z+
     970:	0d 92       	st	X+, r0
     972:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     974:	e1 f7       	brne	.-8      	; 0x96e <USB_Host_ProcessNextHostState+0x1ea>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	03 d3       	rcall	.+1542   	; 0xf82 <USB_Host_SendControlRequest>
     97c:	81 11       	cpse	r24, r1
     97e:	0a c0       	rjmp	.+20     	; 0x994 <USB_Host_ProcessNextHostState+0x210>
     980:	10 92 27 01 	sts	0x0127, r1
     984:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	90 93 1c 01 	sts	0x011C, r25
     98c:	80 93 1b 01 	sts	0x011B, r24
     990:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     992:	af cf       	rjmp	.-162    	; 0x8f2 <USB_Host_ProcessNextHostState+0x16e>
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	20 91 27 01 	lds	r18, 0x0127
     99a:	21 30       	cpi	r18, 0x01	; 1
     99c:	51 f0       	breq	.+20     	; 0x9b2 <USB_Host_ProcessNextHostState+0x22e>
     99e:	68 2f       	mov	r22, r24
     9a0:	89 2f       	mov	r24, r25
     9a2:	3e dd       	rcall	.-1412   	; 0x420 <EVENT_USB_Host_DeviceEnumerationFailed>
     9a4:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9a8:	81 60       	ori	r24, 0x01	; 1
     9aa:	80 93 dd 00 	sts	0x00DD, r24
     9ae:	d1 dc       	rcall	.-1630   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9b0:	1a d1       	rcall	.+564    	; 0xbe6 <USB_ResetInterface>
     9b2:	28 96       	adiw	r28, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16

		USB_ResetInterface();
     9c6:	08 95       	ret

000009c8 <Pipe_Read_Stream_LE>:
     9c8:	cf 92       	push	r12
	}
}
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	7c 01       	movw	r14, r24
     9da:	8b 01       	movw	r16, r22
     9dc:	ea 01       	movw	r28, r20
     9de:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9e2:	8f 7c       	andi	r24, 0xCF	; 207
     9e4:	80 61       	ori	r24, 0x10	; 16
     9e6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9ea:	b7 d0       	rcall	.+366    	; 0xb5a <Pipe_WaitUntilReady>
     9ec:	81 11       	cpse	r24, r1
     9ee:	30 c0       	rjmp	.+96     	; 0xa50 <Pipe_Read_Stream_LE+0x88>
     9f0:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9f2:	31 f0       	breq	.+12     	; 0xa00 <Pipe_Read_Stream_LE+0x38>
     9f4:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     9f6:	99 81       	ldd	r25, Y+1	; 0x01
     9f8:	08 1b       	sub	r16, r24
     9fa:	19 0b       	sbc	r17, r25
     9fc:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9fe:	f9 1e       	adc	r15, r25
     a00:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a02:	d1 2c       	mov	r13, r1
     a04:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a06:	11 05       	cpc	r17, r1
     a08:	11 f1       	breq	.+68     	; 0xa4e <Pipe_Read_Stream_LE+0x86>
     a0a:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a0e:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a10:	13 c0       	rjmp	.+38     	; 0xa38 <Pipe_Read_Stream_LE+0x70>
     a12:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a16:	8e 77       	andi	r24, 0x7E	; 126
     a18:	80 93 a6 00 	sts	0x00A6, r24
     a1c:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     a1e:	41 f0       	breq	.+16     	; 0xa30 <Pipe_Read_Stream_LE+0x68>
     a20:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     a22:	99 81       	ldd	r25, Y+1	; 0x01
     a24:	8c 0d       	add	r24, r12
     a26:	9d 1d       	adc	r25, r13
     a28:	99 83       	std	Y+1, r25	; 0x01
     a2a:	88 83       	st	Y, r24
     a2c:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     a2e:	10 c0       	rjmp	.+32     	; 0xa50 <Pipe_Read_Stream_LE+0x88>
     a30:	94 d0       	rcall	.+296    	; 0xb5a <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a32:	88 23       	and	r24, r24
     a34:	39 f3       	breq	.-50     	; 0xa04 <Pipe_Read_Stream_LE+0x3c>
     a36:	0c c0       	rjmp	.+24     	; 0xa50 <Pipe_Read_Stream_LE+0x88>
     a38:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     a3c:	f7 01       	movw	r30, r14
     a3e:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a40:	7f 01       	movw	r14, r30
     a42:	01 50       	subi	r16, 0x01	; 1
     a44:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a46:	ff ef       	ldi	r31, 0xFF	; 255
     a48:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     a4a:	df 0a       	sbc	r13, r31
     a4c:	db cf       	rjmp	.-74     	; 0xa04 <Pipe_Read_Stream_LE+0x3c>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     a52:	cf 91       	pop	r28
}
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <Pipe_ConfigurePipe>:
     a62:	0f 93       	push	r16
     a64:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a66:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a68:	87 ff       	sbrs	r24, 7
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <Pipe_ConfigurePipe+0xe>
     a6c:	80 e1       	ldi	r24, 0x10	; 16
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <Pipe_ConfigurePipe+0x10>
     a70:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     a72:	e7 30       	cpi	r30, 0x07	; 7
     a74:	10 f0       	brcs	.+4      	; 0xa7a <Pipe_ConfigurePipe+0x18>
	  return false;
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	5a c0       	rjmp	.+180    	; 0xb2e <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     a7a:	61 11       	cpse	r22, r1
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     a7e:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a80:	90 e4       	ldi	r25, 0x40	; 64
     a82:	69 9f       	mul	r22, r25
     a84:	b0 01       	movw	r22, r0
     a86:	11 24       	eor	r1, r1
     a88:	4f 70       	andi	r20, 0x0F	; 15
     a8a:	46 2b       	or	r20, r22
     a8c:	48 2b       	or	r20, r24
     a8e:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a90:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a94:	5e 13       	cpse	r21, r30
     a96:	19 c0       	rjmp	.+50     	; 0xaca <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     a98:	02 30       	cpi	r16, 0x02	; 2
     a9a:	10 f0       	brcs	.+4      	; 0xaa0 <Pipe_ConfigurePipe+0x3e>
     a9c:	76 e0       	ldi	r23, 0x06	; 6
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <Pipe_ConfigurePipe+0x40>
     aa0:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     aa2:	88 e0       	ldi	r24, 0x08	; 8
     aa4:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     aa6:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     aa8:	82 17       	cp	r24, r18
     aaa:	93 07       	cpc	r25, r19
     aac:	40 f0       	brcs	.+16     	; 0xabe <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     aae:	86 2f       	mov	r24, r22
     ab0:	82 95       	swap	r24
     ab2:	80 7f       	andi	r24, 0xF0	; 240
     ab4:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ab6:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     ab8:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	0e c0       	rjmp	.+28     	; 0xada <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     abe:	65 30       	cpi	r22, 0x05	; 5
     ac0:	b1 f3       	breq	.-20     	; 0xaae <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	ef cf       	rjmp	.-34     	; 0xaa8 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     aca:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ace:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ad2:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     ad6:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ada:	81 fd       	sbrc	r24, 1
     adc:	07 c0       	rjmp	.+14     	; 0xaec <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     ade:	5f 5f       	subi	r21, 0xFF	; 255
     ae0:	57 30       	cpi	r21, 0x07	; 7
     ae2:	b1 f6       	brne	.-84     	; 0xa90 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ae4:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	21 c0       	rjmp	.+66     	; 0xb2e <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     aec:	90 91 a9 00 	lds	r25, 0x00A9
     af0:	9e 7f       	andi	r25, 0xFE	; 254
     af2:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     af6:	90 91 ab 00 	lds	r25, 0x00AB
     afa:	9d 7f       	andi	r25, 0xFD	; 253
     afc:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b00:	90 91 a9 00 	lds	r25, 0x00A9
     b04:	91 60       	ori	r25, 0x01	; 1
     b06:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b0a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     b0e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     b12:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     b16:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b1a:	80 91 a9 00 	lds	r24, 0x00A9
     b1e:	80 62       	ori	r24, 0x20	; 32
     b20:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b24:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     b28:	87 fd       	sbrc	r24, 7
     b2a:	d9 cf       	rjmp	.-78     	; 0xade <Pipe_ConfigurePipe+0x7c>
     b2c:	a4 cf       	rjmp	.-184    	; 0xa76 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b32:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b36:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b38:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b3c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b40:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b44:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b48:	90 91 a9 00 	lds	r25, 0x00A9
     b4c:	9e 7f       	andi	r25, 0xFE	; 254
     b4e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	87 30       	cpi	r24, 0x07	; 7
     b56:	81 f7       	brne	.-32     	; 0xb38 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b58:	08 95       	ret

00000b5a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b5a:	80 91 a2 00 	lds	r24, 0x00A2
     b5e:	90 91 a3 00 	lds	r25, 0x00A3
     b62:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b64:	20 91 aa 00 	lds	r18, 0x00AA
     b68:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b6a:	20 31       	cpi	r18, 0x10	; 16
     b6c:	29 f4       	brne	.+10     	; 0xb78 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b6e:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b72:	20 ff       	sbrs	r18, 0
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <Pipe_WaitUntilReady+0x26>
     b76:	17 c0       	rjmp	.+46     	; 0xba6 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b78:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b7c:	22 fd       	sbrc	r18, 2
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b80:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b84:	21 fd       	sbrc	r18, 1
     b86:	11 c0       	rjmp	.+34     	; 0xbaa <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b88:	20 91 27 01 	lds	r18, 0x0127
     b8c:	21 30       	cpi	r18, 0x01	; 1
     b8e:	79 f0       	breq	.+30     	; 0xbae <Pipe_WaitUntilReady+0x54>
     b90:	20 91 a2 00 	lds	r18, 0x00A2
     b94:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b98:	28 17       	cp	r18, r24
     b9a:	39 07       	cpc	r19, r25
     b9c:	19 f3       	breq	.-58     	; 0xb64 <Pipe_WaitUntilReady+0xa>
     b9e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ba0:	41 f0       	breq	.+16     	; 0xbb2 <Pipe_WaitUntilReady+0x58>
     ba2:	c9 01       	movw	r24, r18
     ba4:	df cf       	rjmp	.-66     	; 0xb64 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     bb2:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     bb4:	08 95       	ret

00000bb6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bb6:	75 d0       	rcall	.+234    	; 0xca2 <USB_INT_DisableAllInterrupts>
     bb8:	7c d0       	rcall	.+248    	; 0xcb2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bba:	e0 ee       	ldi	r30, 0xE0	; 224
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bbe:	80 81       	ld	r24, Z
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	80 83       	st	Z, r24
     bc4:	e8 ed       	ldi	r30, 0xD8	; 216
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bc8:	80 81       	ld	r24, Z
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	80 83       	st	Z, r24
     bce:	19 bc       	out	0x29, r1	; 41
     bd0:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd2:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     bd4:	8c 91       	ld	r24, X
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
     bda:	80 81       	ld	r24, Z
     bdc:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bde:	80 83       	st	Z, r24
     be0:	10 92 1e 01 	sts	0x011E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be4:	08 95       	ret

00000be6 <USB_ResetInterface>:
     be6:	5d d0       	rcall	.+186    	; 0xca2 <USB_INT_DisableAllInterrupts>
     be8:	64 d0       	rcall	.+200    	; 0xcb2 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bea:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bee:	8f 77       	andi	r24, 0x7F	; 127
     bf0:	80 93 d8 00 	sts	0x00D8, r24
     bf4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	80 93 d8 00 	sts	0x00D8, r24
     bfe:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c02:	8f 7d       	andi	r24, 0xDF	; 223
     c04:	80 93 d8 00 	sts	0x00D8, r24
     c08:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	80 93 d7 00 	sts	0x00D7, r24
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c16:	8e e0       	ldi	r24, 0x0E	; 14
     c18:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c1a:	09 b4       	in	r0, 0x29	; 41
     c1c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <USB_ResetInterface+0x34>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 27 01 	sts	0x0127, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c26:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ConfigurationNumber = 0;
     c2a:	80 e4       	ldi	r24, 0x40	; 64
     c2c:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c30:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	80 93 d8 00 	sts	0x00D8, r24
     c3a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	80 93 dd 00 	sts	0x00DD, r24
     c44:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	80 93 dd 00 	sts	0x00DD, r24
     c4e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     c52:	8f 7e       	andi	r24, 0xEF	; 239
     c54:	80 93 d7 00 	sts	0x00D7, r24
     c58:	6f 9a       	sbi	0x0d, 7	; 13
     c5a:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c5c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	80 93 de 00 	sts	0x00DE, r24
     c66:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c6a:	84 60       	ori	r24, 0x04	; 4
     c6c:	80 93 de 00 	sts	0x00DE, r24
     c70:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	80 93 e0 00 	sts	0x00E0, r24
     c7a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c7e:	80 61       	ori	r24, 0x10	; 16
     c80:	80 93 d8 00 	sts	0x00D8, r24
     c84:	08 95       	ret

00000c86 <USB_Init>:
     c86:	e8 ed       	ldi	r30, 0xD8	; 216
     c88:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c8a:	80 81       	ld	r24, Z
     c8c:	8f 7e       	andi	r24, 0xEF	; 239
     c8e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c90:	e7 ed       	ldi	r30, 0xD7	; 215
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
     ca0:	a2 cf       	rjmp	.-188    	; 0xbe6 <USB_ResetInterface>

00000ca2 <USB_INT_DisableAllInterrupts>:
     ca2:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8c 7f       	andi	r24, 0xFC	; 252
     caa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cac:	10 92 a0 00 	sts	0x00A0, r1
     cb0:	08 95       	ret

00000cb2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cb2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cb6:	10 92 9f 00 	sts	0x009F, r1
     cba:	08 95       	ret

00000cbc <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	0b b6       	in	r0, 0x3b	; 59
     cc8:	0f 92       	push	r0
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ce2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ce6:	85 ff       	sbrs	r24, 5
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cea:	80 91 a0 00 	lds	r24, 0x00A0
     cee:	85 ff       	sbrs	r24, 5
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cf2:	80 91 9f 00 	lds	r24, 0x009F
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cfc:	1a d1       	rcall	.+564    	; 0xf32 <USB_Event_Stub>
     cfe:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d02:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d04:	15 c0       	rjmp	.+42     	; 0xd30 <__vector_10+0x74>
     d06:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d0a:	81 ff       	sbrs	r24, 1
     d0c:	11 c0       	rjmp	.+34     	; 0xd30 <__vector_10+0x74>
     d0e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	80 93 9f 00 	sts	0x009F, r24
     d18:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	80 93 9f 00 	sts	0x009F, r24
     d22:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	80 93 a0 00 	sts	0x00A0, r24
     d2c:	12 db       	rcall	.-2524   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d2e:	5b df       	rcall	.-330    	; 0xbe6 <USB_ResetInterface>
     d30:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d34:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d36:	15 c0       	rjmp	.+42     	; 0xd62 <__vector_10+0xa6>
     d38:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d3c:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d3e:	11 c0       	rjmp	.+34     	; 0xd62 <__vector_10+0xa6>
     d40:	80 91 df 00 	lds	r24, 0x00DF
     d44:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d46:	80 93 df 00 	sts	0x00DF, r24
     d4a:	77 98       	cbi	0x0e, 7	; 14
     d4c:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d50:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d52:	80 93 dd 00 	sts	0x00DD, r24
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	4d db       	rcall	.-2406   	; 0x3f4 <EVENT_USB_Host_HostError>
     d5a:	fb da       	rcall	.-2570   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 27 01 	sts	0x0127, r24
		EVENT_USB_Host_DeviceUnattached();
     d62:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d66:	80 ff       	sbrs	r24, 0
     d68:	17 c0       	rjmp	.+46     	; 0xd98 <__vector_10+0xdc>
     d6a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d6e:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d70:	13 c0       	rjmp	.+38     	; 0xd98 <__vector_10+0xdc>
     d72:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d7c:	80 91 de 00 	lds	r24, 0x00DE
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d86:	e0 da       	rcall	.-2624   	; 0x348 <EVENT_USB_Host_DeviceAttached>
     d88:	80 91 a0 00 	lds	r24, 0x00A0
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d92:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d94:	80 93 27 01 	sts	0x0127, r24
     d98:	80 91 df 00 	lds	r24, 0x00DF
     d9c:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <__vector_10+0x100>
     da0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     da4:	82 ff       	sbrs	r24, 2
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     da8:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	80 93 df 00 	sts	0x00DF, r24
     db2:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	34 db       	rcall	.-2456   	; 0x420 <EVENT_USB_Host_DeviceEnumerationFailed>
     db8:	cc da       	rcall	.-2664   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
     dba:	15 df       	rcall	.-470    	; 0xbe6 <USB_ResetInterface>
     dbc:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23

		USB_ResetInterface();
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0b be       	out	0x3b, r0	; 59
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <USB_GetNextDescriptor>:
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	fc 01       	movw	r30, r24
     de8:	eb 01       	movw	r28, r22
     dea:	a8 81       	ld	r26, Y
     dec:	b9 81       	ldd	r27, Y+1	; 0x01
     dee:	8c 91       	ld	r24, X
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     df4:	31 81       	ldd	r19, Z+1	; 0x01
     df6:	82 17       	cp	r24, r18
     df8:	93 07       	cpc	r25, r19
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <USB_GetNextDescriptor+0x1c>
     dfc:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     dfe:	a2 0f       	add	r26, r18
     e00:	b3 1f       	adc	r27, r19
     e02:	eb 01       	movw	r28, r22
     e04:	b9 83       	std	Y+1, r27	; 0x01
     e06:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	82 1b       	sub	r24, r18
     e0e:	93 0b       	sbc	r25, r19
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
			}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	29 97       	sbiw	r28, 0x09	; 9
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	7b 01       	movw	r14, r22
     e3c:	8a 01       	movw	r16, r20
     e3e:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e40:	90 e8       	ldi	r25, 0x80	; 128
     e42:	90 93 1f 01 	sts	0x011F, r25
     e46:	96 e0       	ldi	r25, 0x06	; 6
     e48:	90 93 20 01 	sts	0x0120, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e4c:	e8 2f       	mov	r30, r24
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e54:	f0 93 22 01 	sts	0x0122, r31
     e58:	e0 93 21 01 	sts	0x0121, r30
     e5c:	10 92 24 01 	sts	0x0124, r1
     e60:	10 92 23 01 	sts	0x0123, r1
     e64:	89 e0       	ldi	r24, 0x09	; 9
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	90 93 26 01 	sts	0x0126, r25
     e6c:	80 93 25 01 	sts	0x0125, r24
     e70:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	84 d0       	rcall	.+264    	; 0xf82 <USB_Host_SendControlRequest>
     e7a:	81 11       	cpse	r24, r1
     e7c:	19 c0       	rjmp	.+50     	; 0xeb0 <USB_Host_GetDeviceConfigDescriptor+0x96>
     e7e:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e80:	fc 81       	ldd	r31, Y+4	; 0x04
     e82:	d7 01       	movw	r26, r14
     e84:	ed 93       	st	X+, r30
     e86:	fc 93       	st	X, r31
     e88:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     e8a:	df 06       	cpc	r13, r31
     e8c:	70 f0       	brcs	.+28     	; 0xeaa <USB_Host_GetDeviceConfigDescriptor+0x90>
     e8e:	f0 93 26 01 	sts	0x0126, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e92:	e0 93 25 01 	sts	0x0125, r30
     e96:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e98:	74 d0       	rcall	.+232    	; 0xf82 <USB_Host_SendControlRequest>
     e9a:	81 11       	cpse	r24, r1
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <USB_Host_GetDeviceConfigDescriptor+0x96>
     e9e:	f8 01       	movw	r30, r16
     ea0:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	21 f0       	breq	.+8      	; 0xeae <USB_Host_GetDeviceConfigDescriptor+0x94>
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     eaa:	85 e0       	ldi	r24, 0x05	; 5
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     eb2:	0f b6       	in	r0, 0x3f	; 63
}
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	08 95       	ret

00000ece <USB_GetNextDescriptorComp>:
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	8c 01       	movw	r16, r24
     ee4:	eb 01       	movw	r28, r22
     ee6:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ee8:	f8 01       	movw	r30, r16
     eea:	e0 80       	ld	r14, Z
     eec:	f1 80       	ldd	r15, Z+1	; 0x01
     eee:	e1 14       	cp	r14, r1
     ef0:	f1 04       	cpc	r15, r1
     ef2:	99 f0       	breq	.+38     	; 0xf1a <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ef4:	a8 80       	ld	r10, Y
     ef6:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     ef8:	be 01       	movw	r22, r28
     efa:	c8 01       	movw	r24, r16
     efc:	72 df       	rcall	.-284    	; 0xde2 <USB_GetNextDescriptor>
     efe:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f00:	99 81       	ldd	r25, Y+1	; 0x01
     f02:	f6 01       	movw	r30, r12
     f04:	09 95       	icall
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	79 f3       	breq	.-34     	; 0xee8 <USB_GetNextDescriptorComp+0x1a>
     f0a:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f0c:	39 f4       	brne	.+14     	; 0xf1c <USB_GetNextDescriptorComp+0x4e>
     f0e:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     f10:	a8 82       	st	Y, r10
     f12:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     f14:	f1 82       	std	Z+1, r15	; 0x01
     f16:	e0 82       	st	Z, r14
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <USB_GetNextDescriptorComp+0x4e>
     f1a:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f1c:	df 91       	pop	r29
}
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	08 95       	ret

00000f32 <USB_Event_Stub>:
     f32:	08 95       	ret

00000f34 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f3c:	c9 ee       	ldi	r28, 0xE9	; 233
     f3e:	d3 e0       	ldi	r29, 0x03	; 3
     f40:	11 11       	cpse	r17, r1
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f44:	80 91 a6 00 	lds	r24, 0x00A6
     f48:	83 fd       	sbrc	r24, 3
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	cd db       	rcall	.-2150   	; 0x6ea <USB_Host_WaitMS>
     f50:	81 11       	cpse	r24, r1
     f52:	13 c0       	rjmp	.+38     	; 0xf7a <USB_Host_WaitForIOS+0x46>
     f54:	21 97       	sbiw	r28, 0x01	; 1
     f56:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f58:	99 f7       	brne	.-26     	; 0xf40 <USB_Host_WaitForIOS+0xc>
     f5a:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <USB_Host_WaitForIOS+0x46>
     f5e:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f60:	29 f4       	brne	.+10     	; 0xf6c <USB_Host_WaitForIOS+0x38>
     f62:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f66:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f68:	f1 cf       	rjmp	.-30     	; 0xf4c <USB_Host_WaitForIOS+0x18>
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <USB_Host_WaitForIOS+0x44>
     f6c:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f6e:	71 f7       	brne	.-36     	; 0xf4c <USB_Host_WaitForIOS+0x18>
     f70:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f74:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f76:	ea cf       	rjmp	.-44     	; 0xf4c <USB_Host_WaitForIOS+0x18>
     f78:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f7a:	df 91       	pop	r29
}
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	08 95       	ret

00000f82 <USB_Host_SendControlRequest>:
     f82:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f8e:	f0 90 9e 00 	lds	r15, 0x009E
     f92:	8f 2d       	mov	r24, r15
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f98:	c0 91 25 01 	lds	r28, 0x0125
     f9c:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fa0:	80 91 9e 00 	lds	r24, 0x009E
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	9e db       	rcall	.-2244   	; 0x6ea <USB_Host_WaitMS>
     fae:	81 11       	cpse	r24, r1
     fb0:	cc c0       	rjmp	.+408    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
     fb2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fb6:	8f 7c       	andi	r24, 0xCF	; 207
     fb8:	80 93 aa 00 	sts	0x00AA, r24
     fbc:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fc0:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	80 93 a6 00 	sts	0x00A6, r24
     fca:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fce:	8f 7b       	andi	r24, 0xBF	; 191
     fd0:	80 93 a9 00 	sts	0x00A9, r24
     fd4:	ef e1       	ldi	r30, 0x1F	; 31
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     fda:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fde:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fe0:	e7 32       	cpi	r30, 0x27	; 39
     fe2:	f8 07       	cpc	r31, r24
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <USB_Host_SendControlRequest+0x56>
     fe6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fea:	87 77       	andi	r24, 0x77	; 119
     fec:	80 93 a6 00 	sts	0x00A6, r24
     ff0:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     ff2:	a0 df       	rcall	.-192    	; 0xf34 <USB_Host_WaitForIOS>
     ff4:	81 11       	cpse	r24, r1
     ff6:	a9 c0       	rjmp	.+338    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
     ff8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	80 93 a9 00 	sts	0x00A9, r24
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	72 db       	rcall	.-2332   	; 0x6ea <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1006:	81 11       	cpse	r24, r1
    1008:	a0 c0       	rjmp	.+320    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
    100a:	80 91 1f 01 	lds	r24, 0x011F
    100e:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1010:	4e c0       	rjmp	.+156    	; 0x10ae <USB_Host_SendControlRequest+0x12c>
    1012:	80 91 aa 00 	lds	r24, 0x00AA
    1016:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1018:	80 61       	ori	r24, 0x10	; 16
    101a:	80 93 aa 00 	sts	0x00AA, r24
    101e:	01 15       	cp	r16, r1
    1020:	11 05       	cpc	r17, r1
    1022:	09 f0       	breq	.+2      	; 0x1026 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1024:	3a c0       	rjmp	.+116    	; 0x109a <USB_Host_SendControlRequest+0x118>
    1026:	80 91 aa 00 	lds	r24, 0x00AA
    102a:	8f 7c       	andi	r24, 0xCF	; 207
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	80 93 aa 00 	sts	0x00AA, r24
    1032:	80 91 a9 00 	lds	r24, 0x00A9
    1036:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1038:	80 93 a9 00 	sts	0x00A9, r24
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	7a df       	rcall	.-268    	; 0xf34 <USB_Host_WaitForIOS>
    1040:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1042:	83 c0       	rjmp	.+262    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
    1044:	80 91 a6 00 	lds	r24, 0x00A6
    1048:	8b 77       	andi	r24, 0x7B	; 123
    104a:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	71 df       	rcall	.-286    	; 0xf34 <USB_Host_WaitForIOS>
    1052:	7b c0       	rjmp	.+246    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
    1054:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1058:	8f 7b       	andi	r24, 0xBF	; 191
    105a:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	69 df       	rcall	.-302    	; 0xf34 <USB_Host_WaitForIOS>
    1062:	81 11       	cpse	r24, r1
    1064:	72 c0       	rjmp	.+228    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
    1066:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    106a:	90 91 f7 00 	lds	r25, 0x00F7
    106e:	89 2b       	or	r24, r25
    1070:	11 f4       	brne	.+4      	; 0x1076 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1072:	c0 e0       	ldi	r28, 0x00	; 0
    1074:	d0 e0       	ldi	r29, 0x00	; 0
    1076:	f8 01       	movw	r30, r16
    1078:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    107a:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    107e:	90 91 f7 00 	lds	r25, 0x00F7
    1082:	89 2b       	or	r24, r25
    1084:	69 f4       	brne	.+26     	; 0x10a0 <USB_Host_SendControlRequest+0x11e>
    1086:	80 91 a9 00 	lds	r24, 0x00A9
    108a:	80 64       	ori	r24, 0x40	; 64
    108c:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1090:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1094:	8e 77       	andi	r24, 0x7E	; 126
    1096:	80 93 a6 00 	sts	0x00A6, r24
    109a:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    109c:	d9 f6       	brne	.-74     	; 0x1054 <USB_Host_SendControlRequest+0xd2>
    109e:	c3 cf       	rjmp	.-122    	; 0x1026 <USB_Host_SendControlRequest+0xa4>
    10a0:	20 97       	sbiw	r28, 0x00	; 0
    10a2:	89 f3       	breq	.-30     	; 0x1086 <USB_Host_SendControlRequest+0x104>
    10a4:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10a8:	81 93       	st	Z+, r24
    10aa:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10ac:	e5 cf       	rjmp	.-54     	; 0x1078 <USB_Host_SendControlRequest+0xf6>
    10ae:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10b0:	11 05       	cpc	r17, r1
    10b2:	b1 f1       	breq	.+108    	; 0x1120 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    10b4:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    10b8:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10ba:	80 62       	ori	r24, 0x20	; 32
    10bc:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10c0:	80 91 a9 00 	lds	r24, 0x00A9
    10c4:	8f 7b       	andi	r24, 0xBF	; 191
    10c6:	80 93 a9 00 	sts	0x00A9, r24
    10ca:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10cc:	20 97       	sbiw	r28, 0x00	; 0
    10ce:	01 f1       	breq	.+64     	; 0x1110 <USB_Host_SendControlRequest+0x18e>
    10d0:	31 df       	rcall	.-414    	; 0xf34 <USB_Host_WaitForIOS>
    10d2:	81 11       	cpse	r24, r1
    10d4:	3a c0       	rjmp	.+116    	; 0x114a <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d6:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10d8:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10dc:	30 91 f7 00 	lds	r19, 0x00F7
    10e0:	80 91 00 01 	lds	r24, 0x0100
    10e4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10e6:	28 17       	cp	r18, r24
    10e8:	39 07       	cpc	r19, r25
    10ea:	58 f4       	brcc	.+22     	; 0x1102 <USB_Host_SendControlRequest+0x180>
    10ec:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	8c 01       	movw	r16, r24
    10f2:	20 81       	ld	r18, Z
    10f4:	20 93 af 00 	sts	0x00AF, r18
    10f8:	21 97       	sbiw	r28, 0x01	; 1
    10fa:	20 97       	sbiw	r28, 0x00	; 0
    10fc:	19 f0       	breq	.+6      	; 0x1104 <USB_Host_SendControlRequest+0x182>
    10fe:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1100:	eb cf       	rjmp	.-42     	; 0x10d8 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1102:	8f 01       	movw	r16, r30
    1104:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1108:	8b 77       	andi	r24, 0x7B	; 123
    110a:	80 93 a6 00 	sts	0x00A6, r24
    110e:	dd cf       	rjmp	.-70     	; 0x10ca <USB_Host_SendControlRequest+0x148>
    1110:	11 df       	rcall	.-478    	; 0xf34 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1112:	81 11       	cpse	r24, r1
    1114:	1a c0       	rjmp	.+52     	; 0x114a <USB_Host_SendControlRequest+0x1c8>
    1116:	80 91 a9 00 	lds	r24, 0x00A9
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1120:	80 91 aa 00 	lds	r24, 0x00AA
    1124:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1126:	80 61       	ori	r24, 0x10	; 16
    1128:	80 93 aa 00 	sts	0x00AA, r24
    112c:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1130:	8f 7b       	andi	r24, 0xBF	; 191
    1132:	80 93 a9 00 	sts	0x00A9, r24
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	fd de       	rcall	.-518    	; 0xf34 <USB_Host_WaitForIOS>
    113a:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    113c:	06 c0       	rjmp	.+12     	; 0x114a <USB_Host_SendControlRequest+0x1c8>
    113e:	80 91 a6 00 	lds	r24, 0x00A6
    1142:	8e 77       	andi	r24, 0x7E	; 126
    1144:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 91 a9 00 	lds	r25, 0x00A9
    114e:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1150:	90 93 a9 00 	sts	0x00A9, r25
    1154:	f1 10       	cpse	r15, r1
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <USB_Host_SendControlRequest+0x1e0>
    1158:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    115c:	9e 7f       	andi	r25, 0xFE	; 254
    115e:	90 93 9e 00 	sts	0x009E, r25
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1168:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1174:	ff 90       	pop	r15
    1176:	08 95       	ret

00001178 <USB_Host_SetDeviceConfiguration>:
    1178:	cf 93       	push	r28
				UPRST = 0;
    117a:	c8 2f       	mov	r28, r24
    117c:	10 92 1f 01 	sts	0x011F, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1180:	89 e0       	ldi	r24, 0x09	; 9
    1182:	80 93 20 01 	sts	0x0120, r24
    1186:	2c 2f       	mov	r18, r28
    1188:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    118a:	30 93 22 01 	sts	0x0122, r19
    118e:	20 93 21 01 	sts	0x0121, r18
    1192:	10 92 24 01 	sts	0x0124, r1
    1196:	10 92 23 01 	sts	0x0123, r1
    119a:	10 92 26 01 	sts	0x0126, r1
    119e:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11a2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	eb de       	rcall	.-554    	; 0xf82 <USB_Host_SendControlRequest>
    11ac:	81 11       	cpse	r24, r1
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <USB_Host_SetDeviceConfiguration+0x4a>
    11b0:	c0 93 1d 01 	sts	0x011D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11b4:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11b6:	11 f0       	breq	.+4      	; 0x11bc <USB_Host_SetDeviceConfiguration+0x44>
    11b8:	9b e0       	ldi	r25, 0x0B	; 11
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <USB_Host_SetDeviceConfiguration+0x46>
    11bc:	9a e0       	ldi	r25, 0x0A	; 10
    11be:	90 93 27 01 	sts	0x0127, r25
    11c2:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    11c4:	08 95       	ret

000011c6 <USB_USBTask>:
    11c6:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    11c8:	c0 91 a7 00 	lds	r28, 0x00A7
    11cc:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    11ce:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11d2:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11d6:	d6 da       	rcall	.-2644   	; 0x784 <USB_Host_ProcessNextHostState>
    11d8:	c0 93 a7 00 	sts	0x00A7, r28
    11dc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11de:	08 95       	ret

000011e0 <Serial_putchar>:
    11e0:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    11e4:	95 ff       	sbrs	r25, 5
    11e6:	fc cf       	rjmp	.-8      	; 0x11e0 <Serial_putchar>
				UDR1 = DataByte;
    11e8:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    11f2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    11f6:	87 ff       	sbrs	r24, 7
    11f8:	08 c0       	rjmp	.+16     	; 0x120a <Serial_getchar+0x18>
    11fa:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    11fe:	87 ff       	sbrs	r24, 7
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1202:	80 91 ce 00 	lds	r24, 0x00CE
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 95       	ret
	  return _FDEV_EOF;
    120a:	8e ef       	ldi	r24, 0xFE	; 254
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1214:	08 95       	ret

00001216 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1216:	fc 01       	movw	r30, r24
	if (!(Stream))
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	59 f4       	brne	.+22     	; 0x1232 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    121c:	88 e2       	ldi	r24, 0x28	; 40
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	90 93 37 01 	sts	0x0137, r25
    1224:	80 93 36 01 	sts	0x0136, r24
		stdout = Stream;
    1228:	90 93 39 01 	sts	0x0139, r25
    122c:	80 93 38 01 	sts	0x0138, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1230:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1232:	8e e0       	ldi	r24, 0x0E	; 14
    1234:	df 01       	movw	r26, r30
    1236:	1d 92       	st	X+, r1
    1238:	8a 95       	dec	r24
    123a:	e9 f7       	brne	.-6      	; 0x1236 <Serial_CreateStream+0x20>
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	83 83       	std	Z+3, r24	; 0x03
    1240:	80 ef       	ldi	r24, 0xF0	; 240
    1242:	98 e0       	ldi	r25, 0x08	; 8
    1244:	91 87       	std	Z+9, r25	; 0x09
    1246:	80 87       	std	Z+8, r24	; 0x08
    1248:	89 ef       	ldi	r24, 0xF9	; 249
    124a:	98 e0       	ldi	r25, 0x08	; 8
    124c:	93 87       	std	Z+11, r25	; 0x0b
    124e:	82 87       	std	Z+10, r24	; 0x0a
    1250:	08 95       	ret

00001252 <printf_P>:
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	fe 01       	movw	r30, r28
    1260:	37 96       	adiw	r30, 0x07	; 7
    1262:	61 91       	ld	r22, Z+
    1264:	71 91       	ld	r23, Z+
    1266:	08 e3       	ldi	r16, 0x38	; 56
    1268:	11 e0       	ldi	r17, 0x01	; 1
    126a:	d8 01       	movw	r26, r16
    126c:	8d 91       	ld	r24, X+
    126e:	9c 91       	ld	r25, X
    1270:	dc 01       	movw	r26, r24
    1272:	13 96       	adiw	r26, 0x03	; 3
    1274:	2c 91       	ld	r18, X
    1276:	13 97       	sbiw	r26, 0x03	; 3
    1278:	28 60       	ori	r18, 0x08	; 8
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	2c 93       	st	X, r18
    127e:	af 01       	movw	r20, r30
    1280:	3a d0       	rcall	.+116    	; 0x12f6 <vfprintf>
    1282:	d8 01       	movw	r26, r16
    1284:	ed 91       	ld	r30, X+
    1286:	fc 91       	ld	r31, X
    1288:	23 81       	ldd	r18, Z+3	; 0x03
    128a:	27 7f       	andi	r18, 0xF7	; 247
    128c:	23 83       	std	Z+3, r18	; 0x03
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <puts_P>:
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	e0 91 38 01 	lds	r30, 0x0138
    12a6:	f0 91 39 01 	lds	r31, 0x0139
    12aa:	83 81       	ldd	r24, Z+3	; 0x03
    12ac:	81 ff       	sbrs	r24, 1
    12ae:	1c c0       	rjmp	.+56     	; 0x12e8 <puts_P+0x50>
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	fe 01       	movw	r30, r28
    12b6:	84 91       	lpm	r24, Z
    12b8:	60 91 38 01 	lds	r22, 0x0138
    12bc:	70 91 39 01 	lds	r23, 0x0139
    12c0:	db 01       	movw	r26, r22
    12c2:	18 96       	adiw	r26, 0x08	; 8
    12c4:	ed 91       	ld	r30, X+
    12c6:	fc 91       	ld	r31, X
    12c8:	19 97       	sbiw	r26, 0x09	; 9
    12ca:	88 23       	and	r24, r24
    12cc:	39 f0       	breq	.+14     	; 0x12dc <puts_P+0x44>
    12ce:	09 95       	icall
    12d0:	89 2b       	or	r24, r25
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <puts_P+0x40>
    12d4:	0f ef       	ldi	r16, 0xFF	; 255
    12d6:	1f ef       	ldi	r17, 0xFF	; 255
    12d8:	21 96       	adiw	r28, 0x01	; 1
    12da:	ec cf       	rjmp	.-40     	; 0x12b4 <puts_P+0x1c>
    12dc:	8a e0       	ldi	r24, 0x0A	; 10
    12de:	09 95       	icall
    12e0:	89 2b       	or	r24, r25
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <puts_P+0x50>
    12e4:	c8 01       	movw	r24, r16
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <puts_P+0x54>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <vfprintf>:
    12f6:	2f 92       	push	r2
    12f8:	3f 92       	push	r3
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	2c 97       	sbiw	r28, 0x0c	; 12
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	7c 01       	movw	r14, r24
    132c:	6b 01       	movw	r12, r22
    132e:	8a 01       	movw	r16, r20
    1330:	fc 01       	movw	r30, r24
    1332:	17 82       	std	Z+7, r1	; 0x07
    1334:	16 82       	std	Z+6, r1	; 0x06
    1336:	83 81       	ldd	r24, Z+3	; 0x03
    1338:	81 ff       	sbrs	r24, 1
    133a:	b0 c1       	rjmp	.+864    	; 0x169c <vfprintf+0x3a6>
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	4c 01       	movw	r8, r24
    1342:	f7 01       	movw	r30, r14
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	f6 01       	movw	r30, r12
    1348:	93 fd       	sbrc	r25, 3
    134a:	85 91       	lpm	r24, Z+
    134c:	93 ff       	sbrs	r25, 3
    134e:	81 91       	ld	r24, Z+
    1350:	6f 01       	movw	r12, r30
    1352:	88 23       	and	r24, r24
    1354:	09 f4       	brne	.+2      	; 0x1358 <vfprintf+0x62>
    1356:	9e c1       	rjmp	.+828    	; 0x1694 <vfprintf+0x39e>
    1358:	85 32       	cpi	r24, 0x25	; 37
    135a:	39 f4       	brne	.+14     	; 0x136a <vfprintf+0x74>
    135c:	93 fd       	sbrc	r25, 3
    135e:	85 91       	lpm	r24, Z+
    1360:	93 ff       	sbrs	r25, 3
    1362:	81 91       	ld	r24, Z+
    1364:	6f 01       	movw	r12, r30
    1366:	85 32       	cpi	r24, 0x25	; 37
    1368:	21 f4       	brne	.+8      	; 0x1372 <vfprintf+0x7c>
    136a:	b7 01       	movw	r22, r14
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	c7 d1       	rcall	.+910    	; 0x16fe <fputc>
    1370:	e8 cf       	rjmp	.-48     	; 0x1342 <vfprintf+0x4c>
    1372:	51 2c       	mov	r5, r1
    1374:	31 2c       	mov	r3, r1
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	20 32       	cpi	r18, 0x20	; 32
    137a:	a0 f4       	brcc	.+40     	; 0x13a4 <vfprintf+0xae>
    137c:	8b 32       	cpi	r24, 0x2B	; 43
    137e:	69 f0       	breq	.+26     	; 0x139a <vfprintf+0xa4>
    1380:	30 f4       	brcc	.+12     	; 0x138e <vfprintf+0x98>
    1382:	80 32       	cpi	r24, 0x20	; 32
    1384:	59 f0       	breq	.+22     	; 0x139c <vfprintf+0xa6>
    1386:	83 32       	cpi	r24, 0x23	; 35
    1388:	69 f4       	brne	.+26     	; 0x13a4 <vfprintf+0xae>
    138a:	20 61       	ori	r18, 0x10	; 16
    138c:	2c c0       	rjmp	.+88     	; 0x13e6 <vfprintf+0xf0>
    138e:	8d 32       	cpi	r24, 0x2D	; 45
    1390:	39 f0       	breq	.+14     	; 0x13a0 <vfprintf+0xaa>
    1392:	80 33       	cpi	r24, 0x30	; 48
    1394:	39 f4       	brne	.+14     	; 0x13a4 <vfprintf+0xae>
    1396:	21 60       	ori	r18, 0x01	; 1
    1398:	26 c0       	rjmp	.+76     	; 0x13e6 <vfprintf+0xf0>
    139a:	22 60       	ori	r18, 0x02	; 2
    139c:	24 60       	ori	r18, 0x04	; 4
    139e:	23 c0       	rjmp	.+70     	; 0x13e6 <vfprintf+0xf0>
    13a0:	28 60       	ori	r18, 0x08	; 8
    13a2:	21 c0       	rjmp	.+66     	; 0x13e6 <vfprintf+0xf0>
    13a4:	27 fd       	sbrc	r18, 7
    13a6:	27 c0       	rjmp	.+78     	; 0x13f6 <vfprintf+0x100>
    13a8:	30 ed       	ldi	r19, 0xD0	; 208
    13aa:	38 0f       	add	r19, r24
    13ac:	3a 30       	cpi	r19, 0x0A	; 10
    13ae:	78 f4       	brcc	.+30     	; 0x13ce <vfprintf+0xd8>
    13b0:	26 ff       	sbrs	r18, 6
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <vfprintf+0xca>
    13b4:	fa e0       	ldi	r31, 0x0A	; 10
    13b6:	5f 9e       	mul	r5, r31
    13b8:	30 0d       	add	r19, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	53 2e       	mov	r5, r19
    13be:	13 c0       	rjmp	.+38     	; 0x13e6 <vfprintf+0xf0>
    13c0:	8a e0       	ldi	r24, 0x0A	; 10
    13c2:	38 9e       	mul	r3, r24
    13c4:	30 0d       	add	r19, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	33 2e       	mov	r3, r19
    13ca:	20 62       	ori	r18, 0x20	; 32
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <vfprintf+0xf0>
    13ce:	8e 32       	cpi	r24, 0x2E	; 46
    13d0:	21 f4       	brne	.+8      	; 0x13da <vfprintf+0xe4>
    13d2:	26 fd       	sbrc	r18, 6
    13d4:	5f c1       	rjmp	.+702    	; 0x1694 <vfprintf+0x39e>
    13d6:	20 64       	ori	r18, 0x40	; 64
    13d8:	06 c0       	rjmp	.+12     	; 0x13e6 <vfprintf+0xf0>
    13da:	8c 36       	cpi	r24, 0x6C	; 108
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <vfprintf+0xec>
    13de:	20 68       	ori	r18, 0x80	; 128
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0xf0>
    13e2:	88 36       	cpi	r24, 0x68	; 104
    13e4:	41 f4       	brne	.+16     	; 0x13f6 <vfprintf+0x100>
    13e6:	f6 01       	movw	r30, r12
    13e8:	93 fd       	sbrc	r25, 3
    13ea:	85 91       	lpm	r24, Z+
    13ec:	93 ff       	sbrs	r25, 3
    13ee:	81 91       	ld	r24, Z+
    13f0:	6f 01       	movw	r12, r30
    13f2:	81 11       	cpse	r24, r1
    13f4:	c1 cf       	rjmp	.-126    	; 0x1378 <vfprintf+0x82>
    13f6:	98 2f       	mov	r25, r24
    13f8:	9f 7d       	andi	r25, 0xDF	; 223
    13fa:	95 54       	subi	r25, 0x45	; 69
    13fc:	93 30       	cpi	r25, 0x03	; 3
    13fe:	28 f4       	brcc	.+10     	; 0x140a <vfprintf+0x114>
    1400:	0c 5f       	subi	r16, 0xFC	; 252
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	ff e3       	ldi	r31, 0x3F	; 63
    1406:	f9 83       	std	Y+1, r31	; 0x01
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <vfprintf+0x12e>
    140a:	83 36       	cpi	r24, 0x63	; 99
    140c:	31 f0       	breq	.+12     	; 0x141a <vfprintf+0x124>
    140e:	83 37       	cpi	r24, 0x73	; 115
    1410:	71 f0       	breq	.+28     	; 0x142e <vfprintf+0x138>
    1412:	83 35       	cpi	r24, 0x53	; 83
    1414:	09 f0       	breq	.+2      	; 0x1418 <vfprintf+0x122>
    1416:	57 c0       	rjmp	.+174    	; 0x14c6 <vfprintf+0x1d0>
    1418:	21 c0       	rjmp	.+66     	; 0x145c <vfprintf+0x166>
    141a:	f8 01       	movw	r30, r16
    141c:	80 81       	ld	r24, Z
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	0e 5f       	subi	r16, 0xFE	; 254
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	44 24       	eor	r4, r4
    1426:	43 94       	inc	r4
    1428:	51 2c       	mov	r5, r1
    142a:	54 01       	movw	r10, r8
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <vfprintf+0x160>
    142e:	38 01       	movw	r6, r16
    1430:	f2 e0       	ldi	r31, 0x02	; 2
    1432:	6f 0e       	add	r6, r31
    1434:	71 1c       	adc	r7, r1
    1436:	f8 01       	movw	r30, r16
    1438:	a0 80       	ld	r10, Z
    143a:	b1 80       	ldd	r11, Z+1	; 0x01
    143c:	26 ff       	sbrs	r18, 6
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <vfprintf+0x150>
    1440:	65 2d       	mov	r22, r5
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <vfprintf+0x154>
    1446:	6f ef       	ldi	r22, 0xFF	; 255
    1448:	7f ef       	ldi	r23, 0xFF	; 255
    144a:	c5 01       	movw	r24, r10
    144c:	2c 87       	std	Y+12, r18	; 0x0c
    144e:	4c d1       	rcall	.+664    	; 0x16e8 <strnlen>
    1450:	2c 01       	movw	r4, r24
    1452:	83 01       	movw	r16, r6
    1454:	2c 85       	ldd	r18, Y+12	; 0x0c
    1456:	2f 77       	andi	r18, 0x7F	; 127
    1458:	22 2e       	mov	r2, r18
    145a:	16 c0       	rjmp	.+44     	; 0x1488 <vfprintf+0x192>
    145c:	38 01       	movw	r6, r16
    145e:	f2 e0       	ldi	r31, 0x02	; 2
    1460:	6f 0e       	add	r6, r31
    1462:	71 1c       	adc	r7, r1
    1464:	f8 01       	movw	r30, r16
    1466:	a0 80       	ld	r10, Z
    1468:	b1 80       	ldd	r11, Z+1	; 0x01
    146a:	26 ff       	sbrs	r18, 6
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x17e>
    146e:	65 2d       	mov	r22, r5
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x182>
    1474:	6f ef       	ldi	r22, 0xFF	; 255
    1476:	7f ef       	ldi	r23, 0xFF	; 255
    1478:	c5 01       	movw	r24, r10
    147a:	2c 87       	std	Y+12, r18	; 0x0c
    147c:	2a d1       	rcall	.+596    	; 0x16d2 <strnlen_P>
    147e:	2c 01       	movw	r4, r24
    1480:	2c 85       	ldd	r18, Y+12	; 0x0c
    1482:	20 68       	ori	r18, 0x80	; 128
    1484:	22 2e       	mov	r2, r18
    1486:	83 01       	movw	r16, r6
    1488:	23 fc       	sbrc	r2, 3
    148a:	19 c0       	rjmp	.+50     	; 0x14be <vfprintf+0x1c8>
    148c:	83 2d       	mov	r24, r3
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	48 16       	cp	r4, r24
    1492:	59 06       	cpc	r5, r25
    1494:	a0 f4       	brcc	.+40     	; 0x14be <vfprintf+0x1c8>
    1496:	b7 01       	movw	r22, r14
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	30 d1       	rcall	.+608    	; 0x16fe <fputc>
    149e:	3a 94       	dec	r3
    14a0:	f5 cf       	rjmp	.-22     	; 0x148c <vfprintf+0x196>
    14a2:	f5 01       	movw	r30, r10
    14a4:	27 fc       	sbrc	r2, 7
    14a6:	85 91       	lpm	r24, Z+
    14a8:	27 fe       	sbrs	r2, 7
    14aa:	81 91       	ld	r24, Z+
    14ac:	5f 01       	movw	r10, r30
    14ae:	b7 01       	movw	r22, r14
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	25 d1       	rcall	.+586    	; 0x16fe <fputc>
    14b4:	31 10       	cpse	r3, r1
    14b6:	3a 94       	dec	r3
    14b8:	f1 e0       	ldi	r31, 0x01	; 1
    14ba:	4f 1a       	sub	r4, r31
    14bc:	51 08       	sbc	r5, r1
    14be:	41 14       	cp	r4, r1
    14c0:	51 04       	cpc	r5, r1
    14c2:	79 f7       	brne	.-34     	; 0x14a2 <vfprintf+0x1ac>
    14c4:	de c0       	rjmp	.+444    	; 0x1682 <vfprintf+0x38c>
    14c6:	84 36       	cpi	r24, 0x64	; 100
    14c8:	11 f0       	breq	.+4      	; 0x14ce <vfprintf+0x1d8>
    14ca:	89 36       	cpi	r24, 0x69	; 105
    14cc:	31 f5       	brne	.+76     	; 0x151a <vfprintf+0x224>
    14ce:	f8 01       	movw	r30, r16
    14d0:	27 ff       	sbrs	r18, 7
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <vfprintf+0x1ec>
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	0c 5f       	subi	r16, 0xFC	; 252
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <vfprintf+0x1fc>
    14e2:	60 81       	ld	r22, Z
    14e4:	71 81       	ldd	r23, Z+1	; 0x01
    14e6:	88 27       	eor	r24, r24
    14e8:	77 fd       	sbrc	r23, 7
    14ea:	80 95       	com	r24
    14ec:	98 2f       	mov	r25, r24
    14ee:	0e 5f       	subi	r16, 0xFE	; 254
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	2f 76       	andi	r18, 0x6F	; 111
    14f4:	b2 2e       	mov	r11, r18
    14f6:	97 ff       	sbrs	r25, 7
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <vfprintf+0x216>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	20 68       	ori	r18, 0x80	; 128
    150a:	b2 2e       	mov	r11, r18
    150c:	2a e0       	ldi	r18, 0x0A	; 10
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	a4 01       	movw	r20, r8
    1512:	27 d1       	rcall	.+590    	; 0x1762 <__ultoa_invert>
    1514:	a8 2e       	mov	r10, r24
    1516:	a8 18       	sub	r10, r8
    1518:	43 c0       	rjmp	.+134    	; 0x15a0 <vfprintf+0x2aa>
    151a:	85 37       	cpi	r24, 0x75	; 117
    151c:	29 f4       	brne	.+10     	; 0x1528 <vfprintf+0x232>
    151e:	2f 7e       	andi	r18, 0xEF	; 239
    1520:	b2 2e       	mov	r11, r18
    1522:	2a e0       	ldi	r18, 0x0A	; 10
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	25 c0       	rjmp	.+74     	; 0x1572 <vfprintf+0x27c>
    1528:	f2 2f       	mov	r31, r18
    152a:	f9 7f       	andi	r31, 0xF9	; 249
    152c:	bf 2e       	mov	r11, r31
    152e:	8f 36       	cpi	r24, 0x6F	; 111
    1530:	c1 f0       	breq	.+48     	; 0x1562 <vfprintf+0x26c>
    1532:	18 f4       	brcc	.+6      	; 0x153a <vfprintf+0x244>
    1534:	88 35       	cpi	r24, 0x58	; 88
    1536:	79 f0       	breq	.+30     	; 0x1556 <vfprintf+0x260>
    1538:	ad c0       	rjmp	.+346    	; 0x1694 <vfprintf+0x39e>
    153a:	80 37       	cpi	r24, 0x70	; 112
    153c:	19 f0       	breq	.+6      	; 0x1544 <vfprintf+0x24e>
    153e:	88 37       	cpi	r24, 0x78	; 120
    1540:	21 f0       	breq	.+8      	; 0x154a <vfprintf+0x254>
    1542:	a8 c0       	rjmp	.+336    	; 0x1694 <vfprintf+0x39e>
    1544:	2f 2f       	mov	r18, r31
    1546:	20 61       	ori	r18, 0x10	; 16
    1548:	b2 2e       	mov	r11, r18
    154a:	b4 fe       	sbrs	r11, 4
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <vfprintf+0x272>
    154e:	8b 2d       	mov	r24, r11
    1550:	84 60       	ori	r24, 0x04	; 4
    1552:	b8 2e       	mov	r11, r24
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <vfprintf+0x272>
    1556:	24 ff       	sbrs	r18, 4
    1558:	0a c0       	rjmp	.+20     	; 0x156e <vfprintf+0x278>
    155a:	9f 2f       	mov	r25, r31
    155c:	96 60       	ori	r25, 0x06	; 6
    155e:	b9 2e       	mov	r11, r25
    1560:	06 c0       	rjmp	.+12     	; 0x156e <vfprintf+0x278>
    1562:	28 e0       	ldi	r18, 0x08	; 8
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	05 c0       	rjmp	.+10     	; 0x1572 <vfprintf+0x27c>
    1568:	20 e1       	ldi	r18, 0x10	; 16
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x27c>
    156e:	20 e1       	ldi	r18, 0x10	; 16
    1570:	32 e0       	ldi	r19, 0x02	; 2
    1572:	f8 01       	movw	r30, r16
    1574:	b7 fe       	sbrs	r11, 7
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <vfprintf+0x290>
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	0c 5f       	subi	r16, 0xFC	; 252
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <vfprintf+0x29c>
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 5f       	subi	r16, 0xFE	; 254
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
    1592:	a4 01       	movw	r20, r8
    1594:	e6 d0       	rcall	.+460    	; 0x1762 <__ultoa_invert>
    1596:	a8 2e       	mov	r10, r24
    1598:	a8 18       	sub	r10, r8
    159a:	fb 2d       	mov	r31, r11
    159c:	ff 77       	andi	r31, 0x7F	; 127
    159e:	bf 2e       	mov	r11, r31
    15a0:	b6 fe       	sbrs	r11, 6
    15a2:	0b c0       	rjmp	.+22     	; 0x15ba <vfprintf+0x2c4>
    15a4:	2b 2d       	mov	r18, r11
    15a6:	2e 7f       	andi	r18, 0xFE	; 254
    15a8:	a5 14       	cp	r10, r5
    15aa:	50 f4       	brcc	.+20     	; 0x15c0 <vfprintf+0x2ca>
    15ac:	b4 fe       	sbrs	r11, 4
    15ae:	0a c0       	rjmp	.+20     	; 0x15c4 <vfprintf+0x2ce>
    15b0:	b2 fc       	sbrc	r11, 2
    15b2:	08 c0       	rjmp	.+16     	; 0x15c4 <vfprintf+0x2ce>
    15b4:	2b 2d       	mov	r18, r11
    15b6:	2e 7e       	andi	r18, 0xEE	; 238
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <vfprintf+0x2ce>
    15ba:	7a 2c       	mov	r7, r10
    15bc:	2b 2d       	mov	r18, r11
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <vfprintf+0x2d0>
    15c0:	7a 2c       	mov	r7, r10
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <vfprintf+0x2d0>
    15c4:	75 2c       	mov	r7, r5
    15c6:	24 ff       	sbrs	r18, 4
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <vfprintf+0x2ee>
    15ca:	fe 01       	movw	r30, r28
    15cc:	ea 0d       	add	r30, r10
    15ce:	f1 1d       	adc	r31, r1
    15d0:	80 81       	ld	r24, Z
    15d2:	80 33       	cpi	r24, 0x30	; 48
    15d4:	11 f4       	brne	.+4      	; 0x15da <vfprintf+0x2e4>
    15d6:	29 7e       	andi	r18, 0xE9	; 233
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <vfprintf+0x2f6>
    15da:	22 ff       	sbrs	r18, 2
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0x2f4>
    15de:	73 94       	inc	r7
    15e0:	73 94       	inc	r7
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <vfprintf+0x2f6>
    15e4:	82 2f       	mov	r24, r18
    15e6:	86 78       	andi	r24, 0x86	; 134
    15e8:	09 f0       	breq	.+2      	; 0x15ec <vfprintf+0x2f6>
    15ea:	73 94       	inc	r7
    15ec:	23 fd       	sbrc	r18, 3
    15ee:	12 c0       	rjmp	.+36     	; 0x1614 <vfprintf+0x31e>
    15f0:	20 ff       	sbrs	r18, 0
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0x30a>
    15f4:	5a 2c       	mov	r5, r10
    15f6:	73 14       	cp	r7, r3
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <vfprintf+0x30a>
    15fa:	53 0c       	add	r5, r3
    15fc:	57 18       	sub	r5, r7
    15fe:	73 2c       	mov	r7, r3
    1600:	73 14       	cp	r7, r3
    1602:	60 f4       	brcc	.+24     	; 0x161c <vfprintf+0x326>
    1604:	b7 01       	movw	r22, r14
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	2c 87       	std	Y+12, r18	; 0x0c
    160c:	78 d0       	rcall	.+240    	; 0x16fe <fputc>
    160e:	73 94       	inc	r7
    1610:	2c 85       	ldd	r18, Y+12	; 0x0c
    1612:	f6 cf       	rjmp	.-20     	; 0x1600 <vfprintf+0x30a>
    1614:	73 14       	cp	r7, r3
    1616:	10 f4       	brcc	.+4      	; 0x161c <vfprintf+0x326>
    1618:	37 18       	sub	r3, r7
    161a:	01 c0       	rjmp	.+2      	; 0x161e <vfprintf+0x328>
    161c:	31 2c       	mov	r3, r1
    161e:	24 ff       	sbrs	r18, 4
    1620:	11 c0       	rjmp	.+34     	; 0x1644 <vfprintf+0x34e>
    1622:	b7 01       	movw	r22, r14
    1624:	80 e3       	ldi	r24, 0x30	; 48
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	2c 87       	std	Y+12, r18	; 0x0c
    162a:	69 d0       	rcall	.+210    	; 0x16fe <fputc>
    162c:	2c 85       	ldd	r18, Y+12	; 0x0c
    162e:	22 ff       	sbrs	r18, 2
    1630:	16 c0       	rjmp	.+44     	; 0x165e <vfprintf+0x368>
    1632:	21 ff       	sbrs	r18, 1
    1634:	03 c0       	rjmp	.+6      	; 0x163c <vfprintf+0x346>
    1636:	88 e5       	ldi	r24, 0x58	; 88
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <vfprintf+0x34a>
    163c:	88 e7       	ldi	r24, 0x78	; 120
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	b7 01       	movw	r22, r14
    1642:	0c c0       	rjmp	.+24     	; 0x165c <vfprintf+0x366>
    1644:	82 2f       	mov	r24, r18
    1646:	86 78       	andi	r24, 0x86	; 134
    1648:	51 f0       	breq	.+20     	; 0x165e <vfprintf+0x368>
    164a:	21 fd       	sbrc	r18, 1
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x35c>
    164e:	80 e2       	ldi	r24, 0x20	; 32
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <vfprintf+0x35e>
    1652:	8b e2       	ldi	r24, 0x2B	; 43
    1654:	27 fd       	sbrc	r18, 7
    1656:	8d e2       	ldi	r24, 0x2D	; 45
    1658:	b7 01       	movw	r22, r14
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	50 d0       	rcall	.+160    	; 0x16fe <fputc>
    165e:	a5 14       	cp	r10, r5
    1660:	30 f4       	brcc	.+12     	; 0x166e <vfprintf+0x378>
    1662:	b7 01       	movw	r22, r14
    1664:	80 e3       	ldi	r24, 0x30	; 48
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	4a d0       	rcall	.+148    	; 0x16fe <fputc>
    166a:	5a 94       	dec	r5
    166c:	f8 cf       	rjmp	.-16     	; 0x165e <vfprintf+0x368>
    166e:	aa 94       	dec	r10
    1670:	f4 01       	movw	r30, r8
    1672:	ea 0d       	add	r30, r10
    1674:	f1 1d       	adc	r31, r1
    1676:	80 81       	ld	r24, Z
    1678:	b7 01       	movw	r22, r14
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	40 d0       	rcall	.+128    	; 0x16fe <fputc>
    167e:	a1 10       	cpse	r10, r1
    1680:	f6 cf       	rjmp	.-20     	; 0x166e <vfprintf+0x378>
    1682:	33 20       	and	r3, r3
    1684:	09 f4       	brne	.+2      	; 0x1688 <vfprintf+0x392>
    1686:	5d ce       	rjmp	.-838    	; 0x1342 <vfprintf+0x4c>
    1688:	b7 01       	movw	r22, r14
    168a:	80 e2       	ldi	r24, 0x20	; 32
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	37 d0       	rcall	.+110    	; 0x16fe <fputc>
    1690:	3a 94       	dec	r3
    1692:	f7 cf       	rjmp	.-18     	; 0x1682 <vfprintf+0x38c>
    1694:	f7 01       	movw	r30, r14
    1696:	86 81       	ldd	r24, Z+6	; 0x06
    1698:	97 81       	ldd	r25, Z+7	; 0x07
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x3aa>
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	2c 96       	adiw	r28, 0x0c	; 12
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	7f 90       	pop	r7
    16c6:	6f 90       	pop	r6
    16c8:	5f 90       	pop	r5
    16ca:	4f 90       	pop	r4
    16cc:	3f 90       	pop	r3
    16ce:	2f 90       	pop	r2
    16d0:	08 95       	ret

000016d2 <strnlen_P>:
    16d2:	fc 01       	movw	r30, r24
    16d4:	05 90       	lpm	r0, Z+
    16d6:	61 50       	subi	r22, 0x01	; 1
    16d8:	70 40       	sbci	r23, 0x00	; 0
    16da:	01 10       	cpse	r0, r1
    16dc:	d8 f7       	brcc	.-10     	; 0x16d4 <strnlen_P+0x2>
    16de:	80 95       	com	r24
    16e0:	90 95       	com	r25
    16e2:	8e 0f       	add	r24, r30
    16e4:	9f 1f       	adc	r25, r31
    16e6:	08 95       	ret

000016e8 <strnlen>:
    16e8:	fc 01       	movw	r30, r24
    16ea:	61 50       	subi	r22, 0x01	; 1
    16ec:	70 40       	sbci	r23, 0x00	; 0
    16ee:	01 90       	ld	r0, Z+
    16f0:	01 10       	cpse	r0, r1
    16f2:	d8 f7       	brcc	.-10     	; 0x16ea <strnlen+0x2>
    16f4:	80 95       	com	r24
    16f6:	90 95       	com	r25
    16f8:	8e 0f       	add	r24, r30
    16fa:	9f 1f       	adc	r25, r31
    16fc:	08 95       	ret

000016fe <fputc>:
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	18 2f       	mov	r17, r24
    1708:	09 2f       	mov	r16, r25
    170a:	eb 01       	movw	r28, r22
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	81 fd       	sbrc	r24, 1
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <fputc+0x1a>
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	20 c0       	rjmp	.+64     	; 0x1758 <fputc+0x5a>
    1718:	82 ff       	sbrs	r24, 2
    171a:	10 c0       	rjmp	.+32     	; 0x173c <fputc+0x3e>
    171c:	4e 81       	ldd	r20, Y+6	; 0x06
    171e:	5f 81       	ldd	r21, Y+7	; 0x07
    1720:	2c 81       	ldd	r18, Y+4	; 0x04
    1722:	3d 81       	ldd	r19, Y+5	; 0x05
    1724:	42 17       	cp	r20, r18
    1726:	53 07       	cpc	r21, r19
    1728:	7c f4       	brge	.+30     	; 0x1748 <fputc+0x4a>
    172a:	e8 81       	ld	r30, Y
    172c:	f9 81       	ldd	r31, Y+1	; 0x01
    172e:	9f 01       	movw	r18, r30
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	39 83       	std	Y+1, r19	; 0x01
    1736:	28 83       	st	Y, r18
    1738:	10 83       	st	Z, r17
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <fputc+0x4a>
    173c:	e8 85       	ldd	r30, Y+8	; 0x08
    173e:	f9 85       	ldd	r31, Y+9	; 0x09
    1740:	81 2f       	mov	r24, r17
    1742:	09 95       	icall
    1744:	89 2b       	or	r24, r25
    1746:	29 f7       	brne	.-54     	; 0x1712 <fputc+0x14>
    1748:	2e 81       	ldd	r18, Y+6	; 0x06
    174a:	3f 81       	ldd	r19, Y+7	; 0x07
    174c:	2f 5f       	subi	r18, 0xFF	; 255
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	3f 83       	std	Y+7, r19	; 0x07
    1752:	2e 83       	std	Y+6, r18	; 0x06
    1754:	81 2f       	mov	r24, r17
    1756:	90 2f       	mov	r25, r16
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	08 95       	ret

00001762 <__ultoa_invert>:
    1762:	fa 01       	movw	r30, r20
    1764:	aa 27       	eor	r26, r26
    1766:	28 30       	cpi	r18, 0x08	; 8
    1768:	51 f1       	breq	.+84     	; 0x17be <__ultoa_invert+0x5c>
    176a:	20 31       	cpi	r18, 0x10	; 16
    176c:	81 f1       	breq	.+96     	; 0x17ce <__ultoa_invert+0x6c>
    176e:	e8 94       	clt
    1770:	6f 93       	push	r22
    1772:	6e 7f       	andi	r22, 0xFE	; 254
    1774:	6e 5f       	subi	r22, 0xFE	; 254
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	8f 4f       	sbci	r24, 0xFF	; 255
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	af 4f       	sbci	r26, 0xFF	; 255
    177e:	b1 e0       	ldi	r27, 0x01	; 1
    1780:	3e d0       	rcall	.+124    	; 0x17fe <__ultoa_invert+0x9c>
    1782:	b4 e0       	ldi	r27, 0x04	; 4
    1784:	3c d0       	rcall	.+120    	; 0x17fe <__ultoa_invert+0x9c>
    1786:	67 0f       	add	r22, r23
    1788:	78 1f       	adc	r23, r24
    178a:	89 1f       	adc	r24, r25
    178c:	9a 1f       	adc	r25, r26
    178e:	a1 1d       	adc	r26, r1
    1790:	68 0f       	add	r22, r24
    1792:	79 1f       	adc	r23, r25
    1794:	8a 1f       	adc	r24, r26
    1796:	91 1d       	adc	r25, r1
    1798:	a1 1d       	adc	r26, r1
    179a:	6a 0f       	add	r22, r26
    179c:	71 1d       	adc	r23, r1
    179e:	81 1d       	adc	r24, r1
    17a0:	91 1d       	adc	r25, r1
    17a2:	a1 1d       	adc	r26, r1
    17a4:	20 d0       	rcall	.+64     	; 0x17e6 <__ultoa_invert+0x84>
    17a6:	09 f4       	brne	.+2      	; 0x17aa <__ultoa_invert+0x48>
    17a8:	68 94       	set
    17aa:	3f 91       	pop	r19
    17ac:	2a e0       	ldi	r18, 0x0A	; 10
    17ae:	26 9f       	mul	r18, r22
    17b0:	11 24       	eor	r1, r1
    17b2:	30 19       	sub	r19, r0
    17b4:	30 5d       	subi	r19, 0xD0	; 208
    17b6:	31 93       	st	Z+, r19
    17b8:	de f6       	brtc	.-74     	; 0x1770 <__ultoa_invert+0xe>
    17ba:	cf 01       	movw	r24, r30
    17bc:	08 95       	ret
    17be:	46 2f       	mov	r20, r22
    17c0:	47 70       	andi	r20, 0x07	; 7
    17c2:	40 5d       	subi	r20, 0xD0	; 208
    17c4:	41 93       	st	Z+, r20
    17c6:	b3 e0       	ldi	r27, 0x03	; 3
    17c8:	0f d0       	rcall	.+30     	; 0x17e8 <__ultoa_invert+0x86>
    17ca:	c9 f7       	brne	.-14     	; 0x17be <__ultoa_invert+0x5c>
    17cc:	f6 cf       	rjmp	.-20     	; 0x17ba <__ultoa_invert+0x58>
    17ce:	46 2f       	mov	r20, r22
    17d0:	4f 70       	andi	r20, 0x0F	; 15
    17d2:	40 5d       	subi	r20, 0xD0	; 208
    17d4:	4a 33       	cpi	r20, 0x3A	; 58
    17d6:	18 f0       	brcs	.+6      	; 0x17de <__ultoa_invert+0x7c>
    17d8:	49 5d       	subi	r20, 0xD9	; 217
    17da:	31 fd       	sbrc	r19, 1
    17dc:	40 52       	subi	r20, 0x20	; 32
    17de:	41 93       	st	Z+, r20
    17e0:	02 d0       	rcall	.+4      	; 0x17e6 <__ultoa_invert+0x84>
    17e2:	a9 f7       	brne	.-22     	; 0x17ce <__ultoa_invert+0x6c>
    17e4:	ea cf       	rjmp	.-44     	; 0x17ba <__ultoa_invert+0x58>
    17e6:	b4 e0       	ldi	r27, 0x04	; 4
    17e8:	a6 95       	lsr	r26
    17ea:	97 95       	ror	r25
    17ec:	87 95       	ror	r24
    17ee:	77 95       	ror	r23
    17f0:	67 95       	ror	r22
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0x86>
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	61 05       	cpc	r22, r1
    17fa:	71 05       	cpc	r23, r1
    17fc:	08 95       	ret
    17fe:	9b 01       	movw	r18, r22
    1800:	ac 01       	movw	r20, r24
    1802:	0a 2e       	mov	r0, r26
    1804:	06 94       	lsr	r0
    1806:	57 95       	ror	r21
    1808:	47 95       	ror	r20
    180a:	37 95       	ror	r19
    180c:	27 95       	ror	r18
    180e:	ba 95       	dec	r27
    1810:	c9 f7       	brne	.-14     	; 0x1804 <__ultoa_invert+0xa2>
    1812:	62 0f       	add	r22, r18
    1814:	73 1f       	adc	r23, r19
    1816:	84 1f       	adc	r24, r20
    1818:	95 1f       	adc	r25, r21
    181a:	a0 1d       	adc	r26, r0
    181c:	08 95       	ret

0000181e <_exit>:
    181e:	f8 94       	cli

00001820 <__stop_program>:
    1820:	ff cf       	rjmp	.-2      	; 0x1820 <__stop_program>


Benito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000fec  00001080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  0080011c  0080011c  0000109c  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001ca3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000668  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a844  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b72  00000000  00000000  0000cb60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e91  00000000  00000000  0000f6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f80  00000000  00000000  00013564  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003f86  00000000  00000000  000144e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000069c7  00000000  00000000  0001846a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a0  00000000  00000000  0001ee31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
   2:	00 00       	nop
   4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
   6:	00 00       	nop
   8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
   a:	00 00       	nop
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
   e:	00 00       	nop
  10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
  12:	00 00       	nop
  14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
  16:	00 00       	nop
  18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
  1e:	00 00       	nop
  20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
  22:	00 00       	nop
  24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
  26:	00 00       	nop
  28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e7 c3       	rjmp	.+1998   	; 0x7fc <__vector_11>
  2e:	00 00       	nop
  30:	8a c4       	rjmp	.+2324   	; 0x946 <__vector_12>
  32:	00 00       	nop
  34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
  36:	00 00       	nop
  38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
  3e:	00 00       	nop
  40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  42:	00 00       	nop
  44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
  46:	00 00       	nop
  48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
  4e:	00 00       	nop
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  50:	7e c0       	rjmp	.+252    	; 0x14e <__bad_interrupt>
  52:	00 00       	nop
  54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
  56:	00 00       	nop
  58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c1       	rjmp	.+848    	; 0x3ae <__vector_23>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  5e:	00 00       	nop
  60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
  62:	00 00       	nop
  64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
  66:	00 00       	nop
  68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
  6a:	00 00       	nop
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
  6e:	00 00       	nop
  70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	34 03 42 00 65 00 6e 00 69 00 74 00 6f 00 20 00     4.B.e.n.i.t.o. .

	ParserData->TotalDeviceReports = 1;
  84:	41 00 72 00 64 00 75 00 69 00 6e 00 6f 00 20 00     A.r.d.u.i.n.o. .
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  94:	50 00 72 00 6f 00 67 00 72 00 61 00 6d 00 6d 00     P.r.o.g.r.a.m.m.
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  a4:	65 00 72 00 00 00                                   e.r...

000000aa <ManufacturerString>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  aa:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  ba:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000c4 <LanguageString>:
  c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
  c8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  d8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  e8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  f8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000106 <DeviceDescriptor>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
 106:	12 01 10 01 02 00 00 08 eb 03 60 20 01 00 01 02     ..........` ....
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
 116:	dc 01                                               ..

00000118 <__ctors_end>:
 118:	11 24       	eor	r1, r1
 11a:	1f be       	out	0x3f, r1	; 63
		ReportSize--;
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d4 e0       	ldi	r29, 0x04	; 4
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	ec ee       	ldi	r30, 0xEC	; 236
 12c:	ff e0       	ldi	r31, 0x0F	; 15
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	ac 31       	cpi	r26, 0x1C	; 28
 136:	b1 07       	cpc	r27, r17
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	ac e1       	ldi	r26, 0x1C	; 28
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	a9 3b       	cpi	r26, 0xB9	; 185
 146:	b1 07       	cpc	r27, r17
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	2c d0       	rcall	.+88     	; 0x1a4 <main>
 14c:	4d c7       	rjmp	.+3738   	; 0xfe8 <_exit>

0000014e <__bad_interrupt>:
 14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <LEDs_SetAllLEDs>:
 150:	98 b1       	in	r25, 0x08	; 8
 152:	80 95       	com	r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 154:	90 6c       	ori	r25, 0xC0	; 192
 156:	89 23       	and	r24, r25
 158:	88 b9       	out	0x08, r24	; 8
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 15a:	08 95       	ret

0000015c <SetupHardware>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 15c:	84 b7       	in	r24, 0x34	; 52
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	84 bf       	out	0x34, r24	; 52
 162:	88 e1       	ldi	r24, 0x18	; 24
 164:	0f b6       	in	r0, 0x3f	; 63
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 166:	f8 94       	cli
 168:	80 93 60 00 	sts	0x0060, r24
 16c:	10 92 60 00 	sts	0x0060, r1
 170:	0f be       	out	0x3f, r0	; 63
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	80 93 61 00 	sts	0x0061, r24
 17e:	90 93 61 00 	sts	0x0061, r25
 182:	0f be       	out	0x3f, r0	; 63
 184:	87 b1       	in	r24, 0x07	; 7
				ReportData     += 4;
 186:	80 6c       	ori	r24, 0xC0	; 192
 188:	87 b9       	out	0x07, r24	; 7
 18a:	88 b1       	in	r24, 0x08	; 8
				break;
 18c:	80 6c       	ori	r24, 0xC0	; 192

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 18e:	88 b9       	out	0x08, r24	; 8
 190:	26 d3       	rcall	.+1612   	; 0x7de <USB_Init>
 192:	8d e7       	ldi	r24, 0x7D	; 125
 194:	87 bd       	out	0x27, r24	; 39
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	84 bd       	out	0x24, r24	; 36
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	85 bd       	out	0x25, r24	; 37
 19e:	5c 98       	cbi	0x0b, 4	; 11
 1a0:	54 98       	cbi	0x0a, 4	; 10
 1a2:	08 95       	ret

000001a4 <main>:
 1a4:	db df       	rcall	.-74     	; 0x15c <SetupHardware>
				ReportSize     -= 2;
 1a6:	ed e9       	ldi	r30, 0x9D	; 157
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	2f b7       	in	r18, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	8d e1       	ldi	r24, 0x1D	; 29
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	91 83       	std	Z+1, r25	; 0x01
 1b4:	80 83       	st	Z, r24
 1b6:	93 83       	std	Z+3, r25	; 0x03
 1b8:	82 83       	std	Z+2, r24	; 0x02
				ReportData     += 2;
 1ba:	95 83       	std	Z+5, r25	; 0x05
 1bc:	84 83       	std	Z+4, r24	; 0x04
 1be:	8d e9       	ldi	r24, 0x9D	; 157
				break;
 1c0:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 1c2:	97 83       	std	Z+7, r25	; 0x07
 1c4:	86 83       	std	Z+6, r24	; 0x06
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	91 87       	std	Z+9, r25	; 0x09
 1cc:	80 87       	std	Z+8, r24	; 0x08
				ReportSize     -= 1;
 1ce:	13 86       	std	Z+11, r1	; 0x0b
 1d0:	12 86       	std	Z+10, r1	; 0x0a
 1d2:	2f bf       	out	0x3f, r18	; 63
 1d4:	78 94       	sei
 1d6:	8e e1       	ldi	r24, 0x1E	; 30
 1d8:	f8 2e       	mov	r15, r24
 1da:	9a e0       	ldi	r25, 0x0A	; 10
 1dc:	e9 2e       	mov	r14, r25
 1de:	0d e9       	ldi	r16, 0x9D	; 157
 1e0:	11 e0       	ldi	r17, 0x01	; 1
				ReportData     += 1;
 1e2:	20 ec       	ldi	r18, 0xC0	; 192
 1e4:	d2 2e       	mov	r13, r18
 1e6:	34 e6       	ldi	r19, 0x64	; 100
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1e8:	c3 2e       	mov	r12, r19
 1ea:	80 91 c8 00 	lds	r24, 0x00C8
 1ee:	85 ff       	sbrs	r24, 5
 1f0:	0d c0       	rjmp	.+26     	; 0x20c <main+0x68>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	d6 d5       	rcall	.+2988   	; 0xda4 <CDC_Device_BytesReceived>
 1f8:	89 2b       	or	r24, r25
 1fa:	41 f0       	breq	.+16     	; 0x20c <main+0x68>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	f5 d5       	rcall	.+3050   	; 0xdec <CDC_Device_ReceiveByte>
 202:	80 93 ce 00 	sts	0x00CE, r24
 206:	47 98       	cbi	0x08, 7	; 8
 208:	f0 92 aa 01 	sts	0x01AA, r15
 20c:	a9 9b       	sbis	0x15, 1	; 21

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 20e:	72 c0       	rjmp	.+228    	; 0x2f4 <main+0x150>
 210:	a8 9a       	sbi	0x15, 0	; 21
 212:	80 91 a9 01 	lds	r24, 0x01A9
 216:	88 23       	and	r24, r24
				break;
 218:	59 f0       	breq	.+22     	; 0x230 <main+0x8c>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 21a:	80 91 a9 01 	lds	r24, 0x01A9
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	80 93 a9 01 	sts	0x01A9, r24
 224:	81 11       	cpse	r24, r1
 226:	04 c0       	rjmp	.+8      	; 0x230 <main+0x8c>
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	80 6c       	ori	r24, 0xC0	; 192
 22c:	88 b9       	out	0x08, r24	; 8
 22e:	54 98       	cbi	0x0a, 4	; 10
 230:	80 91 ac 01 	lds	r24, 0x01AC
 234:	88 23       	and	r24, r24
 236:	51 f0       	breq	.+20     	; 0x24c <main+0xa8>
 238:	80 91 ac 01 	lds	r24, 0x01AC
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	80 93 ac 01 	sts	0x01AC, r24
 242:	81 11       	cpse	r24, r1
 244:	03 c0       	rjmp	.+6      	; 0x24c <main+0xa8>
 246:	d6 b8       	out	0x06, r13	; 6
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 248:	c0 92 ac 01 	sts	0x01AC, r12
 24c:	80 91 aa 01 	lds	r24, 0x01AA
 250:	88 23       	and	r24, r24
 252:	41 f0       	breq	.+16     	; 0x264 <main+0xc0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 254:	80 91 aa 01 	lds	r24, 0x01AA
				break;
 258:	81 50       	subi	r24, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 25a:	80 93 aa 01 	sts	0x01AA, r24
 25e:	81 11       	cpse	r24, r1
 260:	01 c0       	rjmp	.+2      	; 0x264 <main+0xc0>
 262:	47 9a       	sbi	0x08, 7	; 8
 264:	80 91 ab 01 	lds	r24, 0x01AB
 268:	88 23       	and	r24, r24
 26a:	41 f0       	breq	.+16     	; 0x27c <main+0xd8>
 26c:	80 91 ab 01 	lds	r24, 0x01AB
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 270:	81 50       	subi	r24, 0x01	; 1
				break;
 272:	80 93 ab 01 	sts	0x01AB, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 276:	81 11       	cpse	r24, r1
 278:	01 c0       	rjmp	.+2      	; 0x27c <main+0xd8>
 27a:	46 9a       	sbi	0x08, 6	; 8
 27c:	8f b7       	in	r24, 0x3f	; 63
 27e:	f8 94       	cli
 280:	c0 91 a7 01 	lds	r28, 0x01A7
 284:	d0 91 a8 01 	lds	r29, 0x01A8
 288:	8f bf       	out	0x3f, r24	; 63
 28a:	80 91 1b 01 	lds	r24, 0x011B
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	29 f0       	breq	.+10     	; 0x29c <main+0xf8>
 292:	80 93 1b 01 	sts	0x011B, r24
 296:	c9 3c       	cpi	r28, 0xC9	; 201
 298:	d1 05       	cpc	r29, r1
 29a:	60 f1       	brcs	.+88     	; 0x2f4 <main+0x150>
 29c:	e0 92 1b 01 	sts	0x011B, r14
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 2a0:	20 97       	sbiw	r28, 0x00	; 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 2a2:	31 f1       	breq	.+76     	; 0x2f0 <main+0x14c>
 2a4:	46 98       	cbi	0x08, 6	; 8
 2a6:	f0 92 ab 01 	sts	0x01AB, r15
 2aa:	22 c0       	rjmp	.+68     	; 0x2f0 <main+0x14c>
 2ac:	e0 91 9f 01 	lds	r30, 0x019F
 2b0:	f0 91 a0 01 	lds	r31, 0x01A0
 2b4:	60 81       	ld	r22, Z
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	10 d5       	rcall	.+2592   	; 0xcdc <CDC_Device_SendByte>
 2bc:	81 11       	cpse	r24, r1
 2be:	1a c0       	rjmp	.+52     	; 0x2f4 <main+0x150>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 2c0:	f8 01       	movw	r30, r16
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	93 81       	ldd	r25, Z+3	; 0x03
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	93 83       	std	Z+3, r25	; 0x03
 2ca:	82 83       	std	Z+2, r24	; 0x02
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 2cc:	26 81       	ldd	r18, Z+6	; 0x06
 2ce:	37 81       	ldd	r19, Z+7	; 0x07
 2d0:	82 17       	cp	r24, r18
 2d2:	93 07       	cpc	r25, r19
 2d4:	21 f4       	brne	.+8      	; 0x2de <main+0x13a>
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	95 81       	ldd	r25, Z+5	; 0x05
 2da:	93 83       	std	Z+3, r25	; 0x03
 2dc:	82 83       	std	Z+2, r24	; 0x02
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 2de:	2f b7       	in	r18, 0x3f	; 63
				break;
 2e0:	f8 94       	cli

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 2e2:	82 85       	ldd	r24, Z+10	; 0x0a
 2e4:	93 85       	ldd	r25, Z+11	; 0x0b
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	93 87       	std	Z+11, r25	; 0x0b
 2ea:	82 87       	std	Z+10, r24	; 0x0a
 2ec:	2f bf       	out	0x3f, r18	; 63
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 2ee:	21 97       	sbiw	r28, 0x01	; 1
 2f0:	20 97       	sbiw	r28, 0x00	; 0
				break;
 2f2:	e1 f6       	brne	.-72     	; 0x2ac <main+0x108>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	40 d5       	rcall	.+2688   	; 0xd7a <CDC_Device_USBTask>
 2fa:	b0 d4       	rcall	.+2400   	; 0xc5c <USB_USBTask>
 2fc:	76 cf       	rjmp	.-276    	; 0x1ea <main+0x46>

000002fe <EVENT_USB_Device_Connect>:
				break;
 2fe:	84 e6       	ldi	r24, 0x64	; 100

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 300:	80 93 ac 01 	sts	0x01AC, r24
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	24 cf       	rjmp	.-440    	; 0x150 <LEDs_SetAllLEDs>

00000308 <EVENT_USB_Device_Disconnect>:
 308:	10 92 ac 01 	sts	0x01AC, r1
 30c:	80 e0       	ldi	r24, 0x00	; 0
				break;
 30e:	20 cf       	rjmp	.-448    	; 0x150 <LEDs_SetAllLEDs>

00000310 <EVENT_USB_Device_ConfigurationChanged>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	be d4       	rcall	.+2428   	; 0xc92 <CDC_Device_ConfigureEndpoints>
 316:	10 92 ac 01 	sts	0x01AC, r1
				break;
 31a:	88 23       	and	r24, r24

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 31c:	11 f0       	breq	.+4      	; 0x322 <EVENT_USB_Device_ConfigurationChanged+0x12>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	01 c0       	rjmp	.+2      	; 0x324 <EVENT_USB_Device_ConfigurationChanged+0x14>
 322:	80 ec       	ldi	r24, 0xC0	; 192
 324:	15 cf       	rjmp	.-470    	; 0x150 <LEDs_SetAllLEDs>

00000326 <EVENT_USB_Device_ControlRequest>:
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	91 e0       	ldi	r25, 0x01	; 1
				break;
 32a:	8d c5       	rjmp	.+2842   	; 0xe46 <CDC_Device_ProcessControlRequest>

0000032c <EVENT_CDC_Device_LineEncodingChanged>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 32c:	cf 93       	push	r28
 32e:	fc 01       	movw	r30, r24
 330:	81 8d       	ldd	r24, Z+25	; 0x19
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	31 f0       	breq	.+12     	; 0x342 <EVENT_CDC_Device_LineEncodingChanged+0x16>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	11 f0       	breq	.+4      	; 0x33e <EVENT_CDC_Device_LineEncodingChanged+0x12>
				break;
 33a:	c0 e0       	ldi	r28, 0x00	; 0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 33c:	03 c0       	rjmp	.+6      	; 0x344 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 33e:	c0 e2       	ldi	r28, 0x20	; 32
 340:	01 c0       	rjmp	.+2      	; 0x344 <EVENT_CDC_Device_LineEncodingChanged+0x18>
				break;
 342:	c0 e3       	ldi	r28, 0x30	; 48

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 344:	80 8d       	ldd	r24, Z+24	; 0x18
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	09 f4       	brne	.+2      	; 0x34c <EVENT_CDC_Device_LineEncodingChanged+0x20>

				if (ParserData->UsingReportIDs)
 34a:	c8 60       	ori	r28, 0x08	; 8
 34c:	82 8d       	ldd	r24, Z+26	; 0x1a
 34e:	87 30       	cpi	r24, 0x07	; 7
 350:	31 f0       	breq	.+12     	; 0x35e <EVENT_CDC_Device_LineEncodingChanged+0x32>
 352:	88 30       	cpi	r24, 0x08	; 8
 354:	31 f0       	breq	.+12     	; 0x362 <EVENT_CDC_Device_LineEncodingChanged+0x36>
 356:	86 30       	cpi	r24, 0x06	; 6
 358:	29 f4       	brne	.+10     	; 0x364 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 35a:	c2 60       	ori	r28, 0x02	; 2
 35c:	03 c0       	rjmp	.+6      	; 0x364 <EVENT_CDC_Device_LineEncodingChanged+0x38>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 35e:	c4 60       	ori	r28, 0x04	; 4
 360:	01 c0       	rjmp	.+2      	; 0x364 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 362:	c6 60       	ori	r28, 0x06	; 6
 364:	10 92 c9 00 	sts	0x00C9, r1
 368:	10 92 c8 00 	sts	0x00C8, r1
 36c:	10 92 ca 00 	sts	0x00CA, r1
 370:	24 89       	ldd	r18, Z+20	; 0x14
 372:	35 89       	ldd	r19, Z+21	; 0x15
 374:	46 89       	ldd	r20, Z+22	; 0x16
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 376:	57 89       	ldd	r21, Z+23	; 0x17
 378:	ca 01       	movw	r24, r20
 37a:	b9 01       	movw	r22, r18
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	77 95       	ror	r23
 382:	67 95       	ror	r22
 384:	60 5c       	subi	r22, 0xC0	; 192
 386:	7d 4b       	sbci	r23, 0xBD	; 189
 388:	80 4f       	sbci	r24, 0xF0	; 240
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 38c:	0b d6       	rcall	.+3094   	; 0xfa4 <__udivmodsi4>
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	31 09       	sbc	r19, r1
 392:	30 93 cd 00 	sts	0x00CD, r19
 396:	20 93 cc 00 	sts	0x00CC, r18
 39a:	c0 93 ca 00 	sts	0x00CA, r28
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	80 93 c8 00 	sts	0x00C8, r24
 3a4:	88 e9       	ldi	r24, 0x98	; 152
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 3a6:	80 93 c9 00 	sts	0x00C9, r24
 3aa:	cf 91       	pop	r28
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 3ac:	08 95       	ret

000003ae <__vector_23>:
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
 3c8:	80 91 ce 00 	lds	r24, 0x00CE
 3cc:	9e b3       	in	r25, 0x1e	; 30
 3ce:	94 30       	cpi	r25, 0x04	; 4
 3d0:	d9 f4       	brne	.+54     	; 0x408 <__vector_23+0x5a>
 3d2:	ed e9       	ldi	r30, 0x9D	; 157
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 3d6:	a0 81       	ld	r26, Z
 3d8:	b1 81       	ldd	r27, Z+1	; 0x01
 3da:	8c 93       	st	X, r24
 3dc:	80 81       	ld	r24, Z
 3de:	91 81       	ldd	r25, Z+1	; 0x01
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	91 83       	std	Z+1, r25	; 0x01
 3e4:	80 83       	st	Z, r24
					}
				}

				ParserData->UsingReportIDs = true;
 3e6:	26 81       	ldd	r18, Z+6	; 0x06
 3e8:	37 81       	ldd	r19, Z+7	; 0x07
 3ea:	82 17       	cp	r24, r18
 3ec:	93 07       	cpc	r25, r19
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <__vector_23+0x4a>
 3f0:	84 81       	ldd	r24, Z+4	; 0x04
 3f2:	95 81       	ldd	r25, Z+5	; 0x05
 3f4:	91 83       	std	Z+1, r25	; 0x01

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 3f6:	80 83       	st	Z, r24
 3f8:	2f b7       	in	r18, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	82 85       	ldd	r24, Z+10	; 0x0a
 3fe:	93 85       	ldd	r25, Z+11	; 0x0b
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	93 87       	std	Z+11, r25	; 0x0b
				break;
 404:	82 87       	std	Z+10, r24	; 0x0a

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 406:	2f bf       	out	0x3f, r18	; 63
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 412:	8f 91       	pop	r24
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <EVENT_CDC_Device_ControLineStateChanged>:
 422:	cf 93       	push	r28
 424:	fc 01       	movw	r30, r24
 426:	c0 89       	ldd	r28, Z+16	; 0x10
 428:	c1 70       	andi	r28, 0x01	; 1
 42a:	80 91 1c 01 	lds	r24, 0x011C
 42e:	81 11       	cpse	r24, r1
 430:	08 c0       	rjmp	.+16     	; 0x442 <EVENT_CDC_Device_ControLineStateChanged+0x20>
				break;
 432:	cc 23       	and	r28, r28
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 434:	31 f0       	breq	.+12     	; 0x442 <EVENT_CDC_Device_ControLineStateChanged+0x20>
 436:	80 ec       	ldi	r24, 0xC0	; 192
 438:	8b de       	rcall	.-746    	; 0x150 <LEDs_SetAllLEDs>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 43a:	54 9a       	sbi	0x0a, 4	; 10
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	80 93 a9 01 	sts	0x01A9, r24
 442:	c0 93 1c 01 	sts	0x011C, r28
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <CALLBACK_USB_GetDescriptor>:
 44a:	29 2f       	mov	r18, r25

					while (CurrCollectionPath->Parent != NULL)
 44c:	33 27       	eor	r19, r19
 44e:	22 30       	cpi	r18, 0x02	; 2
 450:	31 05       	cpc	r19, r1
 452:	59 f0       	breq	.+22     	; 0x46a <CALLBACK_USB_GetDescriptor+0x20>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 454:	23 30       	cpi	r18, 0x03	; 3
 456:	31 05       	cpc	r19, r1
 458:	69 f0       	breq	.+26     	; 0x474 <CALLBACK_USB_GetDescriptor+0x2a>
 45a:	21 30       	cpi	r18, 0x01	; 1
 45c:	31 05       	cpc	r19, r1
 45e:	f9 f4       	brne	.+62     	; 0x49e <CALLBACK_USB_GetDescriptor+0x54>
 460:	82 e1       	ldi	r24, 0x12	; 18
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	26 e0       	ldi	r18, 0x06	; 6
 466:	31 e0       	ldi	r19, 0x01	; 1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 468:	1e c0       	rjmp	.+60     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x5c>
 46a:	8e e3       	ldi	r24, 0x3E	; 62
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	28 ec       	ldi	r18, 0xC8	; 200
 470:	30 e0       	ldi	r19, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
 472:	19 c0       	rjmp	.+50     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x5c>
 474:	99 27       	eor	r25, r25
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 05       	cpc	r25, r1
 47a:	41 f0       	breq	.+16     	; 0x48c <CALLBACK_USB_GetDescriptor+0x42>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	91 05       	cpc	r25, r1
 480:	41 f0       	breq	.+16     	; 0x492 <CALLBACK_USB_GetDescriptor+0x48>
 482:	89 2b       	or	r24, r25

				if (UsageListSize)
 484:	61 f4       	brne	.+24     	; 0x49e <CALLBACK_USB_GetDescriptor+0x54>
 486:	e4 ec       	ldi	r30, 0xC4	; 196
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	05 c0       	rjmp	.+10     	; 0x496 <CALLBACK_USB_GetDescriptor+0x4c>
 48c:	ea ea       	ldi	r30, 0xAA	; 170
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <CALLBACK_USB_GetDescriptor+0x4c>
 492:	e4 e7       	ldi	r30, 0x74	; 116
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	84 91       	lpm	r24, Z
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	9f 01       	movw	r18, r30
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x5c>
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	20 e0       	ldi	r18, 0x00	; 0

					for (uint8_t i = 1; i < UsageListSize; i++)
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	fa 01       	movw	r30, r20
 4a8:	31 83       	std	Z+1, r19	; 0x01
 4aa:	20 83       	st	Z, r18
 4ac:	08 95       	ret

000004ae <Endpoint_Write_Control_Stream_LE>:
 4ae:	20 91 b7 01 	lds	r18, 0x01B7
					  UsageList[i - 1] = UsageList[i];
 4b2:	30 91 b8 01 	lds	r19, 0x01B8
 4b6:	26 17       	cp	r18, r22

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 4b8:	37 07       	cpc	r19, r23
 4ba:	48 f0       	brcs	.+18     	; 0x4ce <Endpoint_Write_Control_Stream_LE+0x20>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 4bc:	61 15       	cp	r22, r1
 4be:	71 05       	cpc	r23, r1
 4c0:	39 f4       	brne	.+14     	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0x22>
 4c2:	20 91 e8 00 	lds	r18, 0x00E8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 4c6:	2e 77       	andi	r18, 0x7E	; 126
 4c8:	20 93 e8 00 	sts	0x00E8, r18
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0x22>
 4ce:	b9 01       	movw	r22, r18
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	61 15       	cp	r22, r1
 4d4:	71 05       	cpc	r23, r1
 4d6:	c9 f1       	breq	.+114    	; 0x54a <__stack+0x4b>
 4d8:	3e b3       	in	r19, 0x1e	; 30
 4da:	33 23       	and	r19, r19
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <Endpoint_Write_Control_Stream_LE+0x32>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 4de:	42 c0       	rjmp	.+132    	; 0x564 <__stack+0x65>
 4e0:	35 30       	cpi	r19, 0x05	; 5
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <Endpoint_Write_Control_Stream_LE+0x38>
 4e4:	41 c0       	rjmp	.+130    	; 0x568 <__stack+0x69>
 4e6:	30 91 e8 00 	lds	r19, 0x00E8
 4ea:	33 fd       	sbrc	r19, 3
 4ec:	3f c0       	rjmp	.+126    	; 0x56c <__stack+0x6d>
 4ee:	30 91 e8 00 	lds	r19, 0x00E8
 4f2:	32 ff       	sbrs	r19, 2
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <__stack+0x3>
 4f6:	80 91 e8 00 	lds	r24, 0x00E8
 4fa:	82 ff       	sbrs	r24, 2
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 4fc:	29 c0       	rjmp	.+82     	; 0x550 <__stack+0x51>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
				break;
 502:	30 91 e8 00 	lds	r19, 0x00E8
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 506:	30 ff       	sbrs	r19, 0
 508:	e4 cf       	rjmp	.-56     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x24>
 50a:	20 91 f2 00 	lds	r18, 0x00F2
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	28 1b       	sub	r18, r24
 514:	39 0b       	sbc	r19, r25
 516:	cf 01       	movw	r24, r30
 518:	82 0f       	add	r24, r18
 51a:	93 1f       	adc	r25, r19
 51c:	61 15       	cp	r22, r1
 51e:	71 05       	cpc	r23, r1
 520:	49 f0       	breq	.+18     	; 0x534 <__stack+0x35>
 522:	88 30       	cpi	r24, 0x08	; 8
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 524:	91 05       	cpc	r25, r1
 526:	30 f4       	brcc	.+12     	; 0x534 <__stack+0x35>
 528:	81 91       	ld	r24, Z+
 52a:	80 93 f1 00 	sts	0x00F1, r24
 52e:	61 50       	subi	r22, 0x01	; 1
 530:	71 09       	sbc	r23, r1
 532:	f1 cf       	rjmp	.-30     	; 0x516 <__stack+0x17>
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	08 97       	sbiw	r24, 0x08	; 8
 538:	09 f0       	breq	.+2      	; 0x53c <__stack+0x3d>
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 540:	8e 77       	andi	r24, 0x7E	; 126
 542:	80 93 e8 00 	sts	0x00E8, r24
 546:	cf 01       	movw	r24, r30
 548:	c4 cf       	rjmp	.-120    	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x24>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 54a:	21 11       	cpse	r18, r1
 54c:	c5 cf       	rjmp	.-118    	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x2a>
 54e:	d3 cf       	rjmp	.-90     	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x48>
 550:	8e b3       	in	r24, 0x1e	; 30
 552:	88 23       	and	r24, r24
 554:	39 f0       	breq	.+14     	; 0x564 <__stack+0x65>
 556:	85 30       	cpi	r24, 0x05	; 5
 558:	39 f0       	breq	.+14     	; 0x568 <__stack+0x69>
 55a:	80 91 e8 00 	lds	r24, 0x00E8
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 55e:	83 ff       	sbrs	r24, 3
					NewReportItem.CollectionPath = CurrCollectionPath;
 560:	ca cf       	rjmp	.-108    	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x48>
 562:	04 c0       	rjmp	.+8      	; 0x56c <__stack+0x6d>
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	08 95       	ret
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 568:	83 e0       	ldi	r24, 0x03	; 3
 56a:	08 95       	ret
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret

00000570 <Endpoint_Write_Control_PStream_LE>:

					if (UsageListSize)
 570:	20 91 b7 01 	lds	r18, 0x01B7
 574:	30 91 b8 01 	lds	r19, 0x01B8
 578:	26 17       	cp	r18, r22
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 57a:	37 07       	cpc	r19, r23
 57c:	48 f0       	brcs	.+18     	; 0x590 <Endpoint_Write_Control_PStream_LE+0x20>
 57e:	61 15       	cp	r22, r1
 580:	71 05       	cpc	r23, r1
 582:	39 f4       	brne	.+14     	; 0x592 <Endpoint_Write_Control_PStream_LE+0x22>
 584:	20 91 e8 00 	lds	r18, 0x00E8
 588:	2e 77       	andi	r18, 0x7E	; 126
 58a:	20 93 e8 00 	sts	0x00E8, r18
 58e:	01 c0       	rjmp	.+2      	; 0x592 <Endpoint_Write_Control_PStream_LE+0x22>

						for (uint8_t i = 1; i < UsageListSize; i++)
 590:	b9 01       	movw	r22, r18
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	61 15       	cp	r22, r1
 596:	71 05       	cpc	r23, r1
 598:	d1 f1       	breq	.+116    	; 0x60e <Endpoint_Write_Control_PStream_LE+0x9e>
 59a:	3e b3       	in	r19, 0x1e	; 30
						  UsageList[i - 1] = UsageList[i];
 59c:	33 23       	and	r19, r19
 59e:	09 f4       	brne	.+2      	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x32>
 5a0:	43 c0       	rjmp	.+134    	; 0x628 <Endpoint_Write_Control_PStream_LE+0xb8>
 5a2:	35 30       	cpi	r19, 0x05	; 5

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <Endpoint_Write_Control_PStream_LE+0x38>
 5a6:	42 c0       	rjmp	.+132    	; 0x62c <Endpoint_Write_Control_PStream_LE+0xbc>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 5a8:	30 91 e8 00 	lds	r19, 0x00E8
 5ac:	33 fd       	sbrc	r19, 3
 5ae:	40 c0       	rjmp	.+128    	; 0x630 <Endpoint_Write_Control_PStream_LE+0xc0>
 5b0:	30 91 e8 00 	lds	r19, 0x00E8
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 5b4:	32 ff       	sbrs	r19, 2
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x54>
 5b8:	80 91 e8 00 	lds	r24, 0x00E8
 5bc:	82 ff       	sbrs	r24, 2
 5be:	2a c0       	rjmp	.+84     	; 0x614 <Endpoint_Write_Control_PStream_LE+0xa4>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
 5c4:	30 91 e8 00 	lds	r19, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 5c8:	30 ff       	sbrs	r19, 0
 5ca:	e4 cf       	rjmp	.-56     	; 0x594 <Endpoint_Write_Control_PStream_LE+0x24>
 5cc:	20 91 f2 00 	lds	r18, 0x00F2
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	28 1b       	sub	r18, r24
 5d6:	39 0b       	sbc	r19, r25
 5d8:	c9 01       	movw	r24, r18
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 5da:	8e 0f       	add	r24, r30
 5dc:	9f 1f       	adc	r25, r31
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 5de:	61 15       	cp	r22, r1
 5e0:	71 05       	cpc	r23, r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 5e2:	51 f0       	breq	.+20     	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x88>
 5e4:	88 30       	cpi	r24, 0x08	; 8
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 5e6:	91 05       	cpc	r25, r1
 5e8:	38 f4       	brcc	.+14     	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x88>
 5ea:	84 91       	lpm	r24, Z
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 5ec:	80 93 f1 00 	sts	0x00F1, r24

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 5f0:	31 96       	adiw	r30, 0x01	; 1
 5f2:	61 50       	subi	r22, 0x01	; 1
 5f4:	71 09       	sbc	r23, r1
 5f6:	f0 cf       	rjmp	.-32     	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x68>
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	08 97       	sbiw	r24, 0x08	; 8
 5fc:	09 f0       	breq	.+2      	; 0x600 <Endpoint_Write_Control_PStream_LE+0x90>
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	80 91 e8 00 	lds	r24, 0x00E8
 604:	8e 77       	andi	r24, 0x7E	; 126
 606:	80 93 e8 00 	sts	0x00E8, r24
 60a:	cf 01       	movw	r24, r30

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 60c:	c3 cf       	rjmp	.-122    	; 0x594 <Endpoint_Write_Control_PStream_LE+0x24>
 60e:	21 11       	cpse	r18, r1
 610:	c4 cf       	rjmp	.-120    	; 0x59a <Endpoint_Write_Control_PStream_LE+0x2a>
 612:	d2 cf       	rjmp	.-92     	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x48>
 614:	8e b3       	in	r24, 0x1e	; 30
 616:	88 23       	and	r24, r24
 618:	39 f0       	breq	.+14     	; 0x628 <Endpoint_Write_Control_PStream_LE+0xb8>
 61a:	85 30       	cpi	r24, 0x05	; 5

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 61c:	39 f0       	breq	.+14     	; 0x62c <Endpoint_Write_Control_PStream_LE+0xbc>
 61e:	80 91 e8 00 	lds	r24, 0x00E8
 622:	83 ff       	sbrs	r24, 3
 624:	c9 cf       	rjmp	.-110    	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x48>
 626:	04 c0       	rjmp	.+8      	; 0x630 <Endpoint_Write_Control_PStream_LE+0xc0>
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	08 95       	ret
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	08 95       	ret
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	08 95       	ret

00000634 <Endpoint_ConfigureEndpoint_Prv>:
 634:	8f 70       	andi	r24, 0x0F	; 15
 636:	80 93 e9 00 	sts	0x00E9, r24
 63a:	eb ee       	ldi	r30, 0xEB	; 235
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	81 60       	ori	r24, 0x01	; 1
 642:	80 83       	st	Z, r24
 644:	ed ee       	ldi	r30, 0xED	; 237
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	10 82       	st	Z, r1
 64a:	60 93 ec 00 	sts	0x00EC, r22
 64e:	40 83       	st	Z, r20
 650:	80 91 ee 00 	lds	r24, 0x00EE
 654:	88 1f       	adc	r24, r24
 656:	88 27       	eor	r24, r24
 658:	88 1f       	adc	r24, r24
 65a:	08 95       	ret

0000065c <Endpoint_ConfigureEndpointTable>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	06 2f       	mov	r16, r22
					  return HID_PARSE_InsufficientReportItems;
 666:	ec 01       	movw	r28, r24
 668:	10 e0       	ldi	r17, 0x00	; 0

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 66a:	10 17       	cp	r17, r16
 66c:	69 f1       	breq	.+90     	; 0x6c8 <Endpoint_ConfigureEndpointTable+0x6c>
 66e:	98 81       	ld	r25, Y
 670:	99 23       	and	r25, r25
 672:	39 f1       	breq	.+78     	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x66>
 674:	2c 81       	ldd	r18, Y+4	; 0x04
 676:	e9 81       	ldd	r30, Y+1	; 0x01
 678:	fa 81       	ldd	r31, Y+2	; 0x02
 67a:	6b 81       	ldd	r22, Y+3	; 0x03
 67c:	89 2f       	mov	r24, r25
 67e:	8f 70       	andi	r24, 0x0F	; 15
 680:	85 30       	cpi	r24, 0x05	; 5
 682:	10 f0       	brcs	.+4      	; 0x688 <Endpoint_ConfigureEndpointTable+0x2c>
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	21 c0       	rjmp	.+66     	; 0x6ca <Endpoint_ConfigureEndpointTable+0x6e>
 688:	22 30       	cpi	r18, 0x02	; 2
 68a:	10 f0       	brcs	.+4      	; 0x690 <Endpoint_ConfigureEndpointTable+0x34>
 68c:	56 e0       	ldi	r21, 0x06	; 6
 68e:	01 c0       	rjmp	.+2      	; 0x692 <Endpoint_ConfigureEndpointTable+0x36>
 690:	52 e0       	ldi	r21, 0x02	; 2
 692:	28 e0       	ldi	r18, 0x08	; 8
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	2e 17       	cp	r18, r30
 69a:	3f 07       	cpc	r19, r31
 69c:	20 f4       	brcc	.+8      	; 0x6a6 <Endpoint_ConfigureEndpointTable+0x4a>
 69e:	4f 5f       	subi	r20, 0xFF	; 255
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	f9 cf       	rjmp	.-14     	; 0x698 <Endpoint_ConfigureEndpointTable+0x3c>
 6a6:	42 95       	swap	r20
 6a8:	40 7f       	andi	r20, 0xF0	; 240
 6aa:	45 2b       	or	r20, r21
 6ac:	99 1f       	adc	r25, r25
 6ae:	99 27       	eor	r25, r25
 6b0:	99 1f       	adc	r25, r25
 6b2:	62 95       	swap	r22
					  ParserData->TotalReportItems++;
 6b4:	66 0f       	add	r22, r22
 6b6:	66 0f       	add	r22, r22
 6b8:	60 7c       	andi	r22, 0xC0	; 192
 6ba:	69 2b       	or	r22, r25
 6bc:	bb df       	rcall	.-138    	; 0x634 <Endpoint_ConfigureEndpoint_Prv>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 6be:	88 23       	and	r24, r24
 6c0:	09 f3       	breq	.-62     	; 0x684 <Endpoint_ConfigureEndpointTable+0x28>
 6c2:	1f 5f       	subi	r17, 0xFF	; 255
 6c4:	25 96       	adiw	r28, 0x05	; 5
 6c6:	d1 cf       	rjmp	.-94     	; 0x66a <Endpoint_ConfigureEndpointTable+0xe>
 6c8:	81 e0       	ldi	r24, 0x01	; 1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	1f 91       	pop	r17
 6d0:	0f 91       	pop	r16
 6d2:	08 95       	ret

000006d4 <Endpoint_ClearStatusStage>:
 6d4:	80 91 b1 01 	lds	r24, 0x01B1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6d8:	87 fd       	sbrc	r24, 7
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <Endpoint_ClearStatusStage+0x12>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6dc:	80 91 e8 00 	lds	r24, 0x00E8
 6e0:	80 ff       	sbrs	r24, 0
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <Endpoint_ClearStatusStage+0x2a>
		}
	}

	if (!(ParserData->TotalReportItems))
 6e4:	10 c0       	rjmp	.+32     	; 0x706 <Endpoint_ClearStatusStage+0x32>
 6e6:	80 91 e8 00 	lds	r24, 0x00E8
 6ea:	82 fd       	sbrc	r24, 2
	  return HID_PARSE_NoUnfilteredReportItems;
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <Endpoint_ClearStatusStage+0x22>
 6ee:	8e b3       	in	r24, 0x1e	; 30

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6f0:	81 11       	cpse	r24, r1
 6f2:	f9 cf       	rjmp	.-14     	; 0x6e6 <Endpoint_ClearStatusStage+0x12>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6f4:	08 95       	ret
 6f6:	80 91 e8 00 	lds	r24, 0x00E8
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6fa:	8b 77       	andi	r24, 0x7B	; 123
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <Endpoint_ClearStatusStage+0x38>
 6fe:	8e b3       	in	r24, 0x1e	; 30

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 700:	81 11       	cpse	r24, r1
 702:	ec cf       	rjmp	.-40     	; 0x6dc <Endpoint_ClearStatusStage+0x8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 704:	08 95       	ret
 706:	80 91 e8 00 	lds	r24, 0x00E8
}
 70a:	8e 77       	andi	r24, 0x7E	; 126
 70c:	80 93 e8 00 	sts	0x00E8, r24
 710:	08 95       	ret

00000712 <Endpoint_WaitUntilReady>:
 712:	80 91 e4 00 	lds	r24, 0x00E4
 716:	90 91 e5 00 	lds	r25, 0x00E5
 71a:	45 e6       	ldi	r20, 0x65	; 101
 71c:	20 91 ec 00 	lds	r18, 0x00EC
 720:	20 ff       	sbrs	r18, 0
 722:	20 c0       	rjmp	.+64     	; 0x764 <Endpoint_WaitUntilReady+0x52>
 724:	20 91 e8 00 	lds	r18, 0x00E8
 728:	20 fd       	sbrc	r18, 0
 72a:	20 c0       	rjmp	.+64     	; 0x76c <Endpoint_WaitUntilReady+0x5a>
 72c:	2e b3       	in	r18, 0x1e	; 30
 72e:	22 23       	and	r18, r18
 730:	89 f0       	breq	.+34     	; 0x754 <Endpoint_WaitUntilReady+0x42>
 732:	25 30       	cpi	r18, 0x05	; 5
 734:	89 f0       	breq	.+34     	; 0x758 <Endpoint_WaitUntilReady+0x46>
 736:	20 91 eb 00 	lds	r18, 0x00EB
 73a:	25 fd       	sbrc	r18, 5
 73c:	0f c0       	rjmp	.+30     	; 0x75c <Endpoint_WaitUntilReady+0x4a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 73e:	20 91 e4 00 	lds	r18, 0x00E4
 742:	30 91 e5 00 	lds	r19, 0x00E5
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 746:	28 17       	cp	r18, r24
 748:	39 07       	cpc	r19, r25
 74a:	41 f3       	breq	.-48     	; 0x71c <Endpoint_WaitUntilReady+0xa>
 74c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 74e:	41 f0       	breq	.+16     	; 0x760 <Endpoint_WaitUntilReady+0x4e>
 750:	c9 01       	movw	r24, r18
 752:	e4 cf       	rjmp	.-56     	; 0x71c <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 764:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 768:	22 ff       	sbrs	r18, 2
 76a:	e0 cf       	rjmp	.-64     	; 0x72c <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret

00000770 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 770:	3f d0       	rcall	.+126    	; 0x7f0 <USB_INT_DisableAllInterrupts>
 772:	41 d0       	rcall	.+130    	; 0x7f6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 774:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 778:	8f 77       	andi	r24, 0x7F	; 127
 77a:	80 93 d8 00 	sts	0x00D8, r24
 77e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
 782:	80 68       	ori	r24, 0x80	; 128
 784:	80 93 d8 00 	sts	0x00D8, r24
 788:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 78c:	8f 7d       	andi	r24, 0xDF	; 223
 78e:	80 93 d8 00 	sts	0x00D8, r24
 792:	19 bc       	out	0x29, r1	; 41
 794:	82 e0       	ldi	r24, 0x02	; 2

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 796:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 798:	09 b4       	in	r0, 0x29	; 41
 79a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 79c:	fd cf       	rjmp	.-6      	; 0x798 <USB_ResetInterface+0x28>
 79e:	1e ba       	out	0x1e, r1	; 30
 7a0:	10 92 ad 01 	sts	0x01AD, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
 7a4:	10 92 af 01 	sts	0x01AF, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7a8:	10 92 ae 01 	sts	0x01AE, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7ac:	42 e0       	ldi	r20, 0x02	; 2
 7ae:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	40 df       	rcall	.-384    	; 0x634 <Endpoint_ConfigureEndpoint_Prv>
 7b4:	80 91 e1 00 	lds	r24, 0x00E1
 7b8:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ba:	80 93 e1 00 	sts	0x00E1, r24
 7be:	80 91 e2 00 	lds	r24, 0x00E2
 7c2:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7c4:	80 93 e2 00 	sts	0x00E2, r24
 7c8:	80 91 e2 00 	lds	r24, 0x00E2
 7cc:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7ce:	80 93 e2 00 	sts	0x00E2, r24
 7d2:	80 91 e0 00 	lds	r24, 0x00E0
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7d8:	80 93 e0 00 	sts	0x00E0, r24
 7dc:	08 95       	ret

000007de <USB_Init>:
 7de:	e3 e6       	ldi	r30, 0x63	; 99
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 7e4:	8e 7f       	andi	r24, 0xFE	; 254
 7e6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	80 93 b0 01 	sts	0x01B0, r24

	USB_ResetInterface();
 7ee:	c0 cf       	rjmp	.-128    	; 0x770 <USB_ResetInterface>

000007f0 <USB_INT_DisableAllInterrupts>:
 7f0:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7f4:	08 95       	ret

000007f6 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 7f6:	10 92 e1 00 	sts	0x00E1, r1
 7fa:	08 95       	ret

000007fc <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	11 24       	eor	r1, r1
 806:	2f 93       	push	r18
 808:	3f 93       	push	r19
 80a:	4f 93       	push	r20
 80c:	5f 93       	push	r21
 80e:	6f 93       	push	r22
 810:	7f 93       	push	r23
 812:	8f 93       	push	r24
 814:	9f 93       	push	r25
 816:	af 93       	push	r26
 818:	bf 93       	push	r27
 81a:	ef 93       	push	r30
 81c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 81e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 822:	82 ff       	sbrs	r24, 2
 824:	0a c0       	rjmp	.+20     	; 0x83a <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 826:	80 91 e2 00 	lds	r24, 0x00E2
 82a:	82 ff       	sbrs	r24, 2
 82c:	06 c0       	rjmp	.+12     	; 0x83a <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 82e:	80 91 e1 00 	lds	r24, 0x00E1
 832:	8b 7f       	andi	r24, 0xFB	; 251
 834:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 838:	10 d2       	rcall	.+1056   	; 0xc5a <USB_Event_Stub>
 83a:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 83e:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 840:	16 c0       	rjmp	.+44     	; 0x86e <__vector_11+0x72>
 842:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 846:	80 ff       	sbrs	r24, 0
 848:	12 c0       	rjmp	.+36     	; 0x86e <__vector_11+0x72>
 84a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 84e:	8e 7f       	andi	r24, 0xFE	; 254
 850:	80 93 e2 00 	sts	0x00E2, r24
 854:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 858:	80 61       	ori	r24, 0x10	; 16
 85a:	80 93 e2 00 	sts	0x00E2, r24
 85e:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 862:	80 62       	ori	r24, 0x20	; 32
 864:	80 93 d8 00 	sts	0x00D8, r24
 868:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 86a:	1e ba       	out	0x1e, r1	; 30

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 86c:	4d dd       	rcall	.-1382   	; 0x308 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
 86e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 872:	84 ff       	sbrs	r24, 4
 874:	2d c0       	rjmp	.+90     	; 0x8d0 <__vector_11+0xd4>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 876:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 87a:	84 ff       	sbrs	r24, 4
 87c:	29 c0       	rjmp	.+82     	; 0x8d0 <__vector_11+0xd4>
 87e:	19 bc       	out	0x29, r1	; 41
 880:	82 e0       	ldi	r24, 0x02	; 2

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 882:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 884:	09 b4       	in	r0, 0x29	; 41
 886:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 888:	fd cf       	rjmp	.-6      	; 0x884 <__vector_11+0x88>
 88a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 88e:	8f 7d       	andi	r24, 0xDF	; 223
 890:	80 93 d8 00 	sts	0x00D8, r24
 894:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 898:	8f 7e       	andi	r24, 0xEF	; 239
 89a:	80 93 e1 00 	sts	0x00E1, r24
 89e:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 8a2:	8f 7e       	andi	r24, 0xEF	; 239
 8a4:	80 93 e2 00 	sts	0x00E2, r24
 8a8:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8ac:	81 60       	ori	r24, 0x01	; 1
 8ae:	80 93 e2 00 	sts	0x00E2, r24
 8b2:	80 91 ad 01 	lds	r24, 0x01AD
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 8b6:	88 23       	and	r24, r24
 8b8:	11 f0       	breq	.+4      	; 0x8be <__vector_11+0xc2>
 8ba:	84 e0       	ldi	r24, 0x04	; 4
 8bc:	07 c0       	rjmp	.+14     	; 0x8cc <__vector_11+0xd0>
		  USB_DeviceState = DEVICE_STATE_Configured;
 8be:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 8c2:	87 ff       	sbrs	r24, 7
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__vector_11+0xce>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 8c6:	83 e0       	ldi	r24, 0x03	; 3
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__vector_11+0xd0>
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	8e bb       	out	0x1e, r24	; 30
 8ce:	17 dd       	rcall	.-1490   	; 0x2fe <EVENT_USB_Device_Connect>
 8d0:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 8d4:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 8d6:	26 c0       	rjmp	.+76     	; 0x924 <__vector_11+0x128>
 8d8:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8dc:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 8de:	22 c0       	rjmp	.+68     	; 0x924 <__vector_11+0x128>
 8e0:	80 91 e1 00 	lds	r24, 0x00E1
 8e4:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 8e6:	80 93 e1 00 	sts	0x00E1, r24
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	8e bb       	out	0x1e, r24	; 30
 8ee:	10 92 ad 01 	sts	0x01AD, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8f2:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
 8f6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8f8:	80 93 e1 00 	sts	0x00E1, r24
 8fc:	80 91 e2 00 	lds	r24, 0x00E2
 900:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 902:	80 93 e2 00 	sts	0x00E2, r24
 906:	80 91 e2 00 	lds	r24, 0x00E2
 90a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 90c:	80 93 e2 00 	sts	0x00E2, r24
 910:	42 e0       	ldi	r20, 0x02	; 2
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 916:	8e de       	rcall	.-740    	; 0x634 <Endpoint_ConfigureEndpoint_Prv>
 918:	80 91 f0 00 	lds	r24, 0x00F0
 91c:	88 60       	ori	r24, 0x08	; 8
 91e:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 922:	9b d1       	rcall	.+822    	; 0xc5a <USB_Event_Stub>
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_12>:
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	cf 93       	push	r28
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 96a:	c0 91 e9 00 	lds	r28, 0x00E9
 96e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 970:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 974:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 978:	80 91 f0 00 	lds	r24, 0x00F0
 97c:	87 7f       	andi	r24, 0xF7	; 247
 97e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 982:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 984:	1b d0       	rcall	.+54     	; 0x9bc <USB_Device_ProcessControlRequest>
 986:	10 92 e9 00 	sts	0x00E9, r1
 98a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 98e:	88 60       	ori	r24, 0x08	; 8
 990:	80 93 f0 00 	sts	0x00F0, r24
 994:	c0 93 e9 00 	sts	0x00E9, r28
 998:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 99a:	ef 91       	pop	r30
 99c:	cf 91       	pop	r28
 99e:	bf 91       	pop	r27
 9a0:	af 91       	pop	r26
 9a2:	9f 91       	pop	r25
 9a4:	8f 91       	pop	r24
 9a6:	7f 91       	pop	r23
 9a8:	6f 91       	pop	r22
 9aa:	5f 91       	pop	r21
 9ac:	4f 91       	pop	r20
 9ae:	3f 91       	pop	r19
 9b0:	2f 91       	pop	r18
 9b2:	0f 90       	pop	r0
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	0f 90       	pop	r0
 9b8:	1f 90       	pop	r1
 9ba:	18 95       	reti

000009bc <USB_Device_ProcessControlRequest>:
 9bc:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	aa 97       	sbiw	r28, 0x2a	; 42
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	e1 eb       	ldi	r30, 0xB1	; 177
 9d4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9d6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9da:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9dc:	21 e0       	ldi	r18, 0x01	; 1
 9de:	e9 3b       	cpi	r30, 0xB9	; 185
 9e0:	f2 07       	cpc	r31, r18
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9e4:	a0 dc       	rcall	.-1728   	; 0x326 <EVENT_USB_Device_ControlRequest>
 9e6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ea:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9ec:	1e c1       	rjmp	.+572    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 9ee:	90 91 b1 01 	lds	r25, 0x01B1
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9f2:	80 91 b2 01 	lds	r24, 0x01B2

		switch (USB_ControlRequest.bRequest)
 9f6:	85 30       	cpi	r24, 0x05	; 5
 9f8:	09 f4       	brne	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0x40>
 9fa:	77 c0       	rjmp	.+238    	; 0xaea <USB_Device_ProcessControlRequest+0x12e>
 9fc:	30 f4       	brcc	.+12     	; 0xa0a <USB_Device_ProcessControlRequest+0x4e>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	81 f1       	breq	.+96     	; 0xa62 <USB_Device_ProcessControlRequest+0xa6>
 a02:	68 f0       	brcs	.+26     	; 0xa1e <USB_Device_ProcessControlRequest+0x62>
 a04:	83 30       	cpi	r24, 0x03	; 3
 a06:	69 f1       	breq	.+90     	; 0xa62 <USB_Device_ProcessControlRequest+0xa6>
 a08:	10 c1       	rjmp	.+544    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a0a:	88 30       	cpi	r24, 0x08	; 8
 a0c:	09 f4       	brne	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x54>
 a0e:	e0 c0       	rjmp	.+448    	; 0xbd0 <USB_Device_ProcessControlRequest+0x214>
 a10:	89 30       	cpi	r24, 0x09	; 9
 a12:	09 f4       	brne	.+2      	; 0xa16 <USB_Device_ProcessControlRequest+0x5a>
 a14:	ef c0       	rjmp	.+478    	; 0xbf4 <USB_Device_ProcessControlRequest+0x238>
 a16:	86 30       	cpi	r24, 0x06	; 6
 a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x60>
 a1a:	07 c1       	rjmp	.+526    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a1c:	87 c0       	rjmp	.+270    	; 0xb2c <USB_Device_ProcessControlRequest+0x170>
 a1e:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a20:	81 f0       	breq	.+32     	; 0xa42 <USB_Device_ProcessControlRequest+0x86>
 a22:	92 38       	cpi	r25, 0x82	; 130
 a24:	09 f0       	breq	.+2      	; 0xa28 <USB_Device_ProcessControlRequest+0x6c>
 a26:	01 c1       	rjmp	.+514    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a28:	80 91 b5 01 	lds	r24, 0x01B5
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2c:	8f 70       	andi	r24, 0x0F	; 15
 a2e:	80 93 e9 00 	sts	0x00E9, r24
 a32:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a36:	85 fb       	bst	r24, 5
 a38:	88 27       	eor	r24, r24
 a3a:	80 f9       	bld	r24, 0
 a3c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <USB_Device_ProcessControlRequest+0x92>
 a42:	80 91 ae 01 	lds	r24, 0x01AE
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a46:	90 91 af 01 	lds	r25, 0x01AF
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a4a:	91 11       	cpse	r25, r1
 a4c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a4e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a52:	97 7f       	andi	r25, 0xF7	; 247
 a54:	90 93 e8 00 	sts	0x00E8, r25
 a58:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a5c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a60:	c2 c0       	rjmp	.+388    	; 0xbe6 <USB_Device_ProcessControlRequest+0x22a>
 a62:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a64:	2d 7f       	andi	r18, 0xFD	; 253
 a66:	09 f0       	breq	.+2      	; 0xa6a <USB_Device_ProcessControlRequest+0xae>
 a68:	e0 c0       	rjmp	.+448    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a6a:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a6c:	19 f0       	breq	.+6      	; 0xa74 <USB_Device_ProcessControlRequest+0xb8>
 a6e:	92 30       	cpi	r25, 0x02	; 2
 a70:	61 f0       	breq	.+24     	; 0xa8a <USB_Device_ProcessControlRequest+0xce>
 a72:	db c0       	rjmp	.+438    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a74:	90 91 b3 01 	lds	r25, 0x01B3
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a78:	91 30       	cpi	r25, 0x01	; 1
 a7a:	09 f0       	breq	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0xc2>
 a7c:	d6 c0       	rjmp	.+428    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a7e:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a80:	09 f0       	breq	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0xc8>
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	90 93 af 01 	sts	0x01AF, r25
 a88:	2a c0       	rjmp	.+84     	; 0xade <USB_Device_ProcessControlRequest+0x122>
 a8a:	90 91 b3 01 	lds	r25, 0x01B3

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a8e:	91 11       	cpse	r25, r1
 a90:	26 c0       	rjmp	.+76     	; 0xade <USB_Device_ProcessControlRequest+0x122>
 a92:	20 91 b5 01 	lds	r18, 0x01B5
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a96:	2f 70       	andi	r18, 0x0F	; 15
 a98:	09 f4       	brne	.+2      	; 0xa9c <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a9a:	c7 c0       	rjmp	.+398    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 a9c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa0:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 aa4:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 aa6:	1b c0       	rjmp	.+54     	; 0xade <USB_Device_ProcessControlRequest+0x122>
 aa8:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 aaa:	21 f4       	brne	.+8      	; 0xab4 <USB_Device_ProcessControlRequest+0xf8>
 aac:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ab0:	80 62       	ori	r24, 0x20	; 32
 ab2:	13 c0       	rjmp	.+38     	; 0xada <USB_Device_ProcessControlRequest+0x11e>
 ab4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ab8:	80 61       	ori	r24, 0x10	; 16
 aba:	80 93 eb 00 	sts	0x00EB, r24
 abe:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	02 2e       	mov	r0, r18
 ac4:	01 c0       	rjmp	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x10c>
 ac6:	88 0f       	add	r24, r24
 ac8:	0a 94       	dec	r0
 aca:	ea f7       	brpl	.-6      	; 0xac6 <USB_Device_ProcessControlRequest+0x10a>
 acc:	80 93 ea 00 	sts	0x00EA, r24
 ad0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 ad4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ad8:	88 60       	ori	r24, 0x08	; 8
 ada:	80 93 eb 00 	sts	0x00EB, r24
 ade:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ae2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ae6:	87 7f       	andi	r24, 0xF7	; 247
 ae8:	81 c0       	rjmp	.+258    	; 0xbec <USB_Device_ProcessControlRequest+0x230>
 aea:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 aec:	9e c0       	rjmp	.+316    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 aee:	10 91 b3 01 	lds	r17, 0x01B3
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 af2:	1f 77       	andi	r17, 0x7F	; 127
 af4:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 af8:	80 78       	andi	r24, 0x80	; 128
 afa:	81 2b       	or	r24, r17
 afc:	80 93 e3 00 	sts	0x00E3, r24
 b00:	80 91 e8 00 	lds	r24, 0x00E8
 b04:	87 7f       	andi	r24, 0xF7	; 247
 b06:	80 93 e8 00 	sts	0x00E8, r24
 b0a:	e4 dd       	rcall	.-1080   	; 0x6d4 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b10:	80 ff       	sbrs	r24, 0
 b12:	fc cf       	rjmp	.-8      	; 0xb0c <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b14:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b18:	80 68       	ori	r24, 0x80	; 128
 b1a:	80 93 e3 00 	sts	0x00E3, r24
 b1e:	11 23       	and	r17, r17
 b20:	11 f0       	breq	.+4      	; 0xb26 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x16c>
 b26:	82 e0       	ldi	r24, 0x02	; 2
 b28:	8e bb       	out	0x1e, r24	; 30
 b2a:	7f c0       	rjmp	.+254    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 b2c:	90 58       	subi	r25, 0x80	; 128
 b2e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b30:	08 f0       	brcs	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0x178>
 b32:	7b c0       	rjmp	.+246    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 b34:	80 91 b3 01 	lds	r24, 0x01B3
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b38:	90 91 b4 01 	lds	r25, 0x01B4
 b3c:	8c 3d       	cpi	r24, 0xDC	; 220
 b3e:	23 e0       	ldi	r18, 0x03	; 3
 b40:	92 07       	cpc	r25, r18
 b42:	71 f5       	brne	.+92     	; 0xba0 <USB_Device_ProcessControlRequest+0x1e4>
 b44:	83 e0       	ldi	r24, 0x03	; 3
 b46:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b48:	8a e2       	ldi	r24, 0x2A	; 42
 b4a:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b4c:	4f b7       	in	r20, 0x3f	; 63
 b4e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b50:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b52:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b54:	20 e0       	ldi	r18, 0x00	; 0
 b56:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b58:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b5a:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	50 93 57 00 	sts	0x0057, r21
 b62:	e4 91       	lpm	r30, Z
 b64:	20 ff       	sbrs	r18, 0
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
 b68:	e2 95       	swap	r30
 b6a:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b6c:	3f 5f       	subi	r19, 0xFF	; 255
 b6e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b70:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	ea 30       	cpi	r30, 0x0A	; 10
 b76:	10 f0       	brcs	.+4      	; 0xb7c <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b78:	c7 96       	adiw	r24, 0x37	; 55
 b7a:	01 c0       	rjmp	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x1c2>
 b7c:	c0 96       	adiw	r24, 0x30	; 48
 b7e:	8d 93       	st	X+, r24
 b80:	9d 93       	st	X+, r25
 b82:	2f 5f       	subi	r18, 0xFF	; 255
 b84:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b86:	49 f7       	brne	.-46     	; 0xb5a <USB_Device_ProcessControlRequest+0x19e>
 b88:	4f bf       	out	0x3f, r20	; 63
 b8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b8e:	87 7f       	andi	r24, 0xF7	; 247
 b90:	80 93 e8 00 	sts	0x00E8, r24
 b94:	6a e2       	ldi	r22, 0x2A	; 42
 b96:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b98:	ce 01       	movw	r24, r28
 b9a:	01 96       	adiw	r24, 0x01	; 1
 b9c:	88 dc       	rcall	.-1776   	; 0x4ae <Endpoint_Write_Control_Stream_LE>
 b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <USB_Device_ProcessControlRequest+0x208>
 ba0:	ae 01       	movw	r20, r28
 ba2:	4f 5f       	subi	r20, 0xFF	; 255
 ba4:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ba6:	60 91 b5 01 	lds	r22, 0x01B5
 baa:	4f dc       	rcall	.-1890   	; 0x44a <CALLBACK_USB_GetDescriptor>
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	09 f4       	brne	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x1f6>
 bb0:	3c c0       	rjmp	.+120    	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 bb2:	20 91 e8 00 	lds	r18, 0x00E8
 bb6:	27 7f       	andi	r18, 0xF7	; 247
 bb8:	20 93 e8 00 	sts	0x00E8, r18
 bbc:	bc 01       	movw	r22, r24
 bbe:	89 81       	ldd	r24, Y+1	; 0x01
 bc0:	9a 81       	ldd	r25, Y+2	; 0x02
 bc2:	d6 dc       	rcall	.-1620   	; 0x570 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bc4:	80 91 e8 00 	lds	r24, 0x00E8
 bc8:	8b 77       	andi	r24, 0x7B	; 123
 bca:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bce:	2d c0       	rjmp	.+90     	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 bd0:	90 38       	cpi	r25, 0x80	; 128
 bd2:	59 f5       	brne	.+86     	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 bd4:	80 91 e8 00 	lds	r24, 0x00E8
 bd8:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bda:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bde:	80 91 ad 01 	lds	r24, 0x01AD
 be2:	80 93 f1 00 	sts	0x00F1, r24
 be6:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bea:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bec:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf0:	71 dd       	rcall	.-1310   	; 0x6d4 <Endpoint_ClearStatusStage>
 bf2:	1b c0       	rjmp	.+54     	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 bf4:	91 11       	cpse	r25, r1
 bf6:	19 c0       	rjmp	.+50     	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
 bf8:	90 91 b3 01 	lds	r25, 0x01B3
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bfc:	92 30       	cpi	r25, 0x02	; 2
 bfe:	a8 f4       	brcc	.+42     	; 0xc2a <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c00:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c04:	87 7f       	andi	r24, 0xF7	; 247
 c06:	80 93 e8 00 	sts	0x00E8, r24
 c0a:	90 93 ad 01 	sts	0x01AD, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0e:	62 dd       	rcall	.-1340   	; 0x6d4 <Endpoint_ClearStatusStage>
 c10:	80 91 ad 01 	lds	r24, 0x01AD
 c14:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <USB_Device_ProcessControlRequest+0x264>
 c18:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c1c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <USB_Device_ProcessControlRequest+0x268>
 c20:	84 e0       	ldi	r24, 0x04	; 4
 c22:	01 c0       	rjmp	.+2      	; 0xc26 <USB_Device_ProcessControlRequest+0x26a>
 c24:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c26:	8e bb       	out	0x1e, r24	; 30
 c28:	73 db       	rcall	.-2330   	; 0x310 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c2a:	80 91 e8 00 	lds	r24, 0x00E8
 c2e:	83 ff       	sbrs	r24, 3
 c30:	0a c0       	rjmp	.+20     	; 0xc46 <USB_Device_ProcessControlRequest+0x28a>
 c32:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c3c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c40:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c42:	80 93 eb 00 	sts	0x00EB, r24
 c46:	aa 96       	adiw	r28, 0x2a	; 42
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c4c:	de bf       	out	0x3e, r29	; 62
 c4e:	0f be       	out	0x3f, r0	; 63
 c50:	cd bf       	out	0x3d, r28	; 61
 c52:	df 91       	pop	r29
 c54:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c56:	1f 91       	pop	r17
 c58:	08 95       	ret

00000c5a <USB_Event_Stub>:
 c5a:	08 95       	ret

00000c5c <USB_USBTask>:
 c5c:	cf 93       	push	r28
 c5e:	8e b3       	in	r24, 0x1e	; 30
 c60:	88 23       	and	r24, r24
 c62:	a9 f0       	breq	.+42     	; 0xc8e <USB_USBTask+0x32>
 c64:	80 91 e9 00 	lds	r24, 0x00E9
 c68:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c6a:	90 91 ec 00 	lds	r25, 0x00EC
 c6e:	90 ff       	sbrs	r25, 0
 c70:	02 c0       	rjmp	.+4      	; 0xc76 <USB_USBTask+0x1a>
 c72:	90 e8       	ldi	r25, 0x80	; 128
 c74:	01 c0       	rjmp	.+2      	; 0xc78 <USB_USBTask+0x1c>
 c76:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c78:	c9 2f       	mov	r28, r25
 c7a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c7c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c80:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c84:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 c86:	9a de       	rcall	.-716    	; 0x9bc <USB_Device_ProcessControlRequest>
 c88:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c8a:	c0 93 e9 00 	sts	0x00E9, r28
 c8e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c90:	08 95       	ret

00000c92 <CDC_Device_ConfigureEndpoints>:
 c92:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c94:	df 93       	push	r29
 c96:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c98:	fc 01       	movw	r30, r24
 c9a:	70 96       	adiw	r30, 0x10	; 16
 c9c:	8b e0       	ldi	r24, 0x0B	; 11
 c9e:	df 01       	movw	r26, r30
 ca0:	1d 92       	st	X+, r1
 ca2:	8a 95       	dec	r24
 ca4:	e9 f7       	brne	.-6      	; 0xca0 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 ca6:	82 e0       	ldi	r24, 0x02	; 2
 ca8:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 caa:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 cac:	83 e0       	ldi	r24, 0x03	; 3
 cae:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 cb0:	61 e0       	ldi	r22, 0x01	; 1
 cb2:	ce 01       	movw	r24, r28
 cb4:	01 96       	adiw	r24, 0x01	; 1
 cb6:	d2 dc       	rcall	.-1628   	; 0x65c <Endpoint_ConfigureEndpointTable>
 cb8:	88 23       	and	r24, r24
 cba:	61 f0       	breq	.+24     	; 0xcd4 <CDC_Device_ConfigureEndpoints+0x42>
 cbc:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cbe:	ce 01       	movw	r24, r28
 cc0:	06 96       	adiw	r24, 0x06	; 6
 cc2:	cc dc       	rcall	.-1640   	; 0x65c <Endpoint_ConfigureEndpointTable>
 cc4:	88 23       	and	r24, r24
 cc6:	31 f0       	breq	.+12     	; 0xcd4 <CDC_Device_ConfigureEndpoints+0x42>
 cc8:	61 e0       	ldi	r22, 0x01	; 1
 cca:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 ccc:	0b 96       	adiw	r24, 0x0b	; 11
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
	  return false;

	return true;
}
 cd2:	c4 cc       	rjmp	.-1656   	; 0x65c <Endpoint_ConfigureEndpointTable>
 cd4:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 cd6:	df 91       	pop	r29
 cd8:	cf 91       	pop	r28
	  return false;

	return true;
}
 cda:	08 95       	ret

00000cdc <CDC_Device_SendByte>:
 cdc:	cf 93       	push	r28
 cde:	c6 2f       	mov	r28, r22
 ce0:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ce2:	24 30       	cpi	r18, 0x04	; 4
 ce4:	f1 f4       	brne	.+60     	; 0xd22 <CDC_Device_SendByte+0x46>
 ce6:	fc 01       	movw	r30, r24
 ce8:	44 89       	ldd	r20, Z+20	; 0x14
 cea:	55 89       	ldd	r21, Z+21	; 0x15
 cec:	66 89       	ldd	r22, Z+22	; 0x16
 cee:	77 89       	ldd	r23, Z+23	; 0x17
 cf0:	45 2b       	or	r20, r21
 cf2:	46 2b       	or	r20, r22
 cf4:	47 2b       	or	r20, r23
 cf6:	a9 f0       	breq	.+42     	; 0xd22 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cf8:	81 81       	ldd	r24, Z+1	; 0x01
 cfa:	8f 70       	andi	r24, 0x0F	; 15
 cfc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d00:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 d04:	85 ff       	sbrs	r24, 5
 d06:	04 c0       	rjmp	.+8      	; 0xd10 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d08:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 d0c:	80 e0       	ldi	r24, 0x00	; 0
 d0e:	0a c0       	rjmp	.+20     	; 0xd24 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d10:	80 91 e8 00 	lds	r24, 0x00E8
 d14:	8e 77       	andi	r24, 0x7E	; 126
 d16:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d1a:	fb dc       	rcall	.-1546   	; 0x712 <Endpoint_WaitUntilReady>
 d1c:	88 23       	and	r24, r24
 d1e:	a1 f3       	breq	.-24     	; 0xd08 <CDC_Device_SendByte+0x2c>
 d20:	01 c0       	rjmp	.+2      	; 0xd24 <CDC_Device_SendByte+0x48>
 d22:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d24:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 d26:	08 95       	ret

00000d28 <CDC_Device_Flush>:
 d28:	2e b3       	in	r18, 0x1e	; 30

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d2a:	24 30       	cpi	r18, 0x04	; 4
 d2c:	21 f5       	brne	.+72     	; 0xd76 <CDC_Device_Flush+0x4e>
 d2e:	fc 01       	movw	r30, r24
 d30:	44 89       	ldd	r20, Z+20	; 0x14
 d32:	55 89       	ldd	r21, Z+21	; 0x15
 d34:	66 89       	ldd	r22, Z+22	; 0x16
 d36:	77 89       	ldd	r23, Z+23	; 0x17
 d38:	45 2b       	or	r20, r21
 d3a:	46 2b       	or	r20, r22
 d3c:	47 2b       	or	r20, r23
 d3e:	d9 f0       	breq	.+54     	; 0xd76 <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d40:	81 81       	ldd	r24, Z+1	; 0x01
 d42:	8f 70       	andi	r24, 0x0F	; 15
 d44:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 d48:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 d4c:	88 23       	and	r24, r24
 d4e:	89 f0       	breq	.+34     	; 0xd72 <CDC_Device_Flush+0x4a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d50:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d54:	80 91 e8 00 	lds	r24, 0x00E8
 d58:	8e 77       	andi	r24, 0x7E	; 126
 d5a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 d5e:	95 fd       	sbrc	r25, 5
 d60:	08 c0       	rjmp	.+16     	; 0xd72 <CDC_Device_Flush+0x4a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d62:	d7 dc       	rcall	.-1618   	; 0x712 <Endpoint_WaitUntilReady>
 d64:	81 11       	cpse	r24, r1
 d66:	08 c0       	rjmp	.+16     	; 0xd78 <CDC_Device_Flush+0x50>
 d68:	80 91 e8 00 	lds	r24, 0x00E8
 d6c:	8e 77       	andi	r24, 0x7E	; 126
 d6e:	80 93 e8 00 	sts	0x00E8, r24
 d72:	80 e0       	ldi	r24, 0x00	; 0
 d74:	08 95       	ret
 d76:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d78:	08 95       	ret

00000d7a <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d7a:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d7c:	24 30       	cpi	r18, 0x04	; 4
 d7e:	89 f4       	brne	.+34     	; 0xda2 <CDC_Device_USBTask+0x28>
 d80:	fc 01       	movw	r30, r24
 d82:	44 89       	ldd	r20, Z+20	; 0x14
 d84:	55 89       	ldd	r21, Z+21	; 0x15
 d86:	66 89       	ldd	r22, Z+22	; 0x16
 d88:	77 89       	ldd	r23, Z+23	; 0x17
 d8a:	45 2b       	or	r20, r21
 d8c:	46 2b       	or	r20, r22
 d8e:	47 2b       	or	r20, r23
 d90:	41 f0       	breq	.+16     	; 0xda2 <CDC_Device_USBTask+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d92:	21 81       	ldd	r18, Z+1	; 0x01
 d94:	2f 70       	andi	r18, 0x0F	; 15
 d96:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d9a:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 d9e:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
 da0:	c3 cf       	rjmp	.-122    	; 0xd28 <CDC_Device_Flush>
 da2:	08 95       	ret

00000da4 <CDC_Device_BytesReceived>:
 da4:	2e b3       	in	r18, 0x1e	; 30
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 da6:	24 30       	cpi	r18, 0x04	; 4
 da8:	d1 f4       	brne	.+52     	; 0xdde <CDC_Device_BytesReceived+0x3a>
 daa:	fc 01       	movw	r30, r24
 dac:	44 89       	ldd	r20, Z+20	; 0x14
 dae:	55 89       	ldd	r21, Z+21	; 0x15
 db0:	66 89       	ldd	r22, Z+22	; 0x16
 db2:	77 89       	ldd	r23, Z+23	; 0x17
 db4:	45 2b       	or	r20, r21
 db6:	46 2b       	or	r20, r22
 db8:	47 2b       	or	r20, r23
 dba:	89 f0       	breq	.+34     	; 0xdde <CDC_Device_BytesReceived+0x3a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dbc:	86 81       	ldd	r24, Z+6	; 0x06
 dbe:	8f 70       	andi	r24, 0x0F	; 15
 dc0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 dc4:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 dc8:	82 ff       	sbrs	r24, 2
 dca:	09 c0       	rjmp	.+18     	; 0xdde <CDC_Device_BytesReceived+0x3a>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 dcc:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
 dd0:	81 11       	cpse	r24, r1
 dd2:	08 c0       	rjmp	.+16     	; 0xde4 <CDC_Device_BytesReceived+0x40>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dd4:	80 91 e8 00 	lds	r24, 0x00E8
 dd8:	8b 77       	andi	r24, 0x7B	; 123
 dda:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearOUT();
			return 0;
 dde:	80 e0       	ldi	r24, 0x00	; 0
 de0:	90 e0       	ldi	r25, 0x00	; 0
 de2:	08 95       	ret
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 de4:	80 91 f2 00 	lds	r24, 0x00F2
 de8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 dea:	08 95       	ret

00000dec <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 dec:	2e b3       	in	r18, 0x1e	; 30
 dee:	24 30       	cpi	r18, 0x04	; 4
 df0:	19 f0       	breq	.+6      	; 0xdf8 <CDC_Device_ReceiveByte+0xc>
	  return -1;
 df2:	8f ef       	ldi	r24, 0xFF	; 255
 df4:	9f ef       	ldi	r25, 0xFF	; 255
 df6:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 df8:	fc 01       	movw	r30, r24
 dfa:	44 89       	ldd	r20, Z+20	; 0x14
 dfc:	55 89       	ldd	r21, Z+21	; 0x15
 dfe:	66 89       	ldd	r22, Z+22	; 0x16
 e00:	77 89       	ldd	r23, Z+23	; 0x17
 e02:	45 2b       	or	r20, r21
 e04:	46 2b       	or	r20, r22
 e06:	47 2b       	or	r20, r23
 e08:	a1 f3       	breq	.-24     	; 0xdf2 <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e0a:	86 81       	ldd	r24, Z+6	; 0x06
 e0c:	8f 70       	andi	r24, 0x0F	; 15
 e0e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e12:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 e16:	82 ff       	sbrs	r24, 2
 e18:	ec cf       	rjmp	.-40     	; 0xdf2 <CDC_Device_ReceiveByte+0x6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 e1a:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 e1e:	88 23       	and	r24, r24
 e20:	21 f0       	breq	.+8      	; 0xe2a <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e22:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 e26:	30 e0       	ldi	r19, 0x00	; 0
 e28:	02 c0       	rjmp	.+4      	; 0xe2e <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 e2a:	2f ef       	ldi	r18, 0xFF	; 255
 e2c:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 e2e:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 e32:	81 11       	cpse	r24, r1
 e34:	05 c0       	rjmp	.+10     	; 0xe40 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e36:	80 91 e8 00 	lds	r24, 0x00E8
 e3a:	8b 77       	andi	r24, 0x7B	; 123
 e3c:	80 93 e8 00 	sts	0x00E8, r24
 e40:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 e42:	08 95       	ret

00000e44 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 e44:	08 95       	ret

00000e46 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e46:	cf 93       	push	r28
 e48:	df 93       	push	r29
 e4a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e4c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e50:	83 ff       	sbrs	r24, 3
 e52:	a5 c0       	rjmp	.+330    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e54:	88 81       	ld	r24, Y
 e56:	90 e0       	ldi	r25, 0x00	; 0
 e58:	20 91 b5 01 	lds	r18, 0x01B5
 e5c:	30 91 b6 01 	lds	r19, 0x01B6
 e60:	28 17       	cp	r18, r24
 e62:	39 07       	cpc	r19, r25
 e64:	09 f0       	breq	.+2      	; 0xe68 <CDC_Device_ProcessControlRequest+0x22>
 e66:	9b c0       	rjmp	.+310    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
	  return;

	switch (USB_ControlRequest.bRequest)
 e68:	80 91 b2 01 	lds	r24, 0x01B2
 e6c:	81 32       	cpi	r24, 0x21	; 33
 e6e:	61 f0       	breq	.+24     	; 0xe88 <CDC_Device_ProcessControlRequest+0x42>
 e70:	20 f4       	brcc	.+8      	; 0xe7a <CDC_Device_ProcessControlRequest+0x34>
 e72:	80 32       	cpi	r24, 0x20	; 32
 e74:	09 f4       	brne	.+2      	; 0xe78 <CDC_Device_ProcessControlRequest+0x32>
 e76:	3e c0       	rjmp	.+124    	; 0xef4 <CDC_Device_ProcessControlRequest+0xae>
 e78:	92 c0       	rjmp	.+292    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
 e7a:	82 32       	cpi	r24, 0x22	; 34
 e7c:	09 f4       	brne	.+2      	; 0xe80 <CDC_Device_ProcessControlRequest+0x3a>
 e7e:	6b c0       	rjmp	.+214    	; 0xf56 <CDC_Device_ProcessControlRequest+0x110>
 e80:	83 32       	cpi	r24, 0x23	; 35
 e82:	09 f4       	brne	.+2      	; 0xe86 <CDC_Device_ProcessControlRequest+0x40>
 e84:	7c c0       	rjmp	.+248    	; 0xf7e <CDC_Device_ProcessControlRequest+0x138>
 e86:	8b c0       	rjmp	.+278    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e88:	80 91 b1 01 	lds	r24, 0x01B1
 e8c:	81 3a       	cpi	r24, 0xA1	; 161
 e8e:	09 f0       	breq	.+2      	; 0xe92 <CDC_Device_ProcessControlRequest+0x4c>
 e90:	86 c0       	rjmp	.+268    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e92:	80 91 e8 00 	lds	r24, 0x00E8
 e96:	87 7f       	andi	r24, 0xF7	; 247
 e98:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e9c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 ea0:	80 ff       	sbrs	r24, 0
 ea2:	fc cf       	rjmp	.-8      	; 0xe9c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 ea4:	4c 89       	ldd	r20, Y+20	; 0x14
 ea6:	5d 89       	ldd	r21, Y+21	; 0x15
 ea8:	6e 89       	ldd	r22, Y+22	; 0x16
 eaa:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 eac:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 eb0:	bb 27       	eor	r27, r27
 eb2:	a7 2f       	mov	r26, r23
 eb4:	96 2f       	mov	r25, r22
 eb6:	85 2f       	mov	r24, r21
 eb8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 ebc:	cb 01       	movw	r24, r22
 ebe:	aa 27       	eor	r26, r26
 ec0:	bb 27       	eor	r27, r27
 ec2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 ec6:	47 2f       	mov	r20, r23
 ec8:	55 27       	eor	r21, r21
 eca:	66 27       	eor	r22, r22
 ecc:	77 27       	eor	r23, r23
 ece:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 ed2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ed4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 ed8:	89 8d       	ldd	r24, Y+25	; 0x19
 eda:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 ede:	8a 8d       	ldd	r24, Y+26	; 0x1a
 ee0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ee4:	80 91 e8 00 	lds	r24, 0x00E8
 ee8:	8e 77       	andi	r24, 0x7E	; 126
 eea:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 eee:	df 91       	pop	r29
 ef0:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 ef2:	f0 cb       	rjmp	.-2080   	; 0x6d4 <Endpoint_ClearStatusStage>
 ef4:	80 91 b1 01 	lds	r24, 0x01B1
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ef8:	81 32       	cpi	r24, 0x21	; 33
 efa:	09 f0       	breq	.+2      	; 0xefe <CDC_Device_ProcessControlRequest+0xb8>
 efc:	50 c0       	rjmp	.+160    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
 efe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f02:	87 7f       	andi	r24, 0xF7	; 247
 f04:	80 93 e8 00 	sts	0x00E8, r24
 f08:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 f0c:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 f0e:	04 c0       	rjmp	.+8      	; 0xf18 <CDC_Device_ProcessControlRequest+0xd2>
 f10:	8e b3       	in	r24, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 f12:	81 11       	cpse	r24, r1
 f14:	f9 cf       	rjmp	.-14     	; 0xf08 <CDC_Device_ProcessControlRequest+0xc2>
 f16:	43 c0       	rjmp	.+134    	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
 f18:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 f1c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 f20:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 f24:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 f28:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 f2a:	2d 8b       	std	Y+21, r18	; 0x15
 f2c:	9e 8b       	std	Y+22, r25	; 0x16
 f2e:	8f 8b       	std	Y+23, r24	; 0x17
 f30:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 f34:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 f36:	80 91 f1 00 	lds	r24, 0x00F1
 f3a:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 f3c:	80 91 f1 00 	lds	r24, 0x00F1
 f40:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 f42:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f46:	8b 77       	andi	r24, 0x7B	; 123
 f48:	80 93 e8 00 	sts	0x00E8, r24
 f4c:	c3 db       	rcall	.-2170   	; 0x6d4 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 f4e:	ce 01       	movw	r24, r28
 f50:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f52:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 f54:	eb c9       	rjmp	.-3114   	; 0x32c <EVENT_CDC_Device_LineEncodingChanged>
 f56:	80 91 b1 01 	lds	r24, 0x01B1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f5a:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f5c:	01 f5       	brne	.+64     	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
 f5e:	80 91 e8 00 	lds	r24, 0x00E8
 f62:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f64:	80 93 e8 00 	sts	0x00E8, r24
 f68:	b5 db       	rcall	.-2198   	; 0x6d4 <Endpoint_ClearStatusStage>
 f6a:	80 91 b3 01 	lds	r24, 0x01B3
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f6e:	90 91 b4 01 	lds	r25, 0x01B4

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f72:	99 8b       	std	Y+17, r25	; 0x11
 f74:	88 8b       	std	Y+16, r24	; 0x10
 f76:	ce 01       	movw	r24, r28
 f78:	df 91       	pop	r29
 f7a:	cf 91       	pop	r28
 f7c:	52 ca       	rjmp	.-2908   	; 0x422 <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f7e:	80 91 b1 01 	lds	r24, 0x01B1
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 f82:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f84:	61 f4       	brne	.+24     	; 0xf9e <CDC_Device_ProcessControlRequest+0x158>
 f86:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f8a:	87 7f       	andi	r24, 0xF7	; 247
 f8c:	80 93 e8 00 	sts	0x00E8, r24
 f90:	a1 db       	rcall	.-2238   	; 0x6d4 <Endpoint_ClearStatusStage>
 f92:	60 91 b3 01 	lds	r22, 0x01B3
 f96:	ce 01       	movw	r24, r28
 f98:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f9a:	cf 91       	pop	r28
 f9c:	53 cf       	rjmp	.-346    	; 0xe44 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f9e:	df 91       	pop	r29
 fa0:	cf 91       	pop	r28
 fa2:	08 95       	ret

00000fa4 <__udivmodsi4>:
			}

			break;
	}
}
 fa4:	a1 e2       	ldi	r26, 0x21	; 33
 fa6:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 fa8:	aa 1b       	sub	r26, r26
 faa:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
 fac:	fd 01       	movw	r30, r26
 fae:	0d c0       	rjmp	.+26     	; 0xfca <__udivmodsi4_ep>

00000fb0 <__udivmodsi4_loop>:
 fb0:	aa 1f       	adc	r26, r26
 fb2:	bb 1f       	adc	r27, r27
 fb4:	ee 1f       	adc	r30, r30
 fb6:	ff 1f       	adc	r31, r31
 fb8:	a2 17       	cp	r26, r18
 fba:	b3 07       	cpc	r27, r19
 fbc:	e4 07       	cpc	r30, r20
 fbe:	f5 07       	cpc	r31, r21
 fc0:	20 f0       	brcs	.+8      	; 0xfca <__udivmodsi4_ep>
 fc2:	a2 1b       	sub	r26, r18
 fc4:	b3 0b       	sbc	r27, r19
 fc6:	e4 0b       	sbc	r30, r20
 fc8:	f5 0b       	sbc	r31, r21

00000fca <__udivmodsi4_ep>:
 fca:	66 1f       	adc	r22, r22
 fcc:	77 1f       	adc	r23, r23
 fce:	88 1f       	adc	r24, r24
 fd0:	99 1f       	adc	r25, r25
 fd2:	1a 94       	dec	r1
 fd4:	69 f7       	brne	.-38     	; 0xfb0 <__udivmodsi4_loop>
 fd6:	60 95       	com	r22
 fd8:	70 95       	com	r23
 fda:	80 95       	com	r24
 fdc:	90 95       	com	r25
 fde:	9b 01       	movw	r18, r22
 fe0:	ac 01       	movw	r20, r24
 fe2:	bd 01       	movw	r22, r26
 fe4:	cf 01       	movw	r24, r30
 fe6:	08 95       	ret

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>

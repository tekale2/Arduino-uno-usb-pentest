
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001afc  00001b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800130  00800130  00001bc0  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005657  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f25d  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003740  00000000  00000000  0001515d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055ac  00000000  00000000  0001889d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001808  00000000  00000000  0001de4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005025  00000000  00000000  0001f654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac3c  00000000  00000000  00024679  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f2b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	31 c1       	rjmp	.+610    	; 0x268 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c1       	rjmp	.+606    	; 0x268 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c1       	rjmp	.+602    	; 0x268 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c1       	rjmp	.+598    	; 0x268 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c1       	rjmp	.+594    	; 0x268 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c1       	rjmp	.+590    	; 0x268 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c1       	rjmp	.+586    	; 0x268 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c1       	rjmp	.+582    	; 0x268 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c1       	rjmp	.+578    	; 0x268 <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c5       	rjmp	.+2866   	; 0xb5c <__vector_10>
      2a:	00 00       	nop
      2c:	1d c1       	rjmp	.+570    	; 0x268 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1b c1       	rjmp	.+566    	; 0x268 <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c1       	rjmp	.+562    	; 0x268 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	17 c1       	rjmp	.+558    	; 0x268 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c1       	rjmp	.+554    	; 0x268 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c1       	rjmp	.+550    	; 0x268 <__bad_interrupt>
      42:	00 00       	nop
      44:	11 c1       	rjmp	.+546    	; 0x268 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	0f c1       	rjmp	.+542    	; 0x268 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c1       	rjmp	.+538    	; 0x268 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c1       	rjmp	.+534    	; 0x268 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	09 c1       	rjmp	.+530    	; 0x268 <__bad_interrupt>
      56:	00 00       	nop
      58:	07 c1       	rjmp	.+526    	; 0x268 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c1       	rjmp	.+522    	; 0x268 <__bad_interrupt>
      5e:	00 00       	nop
      60:	03 c1       	rjmp	.+518    	; 0x268 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	01 c1       	rjmp	.+514    	; 0x268 <__bad_interrupt>
      66:	00 00       	nop
      68:	ff c0       	rjmp	.+510    	; 0x268 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	fd c0       	rjmp	.+506    	; 0x268 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c0       	rjmp	.+502    	; 0x268 <__bad_interrupt>
      72:	00 00       	nop
      74:	f9 c0       	rjmp	.+498    	; 0x268 <__bad_interrupt>
      76:	00 00       	nop
      78:	f7 c0       	rjmp	.+494    	; 0x268 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c0       	rjmp	.+490    	; 0x268 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	f3 c0       	rjmp	.+486    	; 0x268 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c0       	rjmp	.+482    	; 0x268 <__bad_interrupt>
      86:	00 00       	nop
      88:	ef c0       	rjmp	.+478    	; 0x268 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	ed c0       	rjmp	.+474    	; 0x268 <__bad_interrupt>
      8e:	00 00       	nop
      90:	eb c0       	rjmp	.+470    	; 0x268 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	e9 c0       	rjmp	.+466    	; 0x268 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4554>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4547>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4542>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4540>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
				ReportSize     -= 4;
     146:	76 69 63 65 20 4c 69 6e 65 20 45 6e 63 6f 64 69     vice Line Encodi
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	6e 67 2e 0d 0a 00                                   ng....

0000015c <__c.4538>:
     15c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     16c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17c:	6f 6e 2e 0d 0a 00                                   on....

00000182 <__c.4536>:
				ReportData     += 1;
     182:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     192:	4e 6f 74 20 61 20 56 61 6c 69 64 20 43 44 43 20     Not a Valid CDC 
     1a2:	43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00     Class Device....

000001b2 <__c.4534>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b2:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c2:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d2:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001df <__c.4527>:
     1df:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1ef:	68 65 64 2e 0d 0a 00                                hed....

000001f6 <__c.4522>:
     1f6:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     206:	0d 0a 00                                            ...

00000209 <__c.4509>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     209:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     219:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     229:	37 6d 00                                            7m.

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d0 e2       	ldi	r29, 0x20	; 32
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	ec ef       	ldi	r30, 0xFC	; 252
     240:	fa e1       	ldi	r31, 0x1A	; 26
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0b bf       	out	0x3b, r16	; 59
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x14>
     248:	07 90       	elpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a0 33       	cpi	r26, 0x30	; 48
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0x10>

00000252 <__do_clear_bss>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	11 e0       	ldi	r17, 0x01	; 1
     254:	a0 e3       	ldi	r26, 0x30	; 48
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	a2 35       	cpi	r26, 0x52	; 82
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	b1 07       	cpc	r27, r17
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>
     262:	4d d0       	rcall	.+154    	; 0x2fe <main>
     264:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <_exit>

00000268 <__bad_interrupt>:
     268:	cb ce       	rjmp	.-618    	; 0x0 <__vectors>

0000026a <LEDs_SetAllLEDs>:
     26a:	9b b1       	in	r25, 0x0b	; 11
     26c:	9f 70       	andi	r25, 0x0F	; 15
     26e:	98 2b       	or	r25, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	9b b9       	out	0x0b, r25	; 11
				break;
     272:	08 95       	ret

00000274 <SetupHardware>:

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	84 b7       	in	r24, 0x34	; 52
     276:	87 7f       	andi	r24, 0xF7	; 247
     278:	84 bf       	out	0x34, r24	; 52
     27a:	88 e1       	ldi	r24, 0x18	; 24
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	80 93 60 00 	sts	0x0060, r24
				break;
     284:	10 92 60 00 	sts	0x0060, r1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     288:	0f be       	out	0x3f, r0	; 63
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	80 e8       	ldi	r24, 0x80	; 128
     28e:	0f b6       	in	r0, 0x3f	; 63
				break;
     290:	f8 94       	cli

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	80 93 61 00 	sts	0x0061, r24
     296:	90 93 61 00 	sts	0x0061, r25
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	90 e0       	ldi	r25, 0x00	; 0
				break;
     2a0:	90 93 cd 00 	sts	0x00CD, r25

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a4:	80 93 cc 00 	sts	0x00CC, r24
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	80 93 ca 00 	sts	0x00CA, r24
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	10 92 c8 00 	sts	0x00C8, r1
     2b2:	88 e1       	ldi	r24, 0x18	; 24
     2b4:	80 93 c9 00 	sts	0x00C9, r24
     2b8:	53 9a       	sbi	0x0a, 3	; 10
     2ba:	5a 9a       	sbi	0x0b, 2	; 11
				break;
     2bc:	8a b1       	in	r24, 0x0a	; 10
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	80 6f       	ori	r24, 0xF0	; 240
     2c0:	8a b9       	out	0x0a, r24	; 10
     2c2:	8b b1       	in	r24, 0x0b	; 11
     2c4:	8f 70       	andi	r24, 0x0F	; 15
     2c6:	8b b9       	out	0x0b, r24	; 11
     2c8:	2e d4       	rcall	.+2140   	; 0xb26 <USB_Init>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
				break;
     2cc:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <Serial_CreateStream>

000002d2 <CDCHost_Task>:
     2d2:	80 91 3d 01 	lds	r24, 0x013D
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	8b 30       	cpi	r24, 0x0B	; 11
     2d8:	89 f4       	brne	.+34     	; 0x2fc <CDCHost_Task+0x2a>
     2da:	80 e0       	ldi	r24, 0x00	; 0

				if (ParserData->UsingReportIDs)
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	f4 d7       	rcall	.+4072   	; 0x12c8 <CDC_Host_BytesReceived>
     2e0:	89 2b       	or	r24, r25
     2e2:	61 f0       	breq	.+24     	; 0x2fc <CDCHost_Task+0x2a>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 9c 09 	call	0x1338	; 0x1338 <CDC_Host_ReceiveByte>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	97 fd       	sbrc	r25, 7
     2ee:	06 c0       	rjmp	.+12     	; 0x2fc <CDCHost_Task+0x2a>
     2f0:	60 91 4e 01 	lds	r22, 0x014E
     2f4:	70 91 4f 01 	lds	r23, 0x014F
     2f8:	0c 94 96 0a 	jmp	0x152c	; 0x152c <fputc>
     2fc:	08 95       	ret

000002fe <main>:
     2fe:	ba df       	rcall	.-140    	; 0x274 <SetupHardware>
     300:	89 e0       	ldi	r24, 0x09	; 9
     302:	92 e0       	ldi	r25, 0x02	; 2
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <puts_P>
     308:	80 e1       	ldi	r24, 0x10	; 16
     30a:	af df       	rcall	.-162    	; 0x26a <LEDs_SetAllLEDs>
     30c:	78 94       	sei
     30e:	e1 df       	rcall	.-62     	; 0x2d2 <CDCHost_Task>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 08 0a 	call	0x1410	; 0x1410 <CDC_Host_USBTask>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	a6 d6       	rcall	.+3404   	; 0x1066 <USB_USBTask>
     31a:	f9 cf       	rjmp	.-14     	; 0x30e <main+0x10>

0000031c <EVENT_USB_Host_DeviceAttached>:
     31c:	86 ef       	ldi	r24, 0xF6	; 246
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <puts_P>
     324:	80 ea       	ldi	r24, 0xA0	; 160
     326:	a1 cf       	rjmp	.-190    	; 0x26a <LEDs_SetAllLEDs>

00000328 <EVENT_USB_Host_DeviceUnattached>:
     328:	8f ed       	ldi	r24, 0xDF	; 223
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <puts_P>
     330:	80 e1       	ldi	r24, 0x10	; 16
     332:	9b cf       	rjmp	.-202    	; 0x26a <LEDs_SetAllLEDs>

00000334 <EVENT_USB_Host_DeviceEnumerationComplete>:
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	c2 50       	subi	r28, 0x02	; 2
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	d2 40       	sbci	r29, 0x02	; 2
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	80 ea       	ldi	r24, 0xA0	; 160
     34c:	8e df       	rcall	.-228    	; 0x26a <LEDs_SetAllLEDs>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	32 e0       	ldi	r19, 0x02	; 2
     352:	ae 01       	movw	r20, r28
     354:	4f 5f       	subi	r20, 0xFF	; 255
     356:	5f 4f       	sbci	r21, 0xFF	; 255
     358:	be 01       	movw	r22, r28
     35a:	6f 5f       	subi	r22, 0xFF	; 255
     35c:	7d 4f       	sbci	r23, 0xFD	; 253
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	ac d4       	rcall	.+2392   	; 0xcba <USB_Host_GetDeviceConfigDescriptor>
     362:	88 23       	and	r24, r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	19 f0       	breq	.+6      	; 0x36c <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     366:	82 eb       	ldi	r24, 0xB2	; 178
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	32 c0       	rjmp	.+100    	; 0x3d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	cf 5f       	subi	r28, 0xFF	; 255
     36e:	dd 4f       	sbci	r29, 0xFD	; 253
     370:	68 81       	ld	r22, Y
     372:	79 81       	ldd	r23, Y+1	; 0x01
     374:	c1 50       	subi	r28, 0x01	; 1
     376:	d2 40       	sbci	r29, 0x02	; 2

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	ae 01       	movw	r20, r28
     37a:	4f 5f       	subi	r20, 0xFF	; 255
     37c:	5f 4f       	sbci	r21, 0xFF	; 255
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	b5 d6       	rcall	.+3434   	; 0x10ee <CDC_Host_ConfigurePipes>
     384:	88 23       	and	r24, r24
     386:	19 f0       	breq	.+6      	; 0x38e <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
				break;
     388:	82 e8       	ldi	r24, 0x82	; 130

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	21 c0       	rjmp	.+66     	; 0x3d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	43 d6       	rcall	.+3206   	; 0x1018 <USB_Host_SetDeviceConfiguration>
     392:	88 23       	and	r24, r24
     394:	19 f0       	breq	.+6      	; 0x39c <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	8c e5       	ldi	r24, 0x5C	; 92
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	1a c0       	rjmp	.+52     	; 0x3d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
     39c:	80 e8       	ldi	r24, 0x80	; 128
     39e:	95 e2       	ldi	r25, 0x25	; 37
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	80 93 18 01 	sts	0x0118, r24
     3a8:	90 93 19 01 	sts	0x0119, r25
     3ac:	a0 93 1a 01 	sts	0x011A, r26
				break;
     3b0:	b0 93 1b 01 	sts	0x011B, r27
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b4:	10 92 1c 01 	sts	0x011C, r1
     3b8:	10 92 1d 01 	sts	0x011D, r1
     3bc:	88 e0       	ldi	r24, 0x08	; 8
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	80 93 1e 01 	sts	0x011E, r24
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	65 d7       	rcall	.+3786   	; 0x1292 <CDC_Host_SetLineEncoding>
     3c8:	88 23       	and	r24, r24
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xa4>
     3cc:	86 e3       	ldi	r24, 0x36	; 54
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <puts_P>

					while (CurrCollectionPath->Parent != NULL)
     3d4:	80 e9       	ldi	r24, 0x90	; 144
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <EVENT_USB_Host_DeviceEnumerationComplete+0xae>
     3d8:	8d e1       	ldi	r24, 0x1D	; 29
     3da:	91 e0       	ldi	r25, 0x01	; 1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <puts_P>
     3e0:	80 e6       	ldi	r24, 0x60	; 96
     3e2:	43 df       	rcall	.-378    	; 0x26a <LEDs_SetAllLEDs>
     3e4:	ce 5f       	subi	r28, 0xFE	; 254
     3e6:	dd 4f       	sbci	r29, 0xFD	; 253
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <EVENT_USB_Host_HostError>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	1f 92       	push	r1
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	89 83       	std	Y+1, r24	; 0x01
     404:	28 d3       	rcall	.+1616   	; 0xa56 <USB_Disable>
     406:	1f 92       	push	r1
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	8f 93       	push	r24
     40c:	8e ee       	ldi	r24, 0xEE	; 238
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9f 93       	push	r25
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	8f 93       	push	r24
     414:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printf_P>
     418:	80 e9       	ldi	r24, 0x90	; 144
     41a:	27 df       	rcall	.-434    	; 0x26a <LEDs_SetAllLEDs>
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0

				if (UsageListSize)
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	ff cf       	rjmp	.-2      	; 0x424 <EVENT_USB_Host_HostError+0x2c>

00000426 <EVENT_USB_Host_DeviceEnumerationFailed>:
     426:	90 91 3d 01 	lds	r25, 0x013D
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	1f 92       	push	r1
     42c:	9f 93       	push	r25
     42e:	1f 92       	push	r1
     430:	6f 93       	push	r22
     432:	1f 92       	push	r1
     434:	8f 93       	push	r24
     436:	88 e9       	ldi	r24, 0x98	; 152
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printf_P>

					for (uint8_t i = 1; i < UsageListSize; i++)
     442:	8d b7       	in	r24, 0x3d	; 61
     444:	9e b7       	in	r25, 0x3e	; 62
     446:	08 96       	adiw	r24, 0x08	; 8
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
					  UsageList[i - 1] = UsageList[i];
     44c:	9e bf       	out	0x3e, r25	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	8d bf       	out	0x3d, r24	; 61
     452:	80 e9       	ldi	r24, 0x90	; 144

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	0a cf       	rjmp	.-492    	; 0x26a <LEDs_SetAllLEDs>

00000456 <USB_Host_ResetDevice>:
     456:	80 91 9e 00 	lds	r24, 0x009E
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     45a:	81 70       	andi	r24, 0x01	; 1
     45c:	90 91 a0 00 	lds	r25, 0x00A0
     460:	9d 7f       	andi	r25, 0xFD	; 253
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	90 93 a0 00 	sts	0x00A0, r25
     466:	90 91 9e 00 	lds	r25, 0x009E
     46a:	92 60       	ori	r25, 0x02	; 2
     46c:	90 93 9e 00 	sts	0x009E, r25
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     470:	90 91 9e 00 	lds	r25, 0x009E
     474:	91 fd       	sbrc	r25, 1
     476:	fc cf       	rjmp	.-8      	; 0x470 <USB_Host_ResetDevice+0x1a>
     478:	90 91 9e 00 	lds	r25, 0x009E
     47c:	91 60       	ori	r25, 0x01	; 1
     47e:	90 93 9e 00 	sts	0x009E, r25
     482:	10 92 33 01 	sts	0x0133, r1
     486:	90 91 a0 00 	lds	r25, 0x00A0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	90 72       	andi	r25, 0x20	; 32
     48c:	20 91 a0 00 	lds	r18, 0x00A0
     490:	2f 7d       	andi	r18, 0xDF	; 223
     492:	20 93 a0 00 	sts	0x00A0, r18
     496:	20 91 9f 00 	lds	r18, 0x009F
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	2f 7d       	andi	r18, 0xDF	; 223
     49c:	20 93 9f 00 	sts	0x009F, r18
     4a0:	2a e0       	ldi	r18, 0x0A	; 10
     4a2:	30 91 9f 00 	lds	r19, 0x009F
     4a6:	35 ff       	sbrs	r19, 5
     4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <USB_Host_ResetDevice+0x6a>
     4aa:	20 91 9f 00 	lds	r18, 0x009F
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	2f 7d       	andi	r18, 0xDF	; 223
     4b0:	20 93 9f 00 	sts	0x009F, r18
     4b4:	20 91 9f 00 	lds	r18, 0x009F
     4b8:	2d 7f       	andi	r18, 0xFD	; 253
     4ba:	20 93 9f 00 	sts	0x009F, r18
     4be:	08 c0       	rjmp	.+16     	; 0x4d0 <USB_Host_ResetDevice+0x7a>
     4c0:	ef ec       	ldi	r30, 0xCF	; 207
     4c2:	f7 e0       	ldi	r31, 0x07	; 7
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <USB_Host_ResetDevice+0x6e>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <USB_Host_ResetDevice+0x74>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	00 00       	nop
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	49 f7       	brne	.-46     	; 0x4a2 <USB_Host_ResetDevice+0x4c>
     4d0:	99 23       	and	r25, r25
     4d2:	29 f0       	breq	.+10     	; 0x4de <USB_Host_ResetDevice+0x88>
     4d4:	90 91 a0 00 	lds	r25, 0x00A0
     4d8:	90 62       	ori	r25, 0x20	; 32
     4da:	90 93 a0 00 	sts	0x00A0, r25
     4de:	81 11       	cpse	r24, r1
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <USB_Host_ResetDevice+0x96>
     4e2:	80 91 9e 00 	lds	r24, 0x009E
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e6:	8e 7f       	andi	r24, 0xFE	; 254
     4e8:	80 93 9e 00 	sts	0x009E, r24
     4ec:	80 91 a0 00 	lds	r24, 0x00A0
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	82 60       	ori	r24, 0x02	; 2
     4f2:	80 93 a0 00 	sts	0x00A0, r24
     4f6:	08 95       	ret

000004f8 <USB_Host_WaitMS>:
     4f8:	20 91 9e 00 	lds	r18, 0x009E
     4fc:	21 70       	andi	r18, 0x01	; 1
     4fe:	90 91 a0 00 	lds	r25, 0x00A0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	90 72       	andi	r25, 0x20	; 32
     504:	30 91 a0 00 	lds	r19, 0x00A0
					NewReportItem.CollectionPath = CurrCollectionPath;
     508:	3f 7d       	andi	r19, 0xDF	; 223
     50a:	30 93 a0 00 	sts	0x00A0, r19
     50e:	30 91 9f 00 	lds	r19, 0x009F
     512:	3f 7d       	andi	r19, 0xDF	; 223
     514:	30 93 9f 00 	sts	0x009F, r19
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     518:	30 91 9e 00 	lds	r19, 0x009E
     51c:	31 60       	ori	r19, 0x01	; 1

					if (UsageListSize)
     51e:	30 93 9e 00 	sts	0x009E, r19
     522:	88 23       	and	r24, r24
     524:	39 f1       	breq	.+78     	; 0x574 <USB_Host_WaitMS+0x7c>
     526:	30 91 9f 00 	lds	r19, 0x009F
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52a:	35 ff       	sbrs	r19, 5
     52c:	06 c0       	rjmp	.+12     	; 0x53a <USB_Host_WaitMS+0x42>
     52e:	30 91 9f 00 	lds	r19, 0x009F
     532:	3f 7d       	andi	r19, 0xDF	; 223
     534:	30 93 9f 00 	sts	0x009F, r19
     538:	81 50       	subi	r24, 0x01	; 1
     53a:	30 91 3d 01 	lds	r19, 0x013D

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	31 30       	cpi	r19, 0x01	; 1
     540:	c1 f0       	breq	.+48     	; 0x572 <USB_Host_WaitMS+0x7a>
     542:	30 91 a6 00 	lds	r19, 0x00A6
     546:	34 ff       	sbrs	r19, 4
     548:	09 c0       	rjmp	.+18     	; 0x55c <USB_Host_WaitMS+0x64>
						  UsageList[i - 1] = UsageList[i];
     54a:	10 92 f5 00 	sts	0x00F5, r1
     54e:	80 91 a6 00 	lds	r24, 0x00A6

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	8f 7e       	andi	r24, 0xEF	; 239
     554:	80 93 a6 00 	sts	0x00A6, r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	0c c0       	rjmp	.+24     	; 0x574 <USB_Host_WaitMS+0x7c>
     55c:	30 91 a6 00 	lds	r19, 0x00A6
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	31 ff       	sbrs	r19, 1
     562:	df cf       	rjmp	.-66     	; 0x522 <USB_Host_WaitMS+0x2a>
     564:	80 91 a6 00 	lds	r24, 0x00A6
     568:	8d 7f       	andi	r24, 0xFD	; 253
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	80 93 a6 00 	sts	0x00A6, r24
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	01 c0       	rjmp	.+2      	; 0x574 <USB_Host_WaitMS+0x7c>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	21 11       	cpse	r18, r1
     576:	05 c0       	rjmp	.+10     	; 0x582 <USB_Host_WaitMS+0x8a>
     578:	20 91 9e 00 	lds	r18, 0x009E
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	2e 7f       	andi	r18, 0xFE	; 254
     57e:	20 93 9e 00 	sts	0x009E, r18
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     582:	99 23       	and	r25, r25
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	29 f0       	breq	.+10     	; 0x590 <USB_Host_WaitMS+0x98>
     586:	90 91 a0 00 	lds	r25, 0x00A0
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	90 62       	ori	r25, 0x20	; 32
     58c:	90 93 a0 00 	sts	0x00A0, r25
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     590:	08 95       	ret

00000592 <USB_Host_ProcessNextHostState>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	28 97       	sbiw	r28, 0x08	; 8
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	80 91 3d 01 	lds	r24, 0x013D

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	85 30       	cpi	r24, 0x05	; 5
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <USB_Host_ProcessNextHostState+0x22>
     5b2:	9c c0       	rjmp	.+312    	; 0x6ec <USB_Host_ProcessNextHostState+0x15a>
     5b4:	68 f4       	brcc	.+26     	; 0x5d0 <USB_Host_ProcessNextHostState+0x3e>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	e1 f1       	breq	.+120    	; 0x632 <USB_Host_ProcessNextHostState+0xa0>
     5ba:	18 f4       	brcc	.+6      	; 0x5c2 <USB_Host_ProcessNextHostState+0x30>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	88 23       	and	r24, r24
     5be:	d9 f0       	breq	.+54     	; 0x5f6 <USB_Host_ProcessNextHostState+0x64>
     5c0:	ff c0       	rjmp	.+510    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <USB_Host_ProcessNextHostState+0x36>
     5c6:	3f c0       	rjmp	.+126    	; 0x646 <USB_Host_ProcessNextHostState+0xb4>
     5c8:	84 30       	cpi	r24, 0x04	; 4
     5ca:	09 f4       	brne	.+2      	; 0x5ce <USB_Host_ProcessNextHostState+0x3c>
     5cc:	67 c0       	rjmp	.+206    	; 0x69c <USB_Host_ProcessNextHostState+0x10a>
     5ce:	f8 c0       	rjmp	.+496    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     5d0:	87 30       	cpi	r24, 0x07	; 7
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <USB_Host_ProcessNextHostState+0x44>
     5d4:	a6 c0       	rjmp	.+332    	; 0x722 <USB_Host_ProcessNextHostState+0x190>
     5d6:	08 f4       	brcc	.+2      	; 0x5da <USB_Host_ProcessNextHostState+0x48>
     5d8:	96 c0       	rjmp	.+300    	; 0x706 <USB_Host_ProcessNextHostState+0x174>
     5da:	88 30       	cpi	r24, 0x08	; 8
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <USB_Host_ProcessNextHostState+0x4e>
     5de:	bf c0       	rjmp	.+382    	; 0x75e <USB_Host_ProcessNextHostState+0x1cc>
     5e0:	89 30       	cpi	r24, 0x09	; 9
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <USB_Host_ProcessNextHostState+0x54>
     5e4:	ed c0       	rjmp	.+474    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 a1 00 	sts	0x00A1, r24
     5ec:	8a e0       	ldi	r24, 0x0A	; 10
     5ee:	80 93 3d 01 	sts	0x013D, r24
     5f2:	a0 de       	rcall	.-704    	; 0x334 <EVENT_USB_Host_DeviceEnumerationComplete>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	e5 c0       	rjmp	.+458    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     5f6:	00 91 31 01 	lds	r16, 0x0131
     5fa:	10 91 32 01 	lds	r17, 0x0132
					  return HID_PARSE_InsufficientReportItems;
     5fe:	01 15       	cp	r16, r1
     600:	11 05       	cpc	r17, r1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	09 f4       	brne	.+2      	; 0x606 <USB_Host_ProcessNextHostState+0x74>
     604:	dd c0       	rjmp	.+442    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	77 df       	rcall	.-274    	; 0x4f8 <USB_Host_WaitMS>
     60a:	88 23       	and	r24, r24
     60c:	31 f0       	breq	.+12     	; 0x61a <USB_Host_ProcessNextHostState+0x88>
     60e:	90 91 30 01 	lds	r25, 0x0130
     612:	90 93 3d 01 	sts	0x013D, r25
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	c5 c0       	rjmp	.+394    	; 0x7a4 <USB_Host_ProcessNextHostState+0x212>
     61a:	01 50       	subi	r16, 0x01	; 1
     61c:	11 09       	sbc	r17, r1
     61e:	10 93 32 01 	sts	0x0132, r17
     622:	00 93 31 01 	sts	0x0131, r16
     626:	01 2b       	or	r16, r17
     628:	09 f0       	breq	.+2      	; 0x62c <USB_Host_ProcessNextHostState+0x9a>
     62a:	ca c0       	rjmp	.+404    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     62c:	80 91 30 01 	lds	r24, 0x0130
     630:	07 c0       	rjmp	.+14     	; 0x640 <USB_Host_ProcessNextHostState+0xae>
     632:	88 ee       	ldi	r24, 0xE8	; 232
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	90 93 32 01 	sts	0x0132, r25
     63a:	80 93 31 01 	sts	0x0131, r24
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	80 93 3d 01 	sts	0x013D, r24
     644:	bd c0       	rjmp	.+378    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     646:	80 91 31 01 	lds	r24, 0x0131
     64a:	90 91 32 01 	lds	r25, 0x0132
     64e:	9c 01       	movw	r18, r24
     650:	21 50       	subi	r18, 0x01	; 1
     652:	31 09       	sbc	r19, r1
     654:	30 93 32 01 	sts	0x0132, r19
     658:	20 93 31 01 	sts	0x0131, r18
     65c:	89 2b       	or	r24, r25
     65e:	39 f0       	breq	.+14     	; 0x66e <USB_Host_ProcessNextHostState+0xdc>
     660:	8f ec       	ldi	r24, 0xCF	; 207
     662:	97 e0       	ldi	r25, 0x07	; 7
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <USB_Host_ProcessNextHostState+0xd2>
     668:	00 c0       	rjmp	.+0      	; 0x66a <USB_Host_ProcessNextHostState+0xd8>
     66a:	00 00       	nop
     66c:	a9 c0       	rjmp	.+338    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     66e:	77 98       	cbi	0x0e, 7	; 14
     670:	80 91 d8 00 	lds	r24, 0x00D8
     674:	80 61       	ori	r24, 0x10	; 16
     676:	80 93 d8 00 	sts	0x00D8, r24
     67a:	80 91 dd 00 	lds	r24, 0x00DD
     67e:	8b 7f       	andi	r24, 0xFB	; 251
     680:	80 93 dd 00 	sts	0x00DD, r24
     684:	80 91 d7 00 	lds	r24, 0x00D7
					  ParserData->TotalReportItems++;
     688:	80 61       	ori	r24, 0x10	; 16
     68a:	80 93 d7 00 	sts	0x00D7, r24
     68e:	80 91 dd 00 	lds	r24, 0x00DD

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	82 60       	ori	r24, 0x02	; 2
     694:	80 93 dd 00 	sts	0x00DD, r24
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	d2 cf       	rjmp	.-92     	; 0x640 <USB_Host_ProcessNextHostState+0xae>
     69c:	80 91 9f 00 	lds	r24, 0x009F
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	80 ff       	sbrs	r24, 0
     6a2:	8e c0       	rjmp	.+284    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	80 91 9f 00 	lds	r24, 0x009F
     6a8:	8e 7f       	andi	r24, 0xFE	; 254
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	80 93 9f 00 	sts	0x009F, r24
     6ae:	80 91 9f 00 	lds	r24, 0x009F
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 93 9f 00 	sts	0x009F, r24
     6b8:	80 91 df 00 	lds	r24, 0x00DF
	  return HID_PARSE_NoUnfilteredReportItems;
     6bc:	8d 7f       	andi	r24, 0xFD	; 253

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	80 93 df 00 	sts	0x00DF, r24
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	80 91 de 00 	lds	r24, 0x00DE
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	82 60       	ori	r24, 0x02	; 2
     6c8:	80 93 de 00 	sts	0x00DE, r24
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6cc:	80 91 9e 00 	lds	r24, 0x009E

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6d0:	81 60       	ori	r24, 0x01	; 1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	80 93 9e 00 	sts	0x009E, r24
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	53 d1       	rcall	.+678    	; 0x97e <Pipe_ClearPipes>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	10 92 3d 01 	sts	0x013D, r1
     6dc:	84 e6       	ldi	r24, 0x64	; 100
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	90 93 32 01 	sts	0x0132, r25
     6e4:	80 93 31 01 	sts	0x0131, r24
     6e8:	85 e0       	ldi	r24, 0x05	; 5
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <USB_Host_ProcessNextHostState+0x16e>
     6ec:	b4 de       	rcall	.-664    	; 0x456 <USB_Host_ResetDevice>
     6ee:	10 92 3d 01 	sts	0x013D, r1
     6f2:	88 ec       	ldi	r24, 0xC8	; 200
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 32 01 	sts	0x0132, r25
     6fa:	80 93 31 01 	sts	0x0131, r24
     6fe:	86 e0       	ldi	r24, 0x06	; 6
     700:	80 93 30 01 	sts	0x0130, r24
     704:	5d c0       	rjmp	.+186    	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     706:	01 e0       	ldi	r16, 0x01	; 1
     708:	20 e4       	ldi	r18, 0x40	; 64
     70a:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
     70c:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	ae d0       	rcall	.+348    	; 0x870 <Pipe_ConfigurePipe>
     714:	81 11       	cpse	r24, r1
     716:	03 c0       	rjmp	.+6      	; 0x71e <USB_Host_ProcessNextHostState+0x18c>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	94 e0       	ldi	r25, 0x04	; 4
     71c:	43 c0       	rjmp	.+134    	; 0x7a4 <USB_Host_ProcessNextHostState+0x212>
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	8f cf       	rjmp	.-226    	; 0x640 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     722:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     724:	e0 e2       	ldi	r30, 0x20	; 32
     726:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     728:	a5 e3       	ldi	r26, 0x35	; 53
     72a:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	8a 95       	dec	r24
     732:	e1 f7       	brne	.-8      	; 0x72c <USB_Host_ProcessNextHostState+0x19a>
     734:	10 92 a7 00 	sts	0x00A7, r1
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	72 d3       	rcall	.+1764   	; 0xe22 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     73e:	81 11       	cpse	r24, r1
     740:	30 c0       	rjmp	.+96     	; 0x7a2 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     742:	88 85       	ldd	r24, Y+8	; 0x08
     744:	80 93 1f 01 	sts	0x011F, r24
     748:	86 de       	rcall	.-756    	; 0x456 <USB_Host_ResetDevice>
     74a:	10 92 3d 01 	sts	0x013D, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     74e:	88 ec       	ldi	r24, 0xC8	; 200
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	90 93 32 01 	sts	0x0132, r25

			USB_Host_ResetDevice();
     756:	80 93 31 01 	sts	0x0131, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	d1 cf       	rjmp	.-94     	; 0x700 <USB_Host_ProcessNextHostState+0x16e>
     75e:	20 91 1f 01 	lds	r18, 0x011F
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	01 e0       	ldi	r16, 0x01	; 1
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     76c:	81 d0       	rcall	.+258    	; 0x870 <Pipe_ConfigurePipe>
     76e:	88 23       	and	r24, r24
     770:	99 f2       	breq	.-90     	; 0x718 <USB_Host_ProcessNextHostState+0x186>
     772:	88 e0       	ldi	r24, 0x08	; 8
     774:	e8 e2       	ldi	r30, 0x28	; 40
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	a5 e3       	ldi	r26, 0x35	; 53
     77a:	b1 e0       	ldi	r27, 0x01	; 1
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     782:	e1 f7       	brne	.-8      	; 0x77c <USB_Host_ProcessNextHostState+0x1ea>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	4c d3       	rcall	.+1688   	; 0xe22 <USB_Host_SendControlRequest>
     78a:	81 11       	cpse	r24, r1
     78c:	0a c0       	rjmp	.+20     	; 0x7a2 <USB_Host_ProcessNextHostState+0x210>
     78e:	10 92 3d 01 	sts	0x013D, r1
     792:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	90 93 32 01 	sts	0x0132, r25
     79a:	80 93 31 01 	sts	0x0131, r24
     79e:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     7a0:	af cf       	rjmp	.-162    	; 0x700 <USB_Host_ProcessNextHostState+0x16e>
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	20 91 3d 01 	lds	r18, 0x013D
     7a8:	21 30       	cpi	r18, 0x01	; 1
     7aa:	51 f0       	breq	.+20     	; 0x7c0 <USB_Host_ProcessNextHostState+0x22e>
     7ac:	68 2f       	mov	r22, r24
     7ae:	89 2f       	mov	r24, r25
     7b0:	3a de       	rcall	.-908    	; 0x426 <EVENT_USB_Host_DeviceEnumerationFailed>
     7b2:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     7b6:	81 60       	ori	r24, 0x01	; 1
     7b8:	80 93 dd 00 	sts	0x00DD, r24
     7bc:	b5 dd       	rcall	.-1174   	; 0x328 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     7be:	63 d1       	rcall	.+710    	; 0xa86 <USB_ResetInterface>
     7c0:	28 96       	adiw	r28, 0x08	; 8
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16

		USB_ResetInterface();
     7d4:	08 95       	ret

000007d6 <Pipe_Read_Stream_LE>:
     7d6:	cf 92       	push	r12
	}
}
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	7c 01       	movw	r14, r24
     7e8:	8b 01       	movw	r16, r22
     7ea:	ea 01       	movw	r28, r20
     7ec:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     7f0:	8f 7c       	andi	r24, 0xCF	; 207
     7f2:	80 61       	ori	r24, 0x10	; 16
     7f4:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     7f8:	00 d1       	rcall	.+512    	; 0x9fa <Pipe_WaitUntilReady>
     7fa:	81 11       	cpse	r24, r1
     7fc:	30 c0       	rjmp	.+96     	; 0x85e <Pipe_Read_Stream_LE+0x88>
     7fe:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     800:	31 f0       	breq	.+12     	; 0x80e <Pipe_Read_Stream_LE+0x38>
     802:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     804:	99 81       	ldd	r25, Y+1	; 0x01
     806:	08 1b       	sub	r16, r24
     808:	19 0b       	sbc	r17, r25
     80a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     80c:	f9 1e       	adc	r15, r25
     80e:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     810:	d1 2c       	mov	r13, r1
     812:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     814:	11 05       	cpc	r17, r1
     816:	11 f1       	breq	.+68     	; 0x85c <Pipe_Read_Stream_LE+0x86>
     818:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     81c:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     81e:	13 c0       	rjmp	.+38     	; 0x846 <Pipe_Read_Stream_LE+0x70>
     820:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     824:	8e 77       	andi	r24, 0x7E	; 126
     826:	80 93 a6 00 	sts	0x00A6, r24
     82a:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     82c:	41 f0       	breq	.+16     	; 0x83e <Pipe_Read_Stream_LE+0x68>
     82e:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     830:	99 81       	ldd	r25, Y+1	; 0x01
     832:	8c 0d       	add	r24, r12
     834:	9d 1d       	adc	r25, r13
     836:	99 83       	std	Y+1, r25	; 0x01
     838:	88 83       	st	Y, r24
     83a:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     83c:	10 c0       	rjmp	.+32     	; 0x85e <Pipe_Read_Stream_LE+0x88>
     83e:	dd d0       	rcall	.+442    	; 0x9fa <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     840:	88 23       	and	r24, r24
     842:	39 f3       	breq	.-50     	; 0x812 <Pipe_Read_Stream_LE+0x3c>
     844:	0c c0       	rjmp	.+24     	; 0x85e <Pipe_Read_Stream_LE+0x88>
     846:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     84a:	f7 01       	movw	r30, r14
     84c:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     84e:	7f 01       	movw	r14, r30
     850:	01 50       	subi	r16, 0x01	; 1
     852:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     854:	ff ef       	ldi	r31, 0xFF	; 255
     856:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     858:	df 0a       	sbc	r13, r31
     85a:	db cf       	rjmp	.-74     	; 0x812 <Pipe_Read_Stream_LE+0x3c>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     860:	cf 91       	pop	r28
}
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	08 95       	ret

00000870 <Pipe_ConfigurePipe>:
     870:	0f 93       	push	r16
     872:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     874:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     876:	87 ff       	sbrs	r24, 7
     878:	02 c0       	rjmp	.+4      	; 0x87e <Pipe_ConfigurePipe+0xe>
     87a:	80 e1       	ldi	r24, 0x10	; 16
     87c:	01 c0       	rjmp	.+2      	; 0x880 <Pipe_ConfigurePipe+0x10>
     87e:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     880:	e7 30       	cpi	r30, 0x07	; 7
     882:	10 f0       	brcs	.+4      	; 0x888 <Pipe_ConfigurePipe+0x18>
	  return false;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	5a c0       	rjmp	.+180    	; 0x93c <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     888:	61 11       	cpse	r22, r1
     88a:	01 c0       	rjmp	.+2      	; 0x88e <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     88c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     88e:	90 e4       	ldi	r25, 0x40	; 64
     890:	69 9f       	mul	r22, r25
     892:	b0 01       	movw	r22, r0
     894:	11 24       	eor	r1, r1
     896:	4f 70       	andi	r20, 0x0F	; 15
     898:	46 2b       	or	r20, r22
     89a:	48 2b       	or	r20, r24
     89c:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     89e:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     8a2:	5e 13       	cpse	r21, r30
     8a4:	19 c0       	rjmp	.+50     	; 0x8d8 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     8a6:	02 30       	cpi	r16, 0x02	; 2
     8a8:	10 f0       	brcs	.+4      	; 0x8ae <Pipe_ConfigurePipe+0x3e>
     8aa:	76 e0       	ldi	r23, 0x06	; 6
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <Pipe_ConfigurePipe+0x40>
     8ae:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     8b4:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8b6:	82 17       	cp	r24, r18
     8b8:	93 07       	cpc	r25, r19
     8ba:	40 f0       	brcs	.+16     	; 0x8cc <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     8bc:	86 2f       	mov	r24, r22
     8be:	82 95       	swap	r24
     8c0:	80 7f       	andi	r24, 0xF0	; 240
     8c2:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8c4:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     8c6:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8cc:	65 30       	cpi	r22, 0x05	; 5
     8ce:	b1 f3       	breq	.-20     	; 0x8bc <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     8d0:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	ef cf       	rjmp	.-34     	; 0x8b6 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     8d8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     8dc:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     8e0:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     8e4:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     8e8:	81 fd       	sbrc	r24, 1
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8ec:	5f 5f       	subi	r21, 0xFF	; 255
     8ee:	57 30       	cpi	r21, 0x07	; 7
     8f0:	b1 f6       	brne	.-84     	; 0x89e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8f2:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	21 c0       	rjmp	.+66     	; 0x93c <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     8fa:	90 91 a9 00 	lds	r25, 0x00A9
     8fe:	9e 7f       	andi	r25, 0xFE	; 254
     900:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     904:	90 91 ab 00 	lds	r25, 0x00AB
     908:	9d 7f       	andi	r25, 0xFD	; 253
     90a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     90e:	90 91 a9 00 	lds	r25, 0x00A9
     912:	91 60       	ori	r25, 0x01	; 1
     914:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     918:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     91c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     920:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     924:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     928:	80 91 a9 00 	lds	r24, 0x00A9
     92c:	80 62       	ori	r24, 0x20	; 32
     92e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     932:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     936:	87 fd       	sbrc	r24, 7
     938:	d9 cf       	rjmp	.-78     	; 0x8ec <Pipe_ConfigurePipe+0x7c>
     93a:	a4 cf       	rjmp	.-184    	; 0x884 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	f6 2e       	mov	r15, r22
     94c:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	1f 15       	cp	r17, r15
     952:	71 f0       	breq	.+28     	; 0x970 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     954:	88 81       	ld	r24, Y
     956:	88 23       	and	r24, r24
     958:	41 f0       	breq	.+16     	; 0x96a <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     95a:	29 81       	ldd	r18, Y+1	; 0x01
     95c:	3a 81       	ldd	r19, Y+2	; 0x02
     95e:	0d 81       	ldd	r16, Y+5	; 0x05
     960:	4b 81       	ldd	r20, Y+3	; 0x03
     962:	6c 81       	ldd	r22, Y+4	; 0x04
     964:	85 df       	rcall	.-246    	; 0x870 <Pipe_ConfigurePipe>
     966:	88 23       	and	r24, r24
     968:	21 f0       	breq	.+8      	; 0x972 <Pipe_ConfigurePipeTable+0x32>
     96a:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     96c:	26 96       	adiw	r28, 0x06	; 6
     96e:	f0 cf       	rjmp	.-32     	; 0x950 <Pipe_ConfigurePipeTable+0x10>
     970:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     972:	df 91       	pop	r29
}
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	08 95       	ret

0000097e <Pipe_ClearPipes>:
     97e:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     982:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     984:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     988:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     98c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     990:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     994:	90 91 a9 00 	lds	r25, 0x00A9
     998:	9e 7f       	andi	r25, 0xFE	; 254
     99a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	87 30       	cpi	r24, 0x07	; 7
     9a2:	81 f7       	brne	.-32     	; 0x984 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9a4:	08 95       	ret

000009a6 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     9a6:	90 91 a7 00 	lds	r25, 0x00A7
     9aa:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     9ac:	20 91 aa 00 	lds	r18, 0x00AA
     9b0:	20 ff       	sbrs	r18, 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <Pipe_IsEndpointBound+0x12>
     9b4:	20 e8       	ldi	r18, 0x80	; 128
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <Pipe_IsEndpointBound+0x14>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     9ba:	42 2f       	mov	r20, r18
     9bc:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9be:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9c0:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9c4:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9c8:	27 ff       	sbrs	r18, 7
     9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     9cc:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9d0:	53 2f       	mov	r21, r19
     9d2:	5f 70       	andi	r21, 0x0F	; 15
     9d4:	35 ff       	sbrs	r19, 5
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <Pipe_IsEndpointBound+0x36>
     9d8:	20 e8       	ldi	r18, 0x80	; 128
     9da:	01 c0       	rjmp	.+2      	; 0x9de <Pipe_IsEndpointBound+0x38>
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9e0:	28 17       	cp	r18, r24
     9e2:	49 f0       	breq	.+18     	; 0x9f6 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9e4:	9f 5f       	subi	r25, 0xFF	; 255
     9e6:	97 30       	cpi	r25, 0x07	; 7
     9e8:	59 f7       	brne	.-42     	; 0x9c0 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9ea:	94 2f       	mov	r25, r20
     9ec:	9f 70       	andi	r25, 0x0F	; 15
     9ee:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     9f8:	08 95       	ret

000009fa <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     9fa:	80 91 a2 00 	lds	r24, 0x00A2
     9fe:	90 91 a3 00 	lds	r25, 0x00A3
     a02:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a04:	20 91 aa 00 	lds	r18, 0x00AA
     a08:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a0a:	20 31       	cpi	r18, 0x10	; 16
     a0c:	29 f4       	brne	.+10     	; 0xa18 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a0e:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a12:	20 ff       	sbrs	r18, 0
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <Pipe_WaitUntilReady+0x26>
     a16:	17 c0       	rjmp	.+46     	; 0xa46 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a18:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a1c:	22 fd       	sbrc	r18, 2
     a1e:	13 c0       	rjmp	.+38     	; 0xa46 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a20:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a24:	21 fd       	sbrc	r18, 1
     a26:	11 c0       	rjmp	.+34     	; 0xa4a <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a28:	20 91 3d 01 	lds	r18, 0x013D
     a2c:	21 30       	cpi	r18, 0x01	; 1
     a2e:	79 f0       	breq	.+30     	; 0xa4e <Pipe_WaitUntilReady+0x54>
     a30:	20 91 a2 00 	lds	r18, 0x00A2
     a34:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a38:	28 17       	cp	r18, r24
     a3a:	39 07       	cpc	r19, r25
     a3c:	19 f3       	breq	.-58     	; 0xa04 <Pipe_WaitUntilReady+0xa>
     a3e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a40:	41 f0       	breq	.+16     	; 0xa52 <Pipe_WaitUntilReady+0x58>
     a42:	c9 01       	movw	r24, r18
     a44:	df cf       	rjmp	.-66     	; 0xa04 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     a52:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     a54:	08 95       	ret

00000a56 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a56:	75 d0       	rcall	.+234    	; 0xb42 <USB_INT_DisableAllInterrupts>
     a58:	7c d0       	rcall	.+248    	; 0xb52 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a5a:	e0 ee       	ldi	r30, 0xE0	; 224
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a5e:	80 81       	ld	r24, Z
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 83       	st	Z, r24
     a64:	e8 ed       	ldi	r30, 0xD8	; 216
     a66:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     a68:	80 81       	ld	r24, Z
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	80 83       	st	Z, r24
     a6e:	19 bc       	out	0x29, r1	; 41
     a70:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a72:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     a74:	8c 91       	ld	r24, X
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	8c 93       	st	X, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a7e:	80 83       	st	Z, r24
     a80:	10 92 34 01 	sts	0x0134, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a84:	08 95       	ret

00000a86 <USB_ResetInterface>:
     a86:	5d d0       	rcall	.+186    	; 0xb42 <USB_INT_DisableAllInterrupts>
     a88:	64 d0       	rcall	.+200    	; 0xb52 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     a8a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a8e:	8f 77       	andi	r24, 0x7F	; 127
     a90:	80 93 d8 00 	sts	0x00D8, r24
     a94:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     a98:	80 68       	ori	r24, 0x80	; 128
     a9a:	80 93 d8 00 	sts	0x00D8, r24
     a9e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     aa2:	8f 7d       	andi	r24, 0xDF	; 223
     aa4:	80 93 d8 00 	sts	0x00D8, r24
     aa8:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     aac:	8f 77       	andi	r24, 0x7F	; 127
     aae:	80 93 d7 00 	sts	0x00D7, r24
     ab2:	8c e0       	ldi	r24, 0x0C	; 12
     ab4:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ab6:	8e e0       	ldi	r24, 0x0E	; 14
     ab8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     aba:	09 b4       	in	r0, 0x29	; 41
     abc:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     abe:	fd cf       	rjmp	.-6      	; 0xaba <USB_ResetInterface+0x34>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 3d 01 	sts	0x013D, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ac6:	10 92 33 01 	sts	0x0133, r1
	USB_Host_ConfigurationNumber = 0;
     aca:	80 e4       	ldi	r24, 0x40	; 64
     acc:	80 93 1f 01 	sts	0x011F, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ad0:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ad4:	80 64       	ori	r24, 0x40	; 64
     ad6:	80 93 d8 00 	sts	0x00D8, r24
     ada:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	80 93 dd 00 	sts	0x00DD, r24
     ae4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ae8:	84 60       	ori	r24, 0x04	; 4
     aea:	80 93 dd 00 	sts	0x00DD, r24
     aee:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     af2:	8f 7e       	andi	r24, 0xEF	; 239
     af4:	80 93 d7 00 	sts	0x00D7, r24
     af8:	6f 9a       	sbi	0x0d, 7	; 13
     afa:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     afc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	80 93 de 00 	sts	0x00DE, r24
     b06:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b0a:	84 60       	ori	r24, 0x04	; 4
     b0c:	80 93 de 00 	sts	0x00DE, r24
     b10:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	80 93 e0 00 	sts	0x00E0, r24
     b1a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b1e:	80 61       	ori	r24, 0x10	; 16
     b20:	80 93 d8 00 	sts	0x00D8, r24
     b24:	08 95       	ret

00000b26 <USB_Init>:
     b26:	e8 ed       	ldi	r30, 0xD8	; 216
     b28:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b2a:	80 81       	ld	r24, Z
     b2c:	8f 7e       	andi	r24, 0xEF	; 239
     b2e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b30:	e7 ed       	ldi	r30, 0xD7	; 215
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 34 01 	sts	0x0134, r24

	USB_ResetInterface();
     b40:	a2 cf       	rjmp	.-188    	; 0xa86 <USB_ResetInterface>

00000b42 <USB_INT_DisableAllInterrupts>:
     b42:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8c 7f       	andi	r24, 0xFC	; 252
     b4a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b4c:	10 92 a0 00 	sts	0x00A0, r1
     b50:	08 95       	ret

00000b52 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b52:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b56:	10 92 9f 00 	sts	0x009F, r1
     b5a:	08 95       	ret

00000b5c <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	0b b6       	in	r0, 0x3b	; 59
     b68:	0f 92       	push	r0
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b82:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b86:	85 ff       	sbrs	r24, 5
     b88:	0a c0       	rjmp	.+20     	; 0xb9e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b8a:	80 91 a0 00 	lds	r24, 0x00A0
     b8e:	85 ff       	sbrs	r24, 5
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b92:	80 91 9f 00 	lds	r24, 0x009F
     b96:	8f 7d       	andi	r24, 0xDF	; 223
     b98:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b9c:	1a d1       	rcall	.+564    	; 0xdd2 <USB_Event_Stub>
     b9e:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ba2:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ba4:	15 c0       	rjmp	.+42     	; 0xbd0 <__vector_10+0x74>
     ba6:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     baa:	81 ff       	sbrs	r24, 1
     bac:	11 c0       	rjmp	.+34     	; 0xbd0 <__vector_10+0x74>
     bae:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bb2:	8d 7f       	andi	r24, 0xFD	; 253
     bb4:	80 93 9f 00 	sts	0x009F, r24
     bb8:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	80 93 9f 00 	sts	0x009F, r24
     bc2:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	80 93 a0 00 	sts	0x00A0, r24
     bcc:	ad db       	rcall	.-2214   	; 0x328 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     bce:	5b df       	rcall	.-330    	; 0xa86 <USB_ResetInterface>
     bd0:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     bd4:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bd6:	15 c0       	rjmp	.+42     	; 0xc02 <__vector_10+0xa6>
     bd8:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     bdc:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     bde:	11 c0       	rjmp	.+34     	; 0xc02 <__vector_10+0xa6>
     be0:	80 91 df 00 	lds	r24, 0x00DF
     be4:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     be6:	80 93 df 00 	sts	0x00DF, r24
     bea:	77 98       	cbi	0x0e, 7	; 14
     bec:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     bf0:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bf2:	80 93 dd 00 	sts	0x00DD, r24
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	ff db       	rcall	.-2050   	; 0x3f8 <EVENT_USB_Host_HostError>
     bfa:	96 db       	rcall	.-2260   	; 0x328 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 3d 01 	sts	0x013D, r24
		EVENT_USB_Host_DeviceUnattached();
     c02:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     c06:	80 ff       	sbrs	r24, 0
     c08:	17 c0       	rjmp	.+46     	; 0xc38 <__vector_10+0xdc>
     c0a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c0e:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c10:	13 c0       	rjmp	.+38     	; 0xc38 <__vector_10+0xdc>
     c12:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c1c:	80 91 de 00 	lds	r24, 0x00DE
     c20:	8e 7f       	andi	r24, 0xFE	; 254
     c22:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c26:	7a db       	rcall	.-2316   	; 0x31c <EVENT_USB_Host_DeviceAttached>
     c28:	80 91 a0 00 	lds	r24, 0x00A0
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c32:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c34:	80 93 3d 01 	sts	0x013D, r24
     c38:	80 91 df 00 	lds	r24, 0x00DF
     c3c:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c3e:	0e c0       	rjmp	.+28     	; 0xc5c <__vector_10+0x100>
     c40:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c44:	82 ff       	sbrs	r24, 2
     c46:	0a c0       	rjmp	.+20     	; 0xc5c <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c48:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c4c:	8b 7f       	andi	r24, 0xFB	; 251
     c4e:	80 93 df 00 	sts	0x00DF, r24
     c52:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	e7 db       	rcall	.-2098   	; 0x426 <EVENT_USB_Host_DeviceEnumerationFailed>
     c58:	67 db       	rcall	.-2354   	; 0x328 <EVENT_USB_Host_DeviceUnattached>
     c5a:	15 df       	rcall	.-470    	; 0xa86 <USB_ResetInterface>
     c5c:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23

		USB_ResetInterface();
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <USB_GetNextDescriptor>:
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	fc 01       	movw	r30, r24
     c88:	eb 01       	movw	r28, r22
     c8a:	a8 81       	ld	r26, Y
     c8c:	b9 81       	ldd	r27, Y+1	; 0x01
     c8e:	8c 91       	ld	r24, X
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     c94:	31 81       	ldd	r19, Z+1	; 0x01
     c96:	82 17       	cp	r24, r18
     c98:	93 07       	cpc	r25, r19
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <USB_GetNextDescriptor+0x1c>
     c9c:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     c9e:	a2 0f       	add	r26, r18
     ca0:	b3 1f       	adc	r27, r19
     ca2:	eb 01       	movw	r28, r22
     ca4:	b9 83       	std	Y+1, r27	; 0x01
     ca6:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	82 1b       	sub	r24, r18
     cae:	93 0b       	sbc	r25, r19
     cb0:	91 83       	std	Z+1, r25	; 0x01
     cb2:	80 83       	st	Z, r24
			}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	29 97       	sbiw	r28, 0x09	; 9
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	7b 01       	movw	r14, r22
     cdc:	8a 01       	movw	r16, r20
     cde:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ce0:	90 e8       	ldi	r25, 0x80	; 128
     ce2:	90 93 35 01 	sts	0x0135, r25
     ce6:	96 e0       	ldi	r25, 0x06	; 6
     ce8:	90 93 36 01 	sts	0x0136, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     cec:	e8 2f       	mov	r30, r24
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cf4:	f0 93 38 01 	sts	0x0138, r31
     cf8:	e0 93 37 01 	sts	0x0137, r30
     cfc:	10 92 3a 01 	sts	0x013A, r1
     d00:	10 92 39 01 	sts	0x0139, r1
     d04:	89 e0       	ldi	r24, 0x09	; 9
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	90 93 3c 01 	sts	0x013C, r25
     d0c:	80 93 3b 01 	sts	0x013B, r24
     d10:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	84 d0       	rcall	.+264    	; 0xe22 <USB_Host_SendControlRequest>
     d1a:	81 11       	cpse	r24, r1
     d1c:	19 c0       	rjmp	.+50     	; 0xd50 <USB_Host_GetDeviceConfigDescriptor+0x96>
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	d7 01       	movw	r26, r14
     d24:	ed 93       	st	X+, r30
     d26:	fc 93       	st	X, r31
     d28:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     d2a:	df 06       	cpc	r13, r31
     d2c:	70 f0       	brcs	.+28     	; 0xd4a <USB_Host_GetDeviceConfigDescriptor+0x90>
     d2e:	f0 93 3c 01 	sts	0x013C, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d32:	e0 93 3b 01 	sts	0x013B, r30
     d36:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d38:	74 d0       	rcall	.+232    	; 0xe22 <USB_Host_SendControlRequest>
     d3a:	81 11       	cpse	r24, r1
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <USB_Host_GetDeviceConfigDescriptor+0x96>
     d3e:	f8 01       	movw	r30, r16
     d40:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	21 f0       	breq	.+8      	; 0xd4e <USB_Host_GetDeviceConfigDescriptor+0x94>
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     d4a:	85 e0       	ldi	r24, 0x05	; 5
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     d52:	0f b6       	in	r0, 0x3f	; 63
}
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	08 95       	ret

00000d6e <USB_GetNextDescriptorComp>:
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	8c 01       	movw	r16, r24
     d84:	eb 01       	movw	r28, r22
     d86:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d88:	f8 01       	movw	r30, r16
     d8a:	e0 80       	ld	r14, Z
     d8c:	f1 80       	ldd	r15, Z+1	; 0x01
     d8e:	e1 14       	cp	r14, r1
     d90:	f1 04       	cpc	r15, r1
     d92:	99 f0       	breq	.+38     	; 0xdba <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d94:	a8 80       	ld	r10, Y
     d96:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     d98:	be 01       	movw	r22, r28
     d9a:	c8 01       	movw	r24, r16
     d9c:	72 df       	rcall	.-284    	; 0xc82 <USB_GetNextDescriptor>
     d9e:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     da0:	99 81       	ldd	r25, Y+1	; 0x01
     da2:	f6 01       	movw	r30, r12
     da4:	09 95       	icall
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	79 f3       	breq	.-34     	; 0xd88 <USB_GetNextDescriptorComp+0x1a>
     daa:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     dac:	39 f4       	brne	.+14     	; 0xdbc <USB_GetNextDescriptorComp+0x4e>
     dae:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     db0:	a8 82       	st	Y, r10
     db2:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     db4:	f1 82       	std	Z+1, r15	; 0x01
     db6:	e0 82       	st	Z, r14
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <USB_GetNextDescriptorComp+0x4e>
     dba:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dbc:	df 91       	pop	r29
}
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	08 95       	ret

00000dd2 <USB_Event_Stub>:
     dd2:	08 95       	ret

00000dd4 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ddc:	c9 ee       	ldi	r28, 0xE9	; 233
     dde:	d3 e0       	ldi	r29, 0x03	; 3
     de0:	11 11       	cpse	r17, r1
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     de4:	80 91 a6 00 	lds	r24, 0x00A6
     de8:	83 fd       	sbrc	r24, 3
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	84 db       	rcall	.-2296   	; 0x4f8 <USB_Host_WaitMS>
     df0:	81 11       	cpse	r24, r1
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <USB_Host_WaitForIOS+0x46>
     df4:	21 97       	sbiw	r28, 0x01	; 1
     df6:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     df8:	99 f7       	brne	.-26     	; 0xde0 <USB_Host_WaitForIOS+0xc>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     dfc:	0e c0       	rjmp	.+28     	; 0xe1a <USB_Host_WaitForIOS+0x46>
     dfe:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e00:	29 f4       	brne	.+10     	; 0xe0c <USB_Host_WaitForIOS+0x38>
     e02:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e06:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e08:	f1 cf       	rjmp	.-30     	; 0xdec <USB_Host_WaitForIOS+0x18>
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <USB_Host_WaitForIOS+0x44>
     e0c:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e0e:	71 f7       	brne	.-36     	; 0xdec <USB_Host_WaitForIOS+0x18>
     e10:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e14:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e16:	ea cf       	rjmp	.-44     	; 0xdec <USB_Host_WaitForIOS+0x18>
     e18:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e1a:	df 91       	pop	r29
}
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	08 95       	ret

00000e22 <USB_Host_SendControlRequest>:
     e22:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e2e:	f0 90 9e 00 	lds	r15, 0x009E
     e32:	8f 2d       	mov	r24, r15
     e34:	81 70       	andi	r24, 0x01	; 1
     e36:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e38:	c0 91 3b 01 	lds	r28, 0x013B
     e3c:	d0 91 3c 01 	lds	r29, 0x013C
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e40:	80 91 9e 00 	lds	r24, 0x009E
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	55 db       	rcall	.-2390   	; 0x4f8 <USB_Host_WaitMS>
     e4e:	81 11       	cpse	r24, r1
     e50:	cc c0       	rjmp	.+408    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     e52:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e56:	8f 7c       	andi	r24, 0xCF	; 207
     e58:	80 93 aa 00 	sts	0x00AA, r24
     e5c:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e60:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     e64:	8f 7e       	andi	r24, 0xEF	; 239
     e66:	80 93 a6 00 	sts	0x00A6, r24
     e6a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e6e:	8f 7b       	andi	r24, 0xBF	; 191
     e70:	80 93 a9 00 	sts	0x00A9, r24
     e74:	e5 e3       	ldi	r30, 0x35	; 53
     e76:	f1 e0       	ldi	r31, 0x01	; 1
     e78:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     e7a:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e80:	ed 33       	cpi	r30, 0x3D	; 61
     e82:	f8 07       	cpc	r31, r24
     e84:	c9 f7       	brne	.-14     	; 0xe78 <USB_Host_SendControlRequest+0x56>
     e86:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e8a:	87 77       	andi	r24, 0x77	; 119
     e8c:	80 93 a6 00 	sts	0x00A6, r24
     e90:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e92:	a0 df       	rcall	.-192    	; 0xdd4 <USB_Host_WaitForIOS>
     e94:	81 11       	cpse	r24, r1
     e96:	a9 c0       	rjmp	.+338    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     e98:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e9c:	80 64       	ori	r24, 0x40	; 64
     e9e:	80 93 a9 00 	sts	0x00A9, r24
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	29 db       	rcall	.-2478   	; 0x4f8 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ea6:	81 11       	cpse	r24, r1
     ea8:	a0 c0       	rjmp	.+320    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     eaa:	80 91 35 01 	lds	r24, 0x0135
     eae:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eb0:	4e c0       	rjmp	.+156    	; 0xf4e <USB_Host_SendControlRequest+0x12c>
     eb2:	80 91 aa 00 	lds	r24, 0x00AA
     eb6:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eb8:	80 61       	ori	r24, 0x10	; 16
     eba:	80 93 aa 00 	sts	0x00AA, r24
     ebe:	01 15       	cp	r16, r1
     ec0:	11 05       	cpc	r17, r1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ec4:	3a c0       	rjmp	.+116    	; 0xf3a <USB_Host_SendControlRequest+0x118>
     ec6:	80 91 aa 00 	lds	r24, 0x00AA
     eca:	8f 7c       	andi	r24, 0xCF	; 207
     ecc:	80 62       	ori	r24, 0x20	; 32
     ece:	80 93 aa 00 	sts	0x00AA, r24
     ed2:	80 91 a9 00 	lds	r24, 0x00A9
     ed6:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ed8:	80 93 a9 00 	sts	0x00A9, r24
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	7a df       	rcall	.-268    	; 0xdd4 <USB_Host_WaitForIOS>
     ee0:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ee2:	83 c0       	rjmp	.+262    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     ee4:	80 91 a6 00 	lds	r24, 0x00A6
     ee8:	8b 77       	andi	r24, 0x7B	; 123
     eea:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	71 df       	rcall	.-286    	; 0xdd4 <USB_Host_WaitForIOS>
     ef2:	7b c0       	rjmp	.+246    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     ef4:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	69 df       	rcall	.-302    	; 0xdd4 <USB_Host_WaitForIOS>
     f02:	81 11       	cpse	r24, r1
     f04:	72 c0       	rjmp	.+228    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     f06:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f0a:	90 91 f7 00 	lds	r25, 0x00F7
     f0e:	89 2b       	or	r24, r25
     f10:	11 f4       	brne	.+4      	; 0xf16 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f12:	c0 e0       	ldi	r28, 0x00	; 0
     f14:	d0 e0       	ldi	r29, 0x00	; 0
     f16:	f8 01       	movw	r30, r16
     f18:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f1a:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
     f1e:	90 91 f7 00 	lds	r25, 0x00F7
     f22:	89 2b       	or	r24, r25
     f24:	69 f4       	brne	.+26     	; 0xf40 <USB_Host_SendControlRequest+0x11e>
     f26:	80 91 a9 00 	lds	r24, 0x00A9
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
     f30:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f34:	8e 77       	andi	r24, 0x7E	; 126
     f36:	80 93 a6 00 	sts	0x00A6, r24
     f3a:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f3c:	d9 f6       	brne	.-74     	; 0xef4 <USB_Host_SendControlRequest+0xd2>
     f3e:	c3 cf       	rjmp	.-122    	; 0xec6 <USB_Host_SendControlRequest+0xa4>
     f40:	20 97       	sbiw	r28, 0x00	; 0
     f42:	89 f3       	breq	.-30     	; 0xf26 <USB_Host_SendControlRequest+0x104>
     f44:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f48:	81 93       	st	Z+, r24
     f4a:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f4c:	e5 cf       	rjmp	.-54     	; 0xf18 <USB_Host_SendControlRequest+0xf6>
     f4e:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f50:	11 05       	cpc	r17, r1
     f52:	b1 f1       	breq	.+108    	; 0xfc0 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
     f54:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
     f58:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     f5a:	80 62       	ori	r24, 0x20	; 32
     f5c:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f60:	80 91 a9 00 	lds	r24, 0x00A9
     f64:	8f 7b       	andi	r24, 0xBF	; 191
     f66:	80 93 a9 00 	sts	0x00A9, r24
     f6a:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f6c:	20 97       	sbiw	r28, 0x00	; 0
     f6e:	01 f1       	breq	.+64     	; 0xfb0 <USB_Host_SendControlRequest+0x18e>
     f70:	31 df       	rcall	.-414    	; 0xdd4 <USB_Host_WaitForIOS>
     f72:	81 11       	cpse	r24, r1
     f74:	3a c0       	rjmp	.+116    	; 0xfea <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f76:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f78:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f7c:	30 91 f7 00 	lds	r19, 0x00F7
     f80:	80 91 1f 01 	lds	r24, 0x011F
     f84:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	58 f4       	brcc	.+22     	; 0xfa2 <USB_Host_SendControlRequest+0x180>
     f8c:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	8c 01       	movw	r16, r24
     f92:	20 81       	ld	r18, Z
     f94:	20 93 af 00 	sts	0x00AF, r18
     f98:	21 97       	sbiw	r28, 0x01	; 1
     f9a:	20 97       	sbiw	r28, 0x00	; 0
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <USB_Host_SendControlRequest+0x182>
     f9e:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
     fa0:	eb cf       	rjmp	.-42     	; 0xf78 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fa2:	8f 01       	movw	r16, r30
     fa4:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fa8:	8b 77       	andi	r24, 0x7B	; 123
     faa:	80 93 a6 00 	sts	0x00A6, r24
     fae:	dd cf       	rjmp	.-70     	; 0xf6a <USB_Host_SendControlRequest+0x148>
     fb0:	11 df       	rcall	.-478    	; 0xdd4 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fb2:	81 11       	cpse	r24, r1
     fb4:	1a c0       	rjmp	.+52     	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     fb6:	80 91 a9 00 	lds	r24, 0x00A9
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc0:	80 91 aa 00 	lds	r24, 0x00AA
     fc4:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fc6:	80 61       	ori	r24, 0x10	; 16
     fc8:	80 93 aa 00 	sts	0x00AA, r24
     fcc:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd0:	8f 7b       	andi	r24, 0xBF	; 191
     fd2:	80 93 a9 00 	sts	0x00A9, r24
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	fd de       	rcall	.-518    	; 0xdd4 <USB_Host_WaitForIOS>
     fda:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <USB_Host_SendControlRequest+0x1c8>
     fde:	80 91 a6 00 	lds	r24, 0x00A6
     fe2:	8e 77       	andi	r24, 0x7E	; 126
     fe4:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 91 a9 00 	lds	r25, 0x00A9
     fee:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ff0:	90 93 a9 00 	sts	0x00A9, r25
     ff4:	f1 10       	cpse	r15, r1
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <USB_Host_SendControlRequest+0x1e0>
     ff8:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ffc:	9e 7f       	andi	r25, 0xFE	; 254
     ffe:	90 93 9e 00 	sts	0x009E, r25
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1008:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1014:	ff 90       	pop	r15
    1016:	08 95       	ret

00001018 <USB_Host_SetDeviceConfiguration>:
    1018:	cf 93       	push	r28
				UPRST = 0;
    101a:	c8 2f       	mov	r28, r24
    101c:	10 92 35 01 	sts	0x0135, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1020:	89 e0       	ldi	r24, 0x09	; 9
    1022:	80 93 36 01 	sts	0x0136, r24
    1026:	2c 2f       	mov	r18, r28
    1028:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    102a:	30 93 38 01 	sts	0x0138, r19
    102e:	20 93 37 01 	sts	0x0137, r18
    1032:	10 92 3a 01 	sts	0x013A, r1
    1036:	10 92 39 01 	sts	0x0139, r1
    103a:	10 92 3c 01 	sts	0x013C, r1
    103e:	10 92 3b 01 	sts	0x013B, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1042:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	eb de       	rcall	.-554    	; 0xe22 <USB_Host_SendControlRequest>
    104c:	81 11       	cpse	r24, r1
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <USB_Host_SetDeviceConfiguration+0x4a>
    1050:	c0 93 33 01 	sts	0x0133, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1054:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1056:	11 f0       	breq	.+4      	; 0x105c <USB_Host_SetDeviceConfiguration+0x44>
    1058:	9b e0       	ldi	r25, 0x0B	; 11
    105a:	01 c0       	rjmp	.+2      	; 0x105e <USB_Host_SetDeviceConfiguration+0x46>
    105c:	9a e0       	ldi	r25, 0x0A	; 10
    105e:	90 93 3d 01 	sts	0x013D, r25
    1062:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1064:	08 95       	ret

00001066 <USB_USBTask>:
    1066:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1068:	c0 91 a7 00 	lds	r28, 0x00A7
    106c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    106e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1072:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1076:	8d da       	rcall	.-2790   	; 0x592 <USB_Host_ProcessNextHostState>
    1078:	c0 93 a7 00 	sts	0x00A7, r28
    107c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    107e:	08 95       	ret

00001080 <DCOMP_CDC_Host_NextCDCControlInterface>:
    1080:	fc 01       	movw	r30, r24

static uint8_t DCOMP_CDC_Host_NextCDCControlInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1082:	81 81       	ldd	r24, Z+1	; 0x01
    1084:	84 30       	cpi	r24, 0x04	; 4
    1086:	59 f4       	brne	.+22     	; 0x109e <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    1088:	85 81       	ldd	r24, Z+5	; 0x05
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	41 f4       	brne	.+16     	; 0x109e <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    108e:	86 81       	ldd	r24, Z+6	; 0x06
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	29 f4       	brne	.+10     	; 0x109e <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
    1094:	87 81       	ldd	r24, Z+7	; 0x07
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	11 f4       	brne	.+4      	; 0x109e <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
		    (Interface->Protocol == CDC_CSCP_ATCommandProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    109e:	82 e0       	ldi	r24, 0x02	; 2
}
    10a0:	08 95       	ret

000010a2 <DCOMP_CDC_Host_NextCDCDataInterface>:

static uint8_t DCOMP_CDC_Host_NextCDCDataInterface(void* const CurrentDescriptor)
{
    10a2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10a4:	81 81       	ldd	r24, Z+1	; 0x01
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	51 f4       	brne	.+20     	; 0x10be <DCOMP_CDC_Host_NextCDCDataInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    10aa:	85 81       	ldd	r24, Z+5	; 0x05
    10ac:	8a 30       	cpi	r24, 0x0A	; 10
    10ae:	39 f4       	brne	.+14     	; 0x10be <DCOMP_CDC_Host_NextCDCDataInterface+0x1c>
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	81 11       	cpse	r24, r1
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <DCOMP_CDC_Host_NextCDCDataInterface+0x1c>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
    10b6:	87 81       	ldd	r24, Z+7	; 0x07
    10b8:	81 11       	cpse	r24, r1
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <DCOMP_CDC_Host_NextCDCDataInterface+0x1c>
    10bc:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10be:	82 e0       	ldi	r24, 0x02	; 2
}
    10c0:	08 95       	ret

000010c2 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint>:

static uint8_t DCOMP_CDC_Host_NextCDCInterfaceEndpoint(void* const CurrentDescriptor)
{
    10c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10c4:	81 81       	ldd	r24, Z+1	; 0x01
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	51 f4       	brne	.+20     	; 0x10de <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    10ca:	83 81       	ldd	r24, Z+3	; 0x03
    10cc:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    10ce:	82 50       	subi	r24, 0x02	; 2
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	48 f4       	brcc	.+18     	; 0x10e6 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    10d4:	82 81       	ldd	r24, Z+2	; 0x02
    10d6:	67 dc       	rcall	.-1842   	; 0x9a6 <Pipe_IsEndpointBound>
    10d8:	81 11       	cpse	r24, r1
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    10da:	05 c0       	rjmp	.+10     	; 0x10e6 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x28>
    10de:	84 30       	cpi	r24, 0x04	; 4
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    10e2:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    10e4:	08 95       	ret
    10e6:	82 e0       	ldi	r24, 0x02	; 2
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10e8:	08 95       	ret
    10ea:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
    10ec:	08 95       	ret

000010ee <CDC_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10ee:	8f 92       	push	r8
#include "CDCClassHost.h"

uint8_t CDC_Host_ConfigurePipes(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	00 d0       	rcall	.+0      	; 0x1108 <CDC_Host_ConfigurePipes+0x1a>
    1108:	00 d0       	rcall	.+0      	; 0x110a <CDC_Host_ConfigurePipes+0x1c>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	8c 01       	movw	r16, r24
    1110:	7a 83       	std	Y+2, r23	; 0x02
    1112:	69 83       	std	Y+1, r22	; 0x01
    1114:	5c 83       	std	Y+4, r21	; 0x04
    1116:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1118:	fc 01       	movw	r30, r24
    111a:	72 96       	adiw	r30, 0x12	; 18
    111c:	8d e0       	ldi	r24, 0x0D	; 13
    111e:	df 01       	movw	r26, r30
    1120:	1d 92       	st	X+, r1
    1122:	8a 95       	dec	r24
    1124:	e9 f7       	brne	.-6      	; 0x1120 <CDC_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1126:	eb 81       	ldd	r30, Y+3	; 0x03
    1128:	fc 81       	ldd	r31, Y+4	; 0x04
    112a:	81 81       	ldd	r24, Z+1	; 0x01
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	09 f0       	breq	.+2      	; 0x1132 <CDC_Host_ConfigurePipes+0x44>
    1130:	9e c0       	rjmp	.+316    	; 0x126e <CDC_Host_ConfigurePipes+0x180>
    1132:	81 2c       	mov	r8, r1
    1134:	91 2c       	mov	r9, r1
    1136:	e1 2c       	mov	r14, r1
    1138:	f1 2c       	mov	r15, r1
    113a:	c1 2c       	mov	r12, r1
    113c:	d1 2c       	mov	r13, r1
    113e:	a1 2c       	mov	r10, r1
    1140:	b1 2c       	mov	r11, r1
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    1142:	81 14       	cp	r8, r1
    1144:	91 04       	cpc	r9, r1
    1146:	21 f4       	brne	.+8      	; 0x1150 <CDC_Host_ConfigurePipes+0x62>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    1148:	e1 14       	cp	r14, r1
    114a:	f1 04       	cpc	r15, r1
    114c:	61 f4       	brne	.+24     	; 0x1166 <CDC_Host_ConfigurePipes+0x78>
    114e:	1c c0       	rjmp	.+56     	; 0x1188 <CDC_Host_ConfigurePipes+0x9a>
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1150:	41 e6       	ldi	r20, 0x61	; 97
    1152:	58 e0       	ldi	r21, 0x08	; 8
    1154:	be 01       	movw	r22, r28
    1156:	6d 5f       	subi	r22, 0xFD	; 253
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	ce 01       	movw	r24, r28
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	07 de       	rcall	.-1010   	; 0xd6e <USB_GetNextDescriptorComp>
    1160:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    1162:	f2 cf       	rjmp	.-28     	; 0x1148 <CDC_Host_ConfigurePipes+0x5a>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <CDC_Host_ConfigurePipes+0xb4>
    1166:	41 e5       	ldi	r20, 0x51	; 81
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1168:	58 e0       	ldi	r21, 0x08	; 8
    116a:	be 01       	movw	r22, r28
    116c:	6d 5f       	subi	r22, 0xFD	; 253
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	fc dd       	rcall	.-1032   	; 0xd6e <USB_GetNextDescriptorComp>
    1176:	81 11       	cpse	r24, r1
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <CDC_Host_ConfigurePipes+0x96>
    117a:	a1 2c       	mov	r10, r1
    117c:	b1 2c       	mov	r11, r1
				                              DCOMP_CDC_Host_NextCDCDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				DataINEndpoint  = NULL;
    117e:	c1 2c       	mov	r12, r1
    1180:	d1 2c       	mov	r13, r1
				DataOUTEndpoint = NULL;
    1182:	df cf       	rjmp	.-66     	; 0x1142 <CDC_Host_ConfigurePipes+0x54>
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	74 c0       	rjmp	.+232    	; 0x1270 <CDC_Host_ConfigurePipes+0x182>
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_CDC_Host_NextCDCDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
    1188:	40 e4       	ldi	r20, 0x40	; 64
    118a:	58 e0       	ldi	r21, 0x08	; 8
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    118c:	be 01       	movw	r22, r28
    118e:	6d 5f       	subi	r22, 0xFD	; 253
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	eb dd       	rcall	.-1066   	; 0xd6e <USB_GetNextDescriptorComp>
    1198:	81 11       	cpse	r24, r1
    119a:	f4 cf       	rjmp	.-24     	; 0x1184 <CDC_Host_ConfigurePipes+0x96>
    119c:	8b 80       	ldd	r8, Y+3	; 0x03
    119e:	9c 80       	ldd	r9, Y+4	; 0x04
    11a0:	0e c0       	rjmp	.+28     	; 0x11be <CDC_Host_ConfigurePipes+0xd0>
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				CDCControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    11a8:	87 ff       	sbrs	r24, 7
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <CDC_Host_ConfigurePipes+0xca>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    11ac:	83 81       	ldd	r24, Z+3	; 0x03
    11ae:	83 70       	andi	r24, 0x03	; 3
    11b0:	83 30       	cpi	r24, 0x03	; 3
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    11b2:	21 f4       	brne	.+8      	; 0x11bc <CDC_Host_ConfigurePipes+0xce>
    11b4:	7f 01       	movw	r14, r30
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <CDC_Host_ConfigurePipes+0xd0>
    11b8:	6f 01       	movw	r12, r30
			  NotificationEndpoint = EndpointData;
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <CDC_Host_ConfigurePipes+0xd0>
    11bc:	5f 01       	movw	r10, r30
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    11be:	a1 14       	cp	r10, r1
    11c0:	b1 04       	cpc	r11, r1
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <CDC_Host_ConfigurePipes+0xd8>
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    11c4:	be cf       	rjmp	.-132    	; 0x1142 <CDC_Host_ConfigurePipes+0x54>
    11c6:	c1 14       	cp	r12, r1
    11c8:	d1 04       	cpc	r13, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <CDC_Host_ConfigurePipes+0xe0>
    11cc:	ba cf       	rjmp	.-140    	; 0x1142 <CDC_Host_ConfigurePipes+0x54>
    11ce:	e1 14       	cp	r14, r1
    11d0:	f1 04       	cpc	r15, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <CDC_Host_ConfigurePipes+0xe8>
    11d4:	b6 cf       	rjmp	.-148    	; 0x1142 <CDC_Host_ConfigurePipes+0x54>
    11d6:	f5 01       	movw	r30, r10
    11d8:	84 81       	ldd	r24, Z+4	; 0x04
    11da:	95 81       	ldd	r25, Z+5	; 0x05
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	CDCInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    11dc:	d8 01       	movw	r26, r16
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	9c 93       	st	X, r25
    11e2:	8e 93       	st	-X, r24
    11e4:	11 97       	sbiw	r26, 0x01	; 1
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	13 96       	adiw	r26, 0x03	; 3
    11ea:	8c 93       	st	X, r24
	CDCInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    11ec:	13 97       	sbiw	r26, 0x03	; 3
    11ee:	22 e0       	ldi	r18, 0x02	; 2
    11f0:	14 96       	adiw	r26, 0x04	; 4
    11f2:	2c 93       	st	X, r18
	CDCInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    11f4:	14 97       	sbiw	r26, 0x04	; 4
    11f6:	f6 01       	movw	r30, r12
    11f8:	84 81       	ldd	r24, Z+4	; 0x04
    11fa:	95 81       	ldd	r25, Z+5	; 0x05

	CDCInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    11fc:	18 96       	adiw	r26, 0x08	; 8
    11fe:	9c 93       	st	X, r25
    1200:	8e 93       	st	-X, r24
    1202:	17 97       	sbiw	r26, 0x07	; 7
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	19 96       	adiw	r26, 0x09	; 9
    1208:	8c 93       	st	X, r24
	CDCInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    120a:	19 97       	sbiw	r26, 0x09	; 9
    120c:	1a 96       	adiw	r26, 0x0a	; 10
    120e:	2c 93       	st	X, r18
    1210:	d7 01       	movw	r26, r14
	CDCInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1212:	14 96       	adiw	r26, 0x04	; 4
    1214:	8d 91       	ld	r24, X+

	CDCInterfaceInfo->Config.NotificationPipe.Size = le16_to_cpu(NotificationEndpoint->EndpointSize);
    1216:	9c 91       	ld	r25, X
    1218:	15 97       	sbiw	r26, 0x05	; 5
    121a:	f8 01       	movw	r30, r16
    121c:	96 87       	std	Z+14, r25	; 0x0e
    121e:	85 87       	std	Z+13, r24	; 0x0d
    1220:	12 96       	adiw	r26, 0x02	; 2
    1222:	8c 91       	ld	r24, X
    1224:	87 87       	std	Z+15, r24	; 0x0f
	CDCInterfaceInfo->Config.NotificationPipe.EndpointAddress = NotificationEndpoint->EndpointAddress;
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	80 8b       	std	Z+16, r24	; 0x10
    122a:	61 e0       	ldi	r22, 0x01	; 1
	CDCInterfaceInfo->Config.NotificationPipe.Type = EP_TYPE_INTERRUPT;
    122c:	c8 01       	movw	r24, r16
    122e:	88 db       	rcall	.-2288   	; 0x940 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataINPipe, 1)))
    1230:	81 11       	cpse	r24, r1
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <CDC_Host_ConfigurePipes+0x14a>
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	1c c0       	rjmp	.+56     	; 0x1270 <CDC_Host_ConfigurePipes+0x182>
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	c8 01       	movw	r24, r16
	  return CDC_ENUMERROR_PipeConfigurationFailed;
    123c:	06 96       	adiw	r24, 0x06	; 6
    123e:	80 db       	rcall	.-2304   	; 0x940 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataOUTPipe, 1)))
    1240:	88 23       	and	r24, r24
    1242:	c1 f3       	breq	.-16     	; 0x1234 <CDC_Host_ConfigurePipes+0x146>
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	c8 01       	movw	r24, r16
    1248:	0c 96       	adiw	r24, 0x0c	; 12
    124a:	7a db       	rcall	.-2316   	; 0x940 <Pipe_ConfigurePipeTable>
    124c:	88 23       	and	r24, r24
	  return CDC_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.NotificationPipe, 1)))
    124e:	91 f3       	breq	.-28     	; 0x1234 <CDC_Host_ConfigurePipes+0x146>
    1250:	d4 01       	movw	r26, r8
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	8c 91       	ld	r24, X
    1256:	f8 01       	movw	r30, r16
    1258:	83 8b       	std	Z+19, r24	; 0x13
    125a:	83 e0       	ldi	r24, 0x03	; 3
	  return CDC_ENUMERROR_PipeConfigurationFailed;

	CDCInterfaceInfo->State.ControlInterfaceNumber = CDCControlInterface->InterfaceNumber;
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	95 8b       	std	Z+21, r25	; 0x15
    1260:	84 8b       	std	Z+20, r24	; 0x14
    1262:	97 8b       	std	Z+23, r25	; 0x17
    1264:	86 8b       	std	Z+22, r24	; 0x16
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	82 8b       	std	Z+18, r24	; 0x12
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <CDC_Host_ConfigurePipes+0x182>
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	0f 90       	pop	r0
	CDCInterfaceInfo->State.IsActive = true;
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0

	return CDC_ENUMERROR_NoError;
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;
    127a:	cf 91       	pop	r28
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
	CDCInterfaceInfo->State.IsActive = true;

	return CDC_ENUMERROR_NoError;
}
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	9f 90       	pop	r9
    128e:	8f 90       	pop	r8
    1290:	08 95       	ret

00001292 <CDC_Host_SetLineEncoding>:
    1292:	fc 01       	movw	r30, r24
    1294:	23 89       	ldd	r18, Z+19	; 0x13
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	41 e2       	ldi	r20, 0x21	; 33
    129a:	40 93 35 01 	sts	0x0135, r20
	#endif
}

uint8_t CDC_Host_SetLineEncoding(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	USB_ControlRequest = (USB_Request_Header_t)
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	40 93 36 01 	sts	0x0136, r20
    12a4:	10 92 38 01 	sts	0x0138, r1
    12a8:	10 92 37 01 	sts	0x0137, r1
    12ac:	30 93 3a 01 	sts	0x013A, r19
    12b0:	20 93 39 01 	sts	0x0139, r18
    12b4:	27 e0       	ldi	r18, 0x07	; 7
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	30 93 3c 01 	sts	0x013C, r19
    12bc:	20 93 3b 01 	sts	0x013B, r18
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12c0:	10 92 a7 00 	sts	0x00A7, r1
		.wLength       = sizeof(CDCInterfaceInfo->State.LineEncoding),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(&CDCInterfaceInfo->State.LineEncoding);
    12c4:	48 96       	adiw	r24, 0x18	; 24
    12c6:	ad cd       	rjmp	.-1190   	; 0xe22 <USB_Host_SendControlRequest>

000012c8 <CDC_Host_BytesReceived>:
    12c8:	20 91 3d 01 	lds	r18, 0x013D
	return PIPE_READYWAIT_NoError;
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    12cc:	2b 30       	cpi	r18, 0x0B	; 11
    12ce:	89 f5       	brne	.+98     	; 0x1332 <CDC_Host_BytesReceived+0x6a>
    12d0:	fc 01       	movw	r30, r24
    12d2:	22 89       	ldd	r18, Z+18	; 0x12
    12d4:	22 23       	and	r18, r18
    12d6:	69 f1       	breq	.+90     	; 0x1332 <CDC_Host_BytesReceived+0x6a>
    12d8:	80 81       	ld	r24, Z
    12da:	8f 70       	andi	r24, 0x0F	; 15
    12dc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12e0:	80 91 a9 00 	lds	r24, 0x00A9
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    12ea:	80 91 a6 00 	lds	r24, 0x00A6
	  return 0;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    12ee:	80 ff       	sbrs	r24, 0
    12f0:	1b c0       	rjmp	.+54     	; 0x1328 <CDC_Host_BytesReceived+0x60>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12f2:	80 91 f6 00 	lds	r24, 0x00F6
    12f6:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	59 f4       	brne	.+22     	; 0x1314 <CDC_Host_BytesReceived+0x4c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12fe:	20 91 a6 00 	lds	r18, 0x00A6
    1302:	2e 77       	andi	r18, 0x7E	; 126
    1304:	20 93 a6 00 	sts	0x00A6, r18

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1308:	20 91 a9 00 	lds	r18, 0x00A9
    130c:	20 64       	ori	r18, 0x40	; 64
    130e:	20 93 a9 00 	sts	0x00A9, r18
		{
			Pipe_ClearIN();
			Pipe_Freeze();
			return 0;
    1312:	08 95       	ret
    1314:	80 91 a9 00 	lds	r24, 0x00A9
    1318:	80 64       	ori	r24, 0x40	; 64
    131a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    131e:	80 91 f6 00 	lds	r24, 0x00F6
    1322:	90 91 f7 00 	lds	r25, 0x00F7
		}
		else
		{
			Pipe_Freeze();
			return Pipe_BytesInPipe();
    1326:	08 95       	ret

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1328:	80 91 a9 00 	lds	r24, 0x00A9
    132c:	80 64       	ori	r24, 0x40	; 64
    132e:	80 93 a9 00 	sts	0x00A9, r24
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return 0;
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
	{
		Pipe_Freeze();

		return 0;
	}
}
    1336:	08 95       	ret

00001338 <CDC_Host_ReceiveByte>:

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1338:	20 91 3d 01 	lds	r18, 0x013D
    133c:	2b 30       	cpi	r18, 0x0B	; 11
    133e:	91 f5       	brne	.+100    	; 0x13a4 <CDC_Host_ReceiveByte+0x6c>
    1340:	fc 01       	movw	r30, r24
    1342:	22 89       	ldd	r18, Z+18	; 0x12
    1344:	22 23       	and	r18, r18
    1346:	71 f1       	breq	.+92     	; 0x13a4 <CDC_Host_ReceiveByte+0x6c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1348:	80 81       	ld	r24, Z
    134a:	8f 70       	andi	r24, 0x0F	; 15
    134c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1350:	80 91 a9 00 	lds	r24, 0x00A9
    1354:	8f 7b       	andi	r24, 0xBF	; 191
    1356:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    135a:	80 91 a6 00 	lds	r24, 0x00A6
	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    135e:	80 ff       	sbrs	r24, 0
    1360:	18 c0       	rjmp	.+48     	; 0x1392 <CDC_Host_ReceiveByte+0x5a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1362:	80 91 f6 00 	lds	r24, 0x00F6
    1366:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    136a:	89 2b       	or	r24, r25
    136c:	21 f0       	breq	.+8      	; 0x1376 <CDC_Host_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    136e:	20 91 af 00 	lds	r18, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <CDC_Host_ReceiveByte+0x42>
int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	3f ef       	ldi	r19, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    137a:	80 91 f6 00 	lds	r24, 0x00F6
    137e:	90 91 f7 00 	lds	r25, 0x00F7
	if (Pipe_IsINReceived())
	{
		if (Pipe_BytesInPipe())
		  ReceivedByte = Pipe_Read_8();

		if (!(Pipe_BytesInPipe()))
    1382:	89 2b       	or	r24, r25
    1384:	41 f4       	brne	.+16     	; 0x1396 <CDC_Host_ReceiveByte+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1386:	80 91 a6 00 	lds	r24, 0x00A6
    138a:	8e 77       	andi	r24, 0x7E	; 126
    138c:	80 93 a6 00 	sts	0x00A6, r24
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <CDC_Host_ReceiveByte+0x5e>
int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    1392:	2f ef       	ldi	r18, 0xFF	; 255
    1394:	3f ef       	ldi	r19, 0xFF	; 255

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1396:	80 91 a9 00 	lds	r24, 0x00A9
    139a:	80 64       	ori	r24, 0x40	; 64
    139c:	80 93 a9 00 	sts	0x00A9, r24
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    13a0:	c9 01       	movw	r24, r18
    13a2:	08 95       	ret
}

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    13a8:	08 95       	ret

000013aa <CDC_Host_Flush>:

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    13aa:	20 91 3d 01 	lds	r18, 0x013D
    13ae:	2b 30       	cpi	r18, 0x0B	; 11
    13b0:	51 f5       	brne	.+84     	; 0x1406 <CDC_Host_Flush+0x5c>
    13b2:	fc 01       	movw	r30, r24
    13b4:	22 89       	ldd	r18, Z+18	; 0x12
    13b6:	22 23       	and	r18, r18
    13b8:	31 f1       	breq	.+76     	; 0x1406 <CDC_Host_Flush+0x5c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13ba:	86 81       	ldd	r24, Z+6	; 0x06
    13bc:	8f 70       	andi	r24, 0x0F	; 15
    13be:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13c2:	80 91 a9 00 	lds	r24, 0x00A9
    13c6:	8f 7b       	andi	r24, 0xBF	; 191
    13c8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13cc:	80 91 f6 00 	lds	r24, 0x00F6
    13d0:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    13d4:	89 2b       	or	r24, r25
    13d6:	c9 f0       	breq	.+50     	; 0x140a <CDC_Host_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    13d8:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13dc:	80 91 a6 00 	lds	r24, 0x00A6
    13e0:	8b 77       	andi	r24, 0x7B	; 123
    13e2:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    13e6:	95 fd       	sbrc	r25, 5
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <CDC_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    13ea:	07 db       	rcall	.-2546   	; 0x9fa <Pipe_WaitUntilReady>
    13ec:	81 11       	cpse	r24, r1
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <CDC_Host_Flush+0x62>
    13f0:	80 91 a6 00 	lds	r24, 0x00A6
    13f4:	8b 77       	andi	r24, 0x7B	; 123
    13f6:	80 93 a6 00 	sts	0x00A6, r24
    13fa:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	80 93 a9 00 	sts	0x00A9, r24
    1404:	02 c0       	rjmp	.+4      	; 0x140a <CDC_Host_Flush+0x60>
    1406:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1408:	08 95       	ret
    140a:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    140c:	08 95       	ret

0000140e <CDC_Host_Event_Stub>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    140e:	08 95       	ret

00001410 <CDC_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void CDC_Host_USBTask(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	28 97       	sbiw	r28, 0x08	; 8
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    142a:	80 91 3d 01 	lds	r24, 0x013D
    142e:	8b 30       	cpi	r24, 0x0B	; 11
    1430:	c9 f5       	brne	.+114    	; 0x14a4 <CDC_Host_USBTask+0x94>
    1432:	f8 01       	movw	r30, r16
    1434:	82 89       	ldd	r24, Z+18	; 0x12
    1436:	88 23       	and	r24, r24
    1438:	a9 f1       	breq	.+106    	; 0x14a4 <CDC_Host_USBTask+0x94>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    143a:	84 85       	ldd	r24, Z+12	; 0x0c
    143c:	8f 70       	andi	r24, 0x0F	; 15
    143e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1442:	80 91 a9 00 	lds	r24, 0x00A9
    1446:	8f 7b       	andi	r24, 0xBF	; 191
    1448:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    144c:	80 91 a6 00 	lds	r24, 0x00A6
	  return;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.NotificationPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1450:	80 ff       	sbrs	r24, 0
    1452:	21 c0       	rjmp	.+66     	; 0x1496 <CDC_Host_USBTask+0x86>
	{
		USB_Request_Header_t Notification;
		Pipe_Read_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	68 e0       	ldi	r22, 0x08	; 8
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	ba d9       	rcall	.-3212   	; 0x7d6 <Pipe_Read_Stream_LE>
    1462:	8a 81       	ldd	r24, Y+2	; 0x02

		if ((Notification.bRequest      == CDC_NOTIF_SerialState) &&
    1464:	80 32       	cpi	r24, 0x20	; 32
    1466:	91 f4       	brne	.+36     	; 0x148c <CDC_Host_USBTask+0x7c>
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	81 3a       	cpi	r24, 0xA1	; 161
    146c:	79 f4       	brne	.+30     	; 0x148c <CDC_Host_USBTask+0x7c>
    146e:	40 e0       	ldi	r20, 0x00	; 0
		    (Notification.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)))
		{
			Pipe_Read_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	62 e0       	ldi	r22, 0x02	; 2
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	c8 01       	movw	r24, r16
    1478:	46 96       	adiw	r24, 0x16	; 22
    147a:	ad d9       	rcall	.-3238   	; 0x7d6 <Pipe_Read_Stream_LE>
    147c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1480:	8e 77       	andi	r24, 0x7E	; 126
    1482:	80 93 a6 00 	sts	0x00A6, r24
    1486:	c8 01       	movw	r24, r16
    1488:	c2 df       	rcall	.-124    	; 0x140e <CDC_Host_Event_Stub>
			                    sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
			                    NULL);

			Pipe_ClearIN();

			EVENT_CDC_Host_ControLineStateChanged(CDCInterfaceInfo);
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <CDC_Host_USBTask+0x86>
    148c:	80 91 a6 00 	lds	r24, 0x00A6
    1490:	8e 77       	andi	r24, 0x7E	; 126
    1492:	80 93 a6 00 	sts	0x00A6, r24
    1496:	80 91 a9 00 	lds	r24, 0x00A9
    149a:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    149c:	80 93 a9 00 	sts	0x00A9, r24
    14a0:	c8 01       	movw	r24, r16
    14a2:	83 df       	rcall	.-250    	; 0x13aa <CDC_Host_Flush>
    14a4:	28 96       	adiw	r28, 0x08	; 8
	}

	Pipe_Freeze();

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Host_Flush(CDCInterfaceInfo);
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
	#endif
}
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <Serial_putchar>:
    14ba:	90 91 c8 00 	lds	r25, 0x00C8
    14be:	95 ff       	sbrs	r25, 5
    14c0:	fc cf       	rjmp	.-8      	; 0x14ba <Serial_putchar>
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
				UDR1 = DataByte;
    14c2:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	08 95       	ret

000014cc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14cc:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14d0:	87 ff       	sbrs	r24, 7
    14d2:	08 c0       	rjmp	.+16     	; 0x14e4 <Serial_getchar+0x18>
    14d4:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14d8:	87 ff       	sbrs	r24, 7
    14da:	07 c0       	rjmp	.+14     	; 0x14ea <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14dc:	80 91 ce 00 	lds	r24, 0x00CE
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	08 95       	ret
	  return _FDEV_EOF;
    14e4:	8e ef       	ldi	r24, 0xFE	; 254
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14ee:	08 95       	ret

000014f0 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14f0:	fc 01       	movw	r30, r24
	if (!(Stream))
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	59 f4       	brne	.+22     	; 0x150c <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14f6:	8e e3       	ldi	r24, 0x3E	; 62
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	90 93 4d 01 	sts	0x014D, r25
    14fe:	80 93 4c 01 	sts	0x014C, r24
		stdout = Stream;
    1502:	90 93 4f 01 	sts	0x014F, r25
    1506:	80 93 4e 01 	sts	0x014E, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    150a:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    150c:	8e e0       	ldi	r24, 0x0E	; 14
    150e:	df 01       	movw	r26, r30
    1510:	1d 92       	st	X+, r1
    1512:	8a 95       	dec	r24
    1514:	e9 f7       	brne	.-6      	; 0x1510 <Serial_CreateStream+0x20>
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	83 83       	std	Z+3, r24	; 0x03
    151a:	8d e5       	ldi	r24, 0x5D	; 93
    151c:	9a e0       	ldi	r25, 0x0A	; 10
    151e:	91 87       	std	Z+9, r25	; 0x09
    1520:	80 87       	std	Z+8, r24	; 0x08
    1522:	86 e6       	ldi	r24, 0x66	; 102
    1524:	9a e0       	ldi	r25, 0x0A	; 10
    1526:	93 87       	std	Z+11, r25	; 0x0b
    1528:	82 87       	std	Z+10, r24	; 0x0a
    152a:	08 95       	ret

0000152c <fputc>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	18 2f       	mov	r17, r24
    1536:	09 2f       	mov	r16, r25
    1538:	eb 01       	movw	r28, r22
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 fd       	sbrc	r24, 1
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <fputc+0x1a>
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	9f ef       	ldi	r25, 0xFF	; 255
    1544:	20 c0       	rjmp	.+64     	; 0x1586 <fputc+0x5a>
    1546:	82 ff       	sbrs	r24, 2
    1548:	10 c0       	rjmp	.+32     	; 0x156a <fputc+0x3e>
    154a:	4e 81       	ldd	r20, Y+6	; 0x06
    154c:	5f 81       	ldd	r21, Y+7	; 0x07
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	3d 81       	ldd	r19, Y+5	; 0x05
    1552:	42 17       	cp	r20, r18
    1554:	53 07       	cpc	r21, r19
    1556:	7c f4       	brge	.+30     	; 0x1576 <fputc+0x4a>
    1558:	e8 81       	ld	r30, Y
    155a:	f9 81       	ldd	r31, Y+1	; 0x01
    155c:	9f 01       	movw	r18, r30
    155e:	2f 5f       	subi	r18, 0xFF	; 255
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	39 83       	std	Y+1, r19	; 0x01
    1564:	28 83       	st	Y, r18
    1566:	10 83       	st	Z, r17
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <fputc+0x4a>
    156a:	e8 85       	ldd	r30, Y+8	; 0x08
    156c:	f9 85       	ldd	r31, Y+9	; 0x09
    156e:	81 2f       	mov	r24, r17
    1570:	09 95       	icall
    1572:	89 2b       	or	r24, r25
    1574:	29 f7       	brne	.-54     	; 0x1540 <fputc+0x14>
    1576:	2e 81       	ldd	r18, Y+6	; 0x06
    1578:	3f 81       	ldd	r19, Y+7	; 0x07
    157a:	2f 5f       	subi	r18, 0xFF	; 255
    157c:	3f 4f       	sbci	r19, 0xFF	; 255
    157e:	3f 83       	std	Y+7, r19	; 0x07
    1580:	2e 83       	std	Y+6, r18	; 0x06
    1582:	81 2f       	mov	r24, r17
    1584:	90 2f       	mov	r25, r16
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <printf_P>:
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	fe 01       	movw	r30, r28
    159e:	37 96       	adiw	r30, 0x07	; 7
    15a0:	61 91       	ld	r22, Z+
    15a2:	71 91       	ld	r23, Z+
    15a4:	0e e4       	ldi	r16, 0x4E	; 78
    15a6:	11 e0       	ldi	r17, 0x01	; 1
    15a8:	d8 01       	movw	r26, r16
    15aa:	8d 91       	ld	r24, X+
    15ac:	9c 91       	ld	r25, X
    15ae:	dc 01       	movw	r26, r24
    15b0:	13 96       	adiw	r26, 0x03	; 3
    15b2:	2c 91       	ld	r18, X
    15b4:	13 97       	sbiw	r26, 0x03	; 3
    15b6:	28 60       	ori	r18, 0x08	; 8
    15b8:	13 96       	adiw	r26, 0x03	; 3
    15ba:	2c 93       	st	X, r18
    15bc:	af 01       	movw	r20, r30
    15be:	3a d0       	rcall	.+116    	; 0x1634 <vfprintf>
    15c0:	d8 01       	movw	r26, r16
    15c2:	ed 91       	ld	r30, X+
    15c4:	fc 91       	ld	r31, X
    15c6:	23 81       	ldd	r18, Z+3	; 0x03
    15c8:	27 7f       	andi	r18, 0xF7	; 247
    15ca:	23 83       	std	Z+3, r18	; 0x03
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	08 95       	ret

000015d6 <puts_P>:
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	e0 91 4e 01 	lds	r30, 0x014E
    15e4:	f0 91 4f 01 	lds	r31, 0x014F
    15e8:	83 81       	ldd	r24, Z+3	; 0x03
    15ea:	81 ff       	sbrs	r24, 1
    15ec:	1c c0       	rjmp	.+56     	; 0x1626 <puts_P+0x50>
    15ee:	00 e0       	ldi	r16, 0x00	; 0
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	fe 01       	movw	r30, r28
    15f4:	84 91       	lpm	r24, Z
    15f6:	60 91 4e 01 	lds	r22, 0x014E
    15fa:	70 91 4f 01 	lds	r23, 0x014F
    15fe:	db 01       	movw	r26, r22
    1600:	18 96       	adiw	r26, 0x08	; 8
    1602:	ed 91       	ld	r30, X+
    1604:	fc 91       	ld	r31, X
    1606:	19 97       	sbiw	r26, 0x09	; 9
    1608:	88 23       	and	r24, r24
    160a:	39 f0       	breq	.+14     	; 0x161a <puts_P+0x44>
    160c:	09 95       	icall
    160e:	89 2b       	or	r24, r25
    1610:	11 f0       	breq	.+4      	; 0x1616 <puts_P+0x40>
    1612:	0f ef       	ldi	r16, 0xFF	; 255
    1614:	1f ef       	ldi	r17, 0xFF	; 255
    1616:	21 96       	adiw	r28, 0x01	; 1
    1618:	ec cf       	rjmp	.-40     	; 0x15f2 <puts_P+0x1c>
    161a:	8a e0       	ldi	r24, 0x0A	; 10
    161c:	09 95       	icall
    161e:	89 2b       	or	r24, r25
    1620:	11 f4       	brne	.+4      	; 0x1626 <puts_P+0x50>
    1622:	c8 01       	movw	r24, r16
    1624:	02 c0       	rjmp	.+4      	; 0x162a <puts_P+0x54>
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	9f ef       	ldi	r25, 0xFF	; 255
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <vfprintf>:
    1634:	2f 92       	push	r2
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	2c 97       	sbiw	r28, 0x0c	; 12
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	7c 01       	movw	r14, r24
    166a:	6b 01       	movw	r12, r22
    166c:	8a 01       	movw	r16, r20
    166e:	fc 01       	movw	r30, r24
    1670:	17 82       	std	Z+7, r1	; 0x07
    1672:	16 82       	std	Z+6, r1	; 0x06
    1674:	83 81       	ldd	r24, Z+3	; 0x03
    1676:	81 ff       	sbrs	r24, 1
    1678:	b0 c1       	rjmp	.+864    	; 0x19da <vfprintf+0x3a6>
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	4c 01       	movw	r8, r24
    1680:	f7 01       	movw	r30, r14
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	f6 01       	movw	r30, r12
    1686:	93 fd       	sbrc	r25, 3
    1688:	85 91       	lpm	r24, Z+
    168a:	93 ff       	sbrs	r25, 3
    168c:	81 91       	ld	r24, Z+
    168e:	6f 01       	movw	r12, r30
    1690:	88 23       	and	r24, r24
    1692:	09 f4       	brne	.+2      	; 0x1696 <vfprintf+0x62>
    1694:	9e c1       	rjmp	.+828    	; 0x19d2 <vfprintf+0x39e>
    1696:	85 32       	cpi	r24, 0x25	; 37
    1698:	39 f4       	brne	.+14     	; 0x16a8 <vfprintf+0x74>
    169a:	93 fd       	sbrc	r25, 3
    169c:	85 91       	lpm	r24, Z+
    169e:	93 ff       	sbrs	r25, 3
    16a0:	81 91       	ld	r24, Z+
    16a2:	6f 01       	movw	r12, r30
    16a4:	85 32       	cpi	r24, 0x25	; 37
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <vfprintf+0x7c>
    16a8:	b7 01       	movw	r22, r14
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	3f df       	rcall	.-386    	; 0x152c <fputc>
    16ae:	e8 cf       	rjmp	.-48     	; 0x1680 <vfprintf+0x4c>
    16b0:	51 2c       	mov	r5, r1
    16b2:	31 2c       	mov	r3, r1
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	20 32       	cpi	r18, 0x20	; 32
    16b8:	a0 f4       	brcc	.+40     	; 0x16e2 <vfprintf+0xae>
    16ba:	8b 32       	cpi	r24, 0x2B	; 43
    16bc:	69 f0       	breq	.+26     	; 0x16d8 <vfprintf+0xa4>
    16be:	30 f4       	brcc	.+12     	; 0x16cc <vfprintf+0x98>
    16c0:	80 32       	cpi	r24, 0x20	; 32
    16c2:	59 f0       	breq	.+22     	; 0x16da <vfprintf+0xa6>
    16c4:	83 32       	cpi	r24, 0x23	; 35
    16c6:	69 f4       	brne	.+26     	; 0x16e2 <vfprintf+0xae>
    16c8:	20 61       	ori	r18, 0x10	; 16
    16ca:	2c c0       	rjmp	.+88     	; 0x1724 <vfprintf+0xf0>
    16cc:	8d 32       	cpi	r24, 0x2D	; 45
    16ce:	39 f0       	breq	.+14     	; 0x16de <vfprintf+0xaa>
    16d0:	80 33       	cpi	r24, 0x30	; 48
    16d2:	39 f4       	brne	.+14     	; 0x16e2 <vfprintf+0xae>
    16d4:	21 60       	ori	r18, 0x01	; 1
    16d6:	26 c0       	rjmp	.+76     	; 0x1724 <vfprintf+0xf0>
    16d8:	22 60       	ori	r18, 0x02	; 2
    16da:	24 60       	ori	r18, 0x04	; 4
    16dc:	23 c0       	rjmp	.+70     	; 0x1724 <vfprintf+0xf0>
    16de:	28 60       	ori	r18, 0x08	; 8
    16e0:	21 c0       	rjmp	.+66     	; 0x1724 <vfprintf+0xf0>
    16e2:	27 fd       	sbrc	r18, 7
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <vfprintf+0x100>
    16e6:	30 ed       	ldi	r19, 0xD0	; 208
    16e8:	38 0f       	add	r19, r24
    16ea:	3a 30       	cpi	r19, 0x0A	; 10
    16ec:	78 f4       	brcc	.+30     	; 0x170c <vfprintf+0xd8>
    16ee:	26 ff       	sbrs	r18, 6
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <vfprintf+0xca>
    16f2:	fa e0       	ldi	r31, 0x0A	; 10
    16f4:	5f 9e       	mul	r5, r31
    16f6:	30 0d       	add	r19, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	53 2e       	mov	r5, r19
    16fc:	13 c0       	rjmp	.+38     	; 0x1724 <vfprintf+0xf0>
    16fe:	8a e0       	ldi	r24, 0x0A	; 10
    1700:	38 9e       	mul	r3, r24
    1702:	30 0d       	add	r19, r0
    1704:	11 24       	eor	r1, r1
    1706:	33 2e       	mov	r3, r19
    1708:	20 62       	ori	r18, 0x20	; 32
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <vfprintf+0xf0>
    170c:	8e 32       	cpi	r24, 0x2E	; 46
    170e:	21 f4       	brne	.+8      	; 0x1718 <vfprintf+0xe4>
    1710:	26 fd       	sbrc	r18, 6
    1712:	5f c1       	rjmp	.+702    	; 0x19d2 <vfprintf+0x39e>
    1714:	20 64       	ori	r18, 0x40	; 64
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <vfprintf+0xf0>
    1718:	8c 36       	cpi	r24, 0x6C	; 108
    171a:	11 f4       	brne	.+4      	; 0x1720 <vfprintf+0xec>
    171c:	20 68       	ori	r18, 0x80	; 128
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0xf0>
    1720:	88 36       	cpi	r24, 0x68	; 104
    1722:	41 f4       	brne	.+16     	; 0x1734 <vfprintf+0x100>
    1724:	f6 01       	movw	r30, r12
    1726:	93 fd       	sbrc	r25, 3
    1728:	85 91       	lpm	r24, Z+
    172a:	93 ff       	sbrs	r25, 3
    172c:	81 91       	ld	r24, Z+
    172e:	6f 01       	movw	r12, r30
    1730:	81 11       	cpse	r24, r1
    1732:	c1 cf       	rjmp	.-126    	; 0x16b6 <vfprintf+0x82>
    1734:	98 2f       	mov	r25, r24
    1736:	9f 7d       	andi	r25, 0xDF	; 223
    1738:	95 54       	subi	r25, 0x45	; 69
    173a:	93 30       	cpi	r25, 0x03	; 3
    173c:	28 f4       	brcc	.+10     	; 0x1748 <vfprintf+0x114>
    173e:	0c 5f       	subi	r16, 0xFC	; 252
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	ff e3       	ldi	r31, 0x3F	; 63
    1744:	f9 83       	std	Y+1, r31	; 0x01
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <vfprintf+0x12e>
    1748:	83 36       	cpi	r24, 0x63	; 99
    174a:	31 f0       	breq	.+12     	; 0x1758 <vfprintf+0x124>
    174c:	83 37       	cpi	r24, 0x73	; 115
    174e:	71 f0       	breq	.+28     	; 0x176c <vfprintf+0x138>
    1750:	83 35       	cpi	r24, 0x53	; 83
    1752:	09 f0       	breq	.+2      	; 0x1756 <vfprintf+0x122>
    1754:	57 c0       	rjmp	.+174    	; 0x1804 <vfprintf+0x1d0>
    1756:	21 c0       	rjmp	.+66     	; 0x179a <vfprintf+0x166>
    1758:	f8 01       	movw	r30, r16
    175a:	80 81       	ld	r24, Z
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	0e 5f       	subi	r16, 0xFE	; 254
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	44 24       	eor	r4, r4
    1764:	43 94       	inc	r4
    1766:	51 2c       	mov	r5, r1
    1768:	54 01       	movw	r10, r8
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <vfprintf+0x160>
    176c:	38 01       	movw	r6, r16
    176e:	f2 e0       	ldi	r31, 0x02	; 2
    1770:	6f 0e       	add	r6, r31
    1772:	71 1c       	adc	r7, r1
    1774:	f8 01       	movw	r30, r16
    1776:	a0 80       	ld	r10, Z
    1778:	b1 80       	ldd	r11, Z+1	; 0x01
    177a:	26 ff       	sbrs	r18, 6
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <vfprintf+0x150>
    177e:	65 2d       	mov	r22, r5
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <vfprintf+0x154>
    1784:	6f ef       	ldi	r22, 0xFF	; 255
    1786:	7f ef       	ldi	r23, 0xFF	; 255
    1788:	c5 01       	movw	r24, r10
    178a:	2c 87       	std	Y+12, r18	; 0x0c
    178c:	4c d1       	rcall	.+664    	; 0x1a26 <strnlen>
    178e:	2c 01       	movw	r4, r24
    1790:	83 01       	movw	r16, r6
    1792:	2c 85       	ldd	r18, Y+12	; 0x0c
    1794:	2f 77       	andi	r18, 0x7F	; 127
    1796:	22 2e       	mov	r2, r18
    1798:	16 c0       	rjmp	.+44     	; 0x17c6 <vfprintf+0x192>
    179a:	38 01       	movw	r6, r16
    179c:	f2 e0       	ldi	r31, 0x02	; 2
    179e:	6f 0e       	add	r6, r31
    17a0:	71 1c       	adc	r7, r1
    17a2:	f8 01       	movw	r30, r16
    17a4:	a0 80       	ld	r10, Z
    17a6:	b1 80       	ldd	r11, Z+1	; 0x01
    17a8:	26 ff       	sbrs	r18, 6
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <vfprintf+0x17e>
    17ac:	65 2d       	mov	r22, r5
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x182>
    17b2:	6f ef       	ldi	r22, 0xFF	; 255
    17b4:	7f ef       	ldi	r23, 0xFF	; 255
    17b6:	c5 01       	movw	r24, r10
    17b8:	2c 87       	std	Y+12, r18	; 0x0c
    17ba:	2a d1       	rcall	.+596    	; 0x1a10 <strnlen_P>
    17bc:	2c 01       	movw	r4, r24
    17be:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c0:	20 68       	ori	r18, 0x80	; 128
    17c2:	22 2e       	mov	r2, r18
    17c4:	83 01       	movw	r16, r6
    17c6:	23 fc       	sbrc	r2, 3
    17c8:	19 c0       	rjmp	.+50     	; 0x17fc <vfprintf+0x1c8>
    17ca:	83 2d       	mov	r24, r3
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	48 16       	cp	r4, r24
    17d0:	59 06       	cpc	r5, r25
    17d2:	a0 f4       	brcc	.+40     	; 0x17fc <vfprintf+0x1c8>
    17d4:	b7 01       	movw	r22, r14
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a8 de       	rcall	.-688    	; 0x152c <fputc>
    17dc:	3a 94       	dec	r3
    17de:	f5 cf       	rjmp	.-22     	; 0x17ca <vfprintf+0x196>
    17e0:	f5 01       	movw	r30, r10
    17e2:	27 fc       	sbrc	r2, 7
    17e4:	85 91       	lpm	r24, Z+
    17e6:	27 fe       	sbrs	r2, 7
    17e8:	81 91       	ld	r24, Z+
    17ea:	5f 01       	movw	r10, r30
    17ec:	b7 01       	movw	r22, r14
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9d de       	rcall	.-710    	; 0x152c <fputc>
    17f2:	31 10       	cpse	r3, r1
    17f4:	3a 94       	dec	r3
    17f6:	f1 e0       	ldi	r31, 0x01	; 1
    17f8:	4f 1a       	sub	r4, r31
    17fa:	51 08       	sbc	r5, r1
    17fc:	41 14       	cp	r4, r1
    17fe:	51 04       	cpc	r5, r1
    1800:	79 f7       	brne	.-34     	; 0x17e0 <vfprintf+0x1ac>
    1802:	de c0       	rjmp	.+444    	; 0x19c0 <vfprintf+0x38c>
    1804:	84 36       	cpi	r24, 0x64	; 100
    1806:	11 f0       	breq	.+4      	; 0x180c <vfprintf+0x1d8>
    1808:	89 36       	cpi	r24, 0x69	; 105
    180a:	31 f5       	brne	.+76     	; 0x1858 <vfprintf+0x224>
    180c:	f8 01       	movw	r30, r16
    180e:	27 ff       	sbrs	r18, 7
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <vfprintf+0x1ec>
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	0c 5f       	subi	r16, 0xFC	; 252
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	08 c0       	rjmp	.+16     	; 0x1830 <vfprintf+0x1fc>
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	88 27       	eor	r24, r24
    1826:	77 fd       	sbrc	r23, 7
    1828:	80 95       	com	r24
    182a:	98 2f       	mov	r25, r24
    182c:	0e 5f       	subi	r16, 0xFE	; 254
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	2f 76       	andi	r18, 0x6F	; 111
    1832:	b2 2e       	mov	r11, r18
    1834:	97 ff       	sbrs	r25, 7
    1836:	09 c0       	rjmp	.+18     	; 0x184a <vfprintf+0x216>
    1838:	90 95       	com	r25
    183a:	80 95       	com	r24
    183c:	70 95       	com	r23
    183e:	61 95       	neg	r22
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8f 4f       	sbci	r24, 0xFF	; 255
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	20 68       	ori	r18, 0x80	; 128
    1848:	b2 2e       	mov	r11, r18
    184a:	2a e0       	ldi	r18, 0x0A	; 10
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	a4 01       	movw	r20, r8
    1850:	f5 d0       	rcall	.+490    	; 0x1a3c <__ultoa_invert>
    1852:	a8 2e       	mov	r10, r24
    1854:	a8 18       	sub	r10, r8
    1856:	43 c0       	rjmp	.+134    	; 0x18de <vfprintf+0x2aa>
    1858:	85 37       	cpi	r24, 0x75	; 117
    185a:	29 f4       	brne	.+10     	; 0x1866 <vfprintf+0x232>
    185c:	2f 7e       	andi	r18, 0xEF	; 239
    185e:	b2 2e       	mov	r11, r18
    1860:	2a e0       	ldi	r18, 0x0A	; 10
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	25 c0       	rjmp	.+74     	; 0x18b0 <vfprintf+0x27c>
    1866:	f2 2f       	mov	r31, r18
    1868:	f9 7f       	andi	r31, 0xF9	; 249
    186a:	bf 2e       	mov	r11, r31
    186c:	8f 36       	cpi	r24, 0x6F	; 111
    186e:	c1 f0       	breq	.+48     	; 0x18a0 <vfprintf+0x26c>
    1870:	18 f4       	brcc	.+6      	; 0x1878 <vfprintf+0x244>
    1872:	88 35       	cpi	r24, 0x58	; 88
    1874:	79 f0       	breq	.+30     	; 0x1894 <vfprintf+0x260>
    1876:	ad c0       	rjmp	.+346    	; 0x19d2 <vfprintf+0x39e>
    1878:	80 37       	cpi	r24, 0x70	; 112
    187a:	19 f0       	breq	.+6      	; 0x1882 <vfprintf+0x24e>
    187c:	88 37       	cpi	r24, 0x78	; 120
    187e:	21 f0       	breq	.+8      	; 0x1888 <vfprintf+0x254>
    1880:	a8 c0       	rjmp	.+336    	; 0x19d2 <vfprintf+0x39e>
    1882:	2f 2f       	mov	r18, r31
    1884:	20 61       	ori	r18, 0x10	; 16
    1886:	b2 2e       	mov	r11, r18
    1888:	b4 fe       	sbrs	r11, 4
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <vfprintf+0x272>
    188c:	8b 2d       	mov	r24, r11
    188e:	84 60       	ori	r24, 0x04	; 4
    1890:	b8 2e       	mov	r11, r24
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <vfprintf+0x272>
    1894:	24 ff       	sbrs	r18, 4
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <vfprintf+0x278>
    1898:	9f 2f       	mov	r25, r31
    189a:	96 60       	ori	r25, 0x06	; 6
    189c:	b9 2e       	mov	r11, r25
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x278>
    18a0:	28 e0       	ldi	r18, 0x08	; 8
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x27c>
    18a6:	20 e1       	ldi	r18, 0x10	; 16
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x27c>
    18ac:	20 e1       	ldi	r18, 0x10	; 16
    18ae:	32 e0       	ldi	r19, 0x02	; 2
    18b0:	f8 01       	movw	r30, r16
    18b2:	b7 fe       	sbrs	r11, 7
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <vfprintf+0x290>
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0c 5f       	subi	r16, 0xFC	; 252
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x29c>
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 5f       	subi	r16, 0xFE	; 254
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	a4 01       	movw	r20, r8
    18d2:	b4 d0       	rcall	.+360    	; 0x1a3c <__ultoa_invert>
    18d4:	a8 2e       	mov	r10, r24
    18d6:	a8 18       	sub	r10, r8
    18d8:	fb 2d       	mov	r31, r11
    18da:	ff 77       	andi	r31, 0x7F	; 127
    18dc:	bf 2e       	mov	r11, r31
    18de:	b6 fe       	sbrs	r11, 6
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <vfprintf+0x2c4>
    18e2:	2b 2d       	mov	r18, r11
    18e4:	2e 7f       	andi	r18, 0xFE	; 254
    18e6:	a5 14       	cp	r10, r5
    18e8:	50 f4       	brcc	.+20     	; 0x18fe <vfprintf+0x2ca>
    18ea:	b4 fe       	sbrs	r11, 4
    18ec:	0a c0       	rjmp	.+20     	; 0x1902 <vfprintf+0x2ce>
    18ee:	b2 fc       	sbrc	r11, 2
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <vfprintf+0x2ce>
    18f2:	2b 2d       	mov	r18, r11
    18f4:	2e 7e       	andi	r18, 0xEE	; 238
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <vfprintf+0x2ce>
    18f8:	7a 2c       	mov	r7, r10
    18fa:	2b 2d       	mov	r18, r11
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <vfprintf+0x2d0>
    18fe:	7a 2c       	mov	r7, r10
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <vfprintf+0x2d0>
    1902:	75 2c       	mov	r7, r5
    1904:	24 ff       	sbrs	r18, 4
    1906:	0d c0       	rjmp	.+26     	; 0x1922 <vfprintf+0x2ee>
    1908:	fe 01       	movw	r30, r28
    190a:	ea 0d       	add	r30, r10
    190c:	f1 1d       	adc	r31, r1
    190e:	80 81       	ld	r24, Z
    1910:	80 33       	cpi	r24, 0x30	; 48
    1912:	11 f4       	brne	.+4      	; 0x1918 <vfprintf+0x2e4>
    1914:	29 7e       	andi	r18, 0xE9	; 233
    1916:	09 c0       	rjmp	.+18     	; 0x192a <vfprintf+0x2f6>
    1918:	22 ff       	sbrs	r18, 2
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <vfprintf+0x2f4>
    191c:	73 94       	inc	r7
    191e:	73 94       	inc	r7
    1920:	04 c0       	rjmp	.+8      	; 0x192a <vfprintf+0x2f6>
    1922:	82 2f       	mov	r24, r18
    1924:	86 78       	andi	r24, 0x86	; 134
    1926:	09 f0       	breq	.+2      	; 0x192a <vfprintf+0x2f6>
    1928:	73 94       	inc	r7
    192a:	23 fd       	sbrc	r18, 3
    192c:	12 c0       	rjmp	.+36     	; 0x1952 <vfprintf+0x31e>
    192e:	20 ff       	sbrs	r18, 0
    1930:	06 c0       	rjmp	.+12     	; 0x193e <vfprintf+0x30a>
    1932:	5a 2c       	mov	r5, r10
    1934:	73 14       	cp	r7, r3
    1936:	18 f4       	brcc	.+6      	; 0x193e <vfprintf+0x30a>
    1938:	53 0c       	add	r5, r3
    193a:	57 18       	sub	r5, r7
    193c:	73 2c       	mov	r7, r3
    193e:	73 14       	cp	r7, r3
    1940:	60 f4       	brcc	.+24     	; 0x195a <vfprintf+0x326>
    1942:	b7 01       	movw	r22, r14
    1944:	80 e2       	ldi	r24, 0x20	; 32
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	2c 87       	std	Y+12, r18	; 0x0c
    194a:	f0 dd       	rcall	.-1056   	; 0x152c <fputc>
    194c:	73 94       	inc	r7
    194e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1950:	f6 cf       	rjmp	.-20     	; 0x193e <vfprintf+0x30a>
    1952:	73 14       	cp	r7, r3
    1954:	10 f4       	brcc	.+4      	; 0x195a <vfprintf+0x326>
    1956:	37 18       	sub	r3, r7
    1958:	01 c0       	rjmp	.+2      	; 0x195c <vfprintf+0x328>
    195a:	31 2c       	mov	r3, r1
    195c:	24 ff       	sbrs	r18, 4
    195e:	11 c0       	rjmp	.+34     	; 0x1982 <vfprintf+0x34e>
    1960:	b7 01       	movw	r22, r14
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	2c 87       	std	Y+12, r18	; 0x0c
    1968:	e1 dd       	rcall	.-1086   	; 0x152c <fputc>
    196a:	2c 85       	ldd	r18, Y+12	; 0x0c
    196c:	22 ff       	sbrs	r18, 2
    196e:	16 c0       	rjmp	.+44     	; 0x199c <vfprintf+0x368>
    1970:	21 ff       	sbrs	r18, 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <vfprintf+0x346>
    1974:	88 e5       	ldi	r24, 0x58	; 88
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x34a>
    197a:	88 e7       	ldi	r24, 0x78	; 120
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	b7 01       	movw	r22, r14
    1980:	0c c0       	rjmp	.+24     	; 0x199a <vfprintf+0x366>
    1982:	82 2f       	mov	r24, r18
    1984:	86 78       	andi	r24, 0x86	; 134
    1986:	51 f0       	breq	.+20     	; 0x199c <vfprintf+0x368>
    1988:	21 fd       	sbrc	r18, 1
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x35c>
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <vfprintf+0x35e>
    1990:	8b e2       	ldi	r24, 0x2B	; 43
    1992:	27 fd       	sbrc	r18, 7
    1994:	8d e2       	ldi	r24, 0x2D	; 45
    1996:	b7 01       	movw	r22, r14
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	c8 dd       	rcall	.-1136   	; 0x152c <fputc>
    199c:	a5 14       	cp	r10, r5
    199e:	30 f4       	brcc	.+12     	; 0x19ac <vfprintf+0x378>
    19a0:	b7 01       	movw	r22, r14
    19a2:	80 e3       	ldi	r24, 0x30	; 48
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	c2 dd       	rcall	.-1148   	; 0x152c <fputc>
    19a8:	5a 94       	dec	r5
    19aa:	f8 cf       	rjmp	.-16     	; 0x199c <vfprintf+0x368>
    19ac:	aa 94       	dec	r10
    19ae:	f4 01       	movw	r30, r8
    19b0:	ea 0d       	add	r30, r10
    19b2:	f1 1d       	adc	r31, r1
    19b4:	80 81       	ld	r24, Z
    19b6:	b7 01       	movw	r22, r14
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	b8 dd       	rcall	.-1168   	; 0x152c <fputc>
    19bc:	a1 10       	cpse	r10, r1
    19be:	f6 cf       	rjmp	.-20     	; 0x19ac <vfprintf+0x378>
    19c0:	33 20       	and	r3, r3
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <vfprintf+0x392>
    19c4:	5d ce       	rjmp	.-838    	; 0x1680 <vfprintf+0x4c>
    19c6:	b7 01       	movw	r22, r14
    19c8:	80 e2       	ldi	r24, 0x20	; 32
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	af dd       	rcall	.-1186   	; 0x152c <fputc>
    19ce:	3a 94       	dec	r3
    19d0:	f7 cf       	rjmp	.-18     	; 0x19c0 <vfprintf+0x38c>
    19d2:	f7 01       	movw	r30, r14
    19d4:	86 81       	ldd	r24, Z+6	; 0x06
    19d6:	97 81       	ldd	r25, Z+7	; 0x07
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <vfprintf+0x3aa>
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	2c 96       	adiw	r28, 0x0c	; 12
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	7f 90       	pop	r7
    1a04:	6f 90       	pop	r6
    1a06:	5f 90       	pop	r5
    1a08:	4f 90       	pop	r4
    1a0a:	3f 90       	pop	r3
    1a0c:	2f 90       	pop	r2
    1a0e:	08 95       	ret

00001a10 <strnlen_P>:
    1a10:	fc 01       	movw	r30, r24
    1a12:	05 90       	lpm	r0, Z+
    1a14:	61 50       	subi	r22, 0x01	; 1
    1a16:	70 40       	sbci	r23, 0x00	; 0
    1a18:	01 10       	cpse	r0, r1
    1a1a:	d8 f7       	brcc	.-10     	; 0x1a12 <strnlen_P+0x2>
    1a1c:	80 95       	com	r24
    1a1e:	90 95       	com	r25
    1a20:	8e 0f       	add	r24, r30
    1a22:	9f 1f       	adc	r25, r31
    1a24:	08 95       	ret

00001a26 <strnlen>:
    1a26:	fc 01       	movw	r30, r24
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	70 40       	sbci	r23, 0x00	; 0
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	01 10       	cpse	r0, r1
    1a30:	d8 f7       	brcc	.-10     	; 0x1a28 <strnlen+0x2>
    1a32:	80 95       	com	r24
    1a34:	90 95       	com	r25
    1a36:	8e 0f       	add	r24, r30
    1a38:	9f 1f       	adc	r25, r31
    1a3a:	08 95       	ret

00001a3c <__ultoa_invert>:
    1a3c:	fa 01       	movw	r30, r20
    1a3e:	aa 27       	eor	r26, r26
    1a40:	28 30       	cpi	r18, 0x08	; 8
    1a42:	51 f1       	breq	.+84     	; 0x1a98 <__ultoa_invert+0x5c>
    1a44:	20 31       	cpi	r18, 0x10	; 16
    1a46:	81 f1       	breq	.+96     	; 0x1aa8 <__ultoa_invert+0x6c>
    1a48:	e8 94       	clt
    1a4a:	6f 93       	push	r22
    1a4c:	6e 7f       	andi	r22, 0xFE	; 254
    1a4e:	6e 5f       	subi	r22, 0xFE	; 254
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	af 4f       	sbci	r26, 0xFF	; 255
    1a58:	b1 e0       	ldi	r27, 0x01	; 1
    1a5a:	3e d0       	rcall	.+124    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a5c:	b4 e0       	ldi	r27, 0x04	; 4
    1a5e:	3c d0       	rcall	.+120    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a60:	67 0f       	add	r22, r23
    1a62:	78 1f       	adc	r23, r24
    1a64:	89 1f       	adc	r24, r25
    1a66:	9a 1f       	adc	r25, r26
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	68 0f       	add	r22, r24
    1a6c:	79 1f       	adc	r23, r25
    1a6e:	8a 1f       	adc	r24, r26
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	6a 0f       	add	r22, r26
    1a76:	71 1d       	adc	r23, r1
    1a78:	81 1d       	adc	r24, r1
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	20 d0       	rcall	.+64     	; 0x1ac0 <__ultoa_invert+0x84>
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <__ultoa_invert+0x48>
    1a82:	68 94       	set
    1a84:	3f 91       	pop	r19
    1a86:	2a e0       	ldi	r18, 0x0A	; 10
    1a88:	26 9f       	mul	r18, r22
    1a8a:	11 24       	eor	r1, r1
    1a8c:	30 19       	sub	r19, r0
    1a8e:	30 5d       	subi	r19, 0xD0	; 208
    1a90:	31 93       	st	Z+, r19
    1a92:	de f6       	brtc	.-74     	; 0x1a4a <__ultoa_invert+0xe>
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret
    1a98:	46 2f       	mov	r20, r22
    1a9a:	47 70       	andi	r20, 0x07	; 7
    1a9c:	40 5d       	subi	r20, 0xD0	; 208
    1a9e:	41 93       	st	Z+, r20
    1aa0:	b3 e0       	ldi	r27, 0x03	; 3
    1aa2:	0f d0       	rcall	.+30     	; 0x1ac2 <__ultoa_invert+0x86>
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <__ultoa_invert+0x5c>
    1aa6:	f6 cf       	rjmp	.-20     	; 0x1a94 <__ultoa_invert+0x58>
    1aa8:	46 2f       	mov	r20, r22
    1aaa:	4f 70       	andi	r20, 0x0F	; 15
    1aac:	40 5d       	subi	r20, 0xD0	; 208
    1aae:	4a 33       	cpi	r20, 0x3A	; 58
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <__ultoa_invert+0x7c>
    1ab2:	49 5d       	subi	r20, 0xD9	; 217
    1ab4:	31 fd       	sbrc	r19, 1
    1ab6:	40 52       	subi	r20, 0x20	; 32
    1ab8:	41 93       	st	Z+, r20
    1aba:	02 d0       	rcall	.+4      	; 0x1ac0 <__ultoa_invert+0x84>
    1abc:	a9 f7       	brne	.-22     	; 0x1aa8 <__ultoa_invert+0x6c>
    1abe:	ea cf       	rjmp	.-44     	; 0x1a94 <__ultoa_invert+0x58>
    1ac0:	b4 e0       	ldi	r27, 0x04	; 4
    1ac2:	a6 95       	lsr	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x86>
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 05       	cpc	r22, r1
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	08 95       	ret
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	0a 2e       	mov	r0, r26
    1ade:	06 94       	lsr	r0
    1ae0:	57 95       	ror	r21
    1ae2:	47 95       	ror	r20
    1ae4:	37 95       	ror	r19
    1ae6:	27 95       	ror	r18
    1ae8:	ba 95       	dec	r27
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__ultoa_invert+0xa2>
    1aec:	62 0f       	add	r22, r18
    1aee:	73 1f       	adc	r23, r19
    1af0:	84 1f       	adc	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	a0 1d       	adc	r26, r0
    1af6:	08 95       	ret

00001af8 <_exit>:
    1af8:	f8 94       	cli

00001afa <__stop_program>:
    1afa:	ff cf       	rjmp	.-2      	; 0x1afa <__stop_program>

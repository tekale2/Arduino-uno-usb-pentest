
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000010e8  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  0000118c  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d93  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4b2  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002aed  00000000  00000000  0000c8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000401b  00000000  00000000  0000f3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef8  00000000  00000000  000133c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003d07  00000000  00000000  000142b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006828  00000000  00000000  00017fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000700  00000000  00000000  0001e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
       2:	00 00       	nop
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	00 00       	nop
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	00 00       	nop
       c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	00 00       	nop
      14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
      1e:	00 00       	nop
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	00 00       	nop
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c4       	rjmp	.+2060   	; 0x836 <__vector_10>
      2a:	00 00       	nop
      2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
      32:	00 00       	nop
      34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
      3e:	00 00       	nop
      40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
      42:	00 00       	nop
      44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	a1 c0       	rjmp	.+322    	; 0x18c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
      4e:	00 00       	nop
      50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
      56:	00 00       	nop
      58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
      66:	00 00       	nop
      68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
      6e:	00 00       	nop
      70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
      72:	00 00       	nop
      74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
      76:	00 00       	nop
      78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
      82:	00 00       	nop
      84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
      86:	00 00       	nop
      88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	7f c0       	rjmp	.+254    	; 0x18c <__bad_interrupt>
      8e:	00 00       	nop
      90:	7d c0       	rjmp	.+250    	; 0x18c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	7b c0       	rjmp	.+246    	; 0x18c <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ee:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	00 05                                               ..

00000100 <DeviceDescriptor>:
     100:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     110:	00 01                                               ..

00000112 <KeyboardReport>:
     112:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     122:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     142:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0 00     %.....)...u.....

00000152 <__ctors_end>:
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e2       	ldi	r29, 0x20	; 32
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
				ReportSize     -= 2;
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e8 ee       	ldi	r30, 0xE8	; 232
				ReportData     += 2;
     166:	f0 e1       	ldi	r31, 0x10	; 16
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
				break;
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 31       	cpi	r26, 0x10	; 16
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	11 e0       	ldi	r17, 0x01	; 1
				ReportSize     -= 1;
     17a:	a0 e1       	ldi	r26, 0x10	; 16
     17c:	b1 e0       	ldi	r27, 0x01	; 1
				ReportData     += 1;
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a5 32       	cpi	r26, 0x25	; 37
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	30 d0       	rcall	.+96     	; 0x1ea <main>
     18a:	ac c7       	rjmp	.+3928   	; 0x10e4 <_exit>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <LEDs_SetAllLEDs>:
     18e:	9b b1       	in	r25, 0x0b	; 11
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 2b       	or	r25, r24
     194:	9b b9       	out	0x0b, r25	; 11
     196:	08 95       	ret

00000198 <SetupHardware>:
     198:	84 b7       	in	r24, 0x34	; 52
     19a:	87 7f       	andi	r24, 0xF7	; 247
     19c:	84 bf       	out	0x34, r24	; 52
     19e:	88 e1       	ldi	r24, 0x18	; 24
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	80 93 60 00 	sts	0x0060, r24
     1a8:	10 92 60 00 	sts	0x0060, r1

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	80 e8       	ldi	r24, 0x80	; 128
     1b2:	0f b6       	in	r0, 0x3f	; 63
				break;
     1b4:	f8 94       	cli
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	80 93 61 00 	sts	0x0061, r24
     1ba:	90 93 61 00 	sts	0x0061, r25
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	84 b1       	in	r24, 0x04	; 4
     1c2:	8f 71       	andi	r24, 0x1F	; 31
     1c4:	84 b9       	out	0x04, r24	; 4
     1c6:	8d b1       	in	r24, 0x0d	; 13
     1c8:	8f 7c       	andi	r24, 0xCF	; 207
     1ca:	8d b9       	out	0x0d, r24	; 13
     1cc:	85 b1       	in	r24, 0x05	; 5
     1ce:	80 6e       	ori	r24, 0xE0	; 224
     1d0:	85 b9       	out	0x05, r24	; 5
     1d2:	8e b1       	in	r24, 0x0e	; 14
     1d4:	80 63       	ori	r24, 0x30	; 48
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	8e b9       	out	0x0e, r24	; 14
     1d8:	8a b1       	in	r24, 0x0a	; 10
     1da:	80 6f       	ori	r24, 0xF0	; 240
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	8a b9       	out	0x0a, r24	; 10
     1de:	8b b1       	in	r24, 0x0b	; 11
     1e0:	8f 70       	andi	r24, 0x0F	; 15
     1e2:	8b b9       	out	0x0b, r24	; 11
     1e4:	6a 98       	cbi	0x0d, 2	; 13
     1e6:	72 9a       	sbi	0x0e, 2	; 14
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	0b c3       	rjmp	.+1558   	; 0x800 <USB_Init>

000001ea <main>:
     1ea:	d6 df       	rcall	.-84     	; 0x198 <SetupHardware>
				break;
     1ec:	80 e1       	ldi	r24, 0x10	; 16
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	cf df       	rcall	.-98     	; 0x18e <LEDs_SetAllLEDs>
     1f0:	78 94       	sei
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	9c d6       	rcall	.+3384   	; 0xf30 <HID_Device_USBTask>
     1f8:	3a d5       	rcall	.+2676   	; 0xc6e <USB_USBTask>
     1fa:	fb cf       	rjmp	.-10     	; 0x1f2 <main+0x8>

000001fc <EVENT_USB_Device_Connect>:
     1fc:	80 ea       	ldi	r24, 0xA0	; 160
     1fe:	c7 cf       	rjmp	.-114    	; 0x18e <LEDs_SetAllLEDs>

00000200 <EVENT_USB_Device_Disconnect>:
     200:	80 e1       	ldi	r24, 0x10	; 16
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	c5 cf       	rjmp	.-118    	; 0x18e <LEDs_SetAllLEDs>

00000204 <EVENT_USB_Device_ConfigurationChanged>:
     204:	80 e0       	ldi	r24, 0x00	; 0
				break;
     206:	91 e0       	ldi	r25, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	80 d6       	rcall	.+3328   	; 0xf0a <HID_Device_ConfigureEndpoints>
     20a:	90 91 e2 00 	lds	r25, 0x00E2
     20e:	94 60       	ori	r25, 0x04	; 4
     210:	90 93 e2 00 	sts	0x00E2, r25
     214:	88 23       	and	r24, r24
     216:	11 f0       	breq	.+4      	; 0x21c <EVENT_USB_Device_ConfigurationChanged+0x18>
     218:	80 e6       	ldi	r24, 0x60	; 96
     21a:	01 c0       	rjmp	.+2      	; 0x21e <EVENT_USB_Device_ConfigurationChanged+0x1a>
     21c:	80 e9       	ldi	r24, 0x90	; 144
     21e:	b7 cf       	rjmp	.-146    	; 0x18e <LEDs_SetAllLEDs>

00000220 <EVENT_USB_Device_ControlRequest>:
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	40 c5       	rjmp	.+2688   	; 0xca6 <HID_Device_ProcessControlRequest>

00000226 <EVENT_USB_Device_StartOfFrame>:
     226:	80 91 0e 01 	lds	r24, 0x010E
     22a:	90 91 0f 01 	lds	r25, 0x010F
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	29 f0       	breq	.+10     	; 0x23c <EVENT_USB_Device_StartOfFrame+0x16>
     232:	01 97       	sbiw	r24, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	90 93 0f 01 	sts	0x010F, r25
     238:	80 93 0e 01 	sts	0x010E, r24
     23c:	08 95       	ret

0000023e <CALLBACK_HID_Device_CreateHIDReport>:
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	f9 01       	movw	r30, r18
     244:	83 b1       	in	r24, 0x03	; 3
     246:	9c b1       	in	r25, 0x0c	; 12
     248:	90 95       	com	r25
     24a:	90 73       	andi	r25, 0x30	; 48
     24c:	96 95       	lsr	r25
     24e:	80 95       	com	r24
     250:	80 7e       	andi	r24, 0xE0	; 224
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	98 2b       	or	r25, r24
     254:	2c b1       	in	r18, 0x0c	; 12
     256:	20 95       	com	r18
     258:	97 ff       	sbrs	r25, 7
     25a:	02 c0       	rjmp	.+4      	; 0x260 <CALLBACK_HID_Device_CreateHIDReport+0x22>
     25c:	84 e0       	ldi	r24, 0x04	; 4
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	03 c0       	rjmp	.+6      	; 0x266 <CALLBACK_HID_Device_CreateHIDReport+0x28>
     260:	94 ff       	sbrs	r25, 4
     262:	04 c0       	rjmp	.+8      	; 0x26c <CALLBACK_HID_Device_CreateHIDReport+0x2e>
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	82 83       	std	Z+2, r24	; 0x02
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	01 c0       	rjmp	.+2      	; 0x26e <CALLBACK_HID_Device_CreateHIDReport+0x30>
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	96 ff       	sbrs	r25, 6
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	05 c0       	rjmp	.+10     	; 0x27c <CALLBACK_HID_Device_CreateHIDReport+0x3e>
				break;
     272:	df 01       	movw	r26, r30

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	a8 0f       	add	r26, r24
     276:	b1 1d       	adc	r27, r1
     278:	36 e0       	ldi	r19, 0x06	; 6
     27a:	06 c0       	rjmp	.+12     	; 0x288 <CALLBACK_HID_Device_CreateHIDReport+0x4a>
     27c:	93 ff       	sbrs	r25, 3
     27e:	07 c0       	rjmp	.+14     	; 0x28e <CALLBACK_HID_Device_CreateHIDReport+0x50>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	df 01       	movw	r26, r30
     282:	a8 0f       	add	r26, r24
				break;
     284:	b1 1d       	adc	r27, r1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	37 e0       	ldi	r19, 0x07	; 7
     288:	12 96       	adiw	r26, 0x02	; 2
     28a:	3c 93       	st	X, r19
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	95 ff       	sbrs	r25, 5
				break;
     290:	07 c0       	rjmp	.+14     	; 0x2a0 <CALLBACK_HID_Device_CreateHIDReport+0x62>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	df 01       	movw	r26, r30
     294:	a8 0f       	add	r26, r24
     296:	b1 1d       	adc	r27, r1
     298:	98 e0       	ldi	r25, 0x08	; 8
     29a:	12 96       	adiw	r26, 0x02	; 2
     29c:	9c 93       	st	X, r25
     29e:	8f 5f       	subi	r24, 0xFF	; 255
				break;
     2a0:	22 ff       	sbrs	r18, 2

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <CALLBACK_HID_Device_CreateHIDReport+0x74>
     2a4:	df 01       	movw	r26, r30
     2a6:	a8 0f       	add	r26, r24
     2a8:	b1 1d       	adc	r27, r1
     2aa:	89 e0       	ldi	r24, 0x09	; 9
				break;
     2ac:	12 96       	adiw	r26, 0x02	; 2

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	8c 93       	st	X, r24
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <CALLBACK_HID_Device_CreateHIDReport+0x78>
     2b2:	88 23       	and	r24, r24
     2b4:	11 f0       	breq	.+4      	; 0x2ba <CALLBACK_HID_Device_CreateHIDReport+0x7c>
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	80 83       	st	Z, r24
     2ba:	88 e0       	ldi	r24, 0x08	; 8
				break;
     2bc:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	f8 01       	movw	r30, r16
     2c0:	91 83       	std	Z+1, r25	; 0x01
     2c2:	80 83       	st	Z, r24
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	08 95       	ret

000002cc <CALLBACK_HID_Device_ProcessHIDReport>:
				break;
     2cc:	f9 01       	movw	r30, r18
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	90 81       	ld	r25, Z
     2d0:	90 fd       	sbrc	r25, 0
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
				break;
     2d4:	80 e0       	ldi	r24, 0x00	; 0

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <CALLBACK_HID_Device_ProcessHIDReport+0xe>
     2d8:	80 e1       	ldi	r24, 0x10	; 16
     2da:	91 fd       	sbrc	r25, 1

				if (ParserData->UsingReportIDs)
     2dc:	80 68       	ori	r24, 0x80	; 128
     2de:	92 fd       	sbrc	r25, 2
     2e0:	80 64       	ori	r24, 0x40	; 64
     2e2:	55 cf       	rjmp	.-342    	; 0x18e <LEDs_SetAllLEDs>

000002e4 <CALLBACK_USB_GetDescriptor>:
     2e4:	29 2f       	mov	r18, r25
     2e6:	33 27       	eor	r19, r19
     2e8:	23 30       	cpi	r18, 0x03	; 3
     2ea:	31 05       	cpc	r19, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	b9 f0       	breq	.+46     	; 0x31c <CALLBACK_USB_GetDescriptor+0x38>
     2ee:	5c f4       	brge	.+22     	; 0x306 <CALLBACK_USB_GetDescriptor+0x22>
     2f0:	21 30       	cpi	r18, 0x01	; 1
     2f2:	31 05       	cpc	r19, r1
     2f4:	69 f1       	breq	.+90     	; 0x350 <CALLBACK_USB_GetDescriptor+0x6c>
     2f6:	22 30       	cpi	r18, 0x02	; 2
     2f8:	31 05       	cpc	r19, r1
     2fa:	79 f5       	brne	.+94     	; 0x35a <CALLBACK_USB_GetDescriptor+0x76>
     2fc:	82 e2       	ldi	r24, 0x22	; 34
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	2e ed       	ldi	r18, 0xDE	; 222
     302:	30 e0       	ldi	r19, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	2e c0       	rjmp	.+92     	; 0x362 <CALLBACK_USB_GetDescriptor+0x7e>
     306:	21 32       	cpi	r18, 0x21	; 33
     308:	31 05       	cpc	r19, r1
     30a:	e9 f0       	breq	.+58     	; 0x346 <CALLBACK_USB_GetDescriptor+0x62>
     30c:	22 32       	cpi	r18, 0x22	; 34
     30e:	31 05       	cpc	r19, r1
     310:	21 f5       	brne	.+72     	; 0x35a <CALLBACK_USB_GetDescriptor+0x76>
     312:	8f e3       	ldi	r24, 0x3F	; 63
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	22 e1       	ldi	r18, 0x12	; 18
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	31 e0       	ldi	r19, 0x01	; 1
     31a:	23 c0       	rjmp	.+70     	; 0x362 <CALLBACK_USB_GetDescriptor+0x7e>
     31c:	99 27       	eor	r25, r25
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	91 05       	cpc	r25, r1
     322:	41 f0       	breq	.+16     	; 0x334 <CALLBACK_USB_GetDescriptor+0x50>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	91 05       	cpc	r25, r1
     328:	41 f0       	breq	.+16     	; 0x33a <CALLBACK_USB_GetDescriptor+0x56>
     32a:	89 2b       	or	r24, r25
     32c:	b1 f4       	brne	.+44     	; 0x35a <CALLBACK_USB_GetDescriptor+0x76>
     32e:	ea ed       	ldi	r30, 0xDA	; 218
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	05 c0       	rjmp	.+10     	; 0x33e <CALLBACK_USB_GetDescriptor+0x5a>
     334:	e0 ec       	ldi	r30, 0xC0	; 192
     336:	f0 e0       	ldi	r31, 0x00	; 0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	02 c0       	rjmp	.+4      	; 0x33e <CALLBACK_USB_GetDescriptor+0x5a>
     33a:	e8 e9       	ldi	r30, 0x98	; 152
     33c:	f0 e0       	ldi	r31, 0x00	; 0
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	84 91       	lpm	r24, Z
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	9f 01       	movw	r18, r30
     344:	0e c0       	rjmp	.+28     	; 0x362 <CALLBACK_USB_GetDescriptor+0x7e>
     346:	89 e0       	ldi	r24, 0x09	; 9
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	20 ef       	ldi	r18, 0xF0	; 240
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	09 c0       	rjmp	.+18     	; 0x362 <CALLBACK_USB_GetDescriptor+0x7e>
     350:	82 e1       	ldi	r24, 0x12	; 18
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	31 e0       	ldi	r19, 0x01	; 1
     358:	04 c0       	rjmp	.+8      	; 0x362 <CALLBACK_USB_GetDescriptor+0x7e>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	fa 01       	movw	r30, r20
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	31 83       	std	Z+1, r19	; 0x01
     366:	20 83       	st	Z, r18
     368:	08 95       	ret

0000036a <Endpoint_Write_Stream_LE>:
     36a:	cf 92       	push	r12
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	df 93       	push	r29
     37a:	7c 01       	movw	r14, r24
     37c:	8b 01       	movw	r16, r22
     37e:	ea 01       	movw	r28, r20
     380:	ca d1       	rcall	.+916    	; 0x716 <Endpoint_WaitUntilReady>
     382:	81 11       	cpse	r24, r1
     384:	31 c0       	rjmp	.+98     	; 0x3e8 <Endpoint_Write_Stream_LE+0x7e>
     386:	20 97       	sbiw	r28, 0x00	; 0
				break;
     388:	31 f0       	breq	.+12     	; 0x396 <Endpoint_Write_Stream_LE+0x2c>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	08 1b       	sub	r16, r24
     390:	19 0b       	sbc	r17, r25
     392:	e8 0e       	add	r14, r24
     394:	f9 1e       	adc	r15, r25
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	c1 2c       	mov	r12, r1
     398:	d1 2c       	mov	r13, r1
     39a:	01 15       	cp	r16, r1
     39c:	11 05       	cpc	r17, r1
     39e:	19 f1       	breq	.+70     	; 0x3e6 <Endpoint_Write_Stream_LE+0x7c>
     3a0:	80 91 e8 00 	lds	r24, 0x00E8
     3a4:	85 fd       	sbrc	r24, 5
     3a6:	14 c0       	rjmp	.+40     	; 0x3d0 <Endpoint_Write_Stream_LE+0x66>
     3a8:	80 91 e8 00 	lds	r24, 0x00E8
     3ac:	8e 77       	andi	r24, 0x7E	; 126
     3ae:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	5d d4       	rcall	.+2234   	; 0xc6e <USB_USBTask>
     3b4:	20 97       	sbiw	r28, 0x00	; 0
     3b6:	41 f0       	breq	.+16     	; 0x3c8 <Endpoint_Write_Stream_LE+0x5e>
     3b8:	88 81       	ld	r24, Y
     3ba:	99 81       	ldd	r25, Y+1	; 0x01
     3bc:	8c 0d       	add	r24, r12
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	9d 1d       	adc	r25, r13
     3c0:	99 83       	std	Y+1, r25	; 0x01
     3c2:	88 83       	st	Y, r24
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	10 c0       	rjmp	.+32     	; 0x3e8 <Endpoint_Write_Stream_LE+0x7e>
     3c8:	a6 d1       	rcall	.+844    	; 0x716 <Endpoint_WaitUntilReady>
     3ca:	88 23       	and	r24, r24
     3cc:	31 f3       	breq	.-52     	; 0x39a <Endpoint_Write_Stream_LE+0x30>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <Endpoint_Write_Stream_LE+0x7e>
     3d0:	f7 01       	movw	r30, r14
     3d2:	81 91       	ld	r24, Z+

					while (CurrCollectionPath->Parent != NULL)
     3d4:	7f 01       	movw	r14, r30
     3d6:	80 93 f1 00 	sts	0x00F1, r24
     3da:	01 50       	subi	r16, 0x01	; 1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	11 09       	sbc	r17, r1
     3de:	ff ef       	ldi	r31, 0xFF	; 255
     3e0:	cf 1a       	sub	r12, r31
     3e2:	df 0a       	sbc	r13, r31
     3e4:	da cf       	rjmp	.-76     	; 0x39a <Endpoint_Write_Stream_LE+0x30>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	08 95       	ret

000003fa <Endpoint_Write_Control_Stream_LE>:
     3fa:	20 91 23 01 	lds	r18, 0x0123
     3fe:	30 91 24 01 	lds	r19, 0x0124
     402:	26 17       	cp	r18, r22
     404:	37 07       	cpc	r19, r23
     406:	48 f0       	brcs	.+18     	; 0x41a <Endpoint_Write_Control_Stream_LE+0x20>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	61 15       	cp	r22, r1
     40a:	71 05       	cpc	r23, r1
     40c:	39 f4       	brne	.+14     	; 0x41c <Endpoint_Write_Control_Stream_LE+0x22>
     40e:	20 91 e8 00 	lds	r18, 0x00E8
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	2e 77       	andi	r18, 0x7E	; 126
     414:	20 93 e8 00 	sts	0x00E8, r18
     418:	01 c0       	rjmp	.+2      	; 0x41c <Endpoint_Write_Control_Stream_LE+0x22>
     41a:	b9 01       	movw	r22, r18
     41c:	fc 01       	movw	r30, r24
     41e:	20 e0       	ldi	r18, 0x00	; 0

				if (UsageListSize)
     420:	61 15       	cp	r22, r1
     422:	71 05       	cpc	r23, r1
     424:	99 f1       	breq	.+102    	; 0x48c <Endpoint_Write_Control_Stream_LE+0x92>
     426:	80 91 1c 01 	lds	r24, 0x011C
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	88 23       	and	r24, r24
     42c:	e9 f1       	breq	.+122    	; 0x4a8 <Endpoint_Write_Control_Stream_LE+0xae>
     42e:	85 30       	cpi	r24, 0x05	; 5
     430:	e9 f1       	breq	.+122    	; 0x4ac <Endpoint_Write_Control_Stream_LE+0xb2>
     432:	80 91 e8 00 	lds	r24, 0x00E8
     436:	83 fd       	sbrc	r24, 3
     438:	3b c0       	rjmp	.+118    	; 0x4b0 <Endpoint_Write_Control_Stream_LE+0xb6>
     43a:	80 91 e8 00 	lds	r24, 0x00E8
     43e:	82 ff       	sbrs	r24, 2

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	06 c0       	rjmp	.+12     	; 0x44e <Endpoint_Write_Control_Stream_LE+0x54>
     442:	80 91 e8 00 	lds	r24, 0x00E8
     446:	82 ff       	sbrs	r24, 2
     448:	24 c0       	rjmp	.+72     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x98>
     44a:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
     44c:	08 95       	ret
     44e:	80 91 e8 00 	lds	r24, 0x00E8
     452:	80 ff       	sbrs	r24, 0

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	e5 cf       	rjmp	.-54     	; 0x420 <Endpoint_Write_Control_Stream_LE+0x26>
     456:	80 91 f2 00 	lds	r24, 0x00F2
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     45a:	90 91 f3 00 	lds	r25, 0x00F3
     45e:	61 15       	cp	r22, r1
     460:	71 05       	cpc	r23, r1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	51 f0       	breq	.+20     	; 0x478 <Endpoint_Write_Control_Stream_LE+0x7e>
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	91 05       	cpc	r25, r1
     468:	38 f4       	brcc	.+14     	; 0x478 <Endpoint_Write_Control_Stream_LE+0x7e>
     46a:	21 91       	ld	r18, Z+
     46c:	20 93 f1 00 	sts	0x00F1, r18
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     470:	61 50       	subi	r22, 0x01	; 1
     472:	71 09       	sbc	r23, r1
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	f3 cf       	rjmp	.-26     	; 0x45e <Endpoint_Write_Control_Stream_LE+0x64>
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	08 97       	sbiw	r24, 0x08	; 8
     47c:	09 f0       	breq	.+2      	; 0x480 <Endpoint_Write_Control_Stream_LE+0x86>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	80 91 e8 00 	lds	r24, 0x00E8
     484:	8e 77       	andi	r24, 0x7E	; 126
     486:	80 93 e8 00 	sts	0x00E8, r24
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	ca cf       	rjmp	.-108    	; 0x420 <Endpoint_Write_Control_Stream_LE+0x26>
     48c:	21 11       	cpse	r18, r1
     48e:	cb cf       	rjmp	.-106    	; 0x426 <Endpoint_Write_Control_Stream_LE+0x2c>
     490:	d8 cf       	rjmp	.-80     	; 0x442 <Endpoint_Write_Control_Stream_LE+0x48>
     492:	80 91 1c 01 	lds	r24, 0x011C
     496:	88 23       	and	r24, r24
     498:	39 f0       	breq	.+14     	; 0x4a8 <Endpoint_Write_Control_Stream_LE+0xae>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	85 30       	cpi	r24, 0x05	; 5
     49c:	39 f0       	breq	.+14     	; 0x4ac <Endpoint_Write_Control_Stream_LE+0xb2>
     49e:	80 91 e8 00 	lds	r24, 0x00E8
     4a2:	83 ff       	sbrs	r24, 3
     4a4:	ce cf       	rjmp	.-100    	; 0x442 <Endpoint_Write_Control_Stream_LE+0x48>
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <Endpoint_Write_Control_Stream_LE+0xb6>
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	08 95       	ret
				break;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	08 95       	ret
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	08 95       	ret

000004b4 <Endpoint_Read_Control_Stream_LE>:
     4b4:	61 15       	cp	r22, r1
     4b6:	71 05       	cpc	r23, r1
     4b8:	29 f4       	brne	.+10     	; 0x4c4 <Endpoint_Read_Control_Stream_LE+0x10>
     4ba:	20 91 e8 00 	lds	r18, 0x00E8
     4be:	2b 77       	andi	r18, 0x7B	; 123
     4c0:	20 93 e8 00 	sts	0x00E8, r18
     4c4:	61 15       	cp	r22, r1
     4c6:	71 05       	cpc	r23, r1
     4c8:	31 f1       	breq	.+76     	; 0x516 <Endpoint_Read_Control_Stream_LE+0x62>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	20 91 1c 01 	lds	r18, 0x011C
     4ce:	22 23       	and	r18, r18
     4d0:	59 f1       	breq	.+86     	; 0x528 <Endpoint_Read_Control_Stream_LE+0x74>
     4d2:	25 30       	cpi	r18, 0x05	; 5
     4d4:	59 f1       	breq	.+86     	; 0x52c <Endpoint_Read_Control_Stream_LE+0x78>
     4d6:	20 91 e8 00 	lds	r18, 0x00E8
     4da:	23 fd       	sbrc	r18, 3
     4dc:	21 c0       	rjmp	.+66     	; 0x520 <Endpoint_Read_Control_Stream_LE+0x6c>
     4de:	20 91 e8 00 	lds	r18, 0x00E8
     4e2:	22 ff       	sbrs	r18, 2
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	f2 cf       	rjmp	.-28     	; 0x4ca <Endpoint_Read_Control_Stream_LE+0x16>
     4e6:	fc 01       	movw	r30, r24
     4e8:	cf 01       	movw	r24, r30
     4ea:	20 91 f2 00 	lds	r18, 0x00F2
     4ee:	30 91 f3 00 	lds	r19, 0x00F3
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f2:	23 2b       	or	r18, r19
     4f4:	11 f3       	breq	.-60     	; 0x4ba <Endpoint_Read_Control_Stream_LE+0x6>
     4f6:	80 91 f1 00 	lds	r24, 0x00F1
     4fa:	81 93       	st	Z+, r24
     4fc:	cf 01       	movw	r24, r30
     4fe:	61 50       	subi	r22, 0x01	; 1
     500:	71 09       	sbc	r23, r1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	61 15       	cp	r22, r1
     504:	71 05       	cpc	r23, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	81 f7       	brne	.-32     	; 0x4e8 <Endpoint_Read_Control_Stream_LE+0x34>
     508:	d8 cf       	rjmp	.-80     	; 0x4ba <Endpoint_Read_Control_Stream_LE+0x6>
     50a:	80 91 1c 01 	lds	r24, 0x011C
     50e:	88 23       	and	r24, r24
     510:	59 f0       	breq	.+22     	; 0x528 <Endpoint_Read_Control_Stream_LE+0x74>
     512:	85 30       	cpi	r24, 0x05	; 5
     514:	59 f0       	breq	.+22     	; 0x52c <Endpoint_Read_Control_Stream_LE+0x78>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	80 91 e8 00 	lds	r24, 0x00E8
     51a:	80 ff       	sbrs	r24, 0
     51c:	f6 cf       	rjmp	.-20     	; 0x50a <Endpoint_Read_Control_Stream_LE+0x56>

					if (UsageListSize)
     51e:	02 c0       	rjmp	.+4      	; 0x524 <Endpoint_Read_Control_Stream_LE+0x70>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	08 95       	ret
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	08 95       	ret
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	08 95       	ret

00000530 <Endpoint_Write_Control_PStream_LE>:
     530:	20 91 23 01 	lds	r18, 0x0123
     534:	30 91 24 01 	lds	r19, 0x0124
     538:	26 17       	cp	r18, r22
     53a:	37 07       	cpc	r19, r23
     53c:	48 f0       	brcs	.+18     	; 0x550 <Endpoint_Write_Control_PStream_LE+0x20>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	61 15       	cp	r22, r1
     540:	71 05       	cpc	r23, r1
     542:	39 f4       	brne	.+14     	; 0x552 <Endpoint_Write_Control_PStream_LE+0x22>
     544:	20 91 e8 00 	lds	r18, 0x00E8
     548:	2e 77       	andi	r18, 0x7E	; 126
						  UsageList[i - 1] = UsageList[i];
     54a:	20 93 e8 00 	sts	0x00E8, r18
     54e:	01 c0       	rjmp	.+2      	; 0x552 <Endpoint_Write_Control_PStream_LE+0x22>
     550:	b9 01       	movw	r22, r18

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	fc 01       	movw	r30, r24
     554:	20 e0       	ldi	r18, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	61 15       	cp	r22, r1
     558:	71 05       	cpc	r23, r1
     55a:	b1 f1       	breq	.+108    	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x98>
     55c:	80 91 1c 01 	lds	r24, 0x011C
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	88 23       	and	r24, r24
     562:	09 f4       	brne	.+2      	; 0x566 <Endpoint_Write_Control_PStream_LE+0x36>
     564:	3f c0       	rjmp	.+126    	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0xb4>
     566:	85 30       	cpi	r24, 0x05	; 5
     568:	09 f4       	brne	.+2      	; 0x56c <Endpoint_Write_Control_PStream_LE+0x3c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	3e c0       	rjmp	.+124    	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0xb8>
     56c:	80 91 e8 00 	lds	r24, 0x00E8
     570:	83 fd       	sbrc	r24, 3
     572:	3c c0       	rjmp	.+120    	; 0x5ec <Endpoint_Write_Control_PStream_LE+0xbc>
     574:	80 91 e8 00 	lds	r24, 0x00E8
     578:	82 ff       	sbrs	r24, 2
     57a:	06 c0       	rjmp	.+12     	; 0x588 <Endpoint_Write_Control_PStream_LE+0x58>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	80 91 e8 00 	lds	r24, 0x00E8
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	82 ff       	sbrs	r24, 2
     582:	25 c0       	rjmp	.+74     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x9e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	08 95       	ret
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	80 91 e8 00 	lds	r24, 0x00E8
     58c:	80 ff       	sbrs	r24, 0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	e3 cf       	rjmp	.-58     	; 0x556 <Endpoint_Write_Control_PStream_LE+0x26>
     590:	80 91 f2 00 	lds	r24, 0x00F2

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     594:	90 91 f3 00 	lds	r25, 0x00F3
     598:	61 15       	cp	r22, r1
     59a:	71 05       	cpc	r23, r1
     59c:	59 f0       	breq	.+22     	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x84>
     59e:	88 30       	cpi	r24, 0x08	; 8
     5a0:	91 05       	cpc	r25, r1
     5a2:	40 f4       	brcc	.+16     	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x84>
     5a4:	24 91       	lpm	r18, Z
     5a6:	20 93 f1 00 	sts	0x00F1, r18
     5aa:	31 96       	adiw	r30, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	61 50       	subi	r22, 0x01	; 1
     5ae:	71 09       	sbc	r23, r1
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	f2 cf       	rjmp	.-28     	; 0x598 <Endpoint_Write_Control_PStream_LE+0x68>
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	08 97       	sbiw	r24, 0x08	; 8
     5b8:	09 f0       	breq	.+2      	; 0x5bc <Endpoint_Write_Control_PStream_LE+0x8c>
     5ba:	20 e0       	ldi	r18, 0x00	; 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	80 91 e8 00 	lds	r24, 0x00E8
     5c0:	8e 77       	andi	r24, 0x7E	; 126
     5c2:	80 93 e8 00 	sts	0x00E8, r24
     5c6:	c7 cf       	rjmp	.-114    	; 0x556 <Endpoint_Write_Control_PStream_LE+0x26>
     5c8:	21 11       	cpse	r18, r1
     5ca:	c8 cf       	rjmp	.-112    	; 0x55c <Endpoint_Write_Control_PStream_LE+0x2c>
     5cc:	d7 cf       	rjmp	.-82     	; 0x57c <Endpoint_Write_Control_PStream_LE+0x4c>
     5ce:	80 91 1c 01 	lds	r24, 0x011C
     5d2:	88 23       	and	r24, r24
     5d4:	39 f0       	breq	.+14     	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0xb4>
     5d6:	85 30       	cpi	r24, 0x05	; 5
     5d8:	39 f0       	breq	.+14     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0xb8>
     5da:	80 91 e8 00 	lds	r24, 0x00E8
     5de:	83 ff       	sbrs	r24, 3
     5e0:	cd cf       	rjmp	.-102    	; 0x57c <Endpoint_Write_Control_PStream_LE+0x4c>
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <Endpoint_Write_Control_PStream_LE+0xbc>
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	08 95       	ret
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	08 95       	ret
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret

000005f0 <Endpoint_ConfigureEndpoint_Prv>:
     5f0:	98 2f       	mov	r25, r24
     5f2:	97 30       	cpi	r25, 0x07	; 7

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	58 f5       	brcc	.+86     	; 0x64c <Endpoint_ConfigureEndpoint_Prv+0x5c>
     5f6:	90 93 e9 00 	sts	0x00E9, r25
     5fa:	98 17       	cp	r25, r24
     5fc:	39 f0       	breq	.+14     	; 0x60c <Endpoint_ConfigureEndpoint_Prv+0x1c>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	70 91 ec 00 	lds	r23, 0x00EC

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	20 91 ed 00 	lds	r18, 0x00ED
     606:	50 91 f0 00 	lds	r21, 0x00F0
     60a:	03 c0       	rjmp	.+6      	; 0x612 <Endpoint_ConfigureEndpoint_Prv+0x22>
     60c:	24 2f       	mov	r18, r20
     60e:	76 2f       	mov	r23, r22
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	21 ff       	sbrs	r18, 1
     614:	19 c0       	rjmp	.+50     	; 0x648 <Endpoint_ConfigureEndpoint_Prv+0x58>
     616:	30 91 eb 00 	lds	r19, 0x00EB
     61a:	3e 7f       	andi	r19, 0xFE	; 254
     61c:	30 93 eb 00 	sts	0x00EB, r19
     620:	30 91 ed 00 	lds	r19, 0x00ED
     624:	3d 7f       	andi	r19, 0xFD	; 253
     626:	30 93 ed 00 	sts	0x00ED, r19
     62a:	30 91 eb 00 	lds	r19, 0x00EB
     62e:	31 60       	ori	r19, 0x01	; 1
     630:	30 93 eb 00 	sts	0x00EB, r19
     634:	70 93 ec 00 	sts	0x00EC, r23
     638:	20 93 ed 00 	sts	0x00ED, r18
     63c:	50 93 f0 00 	sts	0x00F0, r21
     640:	20 91 ee 00 	lds	r18, 0x00EE
     644:	27 ff       	sbrs	r18, 7
     646:	07 c0       	rjmp	.+14     	; 0x656 <Endpoint_ConfigureEndpoint_Prv+0x66>
     648:	9f 5f       	subi	r25, 0xFF	; 255
     64a:	d3 cf       	rjmp	.-90     	; 0x5f2 <Endpoint_ConfigureEndpoint_Prv+0x2>
     64c:	8f 70       	andi	r24, 0x0F	; 15
     64e:	80 93 e9 00 	sts	0x00E9, r24
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret

0000065a <Endpoint_ConfigureEndpointTable>:
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	06 2f       	mov	r16, r22
     664:	ec 01       	movw	r28, r24
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	10 17       	cp	r17, r16
     66a:	71 f1       	breq	.+92     	; 0x6c8 <Endpoint_ConfigureEndpointTable+0x6e>
     66c:	98 81       	ld	r25, Y
     66e:	99 23       	and	r25, r25
     670:	41 f1       	breq	.+80     	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x68>
     672:	2c 81       	ldd	r18, Y+4	; 0x04
     674:	e9 81       	ldd	r30, Y+1	; 0x01
     676:	fa 81       	ldd	r31, Y+2	; 0x02
     678:	7b 81       	ldd	r23, Y+3	; 0x03
     67a:	89 2f       	mov	r24, r25
     67c:	8f 70       	andi	r24, 0x0F	; 15
     67e:	87 30       	cpi	r24, 0x07	; 7
     680:	10 f0       	brcs	.+4      	; 0x686 <Endpoint_ConfigureEndpointTable+0x2c>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	22 c0       	rjmp	.+68     	; 0x6ca <Endpoint_ConfigureEndpointTable+0x70>
     686:	22 30       	cpi	r18, 0x02	; 2
					  ParserData->TotalReportItems++;
     688:	10 f0       	brcs	.+4      	; 0x68e <Endpoint_ConfigureEndpointTable+0x34>
     68a:	56 e0       	ldi	r21, 0x06	; 6
     68c:	01 c0       	rjmp	.+2      	; 0x690 <Endpoint_ConfigureEndpointTable+0x36>
     68e:	52 e0       	ldi	r21, 0x02	; 2
     690:	28 e0       	ldi	r18, 0x08	; 8

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	2e 17       	cp	r18, r30
     698:	3f 07       	cpc	r19, r31
     69a:	20 f4       	brcc	.+8      	; 0x6a4 <Endpoint_ConfigureEndpointTable+0x4a>
     69c:	4f 5f       	subi	r20, 0xFF	; 255
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	22 0f       	add	r18, r18
     6a0:	33 1f       	adc	r19, r19
     6a2:	f9 cf       	rjmp	.-14     	; 0x696 <Endpoint_ConfigureEndpointTable+0x3c>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	42 95       	swap	r20
     6a6:	40 7f       	andi	r20, 0xF0	; 240
     6a8:	45 2b       	or	r20, r21
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	69 2f       	mov	r22, r25
     6ac:	66 1f       	adc	r22, r22
     6ae:	66 27       	eor	r22, r22
     6b0:	66 1f       	adc	r22, r22
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	90 e4       	ldi	r25, 0x40	; 64
     6b4:	79 9f       	mul	r23, r25
     6b6:	90 01       	movw	r18, r0
     6b8:	11 24       	eor	r1, r1
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	62 2b       	or	r22, r18
     6bc:	99 df       	rcall	.-206    	; 0x5f0 <Endpoint_ConfigureEndpoint_Prv>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	88 23       	and	r24, r24
     6c0:	01 f3       	breq	.-64     	; 0x682 <Endpoint_ConfigureEndpointTable+0x28>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	1f 5f       	subi	r17, 0xFF	; 255
     6c4:	25 96       	adiw	r28, 0x05	; 5
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	d0 cf       	rjmp	.-96     	; 0x668 <Endpoint_ConfigureEndpointTable+0xe>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	08 95       	ret

000006d4 <Endpoint_ClearStatusStage>:
     6d4:	80 91 1d 01 	lds	r24, 0x011D
}
     6d8:	87 fd       	sbrc	r24, 7
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <Endpoint_ClearStatusStage+0x12>
     6dc:	80 91 e8 00 	lds	r24, 0x00E8
     6e0:	80 ff       	sbrs	r24, 0
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <Endpoint_ClearStatusStage+0x2c>
     6e4:	12 c0       	rjmp	.+36     	; 0x70a <Endpoint_ClearStatusStage+0x36>
     6e6:	80 91 e8 00 	lds	r24, 0x00E8
     6ea:	82 fd       	sbrc	r24, 2
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <Endpoint_ClearStatusStage+0x24>
     6ee:	80 91 1c 01 	lds	r24, 0x011C
     6f2:	81 11       	cpse	r24, r1
     6f4:	f8 cf       	rjmp	.-16     	; 0x6e6 <Endpoint_ClearStatusStage+0x12>
     6f6:	08 95       	ret
     6f8:	80 91 e8 00 	lds	r24, 0x00E8
     6fc:	8b 77       	andi	r24, 0x7B	; 123
     6fe:	08 c0       	rjmp	.+16     	; 0x710 <Endpoint_ClearStatusStage+0x3c>
     700:	80 91 1c 01 	lds	r24, 0x011C
     704:	81 11       	cpse	r24, r1
     706:	ea cf       	rjmp	.-44     	; 0x6dc <Endpoint_ClearStatusStage+0x8>
     708:	08 95       	ret
     70a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     70e:	8e 77       	andi	r24, 0x7E	; 126
     710:	80 93 e8 00 	sts	0x00E8, r24
     714:	08 95       	ret

00000716 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     716:	80 91 e4 00 	lds	r24, 0x00E4
     71a:	90 91 e5 00 	lds	r25, 0x00E5
     71e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     720:	20 91 ec 00 	lds	r18, 0x00EC
     724:	20 ff       	sbrs	r18, 0
     726:	21 c0       	rjmp	.+66     	; 0x76a <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     728:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     72c:	20 fd       	sbrc	r18, 0
     72e:	21 c0       	rjmp	.+66     	; 0x772 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     730:	20 91 1c 01 	lds	r18, 0x011C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     734:	22 23       	and	r18, r18
     736:	89 f0       	breq	.+34     	; 0x75a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     738:	25 30       	cpi	r18, 0x05	; 5
     73a:	89 f0       	breq	.+34     	; 0x75e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     73c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     740:	25 fd       	sbrc	r18, 5
     742:	0f c0       	rjmp	.+30     	; 0x762 <Endpoint_WaitUntilReady+0x4c>
     744:	20 91 e4 00 	lds	r18, 0x00E4
     748:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     74c:	28 17       	cp	r18, r24
     74e:	39 07       	cpc	r19, r25
     750:	39 f3       	breq	.-50     	; 0x720 <Endpoint_WaitUntilReady+0xa>
     752:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     754:	41 f0       	breq	.+16     	; 0x766 <Endpoint_WaitUntilReady+0x50>
     756:	c9 01       	movw	r24, r18
     758:	e3 cf       	rjmp	.-58     	; 0x720 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     766:	84 e0       	ldi	r24, 0x04	; 4
     768:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     76a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     76e:	22 ff       	sbrs	r18, 2
     770:	df cf       	rjmp	.-66     	; 0x730 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret

00000776 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     77e:	4e d0       	rcall	.+156    	; 0x81c <USB_INT_DisableAllInterrupts>
     780:	55 d0       	rcall	.+170    	; 0x82c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     782:	c8 ed       	ldi	r28, 0xD8	; 216
     784:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     786:	88 81       	ld	r24, Y
     788:	8f 77       	andi	r24, 0x7F	; 127
     78a:	88 83       	st	Y, r24
     78c:	88 81       	ld	r24, Y
     78e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     790:	88 83       	st	Y, r24
     792:	88 81       	ld	r24, Y
     794:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     796:	88 83       	st	Y, r24
     798:	e7 ed       	ldi	r30, 0xD7	; 215
     79a:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     79c:	80 81       	ld	r24, Z
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	80 83       	st	Z, r24
     7a2:	19 bc       	out	0x29, r1	; 41
     7a4:	10 92 1c 01 	sts	0x011C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7a8:	10 92 18 01 	sts	0x0118, r1
	USB_Device_ConfigurationNumber  = 0;
     7ac:	10 92 1a 01 	sts	0x011A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7b0:	10 92 19 01 	sts	0x0119, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7b4:	00 ee       	ldi	r16, 0xE0	; 224
     7b6:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7b8:	f8 01       	movw	r30, r16
     7ba:	80 81       	ld	r24, Z
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	80 83       	st	Z, r24
     7c0:	88 81       	ld	r24, Y
     7c2:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7c4:	88 83       	st	Y, r24
     7c6:	42 e0       	ldi	r20, 0x02	; 2
     7c8:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	11 df       	rcall	.-478    	; 0x5f0 <Endpoint_ConfigureEndpoint_Prv>
     7ce:	e1 ee       	ldi	r30, 0xE1	; 225
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7d4:	8e 7f       	andi	r24, 0xFE	; 254
     7d6:	80 83       	st	Z, r24
     7d8:	e2 ee       	ldi	r30, 0xE2	; 226
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 60       	ori	r24, 0x08	; 8
     7e6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7e8:	f8 01       	movw	r30, r16
     7ea:	80 81       	ld	r24, Z
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7ee:	80 83       	st	Z, r24
     7f0:	88 81       	ld	r24, Y
     7f2:	80 61       	ori	r24, 0x10	; 16
     7f4:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <USB_Init>:
     800:	e8 ed       	ldi	r30, 0xD8	; 216
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     806:	8f 7e       	andi	r24, 0xEF	; 239
     808:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     80a:	e7 ed       	ldi	r30, 0xD7	; 215
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	81 60       	ori	r24, 0x01	; 1
     812:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 1b 01 	sts	0x011B, r24

	USB_ResetInterface();
     81a:	ad cf       	rjmp	.-166    	; 0x776 <USB_ResetInterface>

0000081c <USB_INT_DisableAllInterrupts>:
     81c:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	8c 7f       	andi	r24, 0xFC	; 252
     824:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     826:	10 92 e2 00 	sts	0x00E2, r1
     82a:	08 95       	ret

0000082c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     82c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     830:	10 92 e1 00 	sts	0x00E1, r1
     834:	08 95       	ret

00000836 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     85c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     860:	82 ff       	sbrs	r24, 2
     862:	0a c0       	rjmp	.+20     	; 0x878 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     864:	80 91 e2 00 	lds	r24, 0x00E2
     868:	82 ff       	sbrs	r24, 2
     86a:	06 c0       	rjmp	.+12     	; 0x878 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     86c:	80 91 e1 00 	lds	r24, 0x00E1
     870:	8b 7f       	andi	r24, 0xFB	; 251
     872:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     876:	d7 dc       	rcall	.-1618   	; 0x226 <EVENT_USB_Device_StartOfFrame>
     878:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     87c:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     87e:	1d c0       	rjmp	.+58     	; 0x8ba <__vector_10+0x84>
     880:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     884:	80 ff       	sbrs	r24, 0
     886:	19 c0       	rjmp	.+50     	; 0x8ba <__vector_10+0x84>
     888:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     88c:	8e 7f       	andi	r24, 0xFE	; 254
     88e:	80 93 da 00 	sts	0x00DA, r24
     892:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     896:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     898:	0c c0       	rjmp	.+24     	; 0x8b2 <__vector_10+0x7c>
     89a:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     89c:	89 bd       	out	0x29, r24	; 41
     89e:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8a0:	89 bd       	out	0x29, r24	; 41
     8a2:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8a4:	00 fe       	sbrs	r0, 0
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <__vector_10+0x6c>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8aa:	80 93 1c 01 	sts	0x011C, r24
     8ae:	a6 dc       	rcall	.-1716   	; 0x1fc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__vector_10+0x84>
     8b2:	19 bc       	out	0x29, r1	; 41
     8b4:	10 92 1c 01 	sts	0x011C, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8b8:	a3 dc       	rcall	.-1722   	; 0x200 <EVENT_USB_Device_Disconnect>
     8ba:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8be:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8c0:	18 c0       	rjmp	.+48     	; 0x8f2 <__vector_10+0xbc>
     8c2:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8c6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__vector_10+0xbc>
     8ca:	80 91 e2 00 	lds	r24, 0x00E2
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8d0:	80 93 e2 00 	sts	0x00E2, r24
     8d4:	80 91 e2 00 	lds	r24, 0x00E2
     8d8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8da:	80 93 e2 00 	sts	0x00E2, r24
     8de:	80 91 d8 00 	lds	r24, 0x00D8
     8e2:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8e4:	80 93 d8 00 	sts	0x00D8, r24
     8e8:	19 bc       	out	0x29, r1	; 41
     8ea:	85 e0       	ldi	r24, 0x05	; 5
     8ec:	80 93 1c 01 	sts	0x011C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8f0:	bd d1       	rcall	.+890    	; 0xc6c <USB_Event_Stub>
     8f2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     8f6:	84 ff       	sbrs	r24, 4
     8f8:	2f c0       	rjmp	.+94     	; 0x958 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8fa:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8fe:	84 ff       	sbrs	r24, 4
     900:	2b c0       	rjmp	.+86     	; 0x958 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     902:	8c e0       	ldi	r24, 0x0C	; 12
     904:	89 bd       	out	0x29, r24	; 41
     906:	8e e0       	ldi	r24, 0x0E	; 14
     908:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     90a:	09 b4       	in	r0, 0x29	; 41
     90c:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     90e:	fd cf       	rjmp	.-6      	; 0x90a <__vector_10+0xd4>
     910:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     914:	8f 7d       	andi	r24, 0xDF	; 223
     916:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     91a:	80 91 e1 00 	lds	r24, 0x00E1
     91e:	8f 7e       	andi	r24, 0xEF	; 239
     920:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     924:	80 91 e2 00 	lds	r24, 0x00E2
     928:	8f 7e       	andi	r24, 0xEF	; 239
     92a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     92e:	80 91 e2 00 	lds	r24, 0x00E2
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     938:	80 91 18 01 	lds	r24, 0x0118
     93c:	88 23       	and	r24, r24
     93e:	11 f0       	breq	.+4      	; 0x944 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	07 c0       	rjmp	.+14     	; 0x952 <__vector_10+0x11c>
     944:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     948:	87 ff       	sbrs	r24, 7
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     94c:	83 e0       	ldi	r24, 0x03	; 3
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 1c 01 	sts	0x011C, r24
     956:	8a d1       	rcall	.+788    	; 0xc6c <USB_Event_Stub>
     958:	80 91 e1 00 	lds	r24, 0x00E1
     95c:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     95e:	22 c0       	rjmp	.+68     	; 0x9a4 <__vector_10+0x16e>
     960:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     964:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     966:	1e c0       	rjmp	.+60     	; 0x9a4 <__vector_10+0x16e>
     968:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     96c:	87 7f       	andi	r24, 0xF7	; 247
     96e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	80 93 1c 01 	sts	0x011C, r24
     978:	10 92 18 01 	sts	0x0118, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     97c:	80 91 e1 00 	lds	r24, 0x00E1
     980:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     982:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     986:	80 91 e2 00 	lds	r24, 0x00E2
     98a:	8e 7f       	andi	r24, 0xFE	; 254
     98c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     990:	80 91 e2 00 	lds	r24, 0x00E2
     994:	80 61       	ori	r24, 0x10	; 16
     996:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     99a:	42 e0       	ldi	r20, 0x02	; 2
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	27 de       	rcall	.-946    	; 0x5f0 <Endpoint_ConfigureEndpoint_Prv>
     9a2:	64 d1       	rcall	.+712    	; 0xc6c <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <USB_Device_ProcessControlRequest>:
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	aa 97       	sbiw	r28, 0x2a	; 42
     9d6:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	ed e1       	ldi	r30, 0x1D	; 29
     9e2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9e4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9e8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9ea:	21 e0       	ldi	r18, 0x01	; 1
     9ec:	e5 32       	cpi	r30, 0x25	; 37
     9ee:	f2 07       	cpc	r31, r18
     9f0:	c9 f7       	brne	.-14     	; 0x9e4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9f2:	16 dc       	rcall	.-2004   	; 0x220 <EVENT_USB_Device_ControlRequest>
     9f4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9f8:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     9fa:	20 c1       	rjmp	.+576    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     9fc:	90 91 1d 01 	lds	r25, 0x011D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a00:	80 91 1e 01 	lds	r24, 0x011E

		switch (USB_ControlRequest.bRequest)
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	09 f4       	brne	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0x40>
     a08:	77 c0       	rjmp	.+238    	; 0xaf8 <USB_Device_ProcessControlRequest+0x12e>
     a0a:	30 f4       	brcc	.+12     	; 0xa18 <USB_Device_ProcessControlRequest+0x4e>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	81 f1       	breq	.+96     	; 0xa70 <USB_Device_ProcessControlRequest+0xa6>
     a10:	68 f0       	brcs	.+26     	; 0xa2c <USB_Device_ProcessControlRequest+0x62>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	69 f1       	breq	.+90     	; 0xa70 <USB_Device_ProcessControlRequest+0xa6>
     a16:	12 c1       	rjmp	.+548    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     a18:	88 30       	cpi	r24, 0x08	; 8
     a1a:	09 f4       	brne	.+2      	; 0xa1e <USB_Device_ProcessControlRequest+0x54>
     a1c:	e1 c0       	rjmp	.+450    	; 0xbe0 <USB_Device_ProcessControlRequest+0x216>
     a1e:	89 30       	cpi	r24, 0x09	; 9
     a20:	09 f4       	brne	.+2      	; 0xa24 <USB_Device_ProcessControlRequest+0x5a>
     a22:	f0 c0       	rjmp	.+480    	; 0xc04 <USB_Device_ProcessControlRequest+0x23a>
     a24:	86 30       	cpi	r24, 0x06	; 6
     a26:	09 f0       	breq	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0x60>
     a28:	09 c1       	rjmp	.+530    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     a2a:	88 c0       	rjmp	.+272    	; 0xb3c <USB_Device_ProcessControlRequest+0x172>
     a2c:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a2e:	81 f0       	breq	.+32     	; 0xa50 <USB_Device_ProcessControlRequest+0x86>
     a30:	92 38       	cpi	r25, 0x82	; 130
     a32:	09 f0       	breq	.+2      	; 0xa36 <USB_Device_ProcessControlRequest+0x6c>
     a34:	03 c1       	rjmp	.+518    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     a36:	80 91 21 01 	lds	r24, 0x0121
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	80 93 e9 00 	sts	0x00E9, r24
     a40:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a44:	85 fb       	bst	r24, 5
     a46:	88 27       	eor	r24, r24
     a48:	80 f9       	bld	r24, 0
     a4a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a4e:	06 c0       	rjmp	.+12     	; 0xa5c <USB_Device_ProcessControlRequest+0x92>
     a50:	80 91 19 01 	lds	r24, 0x0119
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a54:	90 91 1a 01 	lds	r25, 0x011A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a58:	91 11       	cpse	r25, r1
     a5a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a5c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a60:	97 7f       	andi	r25, 0xF7	; 247
     a62:	90 93 e8 00 	sts	0x00E8, r25
     a66:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a6a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     a6e:	c3 c0       	rjmp	.+390    	; 0xbf6 <USB_Device_ProcessControlRequest+0x22c>
     a70:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a72:	2d 7f       	andi	r18, 0xFD	; 253
     a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0xae>
     a76:	e2 c0       	rjmp	.+452    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     a78:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a7a:	19 f0       	breq	.+6      	; 0xa82 <USB_Device_ProcessControlRequest+0xb8>
     a7c:	92 30       	cpi	r25, 0x02	; 2
     a7e:	61 f0       	breq	.+24     	; 0xa98 <USB_Device_ProcessControlRequest+0xce>
     a80:	dd c0       	rjmp	.+442    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     a82:	90 91 1f 01 	lds	r25, 0x011F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a86:	91 30       	cpi	r25, 0x01	; 1
     a88:	09 f0       	breq	.+2      	; 0xa8c <USB_Device_ProcessControlRequest+0xc2>
     a8a:	d8 c0       	rjmp	.+432    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     a8c:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a8e:	09 f0       	breq	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0xc8>
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 1a 01 	sts	0x011A, r25
     a96:	2a c0       	rjmp	.+84     	; 0xaec <USB_Device_ProcessControlRequest+0x122>
     a98:	90 91 1f 01 	lds	r25, 0x011F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a9c:	91 11       	cpse	r25, r1
     a9e:	26 c0       	rjmp	.+76     	; 0xaec <USB_Device_ProcessControlRequest+0x122>
     aa0:	20 91 21 01 	lds	r18, 0x0121
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     aa4:	2f 70       	andi	r18, 0x0F	; 15
     aa6:	09 f4       	brne	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     aa8:	c9 c0       	rjmp	.+402    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     aaa:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aae:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ab2:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ab4:	1b c0       	rjmp	.+54     	; 0xaec <USB_Device_ProcessControlRequest+0x122>
     ab6:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ab8:	21 f4       	brne	.+8      	; 0xac2 <USB_Device_ProcessControlRequest+0xf8>
     aba:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     abe:	80 62       	ori	r24, 0x20	; 32
     ac0:	13 c0       	rjmp	.+38     	; 0xae8 <USB_Device_ProcessControlRequest+0x11e>
     ac2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ac6:	80 61       	ori	r24, 0x10	; 16
     ac8:	80 93 eb 00 	sts	0x00EB, r24
     acc:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	02 2e       	mov	r0, r18
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <USB_Device_ProcessControlRequest+0x10c>
     ad4:	88 0f       	add	r24, r24
     ad6:	0a 94       	dec	r0
     ad8:	ea f7       	brpl	.-6      	; 0xad4 <USB_Device_ProcessControlRequest+0x10a>
     ada:	80 93 ea 00 	sts	0x00EA, r24
     ade:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     ae2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	80 93 eb 00 	sts	0x00EB, r24
     aec:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     af4:	87 7f       	andi	r24, 0xF7	; 247
     af6:	82 c0       	rjmp	.+260    	; 0xbfc <USB_Device_ProcessControlRequest+0x232>
     af8:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     afa:	a0 c0       	rjmp	.+320    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     afc:	10 91 1f 01 	lds	r17, 0x011F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b00:	1f 77       	andi	r17, 0x7F	; 127
     b02:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b06:	80 78       	andi	r24, 0x80	; 128
     b08:	81 2b       	or	r24, r17
     b0a:	80 93 e3 00 	sts	0x00E3, r24
     b0e:	80 91 e8 00 	lds	r24, 0x00E8
     b12:	87 7f       	andi	r24, 0xF7	; 247
     b14:	80 93 e8 00 	sts	0x00E8, r24
     b18:	dd dd       	rcall	.-1094   	; 0x6d4 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b1a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b1e:	80 ff       	sbrs	r24, 0
     b20:	fc cf       	rjmp	.-8      	; 0xb1a <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     b22:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	80 93 e3 00 	sts	0x00E3, r24
     b2c:	11 23       	and	r17, r17
     b2e:	11 f0       	breq	.+4      	; 0xb34 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0x16c>
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	80 93 1c 01 	sts	0x011C, r24
     b3a:	80 c0       	rjmp	.+256    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     b3c:	90 58       	subi	r25, 0x80	; 128
     b3e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b40:	08 f0       	brcs	.+2      	; 0xb44 <USB_Device_ProcessControlRequest+0x17a>
     b42:	7c c0       	rjmp	.+248    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     b44:	80 91 1f 01 	lds	r24, 0x011F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b48:	90 91 20 01 	lds	r25, 0x0120
     b4c:	8c 3d       	cpi	r24, 0xDC	; 220
     b4e:	23 e0       	ldi	r18, 0x03	; 3
     b50:	92 07       	cpc	r25, r18
     b52:	71 f5       	brne	.+92     	; 0xbb0 <USB_Device_ProcessControlRequest+0x1e6>
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b58:	8a e2       	ldi	r24, 0x2A	; 42
     b5a:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b5c:	4f b7       	in	r20, 0x3f	; 63
     b5e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b60:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b62:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b68:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b6a:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	50 93 57 00 	sts	0x0057, r21
     b72:	e4 91       	lpm	r30, Z
     b74:	20 ff       	sbrs	r18, 0
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
     b78:	e2 95       	swap	r30
     b7a:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     b7c:	3f 5f       	subi	r19, 0xFF	; 255
     b7e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b80:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	ea 30       	cpi	r30, 0x0A	; 10
     b86:	10 f0       	brcs	.+4      	; 0xb8c <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b88:	c7 96       	adiw	r24, 0x37	; 55
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <USB_Device_ProcessControlRequest+0x1c4>
     b8c:	c0 96       	adiw	r24, 0x30	; 48
     b8e:	8d 93       	st	X+, r24
     b90:	9d 93       	st	X+, r25
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b96:	49 f7       	brne	.-46     	; 0xb6a <USB_Device_ProcessControlRequest+0x1a0>
     b98:	4f bf       	out	0x3f, r20	; 63
     b9a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b9e:	87 7f       	andi	r24, 0xF7	; 247
     ba0:	80 93 e8 00 	sts	0x00E8, r24
     ba4:	6a e2       	ldi	r22, 0x2A	; 42
     ba6:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	26 dc       	rcall	.-1972   	; 0x3fa <Endpoint_Write_Control_Stream_LE>
     bae:	12 c0       	rjmp	.+36     	; 0xbd4 <USB_Device_ProcessControlRequest+0x20a>
     bb0:	ae 01       	movw	r20, r28
     bb2:	4f 5f       	subi	r20, 0xFF	; 255
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bb6:	60 91 21 01 	lds	r22, 0x0121
     bba:	94 db       	rcall	.-2264   	; 0x2e4 <CALLBACK_USB_GetDescriptor>
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <USB_Device_ProcessControlRequest+0x1f8>
     bc0:	3d c0       	rjmp	.+122    	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     bc2:	20 91 e8 00 	lds	r18, 0x00E8
     bc6:	27 7f       	andi	r18, 0xF7	; 247
     bc8:	20 93 e8 00 	sts	0x00E8, r18
     bcc:	bc 01       	movw	r22, r24
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	ae dc       	rcall	.-1700   	; 0x530 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bd4:	80 91 e8 00 	lds	r24, 0x00E8
     bd8:	8b 77       	andi	r24, 0x7B	; 123
     bda:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bde:	2e c0       	rjmp	.+92     	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     be0:	90 38       	cpi	r25, 0x80	; 128
     be2:	61 f5       	brne	.+88     	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     be4:	80 91 e8 00 	lds	r24, 0x00E8
     be8:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bee:	80 91 18 01 	lds	r24, 0x0118
     bf2:	80 93 f1 00 	sts	0x00F1, r24
     bf6:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bfa:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bfc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c00:	69 dd       	rcall	.-1326   	; 0x6d4 <Endpoint_ClearStatusStage>
     c02:	1c c0       	rjmp	.+56     	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     c04:	91 11       	cpse	r25, r1
     c06:	1a c0       	rjmp	.+52     	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
     c08:	90 91 1f 01 	lds	r25, 0x011F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c0c:	92 30       	cpi	r25, 0x02	; 2
     c0e:	b0 f4       	brcc	.+44     	; 0xc3c <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c10:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c14:	87 7f       	andi	r24, 0xF7	; 247
     c16:	80 93 e8 00 	sts	0x00E8, r24
     c1a:	90 93 18 01 	sts	0x0118, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c1e:	5a dd       	rcall	.-1356   	; 0x6d4 <Endpoint_ClearStatusStage>
     c20:	80 91 18 01 	lds	r24, 0x0118
     c24:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <USB_Device_ProcessControlRequest+0x266>
     c28:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     c2c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <USB_Device_ProcessControlRequest+0x26a>
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <USB_Device_ProcessControlRequest+0x26c>
     c34:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c36:	80 93 1c 01 	sts	0x011C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c3a:	e4 da       	rcall	.-2616   	; 0x204 <EVENT_USB_Device_ConfigurationChanged>
     c3c:	80 91 e8 00 	lds	r24, 0x00E8
     c40:	83 ff       	sbrs	r24, 3
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <USB_Device_ProcessControlRequest+0x28e>
     c44:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     c48:	87 7f       	andi	r24, 0xF7	; 247
     c4a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c4e:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c52:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c54:	80 93 eb 00 	sts	0x00EB, r24
     c58:	aa 96       	adiw	r28, 0x2a	; 42
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c68:	1f 91       	pop	r17
     c6a:	08 95       	ret

00000c6c <USB_Event_Stub>:
     c6c:	08 95       	ret

00000c6e <USB_USBTask>:
     c6e:	cf 93       	push	r28
     c70:	80 91 1c 01 	lds	r24, 0x011C
     c74:	88 23       	and	r24, r24
     c76:	a9 f0       	breq	.+42     	; 0xca2 <USB_USBTask+0x34>
     c78:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c7c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c7e:	90 91 ec 00 	lds	r25, 0x00EC
     c82:	90 ff       	sbrs	r25, 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <USB_USBTask+0x1c>
     c86:	90 e8       	ldi	r25, 0x80	; 128
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <USB_USBTask+0x1e>
     c8a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c8c:	c9 2f       	mov	r28, r25
     c8e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c90:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c94:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c98:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c9a:	97 de       	rcall	.-722    	; 0x9ca <USB_Device_ProcessControlRequest>
     c9c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c9e:	c0 93 e9 00 	sts	0x00E9, r28
     ca2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     ca4:	08 95       	ret

00000ca6 <HID_Device_ProcessControlRequest>:
     ca6:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     ca8:	7f 92       	push	r7
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <HID_Device_ProcessControlRequest+0x1e>
     cc4:	1f 92       	push	r1
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     ccc:	ad b6       	in	r10, 0x3d	; 61
     cce:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cd0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     cd4:	83 ff       	sbrs	r24, 3
     cd6:	02 c1       	rjmp	.+516    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     cd8:	f7 01       	movw	r30, r14
     cda:	80 81       	ld	r24, Z
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	20 91 21 01 	lds	r18, 0x0121
     ce2:	30 91 22 01 	lds	r19, 0x0122
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	09 f0       	breq	.+2      	; 0xcee <HID_Device_ProcessControlRequest+0x48>
     cec:	f7 c0       	rjmp	.+494    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     cee:	80 91 1e 01 	lds	r24, 0x011E
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <HID_Device_ProcessControlRequest+0x52>
     cf6:	99 c0       	rjmp	.+306    	; 0xe2a <HID_Device_ProcessControlRequest+0x184>
     cf8:	30 f4       	brcc	.+12     	; 0xd06 <HID_Device_ProcessControlRequest+0x60>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	71 f0       	breq	.+28     	; 0xd1a <HID_Device_ProcessControlRequest+0x74>
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	09 f4       	brne	.+2      	; 0xd04 <HID_Device_ProcessControlRequest+0x5e>
     d02:	d0 c0       	rjmp	.+416    	; 0xea4 <HID_Device_ProcessControlRequest+0x1fe>
     d04:	eb c0       	rjmp	.+470    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	09 f4       	brne	.+2      	; 0xd0c <HID_Device_ProcessControlRequest+0x66>
     d0a:	b4 c0       	rjmp	.+360    	; 0xe74 <HID_Device_ProcessControlRequest+0x1ce>
     d0c:	8b 30       	cpi	r24, 0x0B	; 11
     d0e:	09 f4       	brne	.+2      	; 0xd12 <HID_Device_ProcessControlRequest+0x6c>
     d10:	9d c0       	rjmp	.+314    	; 0xe4c <HID_Device_ProcessControlRequest+0x1a6>
     d12:	89 30       	cpi	r24, 0x09	; 9
     d14:	09 f0       	breq	.+2      	; 0xd18 <HID_Device_ProcessControlRequest+0x72>
     d16:	e2 c0       	rjmp	.+452    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     d18:	4b c0       	rjmp	.+150    	; 0xdb0 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d1a:	80 91 1d 01 	lds	r24, 0x011D
     d1e:	81 3a       	cpi	r24, 0xA1	; 161
     d20:	09 f0       	breq	.+2      	; 0xd24 <HID_Device_ProcessControlRequest+0x7e>
     d22:	dc c0       	rjmp	.+440    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     d24:	8d b6       	in	r8, 0x3d	; 61
     d26:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     d28:	1a 82       	std	Y+2, r1	; 0x02
     d2a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d2c:	80 91 1f 01 	lds	r24, 0x011F
     d30:	10 91 20 01 	lds	r17, 0x0120
     d34:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d36:	f7 01       	movw	r30, r14
     d38:	40 85       	ldd	r20, Z+8	; 0x08
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	8d b7       	in	r24, 0x3d	; 61
     d3e:	9e b7       	in	r25, 0x3e	; 62
     d40:	84 1b       	sub	r24, r20
     d42:	95 0b       	sbc	r25, r21
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	9e bf       	out	0x3e, r25	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	8d bf       	out	0x3d, r24	; 61
     d4e:	ed b7       	in	r30, 0x3d	; 61
     d50:	fe b7       	in	r31, 0x3e	; 62
     d52:	31 96       	adiw	r30, 0x01	; 1
     d54:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	cf 01       	movw	r24, r30
     d5c:	bc d1       	rcall	.+888    	; 0x10d6 <memset>
     d5e:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d60:	41 0f       	add	r20, r17
     d62:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d64:	0f 5f       	subi	r16, 0xFF	; 255
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	96 01       	movw	r18, r12
     d6a:	be 01       	movw	r22, r28
     d6c:	6d 5f       	subi	r22, 0xFD	; 253
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	c7 01       	movw	r24, r14
     d72:	65 da       	rcall	.-2870   	; 0x23e <CALLBACK_HID_Device_CreateHIDReport>
     d74:	f7 01       	movw	r30, r14
     d76:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d78:	97 81       	ldd	r25, Z+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	21 f0       	breq	.+8      	; 0xd86 <HID_Device_ProcessControlRequest+0xe0>
     d7e:	40 85       	ldd	r20, Z+8	; 0x08
     d80:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     d82:	b6 01       	movw	r22, r12
     d84:	9f d1       	rcall	.+830    	; 0x10c4 <memcpy>
     d86:	10 92 e9 00 	sts	0x00E9, r1
     d8a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d8e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d90:	80 93 e8 00 	sts	0x00E8, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	81 11       	cpse	r24, r1
     d98:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     d9c:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d9e:	7a 81       	ldd	r23, Y+2	; 0x02
     da0:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     da2:	2b db       	rcall	.-2474   	; 0x3fa <Endpoint_Write_Control_Stream_LE>
     da4:	80 91 e8 00 	lds	r24, 0x00E8
     da8:	8b 77       	andi	r24, 0x7B	; 123
     daa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dae:	37 c0       	rjmp	.+110    	; 0xe1e <HID_Device_ProcessControlRequest+0x178>
     db0:	80 91 1d 01 	lds	r24, 0x011D
     db4:	81 32       	cpi	r24, 0x21	; 33
     db6:	09 f0       	breq	.+2      	; 0xdba <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     db8:	91 c0       	rjmp	.+290    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     dba:	8d b6       	in	r8, 0x3d	; 61
     dbc:	9e b6       	in	r9, 0x3e	; 62
     dbe:	00 91 23 01 	lds	r16, 0x0123
     dc2:	10 91 24 01 	lds	r17, 0x0124
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     dc6:	70 90 1f 01 	lds	r7, 0x011F
     dca:	60 90 20 01 	lds	r6, 0x0120
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     dce:	8d b7       	in	r24, 0x3d	; 61
     dd0:	9e b7       	in	r25, 0x3e	; 62
     dd2:	80 1b       	sub	r24, r16
     dd4:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	9e bf       	out	0x3e, r25	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	8d bf       	out	0x3d, r24	; 61
     de0:	ed b7       	in	r30, 0x3d	; 61
     de2:	fe b7       	in	r31, 0x3e	; 62
     de4:	31 96       	adiw	r30, 0x01	; 1
     de6:	6f 01       	movw	r12, r30
     de8:	80 91 e8 00 	lds	r24, 0x00E8
     dec:	87 7f       	andi	r24, 0xF7	; 247
     dee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     df2:	b8 01       	movw	r22, r16
     df4:	cf 01       	movw	r24, r30
     df6:	5e db       	rcall	.-2372   	; 0x4b4 <Endpoint_Read_Control_Stream_LE>
     df8:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     dfc:	8e 77       	andi	r24, 0x7E	; 126
     dfe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	71 10       	cpse	r7, r1
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <HID_Device_ProcessControlRequest+0x164>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e0c:	02 1b       	sub	r16, r18
     e0e:	13 0b       	sbc	r17, r19
     e10:	2c 0d       	add	r18, r12
     e12:	3d 1d       	adc	r19, r13
     e14:	4f ef       	ldi	r20, 0xFF	; 255
     e16:	46 0d       	add	r20, r6
     e18:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     e1a:	c7 01       	movw	r24, r14
     e1c:	57 da       	rcall	.-2898   	; 0x2cc <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e22:	9e be       	out	0x3e, r9	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	8d be       	out	0x3d, r8	; 61
     e28:	59 c0       	rjmp	.+178    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     e2a:	80 91 1d 01 	lds	r24, 0x011D
     e2e:	81 3a       	cpi	r24, 0xA1	; 161
     e30:	09 f0       	breq	.+2      	; 0xe34 <HID_Device_ProcessControlRequest+0x18e>
     e32:	54 c0       	rjmp	.+168    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     e34:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	80 93 e8 00 	sts	0x00E8, r24
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e42:	80 ff       	sbrs	r24, 0
     e44:	fc cf       	rjmp	.-8      	; 0xe3e <HID_Device_ProcessControlRequest+0x198>
     e46:	f7 01       	movw	r30, r14
     e48:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e4a:	40 c0       	rjmp	.+128    	; 0xecc <HID_Device_ProcessControlRequest+0x226>
     e4c:	80 91 1d 01 	lds	r24, 0x011D
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e50:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e52:	09 f0       	breq	.+2      	; 0xe56 <HID_Device_ProcessControlRequest+0x1b0>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     e56:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	80 93 e8 00 	sts	0x00E8, r24
     e60:	39 dc       	rcall	.-1934   	; 0x6d4 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e62:	90 91 1f 01 	lds	r25, 0x011F
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	91 11       	cpse	r25, r1
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e70:	81 87       	std	Z+9, r24	; 0x09
     e72:	34 c0       	rjmp	.+104    	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     e74:	80 91 1d 01 	lds	r24, 0x011D
     e78:	81 32       	cpi	r24, 0x21	; 33
     e7a:	81 f5       	brne	.+96     	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
     e80:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e82:	80 93 e8 00 	sts	0x00E8, r24
     e86:	26 dc       	rcall	.-1972   	; 0x6d4 <Endpoint_ClearStatusStage>
     e88:	80 91 1f 01 	lds	r24, 0x011F
     e8c:	90 91 20 01 	lds	r25, 0x0120
     e90:	88 27       	eor	r24, r24
     e92:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e94:	96 95       	lsr	r25
     e96:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     e98:	3a 95       	dec	r19
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <HID_Device_ProcessControlRequest+0x1ee>
     e9c:	f7 01       	movw	r30, r14
     e9e:	95 87       	std	Z+13, r25	; 0x0d
     ea0:	84 87       	std	Z+12, r24	; 0x0c
     ea2:	1c c0       	rjmp	.+56     	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     ea4:	80 91 1d 01 	lds	r24, 0x011D
     ea8:	81 3a       	cpi	r24, 0xA1	; 161
     eaa:	c1 f4       	brne	.+48     	; 0xedc <HID_Device_ProcessControlRequest+0x236>
     eac:	80 91 e8 00 	lds	r24, 0x00E8
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     eb6:	80 91 e8 00 	lds	r24, 0x00E8
     eba:	80 ff       	sbrs	r24, 0
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <HID_Device_ProcessControlRequest+0x210>
     ebe:	f7 01       	movw	r30, r14
     ec0:	84 85       	ldd	r24, Z+12	; 0x0c
     ec2:	95 85       	ldd	r25, Z+13	; 0x0d
     ec4:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ec6:	87 95       	ror	r24
     ec8:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     eca:	87 95       	ror	r24
     ecc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     ed0:	80 91 e8 00 	lds	r24, 0x00E8
     ed4:	8e 77       	andi	r24, 0x7E	; 126
     ed6:	80 93 e8 00 	sts	0x00E8, r24
     eda:	fc db       	rcall	.-2056   	; 0x6d4 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee0:	be be       	out	0x3e, r11	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	ad be       	out	0x3d, r10	; 61
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
			}

			break;
	}
}
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	7f 90       	pop	r7
     f06:	6f 90       	pop	r6
     f08:	08 95       	ret

00000f0a <HID_Device_ConfigureEndpoints>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	39 96       	adiw	r30, 0x09	; 9
     f0e:	27 e0       	ldi	r18, 0x07	; 7
     f10:	df 01       	movw	r26, r30
     f12:	1d 92       	st	X+, r1
     f14:	2a 95       	dec	r18
     f16:	e9 f7       	brne	.-6      	; 0xf12 <HID_Device_ConfigureEndpoints+0x8>
     f18:	21 e0       	ldi	r18, 0x01	; 1
     f1a:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f1c:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f1e:	24 ef       	ldi	r18, 0xF4	; 244
     f20:	31 e0       	ldi	r19, 0x01	; 1
     f22:	35 87       	std	Z+13, r19	; 0x0d
     f24:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f26:	23 e0       	ldi	r18, 0x03	; 3
     f28:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	95 cb       	rjmp	.-2262   	; 0x65a <Endpoint_ConfigureEndpointTable>

00000f30 <HID_Device_USBTask>:
     f30:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f32:	6f 92       	push	r6
     f34:	7f 92       	push	r7
     f36:	8f 92       	push	r8
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <HID_Device_USBTask+0x20>
     f50:	1f 92       	push	r1
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     f58:	ad b6       	in	r10, 0x3d	; 61
     f5a:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     f5c:	80 91 1c 01 	lds	r24, 0x011C
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	09 f0       	breq	.+2      	; 0xf66 <HID_Device_USBTask+0x36>
     f64:	8a c0       	rjmp	.+276    	; 0x107a <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f66:	80 91 e4 00 	lds	r24, 0x00E4
     f6a:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     f6e:	f7 01       	movw	r30, r14
     f70:	22 85       	ldd	r18, Z+10	; 0x0a
     f72:	33 85       	ldd	r19, Z+11	; 0x0b
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	09 f4       	brne	.+2      	; 0xf7c <HID_Device_USBTask+0x4c>
     f7a:	7f c0       	rjmp	.+254    	; 0x107a <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	8f 70       	andi	r24, 0x0F	; 15
     f80:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f84:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     f88:	85 ff       	sbrs	r24, 5
     f8a:	77 c0       	rjmp	.+238    	; 0x107a <HID_Device_USBTask+0x14a>
     f8c:	8d b6       	in	r8, 0x3d	; 61
     f8e:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f90:	40 85       	ldd	r20, Z+8	; 0x08
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	8d b7       	in	r24, 0x3d	; 61
     f96:	9e b7       	in	r25, 0x3e	; 62
     f98:	84 1b       	sub	r24, r20
     f9a:	95 0b       	sbc	r25, r21
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	9e bf       	out	0x3e, r25	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	8d bf       	out	0x3d, r24	; 61
     fa6:	ed b7       	in	r30, 0x3d	; 61
     fa8:	fe b7       	in	r31, 0x3e	; 62
     faa:	31 96       	adiw	r30, 0x01	; 1
     fac:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     fae:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     fb0:	1a 82       	std	Y+2, r1	; 0x02
     fb2:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	cf 01       	movw	r24, r30
     fba:	8d d0       	rcall	.+282    	; 0x10d6 <memset>
     fbc:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     fbe:	0f 5f       	subi	r16, 0xFF	; 255
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	96 01       	movw	r18, r12
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	be 01       	movw	r22, r28
     fc8:	6d 5f       	subi	r22, 0xFD	; 253
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	c7 01       	movw	r24, r14
     fce:	37 d9       	rcall	.-3474   	; 0x23e <CALLBACK_HID_Device_CreateHIDReport>
     fd0:	68 2e       	mov	r6, r24
     fd2:	f7 01       	movw	r30, r14
     fd4:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     fd6:	95 85       	ldd	r25, Z+13	; 0x0d
     fd8:	89 2b       	or	r24, r25
     fda:	41 f0       	breq	.+16     	; 0xfec <HID_Device_USBTask+0xbc>
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	86 85       	ldd	r24, Z+14	; 0x0e
     fe0:	97 85       	ldd	r25, Z+15	; 0x0f
     fe2:	89 2b       	or	r24, r25
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <HID_Device_USBTask+0xb8>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	72 2e       	mov	r7, r18
     fea:	01 c0       	rjmp	.+2      	; 0xfee <HID_Device_USBTask+0xbe>
     fec:	71 2c       	mov	r7, r1
     fee:	f7 01       	movw	r30, r14
     ff0:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     ff2:	17 81       	ldd	r17, Z+7	; 0x07
     ff4:	01 15       	cp	r16, r1
     ff6:	11 05       	cpc	r17, r1
     ff8:	89 f0       	breq	.+34     	; 0x101c <HID_Device_USBTask+0xec>
     ffa:	49 81       	ldd	r20, Y+1	; 0x01
     ffc:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     ffe:	b8 01       	movw	r22, r16
    1000:	c6 01       	movw	r24, r12
    1002:	53 d0       	rcall	.+166    	; 0x10aa <memcmp>
    1004:	55 24       	eor	r5, r5
    1006:	53 94       	inc	r5
    1008:	89 2b       	or	r24, r25
    100a:	09 f4       	brne	.+2      	; 0x100e <HID_Device_USBTask+0xde>
    100c:	51 2c       	mov	r5, r1
    100e:	f7 01       	movw	r30, r14
    1010:	40 85       	ldd	r20, Z+8	; 0x08
    1012:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1014:	b6 01       	movw	r22, r12
    1016:	c8 01       	movw	r24, r16
    1018:	55 d0       	rcall	.+170    	; 0x10c4 <memcpy>
    101a:	01 c0       	rjmp	.+2      	; 0x101e <HID_Device_USBTask+0xee>
    101c:	51 2c       	mov	r5, r1
    101e:	29 81       	ldd	r18, Y+1	; 0x01
    1020:	3a 81       	ldd	r19, Y+2	; 0x02
    1022:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1024:	f1 f0       	breq	.+60     	; 0x1062 <HID_Device_USBTask+0x132>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1026:	61 10       	cpse	r6, r1
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <HID_Device_USBTask+0x102>
    102a:	51 10       	cpse	r5, r1
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <HID_Device_USBTask+0x102>
    102e:	70 fe       	sbrs	r7, 0
    1030:	18 c0       	rjmp	.+48     	; 0x1062 <HID_Device_USBTask+0x132>
    1032:	f7 01       	movw	r30, r14
    1034:	84 85       	ldd	r24, Z+12	; 0x0c
    1036:	95 85       	ldd	r25, Z+13	; 0x0d
    1038:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    103a:	86 87       	std	Z+14, r24	; 0x0e
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	8f 70       	andi	r24, 0x0F	; 15
    1040:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	81 11       	cpse	r24, r1
    1048:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    104c:	69 81       	ldd	r22, Y+1	; 0x01
    104e:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1054:	c6 01       	movw	r24, r12
    1056:	89 d9       	rcall	.-3310   	; 0x36a <Endpoint_Write_Stream_LE>
    1058:	80 91 e8 00 	lds	r24, 0x00E8
    105c:	8e 77       	andi	r24, 0x7E	; 126
    105e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1062:	80 91 e4 00 	lds	r24, 0x00E4
    1066:	90 91 e5 00 	lds	r25, 0x00E5
    106a:	f7 01       	movw	r30, r14
    106c:	93 87       	std	Z+11, r25	; 0x0b
    106e:	82 87       	std	Z+10, r24	; 0x0a
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1074:	9e be       	out	0x3e, r9	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	8d be       	out	0x3d, r8	; 61
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	be be       	out	0x3e, r11	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	ad be       	out	0x3d, r10	; 61
	}
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	9f 90       	pop	r9
    10a0:	8f 90       	pop	r8
    10a2:	7f 90       	pop	r7
    10a4:	6f 90       	pop	r6
    10a6:	5f 90       	pop	r5
    10a8:	08 95       	ret

000010aa <memcmp>:
    10aa:	fb 01       	movw	r30, r22
    10ac:	dc 01       	movw	r26, r24
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <memcmp+0xe>
    10b0:	8d 91       	ld	r24, X+
    10b2:	01 90       	ld	r0, Z+
    10b4:	80 19       	sub	r24, r0
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <memcmp+0x16>
    10b8:	41 50       	subi	r20, 0x01	; 1
    10ba:	50 40       	sbci	r21, 0x00	; 0
    10bc:	c8 f7       	brcc	.-14     	; 0x10b0 <memcmp+0x6>
    10be:	88 1b       	sub	r24, r24
    10c0:	99 0b       	sbc	r25, r25
    10c2:	08 95       	ret

000010c4 <memcpy>:
    10c4:	fb 01       	movw	r30, r22
    10c6:	dc 01       	movw	r26, r24
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <memcpy+0xa>
    10ca:	01 90       	ld	r0, Z+
    10cc:	0d 92       	st	X+, r0
    10ce:	41 50       	subi	r20, 0x01	; 1
    10d0:	50 40       	sbci	r21, 0x00	; 0
    10d2:	d8 f7       	brcc	.-10     	; 0x10ca <memcpy+0x6>
    10d4:	08 95       	ret

000010d6 <memset>:
    10d6:	dc 01       	movw	r26, r24
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <memset+0x6>
    10da:	6d 93       	st	X+, r22
    10dc:	41 50       	subi	r20, 0x01	; 1
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	e0 f7       	brcc	.-8      	; 0x10da <memset+0x4>
    10e2:	08 95       	ret

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>

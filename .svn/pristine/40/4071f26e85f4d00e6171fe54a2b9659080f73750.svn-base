
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002416  000024aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  000024d0  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110d  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005ef9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000430  00000000  00000000  00005f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000070b8  00000000  00000000  0000633a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ec6  00000000  00000000  0000d3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002bc0  00000000  00000000  0000f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c40  00000000  00000000  00011e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002af4  00000000  00000000  00012ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004c42  00000000  00000000  000155ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000508  00000000  00000000  0001a1ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	26 c2       	rjmp	.+1100   	; 0x44e <__ctors_end>
       2:	00 00       	nop
       4:	42 c2       	rjmp	.+1156   	; 0x48a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c2       	rjmp	.+1152   	; 0x48a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c2       	rjmp	.+1148   	; 0x48a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c2       	rjmp	.+1136   	; 0x48a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c2       	rjmp	.+1132   	; 0x48a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c2       	rjmp	.+1128   	; 0x48a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c2       	rjmp	.+1124   	; 0x48a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c2       	rjmp	.+1112   	; 0x48a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c2       	rjmp	.+1108   	; 0x48a <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c2       	rjmp	.+1100   	; 0x48a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c2       	rjmp	.+1096   	; 0x48a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c2       	rjmp	.+1092   	; 0x48a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	20 c2       	rjmp	.+1088   	; 0x48a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c2       	rjmp	.+1084   	; 0x48a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c2       	rjmp	.+1080   	; 0x48a <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	1a c2       	rjmp	.+1076   	; 0x48a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c2       	rjmp	.+1072   	; 0x48a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c2       	rjmp	.+1064   	; 0x48a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	12 c2       	rjmp	.+1060   	; 0x48a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c2       	rjmp	.+1056   	; 0x48a <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	0e c2       	rjmp	.+1052   	; 0x48a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c2       	rjmp	.+1048   	; 0x48a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c2       	rjmp	.+1044   	; 0x48a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c2       	rjmp	.+1040   	; 0x48a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c2       	rjmp	.+1036   	; 0x48a <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	04 c2       	rjmp	.+1032   	; 0x48a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c2       	rjmp	.+1028   	; 0x48a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c2       	rjmp	.+1024   	; 0x48a <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	fe c1       	rjmp	.+1020   	; 0x48a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c1       	rjmp	.+1016   	; 0x48a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	fa c1       	rjmp	.+1012   	; 0x48a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4724>:
      98:	20 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a       -- Error Code:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	20 25 64 1b 5b 33 37 6d 00                           %d.[37m.

000000b1 <__c.4722>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b1:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c1:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

000000cc <__c.4720>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      cc:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      dc:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

000000ec <__c.4706>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ec:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      fc:	6b 00                                               k.

000000fe <__c.4700>:
		ReportSize--;
      fe:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     11e:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     13e:	0a 0d 0a 00                                         ....

00000142 <__c.4695>:
     142:	0d 0a 00                                            ...

00000145 <__c.4688>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     145:	20 20 20 20 00                                          .

0000014a <__c.4683>:
				ReportData     += 4;
     14a:	25 2e 32 58 20 00                                   %.2X .

00000150 <__c.4677>:
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     160:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000016d <__c.4675>:
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     16d:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17d:	6b 00                                               k.

0000017f <__c.4672>:
				ReportData     += 1;
     17f:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18f:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

0000019a <__c.4670>:
     19a:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

000001a8 <__c.4667>:
     1a8:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     1b8:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

000001c2 <__c.4664>:
     1c2:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

000001d2 <__c.4661>:
     1d2:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     1e2:	61 64 79 2e 2e 00                                   ady...

000001e8 <__c.4659>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f8:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     208:	00                                                  .

00000209 <__c.4657>:
     209:	49 6e 71 75 69 72 79 00                             Inquiry.

00000211 <__c.4654>:
     211:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     221:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

0000022e <__c.4652>:
     22e:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

0000023c <__c.4649>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23c:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     24c:	65 74 00                                            et.

0000024f <__c.4647>:
     24f:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     26f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000027d <__c.4645>:

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27d:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

00000289 <__c.4639>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     289:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     299:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a9:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b9:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c9:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d9:	1b 5b 33 37 6d 00                                   .[37m.

000002df <__c.4632>:

				if (ParserData->UsingReportIDs)
     2df:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ef:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2ff:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000030e <__c.4627>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     30e:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31e:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

0000032e <__c.4625>:
     32e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     34e:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     35e:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     36e:	37 6d 00                                            7m.

00000371 <__c.4623>:
     371:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     381:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000038b <__c.4621>:
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     39b:	69 63 65 2e 0d 0a 00                                ice....

000003a2 <__c.4619>:
     3a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c2:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000003cc <__c.4616>:
     3cc:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	61 74 61 2e 0d 0a 00                                ata....

000003e3 <__c.4611>:
     3e3:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f3:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     403:	00                                                  .

00000404 <__c.4606>:
     404:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000421 <__c.4597>:

				if (UsageListSize)
     421:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     431:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn

					for (uint8_t i = 1; i < UsageListSize; i++)
     441:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000044e <__ctors_end>:
					  UsageList[i - 1] = UsageList[i];
     44e:	11 24       	eor	r1, r1
     450:	1f be       	out	0x3f, r1	; 63
     452:	cf ef       	ldi	r28, 0xFF	; 255

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	d0 e2       	ldi	r29, 0x20	; 32
     456:	de bf       	out	0x3e, r29	; 62
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	cd bf       	out	0x3d, r28	; 61

0000045a <__do_copy_data>:
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	e6 e1       	ldi	r30, 0x16	; 22
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	f4 e2       	ldi	r31, 0x24	; 36
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	0b bf       	out	0x3b, r16	; 59
     468:	02 c0       	rjmp	.+4      	; 0x46e <__do_copy_data+0x14>
     46a:	07 90       	elpm	r0, Z+
     46c:	0d 92       	st	X+, r0
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	a6 32       	cpi	r26, 0x26	; 38
     470:	b1 07       	cpc	r27, r17
     472:	d9 f7       	brne	.-10     	; 0x46a <__do_copy_data+0x10>

00000474 <__do_clear_bss>:
     474:	11 e0       	ldi	r17, 0x01	; 1
     476:	a6 e2       	ldi	r26, 0x26	; 38
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	01 c0       	rjmp	.+2      	; 0x47e <.do_clear_bss_start>

0000047c <.do_clear_bss_loop>:
     47c:	1d 92       	st	X+, r1

0000047e <.do_clear_bss_start>:
     47e:	a9 34       	cpi	r26, 0x49	; 73
     480:	b1 07       	cpc	r27, r17
     482:	e1 f7       	brne	.-8      	; 0x47c <.do_clear_bss_loop>
     484:	93 d2       	rcall	.+1318   	; 0x9ac <main>
     486:	0c 94 09 12 	jmp	0x2412	; 0x2412 <_exit>

0000048a <__bad_interrupt>:
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	ba cd       	rjmp	.-1164   	; 0x0 <__vectors>

0000048c <LEDs_SetAllLEDs>:
     48c:	9b b1       	in	r25, 0x0b	; 11
     48e:	9f 70       	andi	r25, 0x0F	; 15
     490:	98 2b       	or	r25, r24
     492:	9b b9       	out	0x0b, r25	; 11
     494:	08 95       	ret

00000496 <SetupHardware>:
     496:	84 b7       	in	r24, 0x34	; 52
     498:	87 7f       	andi	r24, 0xF7	; 247
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	84 bf       	out	0x34, r24	; 52
     49c:	88 e1       	ldi	r24, 0x18	; 24
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	80 93 60 00 	sts	0x0060, r24
     4a6:	10 92 60 00 	sts	0x0060, r1
     4aa:	0f be       	out	0x3f, r0	; 63
				break;
     4ac:	90 e0       	ldi	r25, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	80 e8       	ldi	r24, 0x80	; 128
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	80 93 61 00 	sts	0x0061, r24
     4b8:	90 93 61 00 	sts	0x0061, r25
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	83 e3       	ldi	r24, 0x33	; 51
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	90 93 cd 00 	sts	0x00CD, r25
     4c6:	80 93 cc 00 	sts	0x00CC, r24
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	86 e0       	ldi	r24, 0x06	; 6
     4cc:	80 93 ca 00 	sts	0x00CA, r24
     4d0:	10 92 c8 00 	sts	0x00C8, r1
     4d4:	88 e1       	ldi	r24, 0x18	; 24
     4d6:	80 93 c9 00 	sts	0x00C9, r24
     4da:	53 9a       	sbi	0x0a, 3	; 10
     4dc:	5a 9a       	sbi	0x0b, 2	; 11
     4de:	8a b1       	in	r24, 0x0a	; 10
     4e0:	80 6f       	ori	r24, 0xF0	; 240
     4e2:	8a b9       	out	0x0a, r24	; 10
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	8b b1       	in	r24, 0x0b	; 11
     4e6:	8f 70       	andi	r24, 0x0F	; 15
     4e8:	8b b9       	out	0x0b, r24	; 11
     4ea:	6a 98       	cbi	0x0d, 2	; 13
     4ec:	72 9a       	sbi	0x0e, 2	; 14
     4ee:	0e 94 05 0c 	call	0x180a	; 0x180a <USB_Init>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <Serial_CreateStream>

000004fa <EVENT_USB_Host_DeviceAttached>:
     4fa:	84 e0       	ldi	r24, 0x04	; 4
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 ea       	ldi	r24, 0xA0	; 160
     504:	c3 cf       	rjmp	.-122    	; 0x48c <LEDs_SetAllLEDs>

00000506 <EVENT_USB_Host_DeviceUnattached>:
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	83 ee       	ldi	r24, 0xE3	; 227
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     50e:	80 e1       	ldi	r24, 0x10	; 16
     510:	bd cf       	rjmp	.-134    	; 0x48c <LEDs_SetAllLEDs>

00000512 <EVENT_USB_Host_DeviceEnumerationComplete>:
     512:	cf 93       	push	r28
     514:	8c ec       	ldi	r24, 0xCC	; 204
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     51c:	74 d2       	rcall	.+1256   	; 0xa06 <ProcessConfigurationDescriptor>

					if (UsageListSize)
     51e:	c8 2f       	mov	r28, r24
     520:	88 23       	and	r24, r24
     522:	b9 f0       	breq	.+46     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	19 f4       	brne	.+6      	; 0x52e <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	82 ea       	ldi	r24, 0xA2	; 162
     52a:	93 e0       	ldi	r25, 0x03	; 3
     52c:	02 c0       	rjmp	.+4      	; 0x532 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     52e:	8b e8       	ldi	r24, 0x8B	; 139
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     536:	1f 92       	push	r1
     538:	cf 93       	push	r28
     53a:	81 e7       	ldi	r24, 0x71	; 113
     53c:	93 e0       	ldi	r25, 0x03	; 3

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
						  UsageList[i - 1] = UsageList[i];
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	80 e9       	ldi	r24, 0x90	; 144
     550:	0f c0       	rjmp	.+30     	; 0x570 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <USB_Host_SetDeviceConfiguration>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	88 23       	and	r24, r24
     55a:	29 f0       	breq	.+10     	; 0x566 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     55c:	1f 92       	push	r1
     55e:	8f 93       	push	r24
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	8e e2       	ldi	r24, 0x2E	; 46
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	ec cf       	rjmp	.-40     	; 0x53e <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     566:	8e e0       	ldi	r24, 0x0E	; 14
     568:	93 e0       	ldi	r25, 0x03	; 3
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     56e:	80 e6       	ldi	r24, 0x60	; 96
     570:	cf 91       	pop	r28
     572:	8c cf       	rjmp	.-232    	; 0x48c <LEDs_SetAllLEDs>

00000574 <EVENT_USB_Host_HostError>:
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	1f 92       	push	r1
     57a:	cd b7       	in	r28, 0x3d	; 61
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	89 83       	std	Y+1, r24	; 0x01
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	0e 94 9d 0b 	call	0x173a	; 0x173a <USB_Disable>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	1f 92       	push	r1
     586:	89 81       	ldd	r24, Y+1	; 0x01
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	8f 93       	push	r24
     58a:	8f ed       	ldi	r24, 0xDF	; 223
     58c:	92 e0       	ldi	r25, 0x02	; 2
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     596:	80 e9       	ldi	r24, 0x90	; 144
     598:	79 df       	rcall	.-270    	; 0x48c <LEDs_SetAllLEDs>
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <EVENT_USB_Host_HostError+0x2e>

000005a4 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5a4:	90 91 34 01 	lds	r25, 0x0134
     5a8:	1f 92       	push	r1
     5aa:	9f 93       	push	r25

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	1f 92       	push	r1
     5ae:	6f 93       	push	r22
     5b0:	1f 92       	push	r1
     5b2:	8f 93       	push	r24
     5b4:	89 e8       	ldi	r24, 0x89	; 137
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     5c0:	8d b7       	in	r24, 0x3d	; 61
     5c2:	9e b7       	in	r25, 0x3e	; 62
     5c4:	08 96       	adiw	r24, 0x08	; 8
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	9e bf       	out	0x3e, r25	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	8d bf       	out	0x3d, r24	; 61
     5d0:	80 e9       	ldi	r24, 0x90	; 144
     5d2:	5c cf       	rjmp	.-328    	; 0x48c <LEDs_SetAllLEDs>

000005d4 <ShowDiskReadError>:
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	1f 92       	push	r1
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	60 3c       	cpi	r22, 0xC0	; 192
     5e0:	69 f4       	brne	.+26     	; 0x5fc <ShowDiskReadError+0x28>
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	8c ec       	ldi	r24, 0xCC	; 204
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     5f2:	0f 90       	pop	r0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	17 c0       	rjmp	.+46     	; 0x62a <ShowDiskReadError+0x56>
     5fc:	9f 93       	push	r25
					  return HID_PARSE_InsufficientReportItems;
     5fe:	8f 93       	push	r24
     600:	81 eb       	ldi	r24, 0xB1	; 177

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	69 83       	std	Y+1, r22	; 0x01
     60a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     60e:	1f 92       	push	r1
     610:	69 81       	ldd	r22, Y+1	; 0x01
     612:	6f 93       	push	r22
     614:	88 e9       	ldi	r24, 0x98	; 152
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	80 91 a9 00 	lds	r24, 0x00A9
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	80 93 a9 00 	sts	0x00A9, r24
     634:	80 e9       	ldi	r24, 0x90	; 144
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	27 cf       	rjmp	.-434    	; 0x48c <LEDs_SetAllLEDs>

0000063e <MassStorageHost_Task>:
     63e:	2f 92       	push	r2
     640:	3f 92       	push	r3
     642:	4f 92       	push	r4
     644:	5f 92       	push	r5
     646:	6f 92       	push	r6
     648:	7f 92       	push	r7
     64a:	8f 92       	push	r8
     64c:	9f 92       	push	r9
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	ef 97       	sbiw	r28, 0x3f	; 63
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	2d b6       	in	r2, 0x3d	; 61
     674:	3e b6       	in	r3, 0x3e	; 62
     676:	80 91 34 01 	lds	r24, 0x0134
     67a:	8b 30       	cpi	r24, 0x0B	; 11
     67c:	09 f0       	breq	.+2      	; 0x680 <MassStorageHost_Task+0x42>
     67e:	78 c1       	rjmp	.+752    	; 0x970 <MassStorageHost_Task+0x332>
     680:	80 e2       	ldi	r24, 0x20	; 32
     682:	04 df       	rcall	.-504    	; 0x48c <LEDs_SetAllLEDs>
     684:	89 e2       	ldi	r24, 0x29	; 41
     686:	91 e0       	ldi	r25, 0x01	; 1
					  ParserData->TotalReportItems++;
     688:	cc d3       	rcall	.+1944   	; 0xe22 <MassStore_GetMaxLUN>
     68a:	88 23       	and	r24, r24
     68c:	21 f0       	breq	.+8      	; 0x696 <MassStorageHost_Task+0x58>
     68e:	68 2f       	mov	r22, r24
     690:	8d e7       	ldi	r24, 0x7D	; 125

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	71 c0       	rjmp	.+226    	; 0x778 <MassStorageHost_Task+0x13a>
     696:	80 91 29 01 	lds	r24, 0x0129
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	01 96       	adiw	r24, 0x01	; 1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	8f e4       	ldi	r24, 0x4F	; 79
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     6ae:	8a d3       	rcall	.+1812   	; 0xdc4 <MassStore_MassStorageReset>
     6b0:	0f 90       	pop	r0
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	88 23       	and	r24, r24
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	21 f0       	breq	.+8      	; 0x6c4 <MassStorageHost_Task+0x86>
     6bc:	68 2f       	mov	r22, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	8c e3       	ldi	r24, 0x3C	; 60
     6c0:	92 e0       	ldi	r25, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	5a c0       	rjmp	.+180    	; 0x778 <MassStorageHost_Task+0x13a>
     6c4:	be 01       	movw	r22, r28
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	6b 5d       	subi	r22, 0xDB	; 219
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	fd d3       	rcall	.+2042   	; 0xec8 <MassStore_RequestSense>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	88 23       	and	r24, r24
     6d0:	21 f0       	breq	.+8      	; 0x6da <MassStorageHost_Task+0x9c>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	68 2f       	mov	r22, r24
     6d4:	8e e2       	ldi	r24, 0x2E	; 46
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	92 e0       	ldi	r25, 0x02	; 2

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	4f c0       	rjmp	.+158    	; 0x778 <MassStorageHost_Task+0x13a>
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	fa d4       	rcall	.+2548   	; 0x10d4 <MassStore_PreventAllowMediumRemoval>
     6e0:	88 23       	and	r24, r24
     6e2:	21 f0       	breq	.+8      	; 0x6ec <MassStorageHost_Task+0xae>
     6e4:	68 2f       	mov	r22, r24
     6e6:	81 e1       	ldi	r24, 0x11	; 17
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	46 c0       	rjmp	.+140    	; 0x778 <MassStorageHost_Task+0x13a>
     6ec:	be 01       	movw	r22, r28
     6ee:	6f 5f       	subi	r22, 0xFF	; 255
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	b2 d3       	rcall	.+1892   	; 0xe5a <MassStore_Inquiry>
     6f6:	88 23       	and	r24, r24
     6f8:	21 f0       	breq	.+8      	; 0x702 <MassStorageHost_Task+0xc4>
     6fa:	68 2f       	mov	r22, r24
     6fc:	89 e0       	ldi	r24, 0x09	; 9
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	3b c0       	rjmp	.+118    	; 0x778 <MassStorageHost_Task+0x13a>
     702:	ce 01       	movw	r24, r28
     704:	41 96       	adiw	r24, 0x11	; 17
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	ce 01       	movw	r24, r28

	/* Get inquiry data from the device */
	SCSI_Inquiry_Response_t InquiryData;
	if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
	{
		ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     70c:	09 96       	adiw	r24, 0x09	; 9
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print vendor and product names of attached device */
	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	88 ee       	ldi	r24, 0xE8	; 232
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     71e:	82 ed       	ldi	r24, 0xD2	; 210
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0

	/* Wait until disk ready */
	puts_P(PSTR("Waiting until ready.."));
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	1e e2       	ldi	r17, 0x2E	; 46
     734:	80 91 c8 00 	lds	r24, 0x00C8
     738:	85 ff       	sbrs	r24, 5
     73a:	fc cf       	rjmp	.-8      	; 0x734 <MassStorageHost_Task+0xf6>
     73c:	10 93 ce 00 	sts	0x00CE, r17
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
     740:	80 91 34 01 	lds	r24, 0x0134
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	51 f0       	breq	.+20     	; 0x75c <MassStorageHost_Task+0x11e>
				UDR1 = DataByte;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	42 d4       	rcall	.+2180   	; 0xfd0 <MassStore_TestUnitReady>
	for (;;)
	{
		Serial_SendByte('.');

		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     74c:	88 23       	and	r24, r24
     74e:	31 f0       	breq	.+12     	; 0x75c <MassStorageHost_Task+0x11e>
     750:	80 3c       	cpi	r24, 0xC0	; 192
     752:	81 f3       	breq	.-32     	; 0x734 <MassStorageHost_Task+0xf6>
		  break;

		/* Check to see if the attached device is ready for new commands */
		ErrorCode = MassStore_TestUnitReady(0);
     754:	68 2f       	mov	r22, r24
     756:	82 ec       	ldi	r24, 0xC2	; 194
     758:	91 e0       	ldi	r25, 0x01	; 1

		/* If attached device is ready, abort the loop */
		if (!(ErrorCode))
     75a:	0e c0       	rjmp	.+28     	; 0x778 <MassStorageHost_Task+0x13a>
     75c:	88 ea       	ldi	r24, 0xA8	; 168
		  break;

		/* If an error other than a logical command failure (indicating device busy) returned, abort */
		if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
		{
			ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     764:	be 01       	movw	r22, r28
     766:	69 5c       	subi	r22, 0xC9	; 201
     768:	7f 4f       	sbci	r23, 0xFF	; 255
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("\r\nRetrieving Capacity... "));
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	5c d4       	rcall	.+2232   	; 0x1026 <MassStore_ReadCapacity>
     76e:	88 23       	and	r24, r24
     770:	41 f0       	breq	.+16     	; 0x782 <MassStorageHost_Task+0x144>

	/* Create new structure for the disk's capacity in blocks and block size */
	SCSI_Capacity_t DiskCapacity;

	/* Retrieve disk capacity */
	if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     772:	68 2f       	mov	r22, r24
     774:	8a e9       	ldi	r24, 0x9A	; 154
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	2d df       	rcall	.-422    	; 0x5d4 <ShowDiskReadError>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <USB_Host_SetDeviceConfiguration>
     780:	f7 c0       	rjmp	.+494    	; 0x970 <MassStorageHost_Task+0x332>
	{
		ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     782:	8e ad       	ldd	r24, Y+62	; 0x3e
     784:	8f 93       	push	r24
     786:	8d ad       	ldd	r24, Y+61	; 0x3d
     788:	8f 93       	push	r24
     78a:	8c ad       	ldd	r24, Y+60	; 0x3c
		USB_Host_SetDeviceConfiguration(0);
     78c:	8f 93       	push	r24
     78e:	8b ad       	ldd	r24, Y+59	; 0x3b
     790:	8f 93       	push	r24
		return;
     792:	8a ad       	ldd	r24, Y+58	; 0x3a
	}

	/* Display the disk capacity in blocks * block size bytes */
	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     794:	8f 93       	push	r24
     796:	89 ad       	ldd	r24, Y+57	; 0x39
     798:	8f 93       	push	r24
     79a:	88 ad       	ldd	r24, Y+56	; 0x38
     79c:	8f 93       	push	r24
     79e:	8f a9       	ldd	r24, Y+55	; 0x37
     7a0:	8f 93       	push	r24
     7a2:	8f e7       	ldi	r24, 0x7F	; 127
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     7ae:	0b ad       	ldd	r16, Y+59	; 0x3b
     7b0:	1c ad       	ldd	r17, Y+60	; 0x3c
     7b2:	2d ad       	ldd	r18, Y+61	; 0x3d
     7b4:	3e ad       	ldd	r19, Y+62	; 0x3e
     7b6:	8d b7       	in	r24, 0x3d	; 61
     7b8:	9e b7       	in	r25, 0x3e	; 62
     7ba:	0a 96       	adiw	r24, 0x0a	; 10
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli

	/* Create a new buffer capable of holding a single block from the device */
	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     7c0:	9e bf       	out	0x3e, r25	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	8d bf       	out	0x3d, r24	; 61
     7c6:	ad b6       	in	r10, 0x3d	; 61
     7c8:	be b6       	in	r11, 0x3e	; 62
     7ca:	ed b7       	in	r30, 0x3d	; 61
     7cc:	fe b7       	in	r31, 0x3e	; 62
     7ce:	e0 1b       	sub	r30, r16
     7d0:	f1 0b       	sbc	r31, r17
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	fe bf       	out	0x3e, r31	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	ed bf       	out	0x3d, r30	; 61
     7dc:	8d b7       	in	r24, 0x3d	; 61
     7de:	9e b7       	in	r25, 0x3e	; 62
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	6c 01       	movw	r12, r24
     7e4:	7c 01       	movw	r14, r24
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	ba 01       	movw	r22, r20
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	a2 d3       	rcall	.+1860   	; 0xf36 <MassStore_ReadDeviceBlock>
     7f2:	88 23       	and	r24, r24
     7f4:	21 f0       	breq	.+8      	; 0x7fe <MassStorageHost_Task+0x1c0>

	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     7f6:	68 2f       	mov	r22, r24
     7f8:	8d e6       	ldi	r24, 0x6D	; 109
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	70 c0       	rjmp	.+224    	; 0x8de <MassStorageHost_Task+0x2a0>
     7fe:	80 e5       	ldi	r24, 0x50	; 80
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     80a:	5a e4       	ldi	r21, 0x4A	; 74
     80c:	85 2e       	mov	r8, r21
     80e:	51 e0       	ldi	r21, 0x01	; 1
     810:	95 2e       	mov	r9, r21
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     812:	a8 01       	movw	r20, r16
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8b ad       	ldd	r24, Y+59	; 0x3b

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     81a:	9c ad       	ldd	r25, Y+60	; 0x3c
     81c:	ad ad       	ldd	r26, Y+61	; 0x3d
		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
     81e:	be ad       	ldd	r27, Y+62	; 0x3e
     820:	24 e0       	ldi	r18, 0x04	; 4
     822:	b6 95       	lsr	r27
     824:	a7 95       	ror	r26
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     826:	97 95       	ror	r25
     828:	87 95       	ror	r24
     82a:	2a 95       	dec	r18
     82c:	d1 f7       	brne	.-12     	; 0x822 <MassStorageHost_Task+0x1e4>
     82e:	48 17       	cp	r20, r24
     830:	59 07       	cpc	r21, r25
     832:	6a 07       	cpc	r22, r26
     834:	7b 07       	cpc	r23, r27
     836:	08 f0       	brcs	.+2      	; 0x83a <MassStorageHost_Task+0x1fc>
     838:	40 c0       	rjmp	.+128    	; 0x8ba <MassStorageHost_Task+0x27c>
     83a:	78 01       	movw	r14, r16
     83c:	34 e0       	ldi	r19, 0x04	; 4
     83e:	ee 0c       	add	r14, r14
     840:	ff 1c       	adc	r15, r15
     842:	3a 95       	dec	r19
     844:	e1 f7       	brne	.-8      	; 0x83e <MassStorageHost_Task+0x200>
     846:	ec 0c       	add	r14, r12
     848:	fd 1c       	adc	r15, r13
     84a:	37 01       	movw	r6, r14
     84c:	40 e1       	ldi	r20, 0x10	; 16
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     84e:	54 2e       	mov	r5, r20
     850:	f3 01       	movw	r30, r6
     852:	81 91       	ld	r24, Z+
     854:	3f 01       	movw	r6, r30
     856:	1f 92       	push	r1
     858:	8f 93       	push	r24
     85a:	9f 92       	push	r9
     85c:	8f 92       	push	r8
     85e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <printf_P>
     862:	5a 94       	dec	r5

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0

			printf_P(PSTR("%.2X "), CurrByte);
     86a:	0f 90       	pop	r0
     86c:	89 f7       	brne	.-30     	; 0x850 <MassStorageHost_Task+0x212>
     86e:	85 e4       	ldi	r24, 0x45	; 69
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     876:	20 e1       	ldi	r18, 0x10	; 16
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     878:	f7 01       	movw	r30, r14
     87a:	41 90       	ld	r4, Z+
     87c:	7f 01       	movw	r14, r30
     87e:	60 90 45 01 	lds	r6, 0x0145
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
		}

		puts_P(PSTR("    "));
     882:	70 90 46 01 	lds	r7, 0x0146
     886:	51 2c       	mov	r5, r1
     888:	c2 01       	movw	r24, r4
     88a:	2f af       	std	Y+63, r18	; 0x3f

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     88c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <isprint>
     890:	2f ad       	ldd	r18, Y+63	; 0x3f

			putchar(isprint(CurrByte) ? CurrByte : '.');
     892:	89 2b       	or	r24, r25
     894:	19 f4       	brne	.+6      	; 0x89c <MassStorageHost_Task+0x25e>
     896:	8e e2       	ldi	r24, 0x2E	; 46
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	01 c0       	rjmp	.+2      	; 0x89e <MassStorageHost_Task+0x260>
     89c:	c2 01       	movw	r24, r4
     89e:	b3 01       	movw	r22, r6
     8a0:	2f af       	std	Y+63, r18	; 0x3f
     8a2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
     8a6:	2f ad       	ldd	r18, Y+63	; 0x3f
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	31 f7       	brne	.-52     	; 0x878 <MassStorageHost_Task+0x23a>
     8ac:	82 e4       	ldi	r24, 0x42	; 66
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	ac cf       	rjmp	.-168    	; 0x812 <MassStorageHost_Task+0x1d4>
     8ba:	8e ef       	ldi	r24, 0xFE	; 254
     8bc:	90 e0       	ldi	r25, 0x00	; 0
		}

		puts_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     8be:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		puts_P(PSTR("\r\n"));
     8c2:	62 9b       	sbis	0x0c, 2	; 12
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <MassStorageHost_Task+0x292>
     8c6:	80 91 34 01 	lds	r24, 0x0134
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	d1 f7       	brne	.-12     	; 0x8c2 <MassStorageHost_Task+0x284>
		}

		puts_P(PSTR("\r\n"));
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     8ce:	4b c0       	rjmp	.+150    	; 0x966 <MassStorageHost_Task+0x328>
     8d0:	41 2c       	mov	r4, r1
     8d2:	51 2c       	mov	r5, r1
     8d4:	32 01       	movw	r6, r4

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     8d6:	23 c0       	rjmp	.+70     	; 0x91e <MassStorageHost_Task+0x2e0>
     8d8:	68 2f       	mov	r22, r24
	{
		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     8da:	8c ee       	ldi	r24, 0xEC	; 236
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	7a de       	rcall	.-780    	; 0x5d4 <ShowDiskReadError>
     8e0:	3f c0       	rjmp	.+126    	; 0x960 <MassStorageHost_Task+0x322>
     8e2:	0b ad       	ldd	r16, Y+59	; 0x3b
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     8e4:	1c ad       	ldd	r17, Y+60	; 0x3c
     8e6:	76 01       	movw	r14, r12
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	b3 01       	movw	r22, r6
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
		{
			ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     8ec:	a2 01       	movw	r20, r4
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	22 d3       	rcall	.+1604   	; 0xf36 <MassStore_ReadDeviceBlock>
     8f2:	81 11       	cpse	r24, r1
     8f4:	f1 cf       	rjmp	.-30     	; 0x8d8 <MassStorageHost_Task+0x29a>
     8f6:	86 01       	movw	r16, r12

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     8f8:	a8 01       	movw	r20, r16
     8fa:	4c 19       	sub	r20, r12
     8fc:	5d 09       	sbc	r21, r13
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	8b ad       	ldd	r24, Y+59	; 0x3b
     904:	9c ad       	ldd	r25, Y+60	; 0x3c
     906:	ad ad       	ldd	r26, Y+61	; 0x3d
     908:	be ad       	ldd	r27, Y+62	; 0x3e
     90a:	48 17       	cp	r20, r24
     90c:	59 07       	cpc	r21, r25
     90e:	6a 07       	cpc	r22, r26
     910:	7b 07       	cpc	r23, r27
     912:	78 f0       	brcs	.+30     	; 0x932 <MassStorageHost_Task+0x2f4>
     914:	ff ef       	ldi	r31, 0xFF	; 255
			USB_Host_SetDeviceConfiguration(0);
			return;
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     916:	4f 1a       	sub	r4, r31
     918:	5f 0a       	sbc	r5, r31
     91a:	6f 0a       	sbc	r6, r31
     91c:	7f 0a       	sbc	r7, r31
     91e:	8f a9       	ldd	r24, Y+55	; 0x37
     920:	98 ad       	ldd	r25, Y+56	; 0x38
     922:	a9 ad       	ldd	r26, Y+57	; 0x39
     924:	ba ad       	ldd	r27, Y+58	; 0x3a
     926:	48 16       	cp	r4, r24
     928:	59 06       	cpc	r5, r25
     92a:	6a 06       	cpc	r6, r26
		if (USB_HostState == HOST_STATE_Unattached)
		  return;
	}

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     92c:	7b 06       	cpc	r7, r27
     92e:	c8 f2       	brcs	.-78     	; 0x8e2 <MassStorageHost_Task+0x2a4>
     930:	15 c0       	rjmp	.+42     	; 0x95c <MassStorageHost_Task+0x31e>
     932:	f8 01       	movw	r30, r16
     934:	81 90       	ld	r8, Z+
     936:	8f 01       	movw	r16, r30
     938:	e0 90 45 01 	lds	r14, 0x0145
     93c:	f0 90 46 01 	lds	r15, 0x0146
     940:	91 2c       	mov	r9, r1
     942:	c4 01       	movw	r24, r8
     944:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <isprint>
     948:	89 2b       	or	r24, r25
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
		{
			char CurrByte = BlockBuffer[Byte];
     94a:	19 f4       	brne	.+6      	; 0x952 <MassStorageHost_Task+0x314>
     94c:	8e e2       	ldi	r24, 0x2E	; 46
     94e:	90 e0       	ldi	r25, 0x00	; 0

			putchar(isprint(CurrByte) ? CurrByte : '.');
     950:	01 c0       	rjmp	.+2      	; 0x954 <MassStorageHost_Task+0x316>
     952:	c4 01       	movw	r24, r8
     954:	b7 01       	movw	r22, r14
     956:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fputc>
     95a:	ce cf       	rjmp	.-100    	; 0x8f8 <MassStorageHost_Task+0x2ba>
     95c:	80 e6       	ldi	r24, 0x60	; 96
     95e:	96 dd       	rcall	.-1236   	; 0x48c <LEDs_SetAllLEDs>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <USB_Host_SetDeviceConfiguration>
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	be be       	out	0x3e, r11	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	ad be       	out	0x3d, r10	; 61
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
		}
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     974:	3e be       	out	0x3e, r3	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	2d be       	out	0x3d, r2	; 61
	USB_Host_SetDeviceConfiguration(0);
     97a:	ef 96       	adiw	r28, 0x3f	; 63
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
		USB_Host_SetDeviceConfiguration(0);
		return;
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	bf 90       	pop	r11
     998:	af 90       	pop	r10
     99a:	9f 90       	pop	r9
     99c:	8f 90       	pop	r8
     99e:	7f 90       	pop	r7
     9a0:	6f 90       	pop	r6
     9a2:	5f 90       	pop	r5
     9a4:	4f 90       	pop	r4
     9a6:	3f 90       	pop	r3
     9a8:	2f 90       	pop	r2
     9aa:	08 95       	ret

000009ac <main>:
     9ac:	74 dd       	rcall	.-1304   	; 0x496 <SetupHardware>
     9ae:	81 e2       	ldi	r24, 0x21	; 33
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	0e 94 75 0f 	call	0x1eea	; 0x1eea <puts_P>
     9b6:	80 e1       	ldi	r24, 0x10	; 16
     9b8:	69 dd       	rcall	.-1326   	; 0x48c <LEDs_SetAllLEDs>
     9ba:	78 94       	sei
     9bc:	40 de       	rcall	.-896    	; 0x63e <MassStorageHost_Task>
     9be:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <USB_USBTask>
     9c2:	fc cf       	rjmp	.-8      	; 0x9bc <main+0x10>

000009c4 <DComp_NextMSInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mass Storage Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
     9c4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     9c6:	81 81       	ldd	r24, Z+1	; 0x01
     9c8:	84 30       	cpi	r24, 0x04	; 4
     9ca:	59 f4       	brne	.+22     	; 0x9e2 <DComp_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     9cc:	85 81       	ldd	r24, Z+5	; 0x05
     9ce:	88 30       	cpi	r24, 0x08	; 8
     9d0:	41 f4       	brne	.+16     	; 0x9e2 <DComp_NextMSInterface+0x1e>
     9d2:	86 81       	ldd	r24, Z+6	; 0x06
     9d4:	86 30       	cpi	r24, 0x06	; 6
     9d6:	29 f4       	brne	.+10     	; 0x9e2 <DComp_NextMSInterface+0x1e>
		    (Interface->SubClass == MASS_STORE_SUBCLASS) &&
     9d8:	87 81       	ldd	r24, Z+7	; 0x07
     9da:	80 35       	cpi	r24, 0x50	; 80
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <DComp_NextMSInterface+0x1e>
		    (Interface->Protocol == MASS_STORE_PROTOCOL))
		{
			return DESCRIPTOR_SEARCH_Found;
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     9e2:	82 e0       	ldi	r24, 0x02	; 2
}
     9e4:	08 95       	ret

000009e6 <DComp_NextMSInterfaceBulkDataEndpoint>:
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     9e6:	fc 01       	movw	r30, r24
     9e8:	21 81       	ldd	r18, Z+1	; 0x01
     9ea:	25 30       	cpi	r18, 0x05	; 5
     9ec:	31 f4       	brne	.+12     	; 0x9fa <DComp_NextMSInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     9ee:	83 81       	ldd	r24, Z+3	; 0x03
     9f0:	83 70       	andi	r24, 0x03	; 3
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	31 f0       	breq	.+12     	; 0xa02 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     9fa:	24 30       	cpi	r18, 0x04	; 4
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <DComp_NextMSInterfaceBulkDataEndpoint+0x10>
	{
		return DESCRIPTOR_SEARCH_Fail;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     a02:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     a04:	08 95       	ret

00000a06 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	c4 50       	subi	r28, 0x04	; 4
     a20:	d2 40       	sbci	r29, 0x02	; 2
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     a2c:	ae 01       	movw	r20, r28
     a2e:	4f 5f       	subi	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	cd 5f       	subi	r28, 0xFD	; 253
     a34:	dd 4f       	sbci	r29, 0xFD	; 253
     a36:	59 83       	std	Y+1, r21	; 0x01
     a38:	48 83       	st	Y, r20
     a3a:	c3 50       	subi	r28, 0x03	; 3
     a3c:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	32 e0       	ldi	r19, 0x02	; 2
     a42:	be 01       	movw	r22, r28
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7d 4f       	sbci	r23, 0xFD	; 253
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	af d7       	rcall	.+3934   	; 0x19aa <USB_Host_GetDeviceConfigDescriptor>
     a4c:	85 30       	cpi	r24, 0x05	; 5
     a4e:	09 f4       	brne	.+2      	; 0xa52 <ProcessConfigurationDescriptor+0x4c>
     a50:	56 c0       	rjmp	.+172    	; 0xafe <ProcessConfigurationDescriptor+0xf8>
     a52:	86 30       	cpi	r24, 0x06	; 6
     a54:	21 f0       	breq	.+8      	; 0xa5e <ProcessConfigurationDescriptor+0x58>
     a56:	88 23       	and	r24, r24
     a58:	21 f0       	breq	.+8      	; 0xa62 <ProcessConfigurationDescriptor+0x5c>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     a5c:	53 c0       	rjmp	.+166    	; 0xb04 <ProcessConfigurationDescriptor+0xfe>
     a5e:	83 e0       	ldi	r24, 0x03	; 3
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     a60:	51 c0       	rjmp	.+162    	; 0xb04 <ProcessConfigurationDescriptor+0xfe>
     a62:	a1 2c       	mov	r10, r1
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a64:	b1 2c       	mov	r11, r1
     a66:	c1 2c       	mov	r12, r1
     a68:	d1 2c       	mov	r13, r1
     a6a:	00 e0       	ldi	r16, 0x00	; 0
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	01 15       	cp	r16, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     a70:	11 05       	cpc	r17, r1
     a72:	b9 f4       	brne	.+46     	; 0xaa2 <ProcessConfigurationDescriptor+0x9c>
     a74:	42 ee       	ldi	r20, 0xE2	; 226
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a76:	54 e0       	ldi	r21, 0x04	; 4
     a78:	be 01       	movw	r22, r28
     a7a:	6d 5f       	subi	r22, 0xFD	; 253
     a7c:	7d 4f       	sbci	r23, 0xFD	; 253
     a7e:	ce 01       	movw	r24, r28
     a80:	8f 5f       	subi	r24, 0xFF	; 255
     a82:	9d 4f       	sbci	r25, 0xFD	; 253
     a84:	ec d7       	rcall	.+4056   	; 0x1a5e <USB_GetNextDescriptorComp>
     a86:	81 11       	cpse	r24, r1
     a88:	3c c0       	rjmp	.+120    	; 0xb02 <ProcessConfigurationDescriptor+0xfc>
     a8a:	cd 5f       	subi	r28, 0xFD	; 253
     a8c:	dd 4f       	sbci	r29, 0xFD	; 253
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a8e:	08 81       	ld	r16, Y
     a90:	19 81       	ldd	r17, Y+1	; 0x01
     a92:	c3 50       	subi	r28, 0x03	; 3
     a94:	d2 40       	sbci	r29, 0x02	; 2
     a96:	c1 2c       	mov	r12, r1
     a98:	d1 2c       	mov	r13, r1

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     a9a:	e1 2c       	mov	r14, r1
     a9c:	f1 2c       	mov	r15, r1
			DataOUTEndpoint = NULL;
     a9e:	57 01       	movw	r10, r14
     aa0:	e6 cf       	rjmp	.-52     	; 0xa6e <ProcessConfigurationDescriptor+0x68>
     aa2:	43 ef       	ldi	r20, 0xF3	; 243
     aa4:	54 e0       	ldi	r21, 0x04	; 4

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     aa6:	be 01       	movw	r22, r28
     aa8:	6d 5f       	subi	r22, 0xFD	; 253
     aaa:	7d 4f       	sbci	r23, 0xFD	; 253
     aac:	ce 01       	movw	r24, r28
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	9d 4f       	sbci	r25, 0xFD	; 253
     ab2:	d5 d7       	rcall	.+4010   	; 0x1a5e <USB_GetNextDescriptorComp>
     ab4:	81 11       	cpse	r24, r1
     ab6:	de cf       	rjmp	.-68     	; 0xa74 <ProcessConfigurationDescriptor+0x6e>
     ab8:	cd 5f       	subi	r28, 0xFD	; 253
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     aba:	dd 4f       	sbci	r29, 0xFD	; 253
     abc:	e8 80       	ld	r14, Y
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     abe:	f9 80       	ldd	r15, Y+1	; 0x01
     ac0:	c3 50       	subi	r28, 0x03	; 3
     ac2:	d2 40       	sbci	r29, 0x02	; 2
     ac4:	f7 01       	movw	r30, r14
     ac6:	82 81       	ldd	r24, Z+2	; 0x02
     ac8:	87 ff       	sbrs	r24, 7

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <ProcessConfigurationDescriptor+0xca>
     acc:	67 01       	movw	r12, r14
     ace:	75 01       	movw	r14, r10
     ad0:	c1 14       	cp	r12, r1
		  DataINEndpoint  = EndpointData;
     ad2:	d1 04       	cpc	r13, r1

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     ad4:	21 f3       	breq	.-56     	; 0xa9e <ProcessConfigurationDescriptor+0x98>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     ad6:	e1 14       	cp	r14, r1
     ad8:	f1 04       	cpc	r15, r1
     ada:	09 f3       	breq	.-62     	; 0xa9e <ProcessConfigurationDescriptor+0x98>
     adc:	f6 01       	movw	r30, r12
     ade:	24 81       	ldd	r18, Z+4	; 0x04
     ae0:	35 81       	ldd	r19, Z+5	; 0x05
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     ae2:	01 e0       	ldi	r16, 0x01	; 1
     ae4:	42 81       	ldd	r20, Z+2	; 0x02
     ae6:	62 e0       	ldi	r22, 0x02	; 2
     ae8:	81 e8       	ldi	r24, 0x81	; 129
     aea:	7b d5       	rcall	.+2806   	; 0x15e2 <Pipe_ConfigurePipe>
     aec:	f7 01       	movw	r30, r14
     aee:	24 81       	ldd	r18, Z+4	; 0x04
     af0:	35 81       	ldd	r19, Z+5	; 0x05
     af2:	42 81       	ldd	r20, Z+2	; 0x02

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     af4:	62 e0       	ldi	r22, 0x02	; 2
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	74 d5       	rcall	.+2792   	; 0x15e2 <Pipe_ConfigurePipe>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <ProcessConfigurationDescriptor+0xfe>
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <ProcessConfigurationDescriptor+0xfe>
     b02:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     b04:	cc 5f       	subi	r28, 0xFC	; 252
     b06:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     b0c:	de bf       	out	0x3e, r29	; 62
	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	08 95       	ret

00000b28 <MassStore_WaitForDataReceived>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b28:	20 91 a2 00 	lds	r18, 0x00A2
     b2c:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b36:	80 91 a9 00 	lds	r24, 0x00A9
     b3a:	8f 7b       	andi	r24, 0xBF	; 191
     b3c:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_WaitForDataReceived(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b44:	62 e0       	ldi	r22, 0x02	; 2
     b46:	71 e0       	ldi	r23, 0x01	; 1
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b48:	40 91 a6 00 	lds	r20, 0x00A6
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     b4c:	40 fd       	sbrc	r20, 0
     b4e:	41 c0       	rjmp	.+130    	; 0xbd2 <MassStore_WaitForDataReceived+0xaa>
     b50:	40 91 a2 00 	lds	r20, 0x00A2
     b54:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     b58:	42 17       	cp	r20, r18
     b5a:	53 07       	cpc	r21, r19
     b5c:	29 f0       	breq	.+10     	; 0xb68 <MassStore_WaitForDataReceived+0x40>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     b5e:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	09 f4       	brne	.+2      	; 0xb66 <MassStore_WaitForDataReceived+0x3e>
     b64:	48 c0       	rjmp	.+144    	; 0xbf6 <MassStore_WaitForDataReceived+0xce>
     b66:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b68:	40 91 a9 00 	lds	r20, 0x00A9
     b6c:	40 64       	ori	r20, 0x40	; 64
     b6e:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b72:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b76:	40 91 a9 00 	lds	r20, 0x00A9
     b7a:	4f 7b       	andi	r20, 0xBF	; 191
     b7c:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b80:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     b84:	41 fd       	sbrc	r20, 1
     b86:	10 c0       	rjmp	.+32     	; 0xba8 <MassStore_WaitForDataReceived+0x80>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b88:	40 91 a9 00 	lds	r20, 0x00A9
     b8c:	40 64       	ori	r20, 0x40	; 64
     b8e:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b92:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b96:	40 91 a9 00 	lds	r20, 0x00A9
     b9a:	4f 7b       	andi	r20, 0xBF	; 191
     b9c:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ba0:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     ba4:	41 ff       	sbrs	r20, 1
     ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <MassStore_WaitForDataReceived+0x9c>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     ba8:	90 91 aa 00 	lds	r25, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     bac:	29 2f       	mov	r18, r25
     bae:	2f 70       	andi	r18, 0x0F	; 15
     bb0:	95 ff       	sbrs	r25, 5
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <MassStore_WaitForDataReceived+0x90>
     bb4:	80 e8       	ldi	r24, 0x80	; 128
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <MassStore_WaitForDataReceived+0x92>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     bba:	82 2b       	or	r24, r18
     bbc:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <USB_Host_ClearEndpointStall>

			return PIPE_RWSTREAM_PipeStalled;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	08 95       	ret
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     bc4:	40 91 34 01 	lds	r20, 0x0134
     bc8:	41 30       	cpi	r20, 0x01	; 1
     bca:	09 f0       	breq	.+2      	; 0xbce <MassStore_WaitForDataReceived+0xa6>
     bcc:	bd cf       	rjmp	.-134    	; 0xb48 <MassStore_WaitForDataReceived+0x20>
		  return PIPE_RWSTREAM_DeviceDisconnected;
     bce:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     bd0:	08 95       	ret
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bd8:	80 91 a9 00 	lds	r24, 0x00A9
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     be8:	80 91 a9 00 	lds	r24, 0x00A9
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Freeze();

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	08 95       	ret

00000bfa <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
     bfa:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
     bfc:	69 2f       	mov	r22, r25
     bfe:	78 2f       	mov	r23, r24
     c00:	83 2f       	mov	r24, r19
     c02:	92 2f       	mov	r25, r18
     c04:	08 95       	ret

00000c06 <MassStore_SendCommand.constprop.1>:
 *  \param[in] SCSICommandBlock  Pointer to a SCSI command block structure to send to the attached device
 *  \param[in,out] BufferPtr     Pointer to a buffer for the data to send or receive to/from the device, or NULL if no data
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_SendCommand(MS_CommandBlockWrapper_t* const SCSICommandBlock,
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	2f 97       	sbiw	r28, 0x0f	; 15
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	8c 01       	movw	r16, r24
     c26:	7b 01       	movw	r14, r22
                                     void* BufferPtr)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Wrap Tag value when invalid - MS class defines tag values of 0 and 0xFFFFFFFF to be invalid */
	if (++MassStore_Tag == 0xFFFFFFFF)
     c28:	40 91 00 01 	lds	r20, 0x0100
     c2c:	50 91 01 01 	lds	r21, 0x0101
     c30:	60 91 02 01 	lds	r22, 0x0102
     c34:	70 91 03 01 	lds	r23, 0x0103
     c38:	4f 5f       	subi	r20, 0xFF	; 255
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	6f 4f       	sbci	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	4f 3f       	cpi	r20, 0xFF	; 255
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	58 07       	cpc	r21, r24
     c46:	68 07       	cpc	r22, r24
     c48:	78 07       	cpc	r23, r24
     c4a:	49 f0       	breq	.+18     	; 0xc5e <MassStore_SendCommand.constprop.1+0x58>
     c4c:	40 93 00 01 	sts	0x0100, r20
     c50:	50 93 01 01 	sts	0x0101, r21
     c54:	60 93 02 01 	sts	0x0102, r22
     c58:	70 93 03 01 	sts	0x0103, r23
     c5c:	0c c0       	rjmp	.+24     	; 0xc76 <MassStore_SendCommand.constprop.1+0x70>
	  MassStore_Tag = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	80 93 00 01 	sts	0x0100, r24
     c6a:	90 93 01 01 	sts	0x0101, r25
     c6e:	a0 93 02 01 	sts	0x0102, r26
     c72:	b0 93 03 01 	sts	0x0103, r27

	/* Each transmission should have a unique tag value, increment before use */
	SCSICommandBlock->Tag = MassStore_Tag;
     c76:	80 91 00 01 	lds	r24, 0x0100
     c7a:	90 91 01 01 	lds	r25, 0x0101
     c7e:	a0 91 02 01 	lds	r26, 0x0102
     c82:	b0 91 03 01 	lds	r27, 0x0103
     c86:	f8 01       	movw	r30, r16
     c88:	84 83       	std	Z+4, r24	; 0x04
     c8a:	95 83       	std	Z+5, r25	; 0x05
     c8c:	a6 83       	std	Z+6, r26	; 0x06
     c8e:	b7 83       	std	Z+7, r27	; 0x07
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	d8 2e       	mov	r13, r24
     c94:	d0 92 a7 00 	sts	0x00A7, r13

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c98:	80 91 a9 00 	lds	r24, 0x00A9
     c9c:	8f 7b       	andi	r24, 0xBF	; 191
     c9e:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the OUT data pipe for CBW transmission */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the CBW command to the OUT pipe */
	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t), NULL)) !=
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	6f e1       	ldi	r22, 0x1F	; 31
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	c8 01       	movw	r24, r16
     cac:	00 d4       	rcall	.+2048   	; 0x14ae <Pipe_Write_Stream_LE>
     cae:	81 11       	cpse	r24, r1
     cb0:	54 c0       	rjmp	.+168    	; 0xd5a <MassStore_SendCommand.constprop.1+0x154>
     cb2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     cb6:	8b 77       	andi	r24, 0x7B	; 123
     cb8:	80 93 a6 00 	sts	0x00A6, r24
     cbc:	0e d5       	rcall	.+2588   	; 0x16da <Pipe_WaitUntilReady>

	/* Send the data in the OUT pipe to the attached device */
	Pipe_ClearOUT();

	/* Wait until command has been sent */
	Pipe_WaitUntilReady();
     cbe:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	80 93 a9 00 	sts	0x00A9, r24
     cc8:	e1 14       	cp	r14, r1
     cca:	f1 04       	cpc	r15, r1

	/* Freeze pipe after use */
	Pipe_Freeze();

	if (BufferPtr != NULL)
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <MassStore_SendCommand.constprop.1+0xca>
     cce:	4b c0       	rjmp	.+150    	; 0xd66 <MassStore_SendCommand.constprop.1+0x160>
     cd0:	f8 01       	movw	r30, r16
     cd2:	60 85       	ldd	r22, Z+8	; 0x08
 */
static uint8_t MassStore_SendReceiveData(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                         void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
     cd4:	71 85       	ldd	r23, Z+9	; 0x09
     cd6:	84 85       	ldd	r24, Z+12	; 0x0c
     cd8:	87 ff       	sbrs	r24, 7

	/* Check the direction of the SCSI command data stage */
	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
     cda:	1b c0       	rjmp	.+54     	; 0xd12 <MassStore_SendCommand.constprop.1+0x10c>
     cdc:	6e 87       	std	Y+14, r22	; 0x0e
     cde:	7f 87       	std	Y+15, r23	; 0x0f
	{
		/* Wait until the device has replied with some data */
		if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     ce0:	23 df       	rcall	.-442    	; 0xb28 <MassStore_WaitForDataReceived>
     ce2:	6e 85       	ldd	r22, Y+14	; 0x0e
     ce4:	7f 85       	ldd	r23, Y+15	; 0x0f
     ce6:	81 11       	cpse	r24, r1
     ce8:	36 c0       	rjmp	.+108    	; 0xd56 <MassStore_SendCommand.constprop.1+0x150>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cf0:	80 91 a9 00 	lds	r24, 0x00A9
     cf4:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     cf6:	80 93 a9 00 	sts	0x00A9, r24
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	c7 01       	movw	r24, r14
		/* Select the IN data pipe for data reception */
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Read in the block data from the pipe */
		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     d00:	23 d4       	rcall	.+2118   	; 0x1548 <Pipe_Read_Stream_LE>
     d02:	81 11       	cpse	r24, r1
     d04:	28 c0       	rjmp	.+80     	; 0xd56 <MassStore_SendCommand.constprop.1+0x150>
     d06:	80 91 a6 00 	lds	r24, 0x00A6
     d0a:	8e 77       	andi	r24, 0x7E	; 126
     d0c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d10:	1c c0       	rjmp	.+56     	; 0xd4a <MassStore_SendCommand.constprop.1+0x144>
     d12:	d0 92 a7 00 	sts	0x00A7, r13
     d16:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d1a:	8f 7b       	andi	r24, 0xBF	; 191
     d1c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	c7 01       	movw	r24, r14
     d26:	c3 d3       	rcall	.+1926   	; 0x14ae <Pipe_Write_Stream_LE>
		/* Select the OUT data pipe for data transmission */
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Write the block data to the pipe */
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     d28:	81 11       	cpse	r24, r1
     d2a:	15 c0       	rjmp	.+42     	; 0xd56 <MassStore_SendCommand.constprop.1+0x150>
     d2c:	80 91 a6 00 	lds	r24, 0x00A6
     d30:	8b 77       	andi	r24, 0x7B	; 123
     d32:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d36:	80 91 a6 00 	lds	r24, 0x00A6
     d3a:	82 fd       	sbrc	r24, 2
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <MassStore_SendCommand.constprop.1+0x144>
     d3e:	80 91 34 01 	lds	r24, 0x0134
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d42:	81 30       	cpi	r24, 0x01	; 1
		  return ErrorCode;

		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
     d44:	c1 f7       	brne	.-16     	; 0xd36 <MassStore_SendCommand.constprop.1+0x130>
     d46:	82 e0       	ldi	r24, 0x02	; 2
		{
			if (USB_HostState == HOST_STATE_Unattached)
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <MassStore_SendCommand.constprop.1+0x154>
     d4a:	80 91 a9 00 	lds	r24, 0x00A9
     d4e:	80 64       	ori	r24, 0x40	; 64
			  return PIPE_RWSTREAM_DeviceDisconnected;
     d50:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <MassStore_SendCommand.constprop.1+0x160>
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	30 f0       	brcs	.+12     	; 0xd66 <MassStore_SendCommand.constprop.1+0x160>
     d5a:	90 91 a9 00 	lds	r25, 0x00A9
     d5e:	90 64       	ori	r25, 0x40	; 64
	{
		/* Transfer the requested data (if any) to or from the device */
		ErrorCode = MassStore_SendReceiveData(SCSICommandBlock, (void*)BufferPtr);

		/* Only fail completely if the transfer fails without a STALL, as a logical STALL can be recovered from */
		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
     d60:	90 93 a9 00 	sts	0x00A9, r25
     d64:	21 c0       	rjmp	.+66     	; 0xda8 <MassStore_SendCommand.constprop.1+0x1a2>
     d66:	e0 de       	rcall	.-576    	; 0xb28 <MassStore_WaitForDataReceived>
     d68:	81 11       	cpse	r24, r1
     d6a:	1e c0       	rjmp	.+60     	; 0xda8 <MassStore_SendCommand.constprop.1+0x1a2>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 a7 00 	sts	0x00A7, r24
static uint8_t MassStore_GetReturnedStatus(MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* If an error in the command occurred, abort */
	if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     d72:	80 91 a9 00 	lds	r24, 0x00A9
     d76:	8f 7b       	andi	r24, 0xBF	; 191
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d78:	80 93 a9 00 	sts	0x00A9, r24
     d7c:	40 e0       	ldi	r20, 0x00	; 0

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	6d e0       	ldi	r22, 0x0D	; 13
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Load in the CSW from the attached device */
	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t), NULL)) !=
     d88:	df d3       	rcall	.+1982   	; 0x1548 <Pipe_Read_Stream_LE>
     d8a:	81 11       	cpse	r24, r1
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <MassStore_SendCommand.constprop.1+0x1a2>
     d8e:	80 91 a6 00 	lds	r24, 0x00A6
     d92:	8e 77       	andi	r24, 0x7E	; 126
     d94:	80 93 a6 00 	sts	0x00A6, r24
     d98:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	80 93 a9 00 	sts	0x00A9, r24
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	81 11       	cpse	r24, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     da6:	80 ec       	ldi	r24, 0xC0	; 192
     da8:	2f 96       	adiw	r28, 0x0f	; 15
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	/* Check to see if command failed */
	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
	  ErrorCode = MASS_STORE_SCSI_COMMAND_FAILED;
     db4:	df 91       	pop	r29
	}

	/* Retrieve the returned SCSI status from the device */
	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MassStore_GetReturnedStatus(&SCSIStatusBlock);
}
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	08 95       	ret

00000dc4 <MassStore_MassStorageReset>:
     dc4:	88 e0       	ldi	r24, 0x08	; 8
     dc6:	e5 e0       	ldi	r30, 0x05	; 5
     dc8:	f1 e0       	ldi	r31, 0x01	; 1
     dca:	ac e2       	ldi	r26, 0x2C	; 44
     dcc:	b1 e0       	ldi	r27, 0x01	; 1
     dce:	01 90       	ld	r0, Z+
     dd0:	0d 92       	st	X+, r0
 */
uint8_t MassStore_MassStorageReset(void)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     dd2:	8a 95       	dec	r24
     dd4:	e1 f7       	brne	.-8      	; 0xdce <MassStore_MassStorageReset+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dd6:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	99 d6       	rcall	.+3378   	; 0x1b12 <USB_Host_SendControlRequest>
     de0:	81 11       	cpse	r24, r1
     de2:	1e c0       	rjmp	.+60     	; 0xe20 <MassStore_MassStorageReset+0x5c>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 93 a7 00 	sts	0x00A7, r24
     dea:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     dee:	29 2f       	mov	r18, r25

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     df0:	2f 70       	andi	r18, 0x0F	; 15
     df2:	95 ff       	sbrs	r25, 5
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <MassStore_MassStorageReset+0x36>
     df6:	80 e8       	ldi	r24, 0x80	; 128
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <MassStore_MassStorageReset+0x38>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	82 2b       	or	r24, r18
	  return ErrorCode;

	/* Select first data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
     dfe:	ab d7       	rcall	.+3926   	; 0x1d56 <USB_Host_ClearEndpointStall>
     e00:	81 11       	cpse	r24, r1
     e02:	0e c0       	rjmp	.+28     	; 0xe20 <MassStore_MassStorageReset+0x5c>
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e0a:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     e0e:	29 2f       	mov	r18, r25
     e10:	2f 70       	andi	r18, 0x0F	; 15

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     e12:	95 ff       	sbrs	r25, 5
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <MassStore_MassStorageReset+0x56>
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <MassStore_MassStorageReset+0x58>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	82 2b       	or	r24, r18
     e1e:	9b c7       	rjmp	.+3894   	; 0x1d56 <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	/* Select second data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
     e20:	08 95       	ret

00000e22 <MassStore_GetMaxLUN>:
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
     e26:	ec 01       	movw	r28, r24
 */
uint8_t MassStore_GetMaxLUN(uint8_t* const MaxLUNIndex)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	ed e0       	ldi	r30, 0x0D	; 13
     e2c:	f1 e0       	ldi	r31, 0x01	; 1
     e2e:	ac e2       	ldi	r26, 0x2C	; 44
     e30:	b1 e0       	ldi	r27, 0x01	; 1
     e32:	01 90       	ld	r0, Z+
     e34:	0d 92       	st	X+, r0
     e36:	8a 95       	dec	r24
     e38:	e1 f7       	brne	.-8      	; 0xe32 <MassStore_GetMaxLUN+0x10>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e3a:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
     e3e:	ce 01       	movw	r24, r28
     e40:	68 d6       	rcall	.+3280   	; 0x1b12 <USB_Host_SendControlRequest>
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	39 f4       	brne	.+14     	; 0xe54 <MassStore_GetMaxLUN+0x32>
     e46:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     e4a:	8d 7f       	andi	r24, 0xFD	; 253
     e4c:	80 93 a6 00 	sts	0x00A6, r24
     e50:	18 82       	st	Y, r1
	{
		/* Clear the pipe stall */
		Pipe_ClearStall();

		/* Some faulty Mass Storage devices don't implement the GET_MAX_LUN request, so assume a single LUN */
		*MaxLUNIndex = 0;
     e52:	80 e0       	ldi	r24, 0x00	; 0

		/* Clear the error, and pretend the request executed correctly if the device STALLed it */
		ErrorCode = HOST_SENDCONTROL_Successful;
     e54:	df 91       	pop	r29
	}

	return ErrorCode;
}
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <MassStore_Inquiry>:
     e5a:	cf 93       	push	r28
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_Inquiry(const uint8_t LUNIndex,
                          SCSI_Inquiry_Response_t* const InquiryPtr)
{
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	6f 97       	sbiw	r28, 0x1f	; 31
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	9b 01       	movw	r18, r22
	/* Create a CBW with a SCSI command to issue INQUIRY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     e70:	fe 01       	movw	r30, r28
     e72:	31 96       	adiw	r30, 0x01	; 1
     e74:	9f e1       	ldi	r25, 0x1F	; 31
     e76:	df 01       	movw	r26, r30
     e78:	1d 92       	st	X+, r1
     e7a:	9a 95       	dec	r25
     e7c:	e9 f7       	brne	.-6      	; 0xe78 <MassStore_Inquiry+0x1e>
     e7e:	45 e5       	ldi	r20, 0x55	; 85
     e80:	53 e5       	ldi	r21, 0x53	; 83
     e82:	62 e4       	ldi	r22, 0x42	; 66
     e84:	73 e4       	ldi	r23, 0x43	; 67
     e86:	49 83       	std	Y+1, r20	; 0x01
     e88:	5a 83       	std	Y+2, r21	; 0x02
     e8a:	6b 83       	std	Y+3, r22	; 0x03
     e8c:	7c 83       	std	Y+4, r23	; 0x04
     e8e:	44 e2       	ldi	r20, 0x24	; 36
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	49 87       	std	Y+9, r20	; 0x09
     e98:	5a 87       	std	Y+10, r21	; 0x0a
     e9a:	6b 87       	std	Y+11, r22	; 0x0b
     e9c:	7c 87       	std	Y+12, r23	; 0x0c
     e9e:	90 e8       	ldi	r25, 0x80	; 128
     ea0:	9d 87       	std	Y+13, r25	; 0x0d
     ea2:	8e 87       	std	Y+14, r24	; 0x0e
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	8f 87       	std	Y+15, r24	; 0x0f
     ea8:	82 e1       	ldi	r24, 0x12	; 18
     eaa:	88 8b       	std	Y+16, r24	; 0x10
     eac:	84 e2       	ldi	r24, 0x24	; 36
     eae:	8c 8b       	std	Y+20, r24	; 0x14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, InquiryPtr);
     eb0:	b9 01       	movw	r22, r18
     eb2:	cf 01       	movw	r24, r30
     eb4:	a8 de       	rcall	.-688    	; 0xc06 <MassStore_SendCommand.constprop.1>
     eb6:	6f 96       	adiw	r28, 0x1f	; 31
}
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <MassStore_RequestSense>:
     ec8:	cf 93       	push	r28
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_RequestSense(const uint8_t LUNIndex,
                               SCSI_Request_Sense_Response_t* const SensePtr)
{
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	6f 97       	sbiw	r28, 0x1f	; 31
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	9b 01       	movw	r18, r22
	/* Create a CBW with a SCSI command to issue REQUEST SENSE command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     ede:	fe 01       	movw	r30, r28
     ee0:	31 96       	adiw	r30, 0x01	; 1
     ee2:	9f e1       	ldi	r25, 0x1F	; 31
     ee4:	df 01       	movw	r26, r30
     ee6:	1d 92       	st	X+, r1
     ee8:	9a 95       	dec	r25
     eea:	e9 f7       	brne	.-6      	; 0xee6 <MassStore_RequestSense+0x1e>
     eec:	45 e5       	ldi	r20, 0x55	; 85
     eee:	53 e5       	ldi	r21, 0x53	; 83
     ef0:	62 e4       	ldi	r22, 0x42	; 66
     ef2:	73 e4       	ldi	r23, 0x43	; 67
     ef4:	49 83       	std	Y+1, r20	; 0x01
     ef6:	5a 83       	std	Y+2, r21	; 0x02
     ef8:	6b 83       	std	Y+3, r22	; 0x03
     efa:	7c 83       	std	Y+4, r23	; 0x04
     efc:	42 e1       	ldi	r20, 0x12	; 18
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	49 87       	std	Y+9, r20	; 0x09
     f06:	5a 87       	std	Y+10, r21	; 0x0a
     f08:	6b 87       	std	Y+11, r22	; 0x0b
     f0a:	7c 87       	std	Y+12, r23	; 0x0c
     f0c:	90 e8       	ldi	r25, 0x80	; 128
     f0e:	9d 87       	std	Y+13, r25	; 0x0d
     f10:	8e 87       	std	Y+14, r24	; 0x0e
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	8f 87       	std	Y+15, r24	; 0x0f
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	88 8b       	std	Y+16, r24	; 0x10
     f1a:	82 e1       	ldi	r24, 0x12	; 18
     f1c:	8c 8b       	std	Y+20, r24	; 0x14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, SensePtr);
     f1e:	b9 01       	movw	r22, r18
     f20:	cf 01       	movw	r24, r30
     f22:	71 de       	rcall	.-798    	; 0xc06 <MassStore_SendCommand.constprop.1>
     f24:	6f 96       	adiw	r28, 0x1f	; 31
}
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <MassStore_ReadDeviceBlock>:
     f36:	af 92       	push	r10
uint8_t MassStore_ReadDeviceBlock(const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	6f 97       	sbiw	r28, 0x1f	; 31
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	c8 2e       	mov	r12, r24
     f5c:	b6 2e       	mov	r11, r22
     f5e:	a7 2e       	mov	r10, r23
     f60:	d2 2e       	mov	r13, r18
	/* Create a CBW with a SCSI command to read in the given blocks from the device */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     f62:	fe 01       	movw	r30, r28
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	8f e1       	ldi	r24, 0x1F	; 31
     f68:	df 01       	movw	r26, r30
     f6a:	1d 92       	st	X+, r1
     f6c:	8a 95       	dec	r24
     f6e:	e9 f7       	brne	.-6      	; 0xf6a <MassStore_ReadDeviceBlock+0x34>
     f70:	85 e5       	ldi	r24, 0x55	; 85
     f72:	93 e5       	ldi	r25, 0x53	; 83
     f74:	a2 e4       	ldi	r26, 0x42	; 66
     f76:	b3 e4       	ldi	r27, 0x43	; 67
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	ab 83       	std	Y+3, r26	; 0x03
     f7e:	bc 83       	std	Y+4, r27	; 0x04
		{
			.Signature          = MS_CBW_SIGNATURE,
			.DataTransferLength = ((uint32_t)Blocks * BlockSize),
     f80:	98 01       	movw	r18, r16
     f82:	ad 2d       	mov	r26, r13
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	45 d7       	rcall	.+3722   	; 0x1e12 <__umulhisi3>
     f88:	69 87       	std	Y+9, r22	; 0x09
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
	/* Create a CBW with a SCSI command to read in the given blocks from the device */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     f8a:	7a 87       	std	Y+10, r23	; 0x0a
     f8c:	8b 87       	std	Y+11, r24	; 0x0b
     f8e:	9c 87       	std	Y+12, r25	; 0x0c
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	8d 87       	std	Y+13, r24	; 0x0d
     f94:	ce 86       	std	Y+14, r12	; 0x0e
     f96:	8a e0       	ldi	r24, 0x0A	; 10
     f98:	8f 87       	std	Y+15, r24	; 0x0f
     f9a:	88 e2       	ldi	r24, 0x28	; 40
     f9c:	88 8b       	std	Y+16, r24	; 0x10
     f9e:	aa 8a       	std	Y+18, r10	; 0x12
     fa0:	bb 8a       	std	Y+19, r11	; 0x13
     fa2:	5c 8b       	std	Y+20, r21	; 0x14
     fa4:	4d 8b       	std	Y+21, r20	; 0x15
     fa6:	d8 8e       	std	Y+24, r13	; 0x18
     fa8:	b7 01       	movw	r22, r14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, BufferPtr);
     faa:	cf 01       	movw	r24, r30
     fac:	2c de       	rcall	.-936    	; 0xc06 <MassStore_SendCommand.constprop.1>
     fae:	6f 96       	adiw	r28, 0x1f	; 31
     fb0:	0f b6       	in	r0, 0x3f	; 63
}
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	08 95       	ret

00000fd0 <MassStore_TestUnitReady>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	6f 97       	sbiw	r28, 0x1f	; 31
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
	/* Create a CBW with a SCSI command to issue TEST UNIT READY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     fe4:	fe 01       	movw	r30, r28
     fe6:	31 96       	adiw	r30, 0x01	; 1
     fe8:	9f e1       	ldi	r25, 0x1F	; 31
     fea:	df 01       	movw	r26, r30
     fec:	1d 92       	st	X+, r1
     fee:	9a 95       	dec	r25
     ff0:	e9 f7       	brne	.-6      	; 0xfec <MassStore_TestUnitReady+0x1c>
     ff2:	45 e5       	ldi	r20, 0x55	; 85
     ff4:	53 e5       	ldi	r21, 0x53	; 83
     ff6:	62 e4       	ldi	r22, 0x42	; 66
     ff8:	73 e4       	ldi	r23, 0x43	; 67
     ffa:	49 83       	std	Y+1, r20	; 0x01
     ffc:	5a 83       	std	Y+2, r21	; 0x02
     ffe:	6b 83       	std	Y+3, r22	; 0x03
    1000:	7c 83       	std	Y+4, r23	; 0x04
    1002:	90 e8       	ldi	r25, 0x80	; 128
    1004:	9d 87       	std	Y+13, r25	; 0x0d
    1006:	8e 87       	std	Y+14, r24	; 0x0e
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	8f 87       	std	Y+15, r24	; 0x0f
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, NULL);
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	cf 01       	movw	r24, r30
    1012:	f9 dd       	rcall	.-1038   	; 0xc06 <MassStore_SendCommand.constprop.1>
    1014:	6f 96       	adiw	r28, 0x1f	; 31
}
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <MassStore_ReadCapacity>:
    1026:	ff 92       	push	r15
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	6f 97       	sbiw	r28, 0x1f	; 31
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Create a CBW with a SCSI command to issue READ CAPACITY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1042:	fe 01       	movw	r30, r28
    1044:	31 96       	adiw	r30, 0x01	; 1
    1046:	9f e1       	ldi	r25, 0x1F	; 31
    1048:	df 01       	movw	r26, r30
    104a:	1d 92       	st	X+, r1
    104c:	9a 95       	dec	r25
    104e:	e9 f7       	brne	.-6      	; 0x104a <MassStore_ReadCapacity+0x24>
    1050:	45 e5       	ldi	r20, 0x55	; 85
    1052:	53 e5       	ldi	r21, 0x53	; 83
    1054:	62 e4       	ldi	r22, 0x42	; 66
    1056:	73 e4       	ldi	r23, 0x43	; 67
    1058:	49 83       	std	Y+1, r20	; 0x01
    105a:	5a 83       	std	Y+2, r21	; 0x02
    105c:	6b 83       	std	Y+3, r22	; 0x03
    105e:	7c 83       	std	Y+4, r23	; 0x04
    1060:	48 e0       	ldi	r20, 0x08	; 8
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	49 87       	std	Y+9, r20	; 0x09
    106a:	5a 87       	std	Y+10, r21	; 0x0a
    106c:	6b 87       	std	Y+11, r22	; 0x0b
    106e:	7c 87       	std	Y+12, r23	; 0x0c
    1070:	90 e8       	ldi	r25, 0x80	; 128
    1072:	9d 87       	std	Y+13, r25	; 0x0d
    1074:	8e 87       	std	Y+14, r24	; 0x0e
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	8f 87       	std	Y+15, r24	; 0x0f
    107a:	85 e2       	ldi	r24, 0x25	; 37
    107c:	88 8b       	std	Y+16, r24	; 0x10
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
    107e:	b8 01       	movw	r22, r16
    1080:	cf 01       	movw	r24, r30
    1082:	c1 dd       	rcall	.-1150   	; 0xc06 <MassStore_SendCommand.constprop.1>
    1084:	f8 2e       	mov	r15, r24
    1086:	81 11       	cpse	r24, r1
    1088:	18 c0       	rjmp	.+48     	; 0x10ba <MassStore_ReadCapacity+0x94>
    108a:	f8 01       	movw	r30, r16
	  return ErrorCode;

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	b2 dd       	rcall	.-1180   	; 0xbfa <SwapEndian_32>
    1096:	d8 01       	movw	r26, r16
    1098:	6d 93       	st	X+, r22
    109a:	7d 93       	st	X+, r23
    109c:	8d 93       	st	X+, r24
    109e:	9c 93       	st	X, r25
    10a0:	13 97       	sbiw	r26, 0x03	; 3
    10a2:	14 96       	adiw	r26, 0x04	; 4
    10a4:	6d 91       	ld	r22, X+
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
    10a6:	7d 91       	ld	r23, X+
    10a8:	8d 91       	ld	r24, X+
    10aa:	9c 91       	ld	r25, X
    10ac:	17 97       	sbiw	r26, 0x07	; 7
    10ae:	a5 dd       	rcall	.-1206   	; 0xbfa <SwapEndian_32>
    10b0:	f8 01       	movw	r30, r16
    10b2:	64 83       	std	Z+4, r22	; 0x04
    10b4:	75 83       	std	Z+5, r23	; 0x05
    10b6:	86 83       	std	Z+6, r24	; 0x06
    10b8:	97 83       	std	Z+7, r25	; 0x07
    10ba:	8f 2d       	mov	r24, r15
    10bc:	6f 96       	adiw	r28, 0x1f	; 31
    10be:	0f b6       	in	r0, 0x3f	; 63

	return ErrorCode;
}
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	08 95       	ret

000010d4 <MassStore_PreventAllowMediumRemoval>:
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	6f 97       	sbiw	r28, 0x1f	; 31
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	96 2f       	mov	r25, r22
	/* Create a CBW with a SCSI command to issue PREVENT ALLOW MEDIUM REMOVAL command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    10ea:	fe 01       	movw	r30, r28
    10ec:	31 96       	adiw	r30, 0x01	; 1
    10ee:	2f e1       	ldi	r18, 0x1F	; 31
    10f0:	df 01       	movw	r26, r30
    10f2:	1d 92       	st	X+, r1
    10f4:	2a 95       	dec	r18
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <MassStore_PreventAllowMediumRemoval+0x1e>
    10f8:	45 e5       	ldi	r20, 0x55	; 85
    10fa:	53 e5       	ldi	r21, 0x53	; 83
    10fc:	62 e4       	ldi	r22, 0x42	; 66
    10fe:	73 e4       	ldi	r23, 0x43	; 67
    1100:	49 83       	std	Y+1, r20	; 0x01
    1102:	5a 83       	std	Y+2, r21	; 0x02
    1104:	6b 83       	std	Y+3, r22	; 0x03
    1106:	7c 83       	std	Y+4, r23	; 0x04
    1108:	8e 87       	std	Y+14, r24	; 0x0e
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	8f 87       	std	Y+15, r24	; 0x0f
    110e:	8e e1       	ldi	r24, 0x1E	; 30
    1110:	88 8b       	std	Y+16, r24	; 0x10
    1112:	9b 8b       	std	Y+19, r25	; 0x13
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, NULL);
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	cf 01       	movw	r24, r30
    111a:	75 dd       	rcall	.-1302   	; 0xc06 <MassStore_SendCommand.constprop.1>
    111c:	6f 96       	adiw	r28, 0x1f	; 31
}
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <USB_Host_ResetDevice>:
    112e:	80 91 9e 00 	lds	r24, 0x009E
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1132:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1134:	90 91 a0 00 	lds	r25, 0x00A0
    1138:	9d 7f       	andi	r25, 0xFD	; 253
    113a:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    113e:	90 91 9e 00 	lds	r25, 0x009E
    1142:	92 60       	ori	r25, 0x02	; 2
    1144:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    1148:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    114c:	91 fd       	sbrc	r25, 1
    114e:	fc cf       	rjmp	.-8      	; 0x1148 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1150:	90 91 9e 00 	lds	r25, 0x009E
    1154:	91 60       	ori	r25, 0x01	; 1
    1156:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    115a:	10 92 2a 01 	sts	0x012A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    115e:	90 91 a0 00 	lds	r25, 0x00A0
    1162:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1164:	20 91 a0 00 	lds	r18, 0x00A0
    1168:	2f 7d       	andi	r18, 0xDF	; 223
    116a:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    116e:	20 91 9f 00 	lds	r18, 0x009F
    1172:	2f 7d       	andi	r18, 0xDF	; 223
    1174:	20 93 9f 00 	sts	0x009F, r18
    1178:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    117a:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    117e:	35 ff       	sbrs	r19, 5
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1182:	20 91 9f 00 	lds	r18, 0x009F
    1186:	2f 7d       	andi	r18, 0xDF	; 223
    1188:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    118c:	20 91 9f 00 	lds	r18, 0x009F
    1190:	2d 7f       	andi	r18, 0xFD	; 253
    1192:	20 93 9f 00 	sts	0x009F, r18
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1198:	ef ec       	ldi	r30, 0xCF	; 207
    119a:	f7 e0       	ldi	r31, 0x07	; 7
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <USB_Host_ResetDevice+0x6e>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <USB_Host_ResetDevice+0x74>
    11a2:	00 00       	nop
    11a4:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    11a6:	49 f7       	brne	.-46     	; 0x117a <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    11a8:	99 23       	and	r25, r25
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    11ac:	90 91 a0 00 	lds	r25, 0x00A0
    11b0:	90 62       	ori	r25, 0x20	; 32
    11b2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    11b6:	81 11       	cpse	r24, r1
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11ba:	80 91 9e 00 	lds	r24, 0x009E
    11be:	8e 7f       	andi	r24, 0xFE	; 254
    11c0:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    11c4:	80 91 a0 00 	lds	r24, 0x00A0
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	80 93 a0 00 	sts	0x00A0, r24
    11ce:	08 95       	ret

000011d0 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11d0:	20 91 9e 00 	lds	r18, 0x009E
    11d4:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    11d6:	90 91 a0 00 	lds	r25, 0x00A0
    11da:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    11dc:	30 91 a0 00 	lds	r19, 0x00A0
    11e0:	3f 7d       	andi	r19, 0xDF	; 223
    11e2:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11e6:	30 91 9f 00 	lds	r19, 0x009F
    11ea:	3f 7d       	andi	r19, 0xDF	; 223
    11ec:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11f0:	30 91 9e 00 	lds	r19, 0x009E
    11f4:	31 60       	ori	r19, 0x01	; 1
    11f6:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    11fa:	88 23       	and	r24, r24
    11fc:	39 f1       	breq	.+78     	; 0x124c <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    11fe:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1202:	35 ff       	sbrs	r19, 5
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1206:	30 91 9f 00 	lds	r19, 0x009F
    120a:	3f 7d       	andi	r19, 0xDF	; 223
    120c:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1210:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1212:	30 91 34 01 	lds	r19, 0x0134
    1216:	31 30       	cpi	r19, 0x01	; 1
    1218:	c1 f0       	breq	.+48     	; 0x124a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    121a:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    121e:	34 ff       	sbrs	r19, 4
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1222:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1226:	80 91 a6 00 	lds	r24, 0x00A6
    122a:	8f 7e       	andi	r24, 0xEF	; 239
    122c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    1230:	82 e0       	ldi	r24, 0x02	; 2

			break;
    1232:	0c c0       	rjmp	.+24     	; 0x124c <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1234:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
    1238:	31 ff       	sbrs	r19, 1
    123a:	df cf       	rjmp	.-66     	; 0x11fa <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    123c:	80 91 a6 00 	lds	r24, 0x00A6
    1240:	8d 7f       	andi	r24, 0xFD	; 253
    1242:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1246:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1248:	01 c0       	rjmp	.+2      	; 0x124c <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    124a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    124c:	21 11       	cpse	r18, r1
    124e:	05 c0       	rjmp	.+10     	; 0x125a <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1250:	20 91 9e 00 	lds	r18, 0x009E
    1254:	2e 7f       	andi	r18, 0xFE	; 254
    1256:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    125a:	99 23       	and	r25, r25
    125c:	29 f0       	breq	.+10     	; 0x1268 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    125e:	90 91 a0 00 	lds	r25, 0x00A0
    1262:	90 62       	ori	r25, 0x20	; 32
    1264:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1268:	08 95       	ret

0000126a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	28 97       	sbiw	r28, 0x08	; 8
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1282:	80 91 34 01 	lds	r24, 0x0134
    1286:	85 30       	cpi	r24, 0x05	; 5
    1288:	09 f4       	brne	.+2      	; 0x128c <USB_Host_ProcessNextHostState+0x22>
    128a:	9c c0       	rjmp	.+312    	; 0x13c4 <USB_Host_ProcessNextHostState+0x15a>
    128c:	68 f4       	brcc	.+26     	; 0x12a8 <USB_Host_ProcessNextHostState+0x3e>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	e1 f1       	breq	.+120    	; 0x130a <USB_Host_ProcessNextHostState+0xa0>
    1292:	18 f4       	brcc	.+6      	; 0x129a <USB_Host_ProcessNextHostState+0x30>
    1294:	88 23       	and	r24, r24
    1296:	d9 f0       	breq	.+54     	; 0x12ce <USB_Host_ProcessNextHostState+0x64>
    1298:	ff c0       	rjmp	.+510    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	09 f4       	brne	.+2      	; 0x12a0 <USB_Host_ProcessNextHostState+0x36>
    129e:	3f c0       	rjmp	.+126    	; 0x131e <USB_Host_ProcessNextHostState+0xb4>
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <USB_Host_ProcessNextHostState+0x3c>
    12a4:	67 c0       	rjmp	.+206    	; 0x1374 <USB_Host_ProcessNextHostState+0x10a>
    12a6:	f8 c0       	rjmp	.+496    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    12a8:	87 30       	cpi	r24, 0x07	; 7
    12aa:	09 f4       	brne	.+2      	; 0x12ae <USB_Host_ProcessNextHostState+0x44>
    12ac:	a6 c0       	rjmp	.+332    	; 0x13fa <USB_Host_ProcessNextHostState+0x190>
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <USB_Host_ProcessNextHostState+0x48>
    12b0:	96 c0       	rjmp	.+300    	; 0x13de <USB_Host_ProcessNextHostState+0x174>
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <USB_Host_ProcessNextHostState+0x4e>
    12b6:	bf c0       	rjmp	.+382    	; 0x1436 <USB_Host_ProcessNextHostState+0x1cc>
    12b8:	89 30       	cpi	r24, 0x09	; 9
    12ba:	09 f0       	breq	.+2      	; 0x12be <USB_Host_ProcessNextHostState+0x54>
    12bc:	ed c0       	rjmp	.+474    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    12c4:	8a e0       	ldi	r24, 0x0A	; 10
    12c6:	80 93 34 01 	sts	0x0134, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    12ca:	23 d9       	rcall	.-3514   	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete>
    12cc:	e5 c0       	rjmp	.+458    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
			break;
    12ce:	00 91 27 01 	lds	r16, 0x0127
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    12d2:	10 91 28 01 	lds	r17, 0x0128
    12d6:	01 15       	cp	r16, r1
    12d8:	11 05       	cpc	r17, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <USB_Host_ProcessNextHostState+0x74>
    12dc:	dd c0       	rjmp	.+442    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    12de:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12e0:	77 df       	rcall	.-274    	; 0x11d0 <USB_Host_WaitMS>
    12e2:	88 23       	and	r24, r24
    12e4:	31 f0       	breq	.+12     	; 0x12f2 <USB_Host_ProcessNextHostState+0x88>
    12e6:	90 91 26 01 	lds	r25, 0x0126
				{
					USB_HostState = PostWaitState;
    12ea:	90 93 34 01 	sts	0x0134, r25
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	c5 c0       	rjmp	.+394    	; 0x147c <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    12f2:	01 50       	subi	r16, 0x01	; 1
					break;
    12f4:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
    12f6:	10 93 28 01 	sts	0x0128, r17
    12fa:	00 93 27 01 	sts	0x0127, r16
    12fe:	01 2b       	or	r16, r17
    1300:	09 f0       	breq	.+2      	; 0x1304 <USB_Host_ProcessNextHostState+0x9a>
    1302:	ca c0       	rjmp	.+404    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    1304:	80 91 26 01 	lds	r24, 0x0126
				  USB_HostState = PostWaitState;
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <USB_Host_ProcessNextHostState+0xae>
    130a:	88 ee       	ldi	r24, 0xE8	; 232
    130c:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    130e:	90 93 28 01 	sts	0x0128, r25
    1312:	80 93 27 01 	sts	0x0127, r24
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	80 93 34 01 	sts	0x0134, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    131c:	bd c0       	rjmp	.+378    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    131e:	80 91 27 01 	lds	r24, 0x0127
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1322:	90 91 28 01 	lds	r25, 0x0128
    1326:	9c 01       	movw	r18, r24
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	31 09       	sbc	r19, r1
    132c:	30 93 28 01 	sts	0x0128, r19
    1330:	20 93 27 01 	sts	0x0127, r18
    1334:	89 2b       	or	r24, r25
    1336:	39 f0       	breq	.+14     	; 0x1346 <USB_Host_ProcessNextHostState+0xdc>
    1338:	8f ec       	ldi	r24, 0xCF	; 207
    133a:	97 e0       	ldi	r25, 0x07	; 7
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <USB_Host_ProcessNextHostState+0xd2>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <USB_Host_ProcessNextHostState+0xd8>
    1342:	00 00       	nop
    1344:	a9 c0       	rjmp	.+338    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    1346:	77 98       	cbi	0x0e, 7	; 14
    1348:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    134c:	80 61       	ori	r24, 0x10	; 16
    134e:	80 93 d8 00 	sts	0x00D8, r24
    1352:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1356:	8b 7f       	andi	r24, 0xFB	; 251
    1358:	80 93 dd 00 	sts	0x00DD, r24
    135c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1360:	80 61       	ori	r24, 0x10	; 16
    1362:	80 93 d7 00 	sts	0x00D7, r24
    1366:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	80 93 dd 00 	sts	0x00DD, r24
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	d2 cf       	rjmp	.-92     	; 0x1318 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1374:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1378:	80 ff       	sbrs	r24, 0
    137a:	8e c0       	rjmp	.+284    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    137c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1380:	8e 7f       	andi	r24, 0xFE	; 254
    1382:	80 93 9f 00 	sts	0x009F, r24
    1386:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    138a:	8d 7f       	andi	r24, 0xFD	; 253
    138c:	80 93 9f 00 	sts	0x009F, r24
    1390:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1394:	8d 7f       	andi	r24, 0xFD	; 253
    1396:	80 93 df 00 	sts	0x00DF, r24
    139a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    139e:	82 60       	ori	r24, 0x02	; 2
    13a0:	80 93 de 00 	sts	0x00DE, r24
    13a4:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	80 93 9e 00 	sts	0x009E, r24
    13ae:	81 d1       	rcall	.+770    	; 0x16b2 <Pipe_ClearPipes>
    13b0:	10 92 34 01 	sts	0x0134, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    13b4:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 28 01 	sts	0x0128, r25
    13bc:	80 93 27 01 	sts	0x0127, r24
    13c0:	85 e0       	ldi	r24, 0x05	; 5
    13c2:	0a c0       	rjmp	.+20     	; 0x13d8 <USB_Host_ProcessNextHostState+0x16e>
    13c4:	b4 de       	rcall	.-664    	; 0x112e <USB_Host_ResetDevice>
    13c6:	10 92 34 01 	sts	0x0134, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    13ce:	90 93 28 01 	sts	0x0128, r25
    13d2:	80 93 27 01 	sts	0x0127, r24
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	80 93 26 01 	sts	0x0126, r24
    13dc:	5d c0       	rjmp	.+186    	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    13de:	01 e0       	ldi	r16, 0x01	; 1
    13e0:	20 e4       	ldi	r18, 0x40	; 64
    13e2:	30 e0       	ldi	r19, 0x00	; 0
			break;
    13e4:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	fb d0       	rcall	.+502    	; 0x15e2 <Pipe_ConfigurePipe>
    13ec:	81 11       	cpse	r24, r1
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <USB_Host_ProcessNextHostState+0x18c>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	94 e0       	ldi	r25, 0x04	; 4
    13f4:	43 c0       	rjmp	.+134    	; 0x147c <USB_Host_ProcessNextHostState+0x212>
    13f6:	87 e0       	ldi	r24, 0x07	; 7
    13f8:	8f cf       	rjmp	.-226    	; 0x1318 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    13fa:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    13fc:	e5 e1       	ldi	r30, 0x15	; 21
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1400:	ac e2       	ldi	r26, 0x2C	; 44
    1402:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1404:	01 90       	ld	r0, Z+
    1406:	0d 92       	st	X+, r0
    1408:	8a 95       	dec	r24
    140a:	e1 f7       	brne	.-8      	; 0x1404 <USB_Host_ProcessNextHostState+0x19a>
    140c:	10 92 a7 00 	sts	0x00A7, r1
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	7e d3       	rcall	.+1788   	; 0x1b12 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1416:	81 11       	cpse	r24, r1
    1418:	30 c0       	rjmp	.+96     	; 0x147a <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    141a:	88 85       	ldd	r24, Y+8	; 0x08
    141c:	80 93 04 01 	sts	0x0104, r24
    1420:	86 de       	rcall	.-756    	; 0x112e <USB_Host_ResetDevice>
    1422:	10 92 34 01 	sts	0x0134, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	90 93 28 01 	sts	0x0128, r25

			USB_Host_ResetDevice();
    142e:	80 93 27 01 	sts	0x0127, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1432:	88 e0       	ldi	r24, 0x08	; 8
    1434:	d1 cf       	rjmp	.-94     	; 0x13d8 <USB_Host_ProcessNextHostState+0x16e>
    1436:	20 91 04 01 	lds	r18, 0x0104
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	01 e0       	ldi	r16, 0x01	; 1
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1444:	ce d0       	rcall	.+412    	; 0x15e2 <Pipe_ConfigurePipe>
    1446:	88 23       	and	r24, r24
    1448:	99 f2       	breq	.-90     	; 0x13f0 <USB_Host_ProcessNextHostState+0x186>
    144a:	88 e0       	ldi	r24, 0x08	; 8
    144c:	ed e1       	ldi	r30, 0x1D	; 29
    144e:	f1 e0       	ldi	r31, 0x01	; 1
    1450:	ac e2       	ldi	r26, 0x2C	; 44
    1452:	b1 e0       	ldi	r27, 0x01	; 1
    1454:	01 90       	ld	r0, Z+
    1456:	0d 92       	st	X+, r0
    1458:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    145a:	e1 f7       	brne	.-8      	; 0x1454 <USB_Host_ProcessNextHostState+0x1ea>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	58 d3       	rcall	.+1712   	; 0x1b12 <USB_Host_SendControlRequest>
    1462:	81 11       	cpse	r24, r1
    1464:	0a c0       	rjmp	.+20     	; 0x147a <USB_Host_ProcessNextHostState+0x210>
    1466:	10 92 34 01 	sts	0x0134, r1
    146a:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	90 93 28 01 	sts	0x0128, r25
    1472:	80 93 27 01 	sts	0x0127, r24
    1476:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1478:	af cf       	rjmp	.-162    	; 0x13d8 <USB_Host_ProcessNextHostState+0x16e>
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	20 91 34 01 	lds	r18, 0x0134
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	51 f0       	breq	.+20     	; 0x1498 <USB_Host_ProcessNextHostState+0x22e>
    1484:	68 2f       	mov	r22, r24
    1486:	89 2f       	mov	r24, r25
    1488:	8d d8       	rcall	.-3814   	; 0x5a4 <EVENT_USB_Host_DeviceEnumerationFailed>
    148a:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	80 93 dd 00 	sts	0x00DD, r24
    1494:	38 d8       	rcall	.-3984   	; 0x506 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1496:	69 d1       	rcall	.+722    	; 0x176a <USB_ResetInterface>
    1498:	28 96       	adiw	r28, 0x08	; 8
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16

		USB_ResetInterface();
    14ac:	08 95       	ret

000014ae <Pipe_Write_Stream_LE>:
    14ae:	cf 92       	push	r12
	}
}
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	7c 01       	movw	r14, r24
    14c0:	8b 01       	movw	r16, r22
    14c2:	ea 01       	movw	r28, r20
    14c4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14c8:	8f 7c       	andi	r24, 0xCF	; 207
    14ca:	80 62       	ori	r24, 0x20	; 32
    14cc:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    14d0:	04 d1       	rcall	.+520    	; 0x16da <Pipe_WaitUntilReady>
    14d2:	81 11       	cpse	r24, r1
    14d4:	30 c0       	rjmp	.+96     	; 0x1536 <Pipe_Write_Stream_LE+0x88>
    14d6:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <Pipe_Write_Stream_LE+0x38>
    14da:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    14dc:	99 81       	ldd	r25, Y+1	; 0x01
    14de:	08 1b       	sub	r16, r24
    14e0:	19 0b       	sbc	r17, r25
    14e2:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14e4:	f9 1e       	adc	r15, r25
    14e6:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14e8:	d1 2c       	mov	r13, r1
    14ea:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    14ec:	11 05       	cpc	r17, r1
    14ee:	11 f1       	breq	.+68     	; 0x1534 <Pipe_Write_Stream_LE+0x86>
    14f0:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14f4:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <Pipe_Write_Stream_LE+0x70>
    14f8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14fc:	8b 77       	andi	r24, 0x7B	; 123
    14fe:	80 93 a6 00 	sts	0x00A6, r24
    1502:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1504:	41 f0       	breq	.+16     	; 0x1516 <Pipe_Write_Stream_LE+0x68>
    1506:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1508:	99 81       	ldd	r25, Y+1	; 0x01
    150a:	8c 0d       	add	r24, r12
    150c:	9d 1d       	adc	r25, r13
    150e:	99 83       	std	Y+1, r25	; 0x01
    1510:	88 83       	st	Y, r24
    1512:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <Pipe_Write_Stream_LE+0x88>
    1516:	e1 d0       	rcall	.+450    	; 0x16da <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1518:	88 23       	and	r24, r24
    151a:	39 f3       	breq	.-50     	; 0x14ea <Pipe_Write_Stream_LE+0x3c>
    151c:	0c c0       	rjmp	.+24     	; 0x1536 <Pipe_Write_Stream_LE+0x88>
    151e:	f7 01       	movw	r30, r14
    1520:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1522:	7f 01       	movw	r14, r30
    1524:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1528:	01 50       	subi	r16, 0x01	; 1
    152a:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    152c:	ff ef       	ldi	r31, 0xFF	; 255
    152e:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1530:	df 0a       	sbc	r13, r31
    1532:	db cf       	rjmp	.-74     	; 0x14ea <Pipe_Write_Stream_LE+0x3c>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    1538:	cf 91       	pop	r28
}
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	08 95       	ret

00001548 <Pipe_Read_Stream_LE>:
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	7c 01       	movw	r14, r24
    155a:	8b 01       	movw	r16, r22
    155c:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    155e:	80 91 aa 00 	lds	r24, 0x00AA
    1562:	8f 7c       	andi	r24, 0xCF	; 207
    1564:	80 61       	ori	r24, 0x10	; 16
    1566:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    156a:	b7 d0       	rcall	.+366    	; 0x16da <Pipe_WaitUntilReady>
    156c:	81 11       	cpse	r24, r1
    156e:	30 c0       	rjmp	.+96     	; 0x15d0 <Pipe_Read_Stream_LE+0x88>
    1570:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1572:	31 f0       	breq	.+12     	; 0x1580 <Pipe_Read_Stream_LE+0x38>
    1574:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1576:	99 81       	ldd	r25, Y+1	; 0x01
    1578:	08 1b       	sub	r16, r24
    157a:	19 0b       	sbc	r17, r25
    157c:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    157e:	f9 1e       	adc	r15, r25
    1580:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1582:	d1 2c       	mov	r13, r1
    1584:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1586:	11 05       	cpc	r17, r1
    1588:	11 f1       	breq	.+68     	; 0x15ce <Pipe_Read_Stream_LE+0x86>
    158a:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    158e:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1590:	13 c0       	rjmp	.+38     	; 0x15b8 <Pipe_Read_Stream_LE+0x70>
    1592:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1596:	8e 77       	andi	r24, 0x7E	; 126
    1598:	80 93 a6 00 	sts	0x00A6, r24
    159c:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    159e:	41 f0       	breq	.+16     	; 0x15b0 <Pipe_Read_Stream_LE+0x68>
    15a0:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    15a2:	99 81       	ldd	r25, Y+1	; 0x01
    15a4:	8c 0d       	add	r24, r12
    15a6:	9d 1d       	adc	r25, r13
    15a8:	99 83       	std	Y+1, r25	; 0x01
    15aa:	88 83       	st	Y, r24
    15ac:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <Pipe_Read_Stream_LE+0x88>
    15b0:	94 d0       	rcall	.+296    	; 0x16da <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    15b2:	88 23       	and	r24, r24
    15b4:	39 f3       	breq	.-50     	; 0x1584 <Pipe_Read_Stream_LE+0x3c>
    15b6:	0c c0       	rjmp	.+24     	; 0x15d0 <Pipe_Read_Stream_LE+0x88>
    15b8:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    15bc:	f7 01       	movw	r30, r14
    15be:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    15c0:	7f 01       	movw	r14, r30
    15c2:	01 50       	subi	r16, 0x01	; 1
    15c4:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    15c6:	ff ef       	ldi	r31, 0xFF	; 255
    15c8:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    15ca:	df 0a       	sbc	r13, r31
    15cc:	db cf       	rjmp	.-74     	; 0x1584 <Pipe_Read_Stream_LE+0x3c>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    15d2:	cf 91       	pop	r28
}
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	08 95       	ret

000015e2 <Pipe_ConfigurePipe>:
    15e2:	0f 93       	push	r16
    15e4:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    15e6:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    15e8:	87 ff       	sbrs	r24, 7
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <Pipe_ConfigurePipe+0xe>
    15ec:	80 e1       	ldi	r24, 0x10	; 16
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <Pipe_ConfigurePipe+0x10>
    15f0:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    15f2:	e7 30       	cpi	r30, 0x07	; 7
    15f4:	10 f0       	brcs	.+4      	; 0x15fa <Pipe_ConfigurePipe+0x18>
	  return false;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	5a c0       	rjmp	.+180    	; 0x16ae <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    15fa:	61 11       	cpse	r22, r1
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    15fe:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1600:	90 e4       	ldi	r25, 0x40	; 64
    1602:	69 9f       	mul	r22, r25
    1604:	b0 01       	movw	r22, r0
    1606:	11 24       	eor	r1, r1
    1608:	4f 70       	andi	r20, 0x0F	; 15
    160a:	46 2b       	or	r20, r22
    160c:	48 2b       	or	r20, r24
    160e:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1610:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1614:	5e 13       	cpse	r21, r30
    1616:	19 c0       	rjmp	.+50     	; 0x164a <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    1618:	02 30       	cpi	r16, 0x02	; 2
    161a:	10 f0       	brcs	.+4      	; 0x1620 <Pipe_ConfigurePipe+0x3e>
    161c:	76 e0       	ldi	r23, 0x06	; 6
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <Pipe_ConfigurePipe+0x40>
    1620:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1622:	88 e0       	ldi	r24, 0x08	; 8
    1624:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1626:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1628:	82 17       	cp	r24, r18
    162a:	93 07       	cpc	r25, r19
    162c:	40 f0       	brcs	.+16     	; 0x163e <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    162e:	86 2f       	mov	r24, r22
    1630:	82 95       	swap	r24
    1632:	80 7f       	andi	r24, 0xF0	; 240
    1634:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1636:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1638:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	0e c0       	rjmp	.+28     	; 0x165a <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    163e:	65 30       	cpi	r22, 0x05	; 5
    1640:	b1 f3       	breq	.-20     	; 0x162e <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    1642:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	ef cf       	rjmp	.-34     	; 0x1628 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    164a:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    164e:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1652:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    1656:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    165a:	81 fd       	sbrc	r24, 1
    165c:	07 c0       	rjmp	.+14     	; 0x166c <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    165e:	5f 5f       	subi	r21, 0xFF	; 255
    1660:	57 30       	cpi	r21, 0x07	; 7
    1662:	b1 f6       	brne	.-84     	; 0x1610 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1664:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	21 c0       	rjmp	.+66     	; 0x16ae <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    166c:	90 91 a9 00 	lds	r25, 0x00A9
    1670:	9e 7f       	andi	r25, 0xFE	; 254
    1672:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1676:	90 91 ab 00 	lds	r25, 0x00AB
    167a:	9d 7f       	andi	r25, 0xFD	; 253
    167c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1680:	90 91 a9 00 	lds	r25, 0x00A9
    1684:	91 60       	ori	r25, 0x01	; 1
    1686:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    168a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    168e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1692:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    1696:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    169a:	80 91 a9 00 	lds	r24, 0x00A9
    169e:	80 62       	ori	r24, 0x20	; 32
    16a0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    16a4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    16a8:	87 fd       	sbrc	r24, 7
    16aa:	d9 cf       	rjmp	.-78     	; 0x165e <Pipe_ConfigurePipe+0x7c>
    16ac:	a4 cf       	rjmp	.-184    	; 0x15f6 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    16b2:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    16b6:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16b8:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    16bc:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    16c0:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    16c4:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16c8:	90 91 a9 00 	lds	r25, 0x00A9
    16cc:	9e 7f       	andi	r25, 0xFE	; 254
    16ce:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	87 30       	cpi	r24, 0x07	; 7
    16d6:	81 f7       	brne	.-32     	; 0x16b8 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    16d8:	08 95       	ret

000016da <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    16da:	20 91 a2 00 	lds	r18, 0x00A2
    16de:	30 91 a3 00 	lds	r19, 0x00A3
    16e2:	89 e8       	ldi	r24, 0x89	; 137
    16e4:	93 e1       	ldi	r25, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    16e6:	40 91 aa 00 	lds	r20, 0x00AA
    16ea:	40 73       	andi	r20, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    16ec:	40 31       	cpi	r20, 0x10	; 16
    16ee:	29 f4       	brne	.+10     	; 0x16fa <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    16f0:	40 91 a6 00 	lds	r20, 0x00A6
		{
			if (Pipe_IsINReceived())
    16f4:	40 ff       	sbrs	r20, 0
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <Pipe_WaitUntilReady+0x28>
    16f8:	18 c0       	rjmp	.+48     	; 0x172a <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    16fa:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    16fe:	42 fd       	sbrc	r20, 2
    1700:	14 c0       	rjmp	.+40     	; 0x172a <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1702:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1706:	41 fd       	sbrc	r20, 1
    1708:	12 c0       	rjmp	.+36     	; 0x172e <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    170a:	40 91 34 01 	lds	r20, 0x0134
    170e:	41 30       	cpi	r20, 0x01	; 1
    1710:	81 f0       	breq	.+32     	; 0x1732 <Pipe_WaitUntilReady+0x58>
    1712:	40 91 a2 00 	lds	r20, 0x00A2
    1716:	50 91 a3 00 	lds	r21, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    171a:	42 17       	cp	r20, r18
    171c:	53 07       	cpc	r21, r19
    171e:	19 f3       	breq	.-58     	; 0x16e6 <Pipe_WaitUntilReady+0xc>
    1720:	01 97       	sbiw	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	41 f0       	breq	.+16     	; 0x1736 <Pipe_WaitUntilReady+0x5c>
    1726:	9a 01       	movw	r18, r20
    1728:	de cf       	rjmp	.-68     	; 0x16e6 <Pipe_WaitUntilReady+0xc>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    1736:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    1738:	08 95       	ret

0000173a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    173a:	75 d0       	rcall	.+234    	; 0x1826 <USB_INT_DisableAllInterrupts>
    173c:	7c d0       	rcall	.+248    	; 0x1836 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    173e:	e0 ee       	ldi	r30, 0xE0	; 224
    1740:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1742:	80 81       	ld	r24, Z
    1744:	81 60       	ori	r24, 0x01	; 1
    1746:	80 83       	st	Z, r24
    1748:	e8 ed       	ldi	r30, 0xD8	; 216
    174a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    174c:	80 81       	ld	r24, Z
    174e:	8f 77       	andi	r24, 0x7F	; 127
    1750:	80 83       	st	Z, r24
    1752:	19 bc       	out	0x29, r1	; 41
    1754:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1756:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1758:	8c 91       	ld	r24, X
    175a:	8e 7f       	andi	r24, 0xFE	; 254
    175c:	8c 93       	st	X, r24
    175e:	80 81       	ld	r24, Z
    1760:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1762:	80 83       	st	Z, r24
    1764:	10 92 2b 01 	sts	0x012B, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1768:	08 95       	ret

0000176a <USB_ResetInterface>:
    176a:	5d d0       	rcall	.+186    	; 0x1826 <USB_INT_DisableAllInterrupts>
    176c:	64 d0       	rcall	.+200    	; 0x1836 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    176e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1772:	8f 77       	andi	r24, 0x7F	; 127
    1774:	80 93 d8 00 	sts	0x00D8, r24
    1778:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	80 93 d8 00 	sts	0x00D8, r24
    1782:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	80 93 d8 00 	sts	0x00D8, r24
    178c:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	80 93 d7 00 	sts	0x00D7, r24
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    179a:	8e e0       	ldi	r24, 0x0E	; 14
    179c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    179e:	09 b4       	in	r0, 0x29	; 41
    17a0:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    17a2:	fd cf       	rjmp	.-6      	; 0x179e <USB_ResetInterface+0x34>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 93 34 01 	sts	0x0134, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    17aa:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ConfigurationNumber = 0;
    17ae:	80 e4       	ldi	r24, 0x40	; 64
    17b0:	80 93 04 01 	sts	0x0104, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    17b4:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    17b8:	80 64       	ori	r24, 0x40	; 64
    17ba:	80 93 d8 00 	sts	0x00D8, r24
    17be:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    17c2:	81 60       	ori	r24, 0x01	; 1
    17c4:	80 93 dd 00 	sts	0x00DD, r24
    17c8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    17cc:	84 60       	ori	r24, 0x04	; 4
    17ce:	80 93 dd 00 	sts	0x00DD, r24
    17d2:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    17d6:	8f 7e       	andi	r24, 0xEF	; 239
    17d8:	80 93 d7 00 	sts	0x00D7, r24
    17dc:	6f 9a       	sbi	0x0d, 7	; 13
    17de:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    17e0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    17e4:	81 60       	ori	r24, 0x01	; 1
    17e6:	80 93 de 00 	sts	0x00DE, r24
    17ea:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    17ee:	84 60       	ori	r24, 0x04	; 4
    17f0:	80 93 de 00 	sts	0x00DE, r24
    17f4:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    17f8:	8e 7f       	andi	r24, 0xFE	; 254
    17fa:	80 93 e0 00 	sts	0x00E0, r24
    17fe:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1802:	80 61       	ori	r24, 0x10	; 16
    1804:	80 93 d8 00 	sts	0x00D8, r24
    1808:	08 95       	ret

0000180a <USB_Init>:
    180a:	e8 ed       	ldi	r30, 0xD8	; 216
    180c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    180e:	80 81       	ld	r24, Z
    1810:	8f 7e       	andi	r24, 0xEF	; 239
    1812:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1814:	e7 ed       	ldi	r30, 0xD7	; 215
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	81 60       	ori	r24, 0x01	; 1
    181c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
    1824:	a2 cf       	rjmp	.-188    	; 0x176a <USB_ResetInterface>

00001826 <USB_INT_DisableAllInterrupts>:
    1826:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8c 7f       	andi	r24, 0xFC	; 252
    182e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1830:	10 92 a0 00 	sts	0x00A0, r1
    1834:	08 95       	ret

00001836 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1836:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    183a:	10 92 9f 00 	sts	0x009F, r1
    183e:	08 95       	ret

00001840 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	0b b6       	in	r0, 0x3b	; 59
    184c:	0f 92       	push	r0
    184e:	2f 93       	push	r18
    1850:	3f 93       	push	r19
    1852:	4f 93       	push	r20
    1854:	5f 93       	push	r21
    1856:	6f 93       	push	r22
    1858:	7f 93       	push	r23
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
    185e:	af 93       	push	r26
    1860:	bf 93       	push	r27
    1862:	ef 93       	push	r30
    1864:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1866:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    186a:	85 ff       	sbrs	r24, 5
    186c:	0a c0       	rjmp	.+20     	; 0x1882 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    186e:	80 91 a0 00 	lds	r24, 0x00A0
    1872:	85 ff       	sbrs	r24, 5
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1876:	80 91 9f 00 	lds	r24, 0x009F
    187a:	8f 7d       	andi	r24, 0xDF	; 223
    187c:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1880:	20 d1       	rcall	.+576    	; 0x1ac2 <USB_Event_Stub>
    1882:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1886:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1888:	16 c0       	rjmp	.+44     	; 0x18b6 <__vector_10+0x76>
    188a:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    188e:	81 ff       	sbrs	r24, 1
    1890:	12 c0       	rjmp	.+36     	; 0x18b6 <__vector_10+0x76>
    1892:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1896:	8d 7f       	andi	r24, 0xFD	; 253
    1898:	80 93 9f 00 	sts	0x009F, r24
    189c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	80 93 9f 00 	sts	0x009F, r24
    18a6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    18aa:	8d 7f       	andi	r24, 0xFD	; 253
    18ac:	80 93 a0 00 	sts	0x00A0, r24
    18b0:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    18b4:	5a df       	rcall	.-332    	; 0x176a <USB_ResetInterface>

		USB_ResetInterface();
    18b6:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    18ba:	81 ff       	sbrs	r24, 1
    18bc:	17 c0       	rjmp	.+46     	; 0x18ec <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    18be:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    18c2:	81 ff       	sbrs	r24, 1
    18c4:	13 c0       	rjmp	.+38     	; 0x18ec <__vector_10+0xac>
    18c6:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    18ca:	8d 7f       	andi	r24, 0xFD	; 253
    18cc:	80 93 df 00 	sts	0x00DF, r24
    18d0:	77 98       	cbi	0x0e, 7	; 14
    18d2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    18d6:	81 60       	ori	r24, 0x01	; 1
    18d8:	80 93 dd 00 	sts	0x00DD, r24
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 ba 02 	call	0x574	; 0x574 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    18e2:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 34 01 	sts	0x0134, r24

		USB_HostState = HOST_STATE_Unattached;
    18ec:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    18f0:	80 ff       	sbrs	r24, 0
    18f2:	18 c0       	rjmp	.+48     	; 0x1924 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    18f4:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    18f8:	80 ff       	sbrs	r24, 0
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <__vector_10+0xe4>
    18fc:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1900:	8e 7f       	andi	r24, 0xFE	; 254
    1902:	80 93 df 00 	sts	0x00DF, r24
    1906:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    190a:	8e 7f       	andi	r24, 0xFE	; 254
    190c:	80 93 de 00 	sts	0x00DE, r24
    1910:	0e 94 7d 02 	call	0x4fa	; 0x4fa <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1914:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1918:	82 60       	ori	r24, 0x02	; 2
    191a:	80 93 a0 00 	sts	0x00A0, r24
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	80 93 34 01 	sts	0x0134, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1924:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1928:	82 ff       	sbrs	r24, 2
    192a:	10 c0       	rjmp	.+32     	; 0x194c <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    192c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1930:	82 ff       	sbrs	r24, 2
    1932:	0c c0       	rjmp	.+24     	; 0x194c <__vector_10+0x10c>
    1934:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1938:	8b 7f       	andi	r24, 0xFB	; 251
    193a:	80 93 df 00 	sts	0x00DF, r24
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	82 e0       	ldi	r24, 0x02	; 2
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1942:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <EVENT_USB_Host_DeviceEnumerationFailed>
    1946:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    194a:	0f df       	rcall	.-482    	; 0x176a <USB_ResetInterface>
    194c:	ff 91       	pop	r31

		USB_ResetInterface();
    194e:	ef 91       	pop	r30
    1950:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0b be       	out	0x3b, r0	; 59
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <USB_GetNextDescriptor>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	fc 01       	movw	r30, r24
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1978:	eb 01       	movw	r28, r22
    197a:	a8 81       	ld	r26, Y
    197c:	b9 81       	ldd	r27, Y+1	; 0x01
    197e:	8c 91       	ld	r24, X
    1980:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    1982:	20 81       	ld	r18, Z
    1984:	31 81       	ldd	r19, Z+1	; 0x01
    1986:	82 17       	cp	r24, r18
    1988:	93 07       	cpc	r25, r19
    198a:	08 f4       	brcc	.+2      	; 0x198e <USB_GetNextDescriptor+0x1c>
    198c:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    198e:	a2 0f       	add	r26, r18
    1990:	b3 1f       	adc	r27, r19
    1992:	eb 01       	movw	r28, r22
    1994:	b9 83       	std	Y+1, r27	; 0x01
    1996:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	82 1b       	sub	r24, r18
    199e:	93 0b       	sbc	r25, r19
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
			}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	29 97       	sbiw	r28, 0x09	; 9
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	7b 01       	movw	r14, r22
    19cc:	8a 01       	movw	r16, r20
    19ce:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    19d0:	90 e8       	ldi	r25, 0x80	; 128
    19d2:	90 93 2c 01 	sts	0x012C, r25
    19d6:	96 e0       	ldi	r25, 0x06	; 6
    19d8:	90 93 2d 01 	sts	0x012D, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    19dc:	e8 2f       	mov	r30, r24
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	31 97       	sbiw	r30, 0x01	; 1
    19e2:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    19e4:	f0 93 2f 01 	sts	0x012F, r31
    19e8:	e0 93 2e 01 	sts	0x012E, r30
    19ec:	10 92 31 01 	sts	0x0131, r1
    19f0:	10 92 30 01 	sts	0x0130, r1
    19f4:	89 e0       	ldi	r24, 0x09	; 9
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	90 93 33 01 	sts	0x0133, r25
    19fc:	80 93 32 01 	sts	0x0132, r24
    1a00:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	84 d0       	rcall	.+264    	; 0x1b12 <USB_Host_SendControlRequest>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	19 c0       	rjmp	.+50     	; 0x1a40 <USB_Host_GetDeviceConfigDescriptor+0x96>
    1a0e:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1a10:	fc 81       	ldd	r31, Y+4	; 0x04
    1a12:	d7 01       	movw	r26, r14
    1a14:	ed 93       	st	X+, r30
    1a16:	fc 93       	st	X, r31
    1a18:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    1a1a:	df 06       	cpc	r13, r31
    1a1c:	70 f0       	brcs	.+28     	; 0x1a3a <USB_Host_GetDeviceConfigDescriptor+0x90>
    1a1e:	f0 93 33 01 	sts	0x0133, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1a22:	e0 93 32 01 	sts	0x0132, r30
    1a26:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1a28:	74 d0       	rcall	.+232    	; 0x1b12 <USB_Host_SendControlRequest>
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	09 c0       	rjmp	.+18     	; 0x1a40 <USB_Host_GetDeviceConfigDescriptor+0x96>
    1a2e:	f8 01       	movw	r30, r16
    1a30:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	21 f0       	breq	.+8      	; 0x1a3e <USB_Host_GetDeviceConfigDescriptor+0x94>
    1a36:	86 e0       	ldi	r24, 0x06	; 6
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    1a3a:	85 e0       	ldi	r24, 0x05	; 5
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    1a42:	0f b6       	in	r0, 0x3f	; 63
}
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	df 90       	pop	r13
    1a5a:	cf 90       	pop	r12
    1a5c:	08 95       	ret

00001a5e <USB_GetNextDescriptorComp>:
    1a5e:	af 92       	push	r10
    1a60:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1a62:	cf 92       	push	r12
    1a64:	df 92       	push	r13
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	8c 01       	movw	r16, r24
    1a74:	eb 01       	movw	r28, r22
    1a76:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1a78:	f8 01       	movw	r30, r16
    1a7a:	e0 80       	ld	r14, Z
    1a7c:	f1 80       	ldd	r15, Z+1	; 0x01
    1a7e:	e1 14       	cp	r14, r1
    1a80:	f1 04       	cpc	r15, r1
    1a82:	99 f0       	breq	.+38     	; 0x1aaa <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1a84:	a8 80       	ld	r10, Y
    1a86:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1a88:	be 01       	movw	r22, r28
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	72 df       	rcall	.-284    	; 0x1972 <USB_GetNextDescriptor>
    1a8e:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1a90:	99 81       	ldd	r25, Y+1	; 0x01
    1a92:	f6 01       	movw	r30, r12
    1a94:	09 95       	icall
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	79 f3       	breq	.-34     	; 0x1a78 <USB_GetNextDescriptorComp+0x1a>
    1a9a:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1a9c:	39 f4       	brne	.+14     	; 0x1aac <USB_GetNextDescriptorComp+0x4e>
    1a9e:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1aa0:	a8 82       	st	Y, r10
    1aa2:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1aa4:	f1 82       	std	Z+1, r15	; 0x01
    1aa6:	e0 82       	st	Z, r14
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <USB_GetNextDescriptorComp+0x4e>
    1aaa:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1aac:	df 91       	pop	r29
}
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	08 95       	ret

00001ac2 <USB_Event_Stub>:
    1ac2:	08 95       	ret

00001ac4 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1acc:	c9 ee       	ldi	r28, 0xE9	; 233
    1ace:	d3 e0       	ldi	r29, 0x03	; 3
    1ad0:	11 11       	cpse	r17, r1
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1ad4:	80 91 a6 00 	lds	r24, 0x00A6
    1ad8:	83 fd       	sbrc	r24, 3
    1ada:	16 c0       	rjmp	.+44     	; 0x1b08 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	78 db       	rcall	.-2320   	; 0x11d0 <USB_Host_WaitMS>
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	13 c0       	rjmp	.+38     	; 0x1b0a <USB_Host_WaitForIOS+0x46>
    1ae4:	21 97       	sbiw	r28, 0x01	; 1
    1ae6:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1ae8:	99 f7       	brne	.-26     	; 0x1ad0 <USB_Host_WaitForIOS+0xc>
    1aea:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <USB_Host_WaitForIOS+0x46>
    1aee:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1af0:	29 f4       	brne	.+10     	; 0x1afc <USB_Host_WaitForIOS+0x38>
    1af2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1af6:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1af8:	f1 cf       	rjmp	.-30     	; 0x1adc <USB_Host_WaitForIOS+0x18>
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <USB_Host_WaitForIOS+0x44>
    1afc:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1afe:	71 f7       	brne	.-36     	; 0x1adc <USB_Host_WaitForIOS+0x18>
    1b00:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1b04:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1b06:	ea cf       	rjmp	.-44     	; 0x1adc <USB_Host_WaitForIOS+0x18>
    1b08:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1b0a:	df 91       	pop	r29
}
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	08 95       	ret

00001b12 <USB_Host_SendControlRequest>:
    1b12:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1b1e:	f0 90 9e 00 	lds	r15, 0x009E
    1b22:	8f 2d       	mov	r24, r15
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1b28:	c0 91 32 01 	lds	r28, 0x0132
    1b2c:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1b30:	80 91 9e 00 	lds	r24, 0x009E
    1b34:	81 60       	ori	r24, 0x01	; 1
    1b36:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	49 db       	rcall	.-2414   	; 0x11d0 <USB_Host_WaitMS>
    1b3e:	81 11       	cpse	r24, r1
    1b40:	cc c0       	rjmp	.+408    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1b42:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b46:	8f 7c       	andi	r24, 0xCF	; 207
    1b48:	80 93 aa 00 	sts	0x00AA, r24
    1b4c:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1b50:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1b54:	8f 7e       	andi	r24, 0xEF	; 239
    1b56:	80 93 a6 00 	sts	0x00A6, r24
    1b5a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b5e:	8f 7b       	andi	r24, 0xBF	; 191
    1b60:	80 93 a9 00 	sts	0x00A9, r24
    1b64:	ec e2       	ldi	r30, 0x2C	; 44
    1b66:	f1 e0       	ldi	r31, 0x01	; 1
    1b68:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1b6a:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1b70:	e4 33       	cpi	r30, 0x34	; 52
    1b72:	f8 07       	cpc	r31, r24
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <USB_Host_SendControlRequest+0x56>
    1b76:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1b7a:	87 77       	andi	r24, 0x77	; 119
    1b7c:	80 93 a6 00 	sts	0x00A6, r24
    1b80:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1b82:	a0 df       	rcall	.-192    	; 0x1ac4 <USB_Host_WaitForIOS>
    1b84:	81 11       	cpse	r24, r1
    1b86:	a9 c0       	rjmp	.+338    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1b88:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b8c:	80 64       	ori	r24, 0x40	; 64
    1b8e:	80 93 a9 00 	sts	0x00A9, r24
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	1d db       	rcall	.-2502   	; 0x11d0 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b96:	81 11       	cpse	r24, r1
    1b98:	a0 c0       	rjmp	.+320    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1b9a:	80 91 2c 01 	lds	r24, 0x012C
    1b9e:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1ba0:	4e c0       	rjmp	.+156    	; 0x1c3e <USB_Host_SendControlRequest+0x12c>
    1ba2:	80 91 aa 00 	lds	r24, 0x00AA
    1ba6:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ba8:	80 61       	ori	r24, 0x10	; 16
    1baa:	80 93 aa 00 	sts	0x00AA, r24
    1bae:	01 15       	cp	r16, r1
    1bb0:	11 05       	cpc	r17, r1
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1bb4:	3a c0       	rjmp	.+116    	; 0x1c2a <USB_Host_SendControlRequest+0x118>
    1bb6:	80 91 aa 00 	lds	r24, 0x00AA
    1bba:	8f 7c       	andi	r24, 0xCF	; 207
    1bbc:	80 62       	ori	r24, 0x20	; 32
    1bbe:	80 93 aa 00 	sts	0x00AA, r24
    1bc2:	80 91 a9 00 	lds	r24, 0x00A9
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bc8:	80 93 a9 00 	sts	0x00A9, r24
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	7a df       	rcall	.-268    	; 0x1ac4 <USB_Host_WaitForIOS>
    1bd0:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1bd2:	83 c0       	rjmp	.+262    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1bd4:	80 91 a6 00 	lds	r24, 0x00A6
    1bd8:	8b 77       	andi	r24, 0x7B	; 123
    1bda:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	71 df       	rcall	.-286    	; 0x1ac4 <USB_Host_WaitForIOS>
    1be2:	7b c0       	rjmp	.+246    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1be4:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1be8:	8f 7b       	andi	r24, 0xBF	; 191
    1bea:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	69 df       	rcall	.-302    	; 0x1ac4 <USB_Host_WaitForIOS>
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	72 c0       	rjmp	.+228    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1bf6:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1bfa:	90 91 f7 00 	lds	r25, 0x00F7
    1bfe:	89 2b       	or	r24, r25
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c02:	c0 e0       	ldi	r28, 0x00	; 0
    1c04:	d0 e0       	ldi	r29, 0x00	; 0
    1c06:	f8 01       	movw	r30, r16
    1c08:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1c0a:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1c0e:	90 91 f7 00 	lds	r25, 0x00F7
    1c12:	89 2b       	or	r24, r25
    1c14:	69 f4       	brne	.+26     	; 0x1c30 <USB_Host_SendControlRequest+0x11e>
    1c16:	80 91 a9 00 	lds	r24, 0x00A9
    1c1a:	80 64       	ori	r24, 0x40	; 64
    1c1c:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1c20:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c24:	8e 77       	andi	r24, 0x7E	; 126
    1c26:	80 93 a6 00 	sts	0x00A6, r24
    1c2a:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c2c:	d9 f6       	brne	.-74     	; 0x1be4 <USB_Host_SendControlRequest+0xd2>
    1c2e:	c3 cf       	rjmp	.-122    	; 0x1bb6 <USB_Host_SendControlRequest+0xa4>
    1c30:	20 97       	sbiw	r28, 0x00	; 0
    1c32:	89 f3       	breq	.-30     	; 0x1c16 <USB_Host_SendControlRequest+0x104>
    1c34:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1c38:	81 93       	st	Z+, r24
    1c3a:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1c3c:	e5 cf       	rjmp	.-54     	; 0x1c08 <USB_Host_SendControlRequest+0xf6>
    1c3e:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c40:	11 05       	cpc	r17, r1
    1c42:	b1 f1       	breq	.+108    	; 0x1cb0 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1c44:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1c48:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1c4a:	80 62       	ori	r24, 0x20	; 32
    1c4c:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c50:	80 91 a9 00 	lds	r24, 0x00A9
    1c54:	8f 7b       	andi	r24, 0xBF	; 191
    1c56:	80 93 a9 00 	sts	0x00A9, r24
    1c5a:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c5c:	20 97       	sbiw	r28, 0x00	; 0
    1c5e:	01 f1       	breq	.+64     	; 0x1ca0 <USB_Host_SendControlRequest+0x18e>
    1c60:	31 df       	rcall	.-414    	; 0x1ac4 <USB_Host_WaitForIOS>
    1c62:	81 11       	cpse	r24, r1
    1c64:	3a c0       	rjmp	.+116    	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c66:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1c68:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c6c:	30 91 f7 00 	lds	r19, 0x00F7
    1c70:	80 91 04 01 	lds	r24, 0x0104
    1c74:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c76:	28 17       	cp	r18, r24
    1c78:	39 07       	cpc	r19, r25
    1c7a:	58 f4       	brcc	.+22     	; 0x1c92 <USB_Host_SendControlRequest+0x180>
    1c7c:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	8c 01       	movw	r16, r24
    1c82:	20 81       	ld	r18, Z
    1c84:	20 93 af 00 	sts	0x00AF, r18
    1c88:	21 97       	sbiw	r28, 0x01	; 1
    1c8a:	20 97       	sbiw	r28, 0x00	; 0
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <USB_Host_SendControlRequest+0x182>
    1c8e:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1c90:	eb cf       	rjmp	.-42     	; 0x1c68 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c92:	8f 01       	movw	r16, r30
    1c94:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1c98:	8b 77       	andi	r24, 0x7B	; 123
    1c9a:	80 93 a6 00 	sts	0x00A6, r24
    1c9e:	dd cf       	rjmp	.-70     	; 0x1c5a <USB_Host_SendControlRequest+0x148>
    1ca0:	11 df       	rcall	.-478    	; 0x1ac4 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	1a c0       	rjmp	.+52     	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1ca6:	80 91 a9 00 	lds	r24, 0x00A9
    1caa:	80 64       	ori	r24, 0x40	; 64
    1cac:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1cb0:	80 91 aa 00 	lds	r24, 0x00AA
    1cb4:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cb6:	80 61       	ori	r24, 0x10	; 16
    1cb8:	80 93 aa 00 	sts	0x00AA, r24
    1cbc:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cc0:	8f 7b       	andi	r24, 0xBF	; 191
    1cc2:	80 93 a9 00 	sts	0x00A9, r24
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	fd de       	rcall	.-518    	; 0x1ac4 <USB_Host_WaitForIOS>
    1cca:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <USB_Host_SendControlRequest+0x1c8>
    1cce:	80 91 a6 00 	lds	r24, 0x00A6
    1cd2:	8e 77       	andi	r24, 0x7E	; 126
    1cd4:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 91 a9 00 	lds	r25, 0x00A9
    1cde:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1ce0:	90 93 a9 00 	sts	0x00A9, r25
    1ce4:	f1 10       	cpse	r15, r1
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <USB_Host_SendControlRequest+0x1e0>
    1ce8:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cec:	9e 7f       	andi	r25, 0xFE	; 254
    1cee:	90 93 9e 00 	sts	0x009E, r25
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1cf8:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1d04:	ff 90       	pop	r15
    1d06:	08 95       	ret

00001d08 <USB_Host_SetDeviceConfiguration>:
    1d08:	cf 93       	push	r28
				UPRST = 0;
    1d0a:	c8 2f       	mov	r28, r24
    1d0c:	10 92 2c 01 	sts	0x012C, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1d10:	89 e0       	ldi	r24, 0x09	; 9
    1d12:	80 93 2d 01 	sts	0x012D, r24
    1d16:	2c 2f       	mov	r18, r28
    1d18:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1d1a:	30 93 2f 01 	sts	0x012F, r19
    1d1e:	20 93 2e 01 	sts	0x012E, r18
    1d22:	10 92 31 01 	sts	0x0131, r1
    1d26:	10 92 30 01 	sts	0x0130, r1
    1d2a:	10 92 33 01 	sts	0x0133, r1
    1d2e:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d32:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	eb de       	rcall	.-554    	; 0x1b12 <USB_Host_SendControlRequest>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <USB_Host_SetDeviceConfiguration+0x4a>
    1d40:	c0 93 2a 01 	sts	0x012A, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1d44:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1d46:	11 f0       	breq	.+4      	; 0x1d4c <USB_Host_SetDeviceConfiguration+0x44>
    1d48:	9b e0       	ldi	r25, 0x0B	; 11
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <USB_Host_SetDeviceConfiguration+0x46>
    1d4c:	9a e0       	ldi	r25, 0x0A	; 10
    1d4e:	90 93 34 01 	sts	0x0134, r25
    1d52:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1d54:	08 95       	ret

00001d56 <USB_Host_ClearEndpointStall>:
    1d56:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1d58:	90 93 2c 01 	sts	0x012C, r25
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	90 93 2d 01 	sts	0x012D, r25
    1d62:	10 92 2f 01 	sts	0x012F, r1
    1d66:	10 92 2e 01 	sts	0x012E, r1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	90 93 31 01 	sts	0x0131, r25
    1d70:	80 93 30 01 	sts	0x0130, r24
    1d74:	10 92 33 01 	sts	0x0133, r1
    1d78:	10 92 32 01 	sts	0x0132, r1
    1d7c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	c6 ce       	rjmp	.-628    	; 0x1b12 <USB_Host_SendControlRequest>

00001d86 <USB_USBTask>:
    1d86:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1d88:	c0 91 a7 00 	lds	r28, 0x00A7
    1d8c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1d8e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d92:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1d96:	69 da       	rcall	.-2862   	; 0x126a <USB_Host_ProcessNextHostState>
    1d98:	c0 93 a7 00 	sts	0x00A7, r28
    1d9c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1d9e:	08 95       	ret

00001da0 <Serial_putchar>:
    1da0:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1da4:	95 ff       	sbrs	r25, 5
    1da6:	fc cf       	rjmp	.-8      	; 0x1da0 <Serial_putchar>
				UDR1 = DataByte;
    1da8:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	08 95       	ret

00001db2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1db2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1db6:	87 ff       	sbrs	r24, 7
    1db8:	08 c0       	rjmp	.+16     	; 0x1dca <Serial_getchar+0x18>
    1dba:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1dbe:	87 ff       	sbrs	r24, 7
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1dc2:	80 91 ce 00 	lds	r24, 0x00CE
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	08 95       	ret
	  return _FDEV_EOF;
    1dca:	8e ef       	ldi	r24, 0xFE	; 254
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1dd4:	08 95       	ret

00001dd6 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1dd6:	fc 01       	movw	r30, r24
	if (!(Stream))
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	59 f4       	brne	.+22     	; 0x1df2 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1ddc:	85 e3       	ldi	r24, 0x35	; 53
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	90 93 44 01 	sts	0x0144, r25
    1de4:	80 93 43 01 	sts	0x0143, r24
		stdout = Stream;
    1de8:	90 93 46 01 	sts	0x0146, r25
    1dec:	80 93 45 01 	sts	0x0145, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1df0:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1df2:	8e e0       	ldi	r24, 0x0E	; 14
    1df4:	df 01       	movw	r26, r30
    1df6:	1d 92       	st	X+, r1
    1df8:	8a 95       	dec	r24
    1dfa:	e9 f7       	brne	.-6      	; 0x1df6 <Serial_CreateStream+0x20>
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	83 83       	std	Z+3, r24	; 0x03
    1e00:	80 ed       	ldi	r24, 0xD0	; 208
    1e02:	9e e0       	ldi	r25, 0x0E	; 14
    1e04:	91 87       	std	Z+9, r25	; 0x09
    1e06:	80 87       	std	Z+8, r24	; 0x08
    1e08:	89 ed       	ldi	r24, 0xD9	; 217
    1e0a:	9e e0       	ldi	r25, 0x0E	; 14
    1e0c:	93 87       	std	Z+11, r25	; 0x0b
    1e0e:	82 87       	std	Z+10, r24	; 0x0a
    1e10:	08 95       	ret

00001e12 <__umulhisi3>:
    1e12:	a2 9f       	mul	r26, r18
    1e14:	b0 01       	movw	r22, r0
    1e16:	b3 9f       	mul	r27, r19
    1e18:	c0 01       	movw	r24, r0
    1e1a:	a3 9f       	mul	r26, r19
    1e1c:	70 0d       	add	r23, r0
    1e1e:	81 1d       	adc	r24, r1
    1e20:	11 24       	eor	r1, r1
    1e22:	91 1d       	adc	r25, r1
    1e24:	b2 9f       	mul	r27, r18
    1e26:	70 0d       	add	r23, r0
    1e28:	81 1d       	adc	r24, r1
    1e2a:	11 24       	eor	r1, r1
    1e2c:	91 1d       	adc	r25, r1
    1e2e:	08 95       	ret

00001e30 <isgraph>:
    1e30:	80 32       	cpi	r24, 0x20	; 32
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <isprint+0x2>

00001e34 <isprint>:
    1e34:	91 11       	cpse	r25, r1
    1e36:	76 c2       	rjmp	.+1260   	; 0x2324 <__ctype_isfalse>
    1e38:	80 52       	subi	r24, 0x20	; 32
    1e3a:	8f 55       	subi	r24, 0x5F	; 95
    1e3c:	e0 f7       	brcc	.-8      	; 0x1e36 <isprint+0x2>
    1e3e:	08 95       	ret

00001e40 <fputc>:
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	18 2f       	mov	r17, r24
    1e4a:	09 2f       	mov	r16, r25
    1e4c:	eb 01       	movw	r28, r22
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	81 fd       	sbrc	r24, 1
    1e52:	03 c0       	rjmp	.+6      	; 0x1e5a <fputc+0x1a>
    1e54:	8f ef       	ldi	r24, 0xFF	; 255
    1e56:	9f ef       	ldi	r25, 0xFF	; 255
    1e58:	20 c0       	rjmp	.+64     	; 0x1e9a <fputc+0x5a>
    1e5a:	82 ff       	sbrs	r24, 2
    1e5c:	10 c0       	rjmp	.+32     	; 0x1e7e <fputc+0x3e>
    1e5e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e60:	5f 81       	ldd	r21, Y+7	; 0x07
    1e62:	2c 81       	ldd	r18, Y+4	; 0x04
    1e64:	3d 81       	ldd	r19, Y+5	; 0x05
    1e66:	42 17       	cp	r20, r18
    1e68:	53 07       	cpc	r21, r19
    1e6a:	7c f4       	brge	.+30     	; 0x1e8a <fputc+0x4a>
    1e6c:	e8 81       	ld	r30, Y
    1e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e70:	9f 01       	movw	r18, r30
    1e72:	2f 5f       	subi	r18, 0xFF	; 255
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	39 83       	std	Y+1, r19	; 0x01
    1e78:	28 83       	st	Y, r18
    1e7a:	10 83       	st	Z, r17
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <fputc+0x4a>
    1e7e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e80:	f9 85       	ldd	r31, Y+9	; 0x09
    1e82:	81 2f       	mov	r24, r17
    1e84:	09 95       	icall
    1e86:	89 2b       	or	r24, r25
    1e88:	29 f7       	brne	.-54     	; 0x1e54 <fputc+0x14>
    1e8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e8e:	2f 5f       	subi	r18, 0xFF	; 255
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	3f 83       	std	Y+7, r19	; 0x07
    1e94:	2e 83       	std	Y+6, r18	; 0x06
    1e96:	81 2f       	mov	r24, r17
    1e98:	90 2f       	mov	r25, r16
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	08 95       	ret

00001ea4 <printf_P>:
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	37 96       	adiw	r30, 0x07	; 7
    1eb4:	61 91       	ld	r22, Z+
    1eb6:	71 91       	ld	r23, Z+
    1eb8:	05 e4       	ldi	r16, 0x45	; 69
    1eba:	11 e0       	ldi	r17, 0x01	; 1
    1ebc:	d8 01       	movw	r26, r16
    1ebe:	8d 91       	ld	r24, X+
    1ec0:	9c 91       	ld	r25, X
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	13 96       	adiw	r26, 0x03	; 3
    1ec6:	2c 91       	ld	r18, X
    1ec8:	13 97       	sbiw	r26, 0x03	; 3
    1eca:	28 60       	ori	r18, 0x08	; 8
    1ecc:	13 96       	adiw	r26, 0x03	; 3
    1ece:	2c 93       	st	X, r18
    1ed0:	af 01       	movw	r20, r30
    1ed2:	3a d0       	rcall	.+116    	; 0x1f48 <vfprintf>
    1ed4:	d8 01       	movw	r26, r16
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	fc 91       	ld	r31, X
    1eda:	23 81       	ldd	r18, Z+3	; 0x03
    1edc:	27 7f       	andi	r18, 0xF7	; 247
    1ede:	23 83       	std	Z+3, r18	; 0x03
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <puts_P>:
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	ec 01       	movw	r28, r24
    1ef4:	e0 91 45 01 	lds	r30, 0x0145
    1ef8:	f0 91 46 01 	lds	r31, 0x0146
    1efc:	83 81       	ldd	r24, Z+3	; 0x03
    1efe:	81 ff       	sbrs	r24, 1
    1f00:	1c c0       	rjmp	.+56     	; 0x1f3a <puts_P+0x50>
    1f02:	00 e0       	ldi	r16, 0x00	; 0
    1f04:	10 e0       	ldi	r17, 0x00	; 0
    1f06:	fe 01       	movw	r30, r28
    1f08:	84 91       	lpm	r24, Z
    1f0a:	60 91 45 01 	lds	r22, 0x0145
    1f0e:	70 91 46 01 	lds	r23, 0x0146
    1f12:	db 01       	movw	r26, r22
    1f14:	18 96       	adiw	r26, 0x08	; 8
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	19 97       	sbiw	r26, 0x09	; 9
    1f1c:	88 23       	and	r24, r24
    1f1e:	39 f0       	breq	.+14     	; 0x1f2e <puts_P+0x44>
    1f20:	09 95       	icall
    1f22:	89 2b       	or	r24, r25
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <puts_P+0x40>
    1f26:	0f ef       	ldi	r16, 0xFF	; 255
    1f28:	1f ef       	ldi	r17, 0xFF	; 255
    1f2a:	21 96       	adiw	r28, 0x01	; 1
    1f2c:	ec cf       	rjmp	.-40     	; 0x1f06 <puts_P+0x1c>
    1f2e:	8a e0       	ldi	r24, 0x0A	; 10
    1f30:	09 95       	icall
    1f32:	89 2b       	or	r24, r25
    1f34:	11 f4       	brne	.+4      	; 0x1f3a <puts_P+0x50>
    1f36:	c8 01       	movw	r24, r16
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <puts_P+0x54>
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	08 95       	ret

00001f48 <vfprintf>:
    1f48:	2f 92       	push	r2
    1f4a:	3f 92       	push	r3
    1f4c:	4f 92       	push	r4
    1f4e:	5f 92       	push	r5
    1f50:	6f 92       	push	r6
    1f52:	7f 92       	push	r7
    1f54:	8f 92       	push	r8
    1f56:	9f 92       	push	r9
    1f58:	af 92       	push	r10
    1f5a:	bf 92       	push	r11
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	2c 97       	sbiw	r28, 0x0c	; 12
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	7c 01       	movw	r14, r24
    1f7e:	6b 01       	movw	r12, r22
    1f80:	8a 01       	movw	r16, r20
    1f82:	fc 01       	movw	r30, r24
    1f84:	17 82       	std	Z+7, r1	; 0x07
    1f86:	16 82       	std	Z+6, r1	; 0x06
    1f88:	83 81       	ldd	r24, Z+3	; 0x03
    1f8a:	81 ff       	sbrs	r24, 1
    1f8c:	b0 c1       	rjmp	.+864    	; 0x22ee <__stack+0x1ef>
    1f8e:	ce 01       	movw	r24, r28
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	4c 01       	movw	r8, r24
    1f94:	f7 01       	movw	r30, r14
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	f6 01       	movw	r30, r12
    1f9a:	93 fd       	sbrc	r25, 3
    1f9c:	85 91       	lpm	r24, Z+
    1f9e:	93 ff       	sbrs	r25, 3
    1fa0:	81 91       	ld	r24, Z+
    1fa2:	6f 01       	movw	r12, r30
    1fa4:	88 23       	and	r24, r24
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <vfprintf+0x62>
    1fa8:	9e c1       	rjmp	.+828    	; 0x22e6 <__stack+0x1e7>
    1faa:	85 32       	cpi	r24, 0x25	; 37
    1fac:	39 f4       	brne	.+14     	; 0x1fbc <vfprintf+0x74>
    1fae:	93 fd       	sbrc	r25, 3
    1fb0:	85 91       	lpm	r24, Z+
    1fb2:	93 ff       	sbrs	r25, 3
    1fb4:	81 91       	ld	r24, Z+
    1fb6:	6f 01       	movw	r12, r30
    1fb8:	85 32       	cpi	r24, 0x25	; 37
    1fba:	21 f4       	brne	.+8      	; 0x1fc4 <vfprintf+0x7c>
    1fbc:	b7 01       	movw	r22, r14
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	3f df       	rcall	.-386    	; 0x1e40 <fputc>
    1fc2:	e8 cf       	rjmp	.-48     	; 0x1f94 <vfprintf+0x4c>
    1fc4:	51 2c       	mov	r5, r1
    1fc6:	31 2c       	mov	r3, r1
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	20 32       	cpi	r18, 0x20	; 32
    1fcc:	a0 f4       	brcc	.+40     	; 0x1ff6 <vfprintf+0xae>
    1fce:	8b 32       	cpi	r24, 0x2B	; 43
    1fd0:	69 f0       	breq	.+26     	; 0x1fec <vfprintf+0xa4>
    1fd2:	30 f4       	brcc	.+12     	; 0x1fe0 <vfprintf+0x98>
    1fd4:	80 32       	cpi	r24, 0x20	; 32
    1fd6:	59 f0       	breq	.+22     	; 0x1fee <vfprintf+0xa6>
    1fd8:	83 32       	cpi	r24, 0x23	; 35
    1fda:	69 f4       	brne	.+26     	; 0x1ff6 <vfprintf+0xae>
    1fdc:	20 61       	ori	r18, 0x10	; 16
    1fde:	2c c0       	rjmp	.+88     	; 0x2038 <vfprintf+0xf0>
    1fe0:	8d 32       	cpi	r24, 0x2D	; 45
    1fe2:	39 f0       	breq	.+14     	; 0x1ff2 <vfprintf+0xaa>
    1fe4:	80 33       	cpi	r24, 0x30	; 48
    1fe6:	39 f4       	brne	.+14     	; 0x1ff6 <vfprintf+0xae>
    1fe8:	21 60       	ori	r18, 0x01	; 1
    1fea:	26 c0       	rjmp	.+76     	; 0x2038 <vfprintf+0xf0>
    1fec:	22 60       	ori	r18, 0x02	; 2
    1fee:	24 60       	ori	r18, 0x04	; 4
    1ff0:	23 c0       	rjmp	.+70     	; 0x2038 <vfprintf+0xf0>
    1ff2:	28 60       	ori	r18, 0x08	; 8
    1ff4:	21 c0       	rjmp	.+66     	; 0x2038 <vfprintf+0xf0>
    1ff6:	27 fd       	sbrc	r18, 7
    1ff8:	27 c0       	rjmp	.+78     	; 0x2048 <vfprintf+0x100>
    1ffa:	30 ed       	ldi	r19, 0xD0	; 208
    1ffc:	38 0f       	add	r19, r24
    1ffe:	3a 30       	cpi	r19, 0x0A	; 10
    2000:	78 f4       	brcc	.+30     	; 0x2020 <vfprintf+0xd8>
    2002:	26 ff       	sbrs	r18, 6
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <vfprintf+0xca>
    2006:	fa e0       	ldi	r31, 0x0A	; 10
    2008:	5f 9e       	mul	r5, r31
    200a:	30 0d       	add	r19, r0
    200c:	11 24       	eor	r1, r1
    200e:	53 2e       	mov	r5, r19
    2010:	13 c0       	rjmp	.+38     	; 0x2038 <vfprintf+0xf0>
    2012:	8a e0       	ldi	r24, 0x0A	; 10
    2014:	38 9e       	mul	r3, r24
    2016:	30 0d       	add	r19, r0
    2018:	11 24       	eor	r1, r1
    201a:	33 2e       	mov	r3, r19
    201c:	20 62       	ori	r18, 0x20	; 32
    201e:	0c c0       	rjmp	.+24     	; 0x2038 <vfprintf+0xf0>
    2020:	8e 32       	cpi	r24, 0x2E	; 46
    2022:	21 f4       	brne	.+8      	; 0x202c <vfprintf+0xe4>
    2024:	26 fd       	sbrc	r18, 6
    2026:	5f c1       	rjmp	.+702    	; 0x22e6 <__stack+0x1e7>
    2028:	20 64       	ori	r18, 0x40	; 64
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <vfprintf+0xf0>
    202c:	8c 36       	cpi	r24, 0x6C	; 108
    202e:	11 f4       	brne	.+4      	; 0x2034 <vfprintf+0xec>
    2030:	20 68       	ori	r18, 0x80	; 128
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <vfprintf+0xf0>
    2034:	88 36       	cpi	r24, 0x68	; 104
    2036:	41 f4       	brne	.+16     	; 0x2048 <vfprintf+0x100>
    2038:	f6 01       	movw	r30, r12
    203a:	93 fd       	sbrc	r25, 3
    203c:	85 91       	lpm	r24, Z+
    203e:	93 ff       	sbrs	r25, 3
    2040:	81 91       	ld	r24, Z+
    2042:	6f 01       	movw	r12, r30
    2044:	81 11       	cpse	r24, r1
    2046:	c1 cf       	rjmp	.-126    	; 0x1fca <vfprintf+0x82>
    2048:	98 2f       	mov	r25, r24
    204a:	9f 7d       	andi	r25, 0xDF	; 223
    204c:	95 54       	subi	r25, 0x45	; 69
    204e:	93 30       	cpi	r25, 0x03	; 3
    2050:	28 f4       	brcc	.+10     	; 0x205c <vfprintf+0x114>
    2052:	0c 5f       	subi	r16, 0xFC	; 252
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	ff e3       	ldi	r31, 0x3F	; 63
    2058:	f9 83       	std	Y+1, r31	; 0x01
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <vfprintf+0x12e>
    205c:	83 36       	cpi	r24, 0x63	; 99
    205e:	31 f0       	breq	.+12     	; 0x206c <vfprintf+0x124>
    2060:	83 37       	cpi	r24, 0x73	; 115
    2062:	71 f0       	breq	.+28     	; 0x2080 <vfprintf+0x138>
    2064:	83 35       	cpi	r24, 0x53	; 83
    2066:	09 f0       	breq	.+2      	; 0x206a <vfprintf+0x122>
    2068:	57 c0       	rjmp	.+174    	; 0x2118 <__stack+0x19>
    206a:	21 c0       	rjmp	.+66     	; 0x20ae <vfprintf+0x166>
    206c:	f8 01       	movw	r30, r16
    206e:	80 81       	ld	r24, Z
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	0e 5f       	subi	r16, 0xFE	; 254
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    2076:	44 24       	eor	r4, r4
    2078:	43 94       	inc	r4
    207a:	51 2c       	mov	r5, r1
    207c:	54 01       	movw	r10, r8
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <vfprintf+0x160>
    2080:	38 01       	movw	r6, r16
    2082:	f2 e0       	ldi	r31, 0x02	; 2
    2084:	6f 0e       	add	r6, r31
    2086:	71 1c       	adc	r7, r1
    2088:	f8 01       	movw	r30, r16
    208a:	a0 80       	ld	r10, Z
    208c:	b1 80       	ldd	r11, Z+1	; 0x01
    208e:	26 ff       	sbrs	r18, 6
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <vfprintf+0x150>
    2092:	65 2d       	mov	r22, r5
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	02 c0       	rjmp	.+4      	; 0x209c <vfprintf+0x154>
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	7f ef       	ldi	r23, 0xFF	; 255
    209c:	c5 01       	movw	r24, r10
    209e:	2c 87       	std	Y+12, r18	; 0x0c
    20a0:	4f d1       	rcall	.+670    	; 0x2340 <strnlen>
    20a2:	2c 01       	movw	r4, r24
    20a4:	83 01       	movw	r16, r6
    20a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    20a8:	2f 77       	andi	r18, 0x7F	; 127
    20aa:	22 2e       	mov	r2, r18
    20ac:	16 c0       	rjmp	.+44     	; 0x20da <vfprintf+0x192>
    20ae:	38 01       	movw	r6, r16
    20b0:	f2 e0       	ldi	r31, 0x02	; 2
    20b2:	6f 0e       	add	r6, r31
    20b4:	71 1c       	adc	r7, r1
    20b6:	f8 01       	movw	r30, r16
    20b8:	a0 80       	ld	r10, Z
    20ba:	b1 80       	ldd	r11, Z+1	; 0x01
    20bc:	26 ff       	sbrs	r18, 6
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <vfprintf+0x17e>
    20c0:	65 2d       	mov	r22, r5
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <vfprintf+0x182>
    20c6:	6f ef       	ldi	r22, 0xFF	; 255
    20c8:	7f ef       	ldi	r23, 0xFF	; 255
    20ca:	c5 01       	movw	r24, r10
    20cc:	2c 87       	std	Y+12, r18	; 0x0c
    20ce:	2d d1       	rcall	.+602    	; 0x232a <strnlen_P>
    20d0:	2c 01       	movw	r4, r24
    20d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    20d4:	20 68       	ori	r18, 0x80	; 128
    20d6:	22 2e       	mov	r2, r18
    20d8:	83 01       	movw	r16, r6
    20da:	23 fc       	sbrc	r2, 3
    20dc:	19 c0       	rjmp	.+50     	; 0x2110 <__stack+0x11>
    20de:	83 2d       	mov	r24, r3
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	48 16       	cp	r4, r24
    20e4:	59 06       	cpc	r5, r25
    20e6:	a0 f4       	brcc	.+40     	; 0x2110 <__stack+0x11>
    20e8:	b7 01       	movw	r22, r14
    20ea:	80 e2       	ldi	r24, 0x20	; 32
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a8 de       	rcall	.-688    	; 0x1e40 <fputc>
    20f0:	3a 94       	dec	r3
    20f2:	f5 cf       	rjmp	.-22     	; 0x20de <vfprintf+0x196>
    20f4:	f5 01       	movw	r30, r10
    20f6:	27 fc       	sbrc	r2, 7
    20f8:	85 91       	lpm	r24, Z+
    20fa:	27 fe       	sbrs	r2, 7
    20fc:	81 91       	ld	r24, Z+
    20fe:	5f 01       	movw	r10, r30
    2100:	b7 01       	movw	r22, r14
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9d de       	rcall	.-710    	; 0x1e40 <fputc>
    2106:	31 10       	cpse	r3, r1
    2108:	3a 94       	dec	r3
    210a:	f1 e0       	ldi	r31, 0x01	; 1
    210c:	4f 1a       	sub	r4, r31
    210e:	51 08       	sbc	r5, r1
    2110:	41 14       	cp	r4, r1
    2112:	51 04       	cpc	r5, r1
    2114:	79 f7       	brne	.-34     	; 0x20f4 <vfprintf+0x1ac>
    2116:	de c0       	rjmp	.+444    	; 0x22d4 <__stack+0x1d5>
    2118:	84 36       	cpi	r24, 0x64	; 100
    211a:	11 f0       	breq	.+4      	; 0x2120 <__stack+0x21>
    211c:	89 36       	cpi	r24, 0x69	; 105
    211e:	31 f5       	brne	.+76     	; 0x216c <__stack+0x6d>
    2120:	f8 01       	movw	r30, r16
    2122:	27 ff       	sbrs	r18, 7
    2124:	07 c0       	rjmp	.+14     	; 0x2134 <__stack+0x35>
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	0c 5f       	subi	r16, 0xFC	; 252
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <__stack+0x45>
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	88 27       	eor	r24, r24
    213a:	77 fd       	sbrc	r23, 7
    213c:	80 95       	com	r24
    213e:	98 2f       	mov	r25, r24
    2140:	0e 5f       	subi	r16, 0xFE	; 254
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	2f 76       	andi	r18, 0x6F	; 111
    2146:	b2 2e       	mov	r11, r18
    2148:	97 ff       	sbrs	r25, 7
    214a:	09 c0       	rjmp	.+18     	; 0x215e <__stack+0x5f>
    214c:	90 95       	com	r25
    214e:	80 95       	com	r24
    2150:	70 95       	com	r23
    2152:	61 95       	neg	r22
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	8f 4f       	sbci	r24, 0xFF	; 255
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	20 68       	ori	r18, 0x80	; 128
    215c:	b2 2e       	mov	r11, r18
    215e:	2a e0       	ldi	r18, 0x0A	; 10
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	a4 01       	movw	r20, r8
    2164:	f8 d0       	rcall	.+496    	; 0x2356 <__ultoa_invert>
    2166:	a8 2e       	mov	r10, r24
    2168:	a8 18       	sub	r10, r8
    216a:	43 c0       	rjmp	.+134    	; 0x21f2 <__stack+0xf3>
    216c:	85 37       	cpi	r24, 0x75	; 117
    216e:	29 f4       	brne	.+10     	; 0x217a <__stack+0x7b>
    2170:	2f 7e       	andi	r18, 0xEF	; 239
    2172:	b2 2e       	mov	r11, r18
    2174:	2a e0       	ldi	r18, 0x0A	; 10
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	25 c0       	rjmp	.+74     	; 0x21c4 <__stack+0xc5>
    217a:	f2 2f       	mov	r31, r18
    217c:	f9 7f       	andi	r31, 0xF9	; 249
    217e:	bf 2e       	mov	r11, r31
    2180:	8f 36       	cpi	r24, 0x6F	; 111
    2182:	c1 f0       	breq	.+48     	; 0x21b4 <__stack+0xb5>
    2184:	18 f4       	brcc	.+6      	; 0x218c <__stack+0x8d>
    2186:	88 35       	cpi	r24, 0x58	; 88
    2188:	79 f0       	breq	.+30     	; 0x21a8 <__stack+0xa9>
    218a:	ad c0       	rjmp	.+346    	; 0x22e6 <__stack+0x1e7>
    218c:	80 37       	cpi	r24, 0x70	; 112
    218e:	19 f0       	breq	.+6      	; 0x2196 <__stack+0x97>
    2190:	88 37       	cpi	r24, 0x78	; 120
    2192:	21 f0       	breq	.+8      	; 0x219c <__stack+0x9d>
    2194:	a8 c0       	rjmp	.+336    	; 0x22e6 <__stack+0x1e7>
    2196:	2f 2f       	mov	r18, r31
    2198:	20 61       	ori	r18, 0x10	; 16
    219a:	b2 2e       	mov	r11, r18
    219c:	b4 fe       	sbrs	r11, 4
    219e:	0d c0       	rjmp	.+26     	; 0x21ba <__stack+0xbb>
    21a0:	8b 2d       	mov	r24, r11
    21a2:	84 60       	ori	r24, 0x04	; 4
    21a4:	b8 2e       	mov	r11, r24
    21a6:	09 c0       	rjmp	.+18     	; 0x21ba <__stack+0xbb>
    21a8:	24 ff       	sbrs	r18, 4
    21aa:	0a c0       	rjmp	.+20     	; 0x21c0 <__stack+0xc1>
    21ac:	9f 2f       	mov	r25, r31
    21ae:	96 60       	ori	r25, 0x06	; 6
    21b0:	b9 2e       	mov	r11, r25
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <__stack+0xc1>
    21b4:	28 e0       	ldi	r18, 0x08	; 8
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <__stack+0xc5>
    21ba:	20 e1       	ldi	r18, 0x10	; 16
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <__stack+0xc5>
    21c0:	20 e1       	ldi	r18, 0x10	; 16
    21c2:	32 e0       	ldi	r19, 0x02	; 2
    21c4:	f8 01       	movw	r30, r16
    21c6:	b7 fe       	sbrs	r11, 7
    21c8:	07 c0       	rjmp	.+14     	; 0x21d8 <__stack+0xd9>
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	0c 5f       	subi	r16, 0xFC	; 252
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <__stack+0xe5>
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 5f       	subi	r16, 0xFE	; 254
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	a4 01       	movw	r20, r8
    21e6:	b7 d0       	rcall	.+366    	; 0x2356 <__ultoa_invert>
    21e8:	a8 2e       	mov	r10, r24
    21ea:	a8 18       	sub	r10, r8
    21ec:	fb 2d       	mov	r31, r11
    21ee:	ff 77       	andi	r31, 0x7F	; 127
    21f0:	bf 2e       	mov	r11, r31
    21f2:	b6 fe       	sbrs	r11, 6
    21f4:	0b c0       	rjmp	.+22     	; 0x220c <__stack+0x10d>
    21f6:	2b 2d       	mov	r18, r11
    21f8:	2e 7f       	andi	r18, 0xFE	; 254
    21fa:	a5 14       	cp	r10, r5
    21fc:	50 f4       	brcc	.+20     	; 0x2212 <__stack+0x113>
    21fe:	b4 fe       	sbrs	r11, 4
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <__stack+0x117>
    2202:	b2 fc       	sbrc	r11, 2
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <__stack+0x117>
    2206:	2b 2d       	mov	r18, r11
    2208:	2e 7e       	andi	r18, 0xEE	; 238
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <__stack+0x117>
    220c:	7a 2c       	mov	r7, r10
    220e:	2b 2d       	mov	r18, r11
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <__stack+0x119>
    2212:	7a 2c       	mov	r7, r10
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <__stack+0x119>
    2216:	75 2c       	mov	r7, r5
    2218:	24 ff       	sbrs	r18, 4
    221a:	0d c0       	rjmp	.+26     	; 0x2236 <__stack+0x137>
    221c:	fe 01       	movw	r30, r28
    221e:	ea 0d       	add	r30, r10
    2220:	f1 1d       	adc	r31, r1
    2222:	80 81       	ld	r24, Z
    2224:	80 33       	cpi	r24, 0x30	; 48
    2226:	11 f4       	brne	.+4      	; 0x222c <__stack+0x12d>
    2228:	29 7e       	andi	r18, 0xE9	; 233
    222a:	09 c0       	rjmp	.+18     	; 0x223e <__stack+0x13f>
    222c:	22 ff       	sbrs	r18, 2
    222e:	06 c0       	rjmp	.+12     	; 0x223c <__stack+0x13d>
    2230:	73 94       	inc	r7
    2232:	73 94       	inc	r7
    2234:	04 c0       	rjmp	.+8      	; 0x223e <__stack+0x13f>
    2236:	82 2f       	mov	r24, r18
    2238:	86 78       	andi	r24, 0x86	; 134
    223a:	09 f0       	breq	.+2      	; 0x223e <__stack+0x13f>
    223c:	73 94       	inc	r7
    223e:	23 fd       	sbrc	r18, 3
    2240:	12 c0       	rjmp	.+36     	; 0x2266 <__stack+0x167>
    2242:	20 ff       	sbrs	r18, 0
    2244:	06 c0       	rjmp	.+12     	; 0x2252 <__stack+0x153>
    2246:	5a 2c       	mov	r5, r10
    2248:	73 14       	cp	r7, r3
    224a:	18 f4       	brcc	.+6      	; 0x2252 <__stack+0x153>
    224c:	53 0c       	add	r5, r3
    224e:	57 18       	sub	r5, r7
    2250:	73 2c       	mov	r7, r3
    2252:	73 14       	cp	r7, r3
    2254:	60 f4       	brcc	.+24     	; 0x226e <__stack+0x16f>
    2256:	b7 01       	movw	r22, r14
    2258:	80 e2       	ldi	r24, 0x20	; 32
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	2c 87       	std	Y+12, r18	; 0x0c
    225e:	f0 dd       	rcall	.-1056   	; 0x1e40 <fputc>
    2260:	73 94       	inc	r7
    2262:	2c 85       	ldd	r18, Y+12	; 0x0c
    2264:	f6 cf       	rjmp	.-20     	; 0x2252 <__stack+0x153>
    2266:	73 14       	cp	r7, r3
    2268:	10 f4       	brcc	.+4      	; 0x226e <__stack+0x16f>
    226a:	37 18       	sub	r3, r7
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <__stack+0x171>
    226e:	31 2c       	mov	r3, r1
    2270:	24 ff       	sbrs	r18, 4
    2272:	11 c0       	rjmp	.+34     	; 0x2296 <__stack+0x197>
    2274:	b7 01       	movw	r22, r14
    2276:	80 e3       	ldi	r24, 0x30	; 48
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	2c 87       	std	Y+12, r18	; 0x0c
    227c:	e1 dd       	rcall	.-1086   	; 0x1e40 <fputc>
    227e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2280:	22 ff       	sbrs	r18, 2
    2282:	16 c0       	rjmp	.+44     	; 0x22b0 <__stack+0x1b1>
    2284:	21 ff       	sbrs	r18, 1
    2286:	03 c0       	rjmp	.+6      	; 0x228e <__stack+0x18f>
    2288:	88 e5       	ldi	r24, 0x58	; 88
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__stack+0x193>
    228e:	88 e7       	ldi	r24, 0x78	; 120
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	b7 01       	movw	r22, r14
    2294:	0c c0       	rjmp	.+24     	; 0x22ae <__stack+0x1af>
    2296:	82 2f       	mov	r24, r18
    2298:	86 78       	andi	r24, 0x86	; 134
    229a:	51 f0       	breq	.+20     	; 0x22b0 <__stack+0x1b1>
    229c:	21 fd       	sbrc	r18, 1
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <__stack+0x1a5>
    22a0:	80 e2       	ldi	r24, 0x20	; 32
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <__stack+0x1a7>
    22a4:	8b e2       	ldi	r24, 0x2B	; 43
    22a6:	27 fd       	sbrc	r18, 7
    22a8:	8d e2       	ldi	r24, 0x2D	; 45
    22aa:	b7 01       	movw	r22, r14
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	c8 dd       	rcall	.-1136   	; 0x1e40 <fputc>
    22b0:	a5 14       	cp	r10, r5
    22b2:	30 f4       	brcc	.+12     	; 0x22c0 <__stack+0x1c1>
    22b4:	b7 01       	movw	r22, r14
    22b6:	80 e3       	ldi	r24, 0x30	; 48
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	c2 dd       	rcall	.-1148   	; 0x1e40 <fputc>
    22bc:	5a 94       	dec	r5
    22be:	f8 cf       	rjmp	.-16     	; 0x22b0 <__stack+0x1b1>
    22c0:	aa 94       	dec	r10
    22c2:	f4 01       	movw	r30, r8
    22c4:	ea 0d       	add	r30, r10
    22c6:	f1 1d       	adc	r31, r1
    22c8:	80 81       	ld	r24, Z
    22ca:	b7 01       	movw	r22, r14
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	b8 dd       	rcall	.-1168   	; 0x1e40 <fputc>
    22d0:	a1 10       	cpse	r10, r1
    22d2:	f6 cf       	rjmp	.-20     	; 0x22c0 <__stack+0x1c1>
    22d4:	33 20       	and	r3, r3
    22d6:	09 f4       	brne	.+2      	; 0x22da <__stack+0x1db>
    22d8:	5d ce       	rjmp	.-838    	; 0x1f94 <vfprintf+0x4c>
    22da:	b7 01       	movw	r22, r14
    22dc:	80 e2       	ldi	r24, 0x20	; 32
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	af dd       	rcall	.-1186   	; 0x1e40 <fputc>
    22e2:	3a 94       	dec	r3
    22e4:	f7 cf       	rjmp	.-18     	; 0x22d4 <__stack+0x1d5>
    22e6:	f7 01       	movw	r30, r14
    22e8:	86 81       	ldd	r24, Z+6	; 0x06
    22ea:	97 81       	ldd	r25, Z+7	; 0x07
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <__stack+0x1f3>
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	9f ef       	ldi	r25, 0xFF	; 255
    22f2:	2c 96       	adiw	r28, 0x0c	; 12
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	9f 90       	pop	r9
    2314:	8f 90       	pop	r8
    2316:	7f 90       	pop	r7
    2318:	6f 90       	pop	r6
    231a:	5f 90       	pop	r5
    231c:	4f 90       	pop	r4
    231e:	3f 90       	pop	r3
    2320:	2f 90       	pop	r2
    2322:	08 95       	ret

00002324 <__ctype_isfalse>:
    2324:	99 27       	eor	r25, r25
    2326:	88 27       	eor	r24, r24

00002328 <__ctype_istrue>:
    2328:	08 95       	ret

0000232a <strnlen_P>:
    232a:	fc 01       	movw	r30, r24
    232c:	05 90       	lpm	r0, Z+
    232e:	61 50       	subi	r22, 0x01	; 1
    2330:	70 40       	sbci	r23, 0x00	; 0
    2332:	01 10       	cpse	r0, r1
    2334:	d8 f7       	brcc	.-10     	; 0x232c <strnlen_P+0x2>
    2336:	80 95       	com	r24
    2338:	90 95       	com	r25
    233a:	8e 0f       	add	r24, r30
    233c:	9f 1f       	adc	r25, r31
    233e:	08 95       	ret

00002340 <strnlen>:
    2340:	fc 01       	movw	r30, r24
    2342:	61 50       	subi	r22, 0x01	; 1
    2344:	70 40       	sbci	r23, 0x00	; 0
    2346:	01 90       	ld	r0, Z+
    2348:	01 10       	cpse	r0, r1
    234a:	d8 f7       	brcc	.-10     	; 0x2342 <strnlen+0x2>
    234c:	80 95       	com	r24
    234e:	90 95       	com	r25
    2350:	8e 0f       	add	r24, r30
    2352:	9f 1f       	adc	r25, r31
    2354:	08 95       	ret

00002356 <__ultoa_invert>:
    2356:	fa 01       	movw	r30, r20
    2358:	aa 27       	eor	r26, r26
    235a:	28 30       	cpi	r18, 0x08	; 8
    235c:	51 f1       	breq	.+84     	; 0x23b2 <__ultoa_invert+0x5c>
    235e:	20 31       	cpi	r18, 0x10	; 16
    2360:	81 f1       	breq	.+96     	; 0x23c2 <__ultoa_invert+0x6c>
    2362:	e8 94       	clt
    2364:	6f 93       	push	r22
    2366:	6e 7f       	andi	r22, 0xFE	; 254
    2368:	6e 5f       	subi	r22, 0xFE	; 254
    236a:	7f 4f       	sbci	r23, 0xFF	; 255
    236c:	8f 4f       	sbci	r24, 0xFF	; 255
    236e:	9f 4f       	sbci	r25, 0xFF	; 255
    2370:	af 4f       	sbci	r26, 0xFF	; 255
    2372:	b1 e0       	ldi	r27, 0x01	; 1
    2374:	3e d0       	rcall	.+124    	; 0x23f2 <__ultoa_invert+0x9c>
    2376:	b4 e0       	ldi	r27, 0x04	; 4
    2378:	3c d0       	rcall	.+120    	; 0x23f2 <__ultoa_invert+0x9c>
    237a:	67 0f       	add	r22, r23
    237c:	78 1f       	adc	r23, r24
    237e:	89 1f       	adc	r24, r25
    2380:	9a 1f       	adc	r25, r26
    2382:	a1 1d       	adc	r26, r1
    2384:	68 0f       	add	r22, r24
    2386:	79 1f       	adc	r23, r25
    2388:	8a 1f       	adc	r24, r26
    238a:	91 1d       	adc	r25, r1
    238c:	a1 1d       	adc	r26, r1
    238e:	6a 0f       	add	r22, r26
    2390:	71 1d       	adc	r23, r1
    2392:	81 1d       	adc	r24, r1
    2394:	91 1d       	adc	r25, r1
    2396:	a1 1d       	adc	r26, r1
    2398:	20 d0       	rcall	.+64     	; 0x23da <__ultoa_invert+0x84>
    239a:	09 f4       	brne	.+2      	; 0x239e <__ultoa_invert+0x48>
    239c:	68 94       	set
    239e:	3f 91       	pop	r19
    23a0:	2a e0       	ldi	r18, 0x0A	; 10
    23a2:	26 9f       	mul	r18, r22
    23a4:	11 24       	eor	r1, r1
    23a6:	30 19       	sub	r19, r0
    23a8:	30 5d       	subi	r19, 0xD0	; 208
    23aa:	31 93       	st	Z+, r19
    23ac:	de f6       	brtc	.-74     	; 0x2364 <__ultoa_invert+0xe>
    23ae:	cf 01       	movw	r24, r30
    23b0:	08 95       	ret
    23b2:	46 2f       	mov	r20, r22
    23b4:	47 70       	andi	r20, 0x07	; 7
    23b6:	40 5d       	subi	r20, 0xD0	; 208
    23b8:	41 93       	st	Z+, r20
    23ba:	b3 e0       	ldi	r27, 0x03	; 3
    23bc:	0f d0       	rcall	.+30     	; 0x23dc <__ultoa_invert+0x86>
    23be:	c9 f7       	brne	.-14     	; 0x23b2 <__ultoa_invert+0x5c>
    23c0:	f6 cf       	rjmp	.-20     	; 0x23ae <__ultoa_invert+0x58>
    23c2:	46 2f       	mov	r20, r22
    23c4:	4f 70       	andi	r20, 0x0F	; 15
    23c6:	40 5d       	subi	r20, 0xD0	; 208
    23c8:	4a 33       	cpi	r20, 0x3A	; 58
    23ca:	18 f0       	brcs	.+6      	; 0x23d2 <__ultoa_invert+0x7c>
    23cc:	49 5d       	subi	r20, 0xD9	; 217
    23ce:	31 fd       	sbrc	r19, 1
    23d0:	40 52       	subi	r20, 0x20	; 32
    23d2:	41 93       	st	Z+, r20
    23d4:	02 d0       	rcall	.+4      	; 0x23da <__ultoa_invert+0x84>
    23d6:	a9 f7       	brne	.-22     	; 0x23c2 <__ultoa_invert+0x6c>
    23d8:	ea cf       	rjmp	.-44     	; 0x23ae <__ultoa_invert+0x58>
    23da:	b4 e0       	ldi	r27, 0x04	; 4
    23dc:	a6 95       	lsr	r26
    23de:	97 95       	ror	r25
    23e0:	87 95       	ror	r24
    23e2:	77 95       	ror	r23
    23e4:	67 95       	ror	r22
    23e6:	ba 95       	dec	r27
    23e8:	c9 f7       	brne	.-14     	; 0x23dc <__ultoa_invert+0x86>
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	61 05       	cpc	r22, r1
    23ee:	71 05       	cpc	r23, r1
    23f0:	08 95       	ret
    23f2:	9b 01       	movw	r18, r22
    23f4:	ac 01       	movw	r20, r24
    23f6:	0a 2e       	mov	r0, r26
    23f8:	06 94       	lsr	r0
    23fa:	57 95       	ror	r21
    23fc:	47 95       	ror	r20
    23fe:	37 95       	ror	r19
    2400:	27 95       	ror	r18
    2402:	ba 95       	dec	r27
    2404:	c9 f7       	brne	.-14     	; 0x23f8 <__ultoa_invert+0xa2>
    2406:	62 0f       	add	r22, r18
    2408:	73 1f       	adc	r23, r19
    240a:	84 1f       	adc	r24, r20
    240c:	95 1f       	adc	r25, r21
    240e:	a0 1d       	adc	r26, r0
    2410:	08 95       	ret

00002412 <_exit>:
    2412:	f8 94       	cli

00002414 <__stop_program>:
    2414:	ff cf       	rjmp	.-2      	; 0x2414 <__stop_program>

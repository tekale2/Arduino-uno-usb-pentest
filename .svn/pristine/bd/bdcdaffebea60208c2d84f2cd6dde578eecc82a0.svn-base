
BulkVendor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000be4  00000c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000c78  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005045  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001567  00000000  00000000  00006929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002314  00000000  00000000  00007e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008f0  00000000  00000000  0000a1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000232a  00000000  00000000  0000aa94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003aba  00000000  00000000  0000cdbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000500  00000000  00000000  00010878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
   6:	00 00       	nop
   8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
   a:	00 00       	nop
   c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
   e:	00 00       	nop
  10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
  12:	00 00       	nop
  14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
  16:	00 00       	nop
  18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
  22:	00 00       	nop
  24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c3       	rjmp	.+1726   	; 0x6e8 <__vector_10>
  2a:	00 00       	nop
  2c:	2c c4       	rjmp	.+2136   	; 0x886 <__vector_11>
  2e:	00 00       	nop
  30:	82 c0       	rjmp	.+260    	; 0x136 <__bad_interrupt>
  32:	00 00       	nop
  34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
  4e:	00 00       	nop
  50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
  56:	00 00       	nop
  58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
  66:	00 00       	nop
  68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
  72:	00 00       	nop
  74:	60 c0       	rjmp	.+192    	; 0x136 <__bad_interrupt>
  76:	00 00       	nop
  78:	5e c0       	rjmp	.+188    	; 0x136 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5c c0       	rjmp	.+184    	; 0x136 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	5a c0       	rjmp	.+180    	; 0x136 <__bad_interrupt>
  82:	00 00       	nop
  84:	58 c0       	rjmp	.+176    	; 0x136 <__bad_interrupt>
  86:	00 00       	nop
  88:	56 c0       	rjmp	.+172    	; 0x136 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	54 c0       	rjmp	.+168    	; 0x136 <__bad_interrupt>
  8e:	00 00       	nop
  90:	52 c0       	rjmp	.+164    	; 0x136 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	50 c0       	rjmp	.+160    	; 0x136 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	2c 03 4c 00 55 00 46 00 41 00 20 00 42 00 75 00     ,.L.U.F.A. .B.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	6c 00 6b 00 20 00 56 00 65 00 6e 00 64 00 6f 00     l.k. .V.e.n.d.o.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	72 00 20 00 44 00 65 00 6d 00 6f 00 00 00           r. .D.e.m.o...

000000c6 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e0 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
  e4:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f4:	ff 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     ......@......@..

00000104 <DeviceDescriptor>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 104:	12 01 10 01 00 00 00 08 eb 03 6c 20 01 00 01 02     ..........l ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 114:	dc 01                                               ..

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e2       	ldi	r29, 0x20	; 32
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_clear_bss>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
 12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 12c:	ad 30       	cpi	r26, 0x0D	; 13
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	b1 07       	cpc	r27, r17
 130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
 132:	22 d0       	rcall	.+68     	; 0x178 <main>
 134:	55 c5       	rjmp	.+2730   	; 0xbe0 <_exit>

00000136 <__bad_interrupt>:
 136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <LEDs_SetAllLEDs>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	98 2b       	or	r25, r24
 13e:	9b b9       	out	0x0b, r25	; 11
 140:	08 95       	ret

00000142 <SetupHardware>:
 142:	84 b7       	in	r24, 0x34	; 52
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	84 bf       	out	0x34, r24	; 52
				ReportData     += 4;
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
				break;
 14e:	80 93 60 00 	sts	0x0060, r24

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 152:	10 92 60 00 	sts	0x0060, r1
 156:	0f be       	out	0x3f, r0	; 63
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	80 93 61 00 	sts	0x0061, r24
				ReportSize     -= 2;
 164:	90 93 61 00 	sts	0x0061, r25
				ReportData     += 2;
 168:	0f be       	out	0x3f, r0	; 63
 16a:	8a b1       	in	r24, 0x0a	; 10
				break;
 16c:	80 6f       	ori	r24, 0xF0	; 240

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	8a b9       	out	0x0a, r24	; 10
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	8b b9       	out	0x0b, r24	; 11
 176:	9d c2       	rjmp	.+1338   	; 0x6b2 <USB_Init>

00000178 <main>:
 178:	cf 93       	push	r28
				ReportSize     -= 1;
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
				ReportData     += 1;
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	c0 54       	subi	r28, 0x40	; 64
 182:	d1 09       	sbc	r29, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	d9 df       	rcall	.-78     	; 0x142 <SetupHardware>
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	d2 df       	rcall	.-92     	; 0x138 <LEDs_SetAllLEDs>
 194:	78 94       	sei
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	e8 2e       	mov	r14, r24
 19a:	8e 01       	movw	r16, r28
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	d9 2e       	mov	r13, r25
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	f2 2e       	mov	r15, r18
 1a8:	ff d4       	rcall	.+2558   	; 0xba8 <USB_USBTask>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	f8 01       	movw	r30, r16
 1ac:	8e 2d       	mov	r24, r14
 1ae:	11 92       	st	Z+, r1
 1b0:	8a 95       	dec	r24
 1b2:	e9 f7       	brne	.-6      	; 0x1ae <main+0x36>
				break;
 1b4:	d0 92 e9 00 	sts	0x00E9, r13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b8:	80 91 e8 00 	lds	r24, 0x00E8
 1bc:	82 ff       	sbrs	r24, 2
 1be:	f4 cf       	rjmp	.-24     	; 0x1a8 <main+0x30>
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	60 e4       	ldi	r22, 0x40	; 64
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	c8 01       	movw	r24, r16
 1ca:	a4 d0       	rcall	.+328    	; 0x314 <Endpoint_Read_Stream_LE>
 1cc:	80 91 e8 00 	lds	r24, 0x00E8
 1d0:	8b 77       	andi	r24, 0x7B	; 123
 1d2:	80 93 e8 00 	sts	0x00E8, r24
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	f0 92 e9 00 	sts	0x00E9, r15
 1da:	40 e0       	ldi	r20, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	60 e4       	ldi	r22, 0x40	; 64
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	c8 01       	movw	r24, r16
 1e4:	50 d0       	rcall	.+160    	; 0x286 <Endpoint_Write_Stream_LE>
 1e6:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1ea:	8e 77       	andi	r24, 0x7E	; 126
				break;
 1ec:	80 93 e8 00 	sts	0x00E8, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1f0:	db cf       	rjmp	.-74     	; 0x1a8 <main+0x30>

000001f2 <EVENT_USB_Device_Connect>:
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	a1 cf       	rjmp	.-190    	; 0x138 <LEDs_SetAllLEDs>

000001f6 <EVENT_USB_Device_Disconnect>:
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	9f cf       	rjmp	.-194    	; 0x138 <LEDs_SetAllLEDs>

000001fa <EVENT_USB_Device_ConfigurationChanged>:
 1fa:	cf 93       	push	r28
 1fc:	42 e3       	ldi	r20, 0x32	; 50
 1fe:	61 e8       	ldi	r22, 0x81	; 129
 200:	83 e0       	ldi	r24, 0x03	; 3
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	8c d1       	rcall	.+792    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>
 204:	c8 2f       	mov	r28, r24
				break;
 206:	42 e3       	ldi	r20, 0x32	; 50
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	60 e8       	ldi	r22, 0x80	; 128
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	87 d1       	rcall	.+782    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>
 20e:	88 23       	and	r24, r24
 210:	21 f0       	breq	.+8      	; 0x21a <EVENT_USB_Device_ConfigurationChanged+0x20>
 212:	cc 23       	and	r28, r28
 214:	11 f0       	breq	.+4      	; 0x21a <EVENT_USB_Device_ConfigurationChanged+0x20>
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	01 c0       	rjmp	.+2      	; 0x21c <EVENT_USB_Device_ConfigurationChanged+0x22>
 21a:	80 e9       	ldi	r24, 0x90	; 144
 21c:	cf 91       	pop	r28
 21e:	8c cf       	rjmp	.-232    	; 0x138 <LEDs_SetAllLEDs>

00000220 <EVENT_USB_Device_ControlRequest>:
 220:	08 95       	ret

00000222 <CALLBACK_USB_GetDescriptor>:
 222:	29 2f       	mov	r18, r25
 224:	33 27       	eor	r19, r19
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	31 05       	cpc	r19, r1
 22a:	59 f0       	breq	.+22     	; 0x242 <CALLBACK_USB_GetDescriptor+0x20>
 22c:	23 30       	cpi	r18, 0x03	; 3
 22e:	31 05       	cpc	r19, r1
 230:	69 f0       	breq	.+26     	; 0x24c <CALLBACK_USB_GetDescriptor+0x2a>
 232:	21 30       	cpi	r18, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	31 05       	cpc	r19, r1
 236:	f9 f4       	brne	.+62     	; 0x276 <CALLBACK_USB_GetDescriptor+0x54>
 238:	82 e1       	ldi	r24, 0x12	; 18
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	31 e0       	ldi	r19, 0x01	; 1
 240:	1e c0       	rjmp	.+60     	; 0x27e <CALLBACK_USB_GetDescriptor+0x5c>
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	24 ee       	ldi	r18, 0xE4	; 228
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	19 c0       	rjmp	.+50     	; 0x27e <CALLBACK_USB_GetDescriptor+0x5c>
 24c:	99 27       	eor	r25, r25
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	91 05       	cpc	r25, r1
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	41 f0       	breq	.+16     	; 0x264 <CALLBACK_USB_GetDescriptor+0x42>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	91 05       	cpc	r25, r1
 258:	41 f0       	breq	.+16     	; 0x26a <CALLBACK_USB_GetDescriptor+0x48>
 25a:	89 2b       	or	r24, r25
 25c:	61 f4       	brne	.+24     	; 0x276 <CALLBACK_USB_GetDescriptor+0x54>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	e0 ee       	ldi	r30, 0xE0	; 224
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	05 c0       	rjmp	.+10     	; 0x26e <CALLBACK_USB_GetDescriptor+0x4c>
 264:	e6 ec       	ldi	r30, 0xC6	; 198
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <CALLBACK_USB_GetDescriptor+0x4c>
 26a:	e8 e9       	ldi	r30, 0x98	; 152
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	84 91       	lpm	r24, Z
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	90 e0       	ldi	r25, 0x00	; 0
				break;
 272:	9f 01       	movw	r18, r30

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	04 c0       	rjmp	.+8      	; 0x27e <CALLBACK_USB_GetDescriptor+0x5c>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	fa 01       	movw	r30, r20
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	31 83       	std	Z+1, r19	; 0x01
 282:	20 83       	st	Z, r18
				break;
 284:	08 95       	ret

00000286 <Endpoint_Write_Stream_LE>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	cf 92       	push	r12
 288:	df 92       	push	r13
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
				break;
 290:	1f 93       	push	r17

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	7c 01       	movw	r14, r24
 298:	8b 01       	movw	r16, r22
 29a:	ea 01       	movw	r28, r20
 29c:	95 d1       	rcall	.+810    	; 0x5c8 <Endpoint_WaitUntilReady>
 29e:	81 11       	cpse	r24, r1
				break;
 2a0:	30 c0       	rjmp	.+96     	; 0x302 <Endpoint_Write_Stream_LE+0x7c>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	20 97       	sbiw	r28, 0x00	; 0
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <Endpoint_Write_Stream_LE+0x2c>
 2a6:	88 81       	ld	r24, Y
 2a8:	99 81       	ldd	r25, Y+1	; 0x01
 2aa:	08 1b       	sub	r16, r24
				break;
 2ac:	19 0b       	sbc	r17, r25

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	e8 0e       	add	r14, r24
 2b0:	f9 1e       	adc	r15, r25
 2b2:	c1 2c       	mov	r12, r1
 2b4:	d1 2c       	mov	r13, r1
 2b6:	01 15       	cp	r16, r1
 2b8:	11 05       	cpc	r17, r1
 2ba:	11 f1       	breq	.+68     	; 0x300 <Endpoint_Write_Stream_LE+0x7a>
				break;
 2bc:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	85 fd       	sbrc	r24, 5
 2c2:	13 c0       	rjmp	.+38     	; 0x2ea <Endpoint_Write_Stream_LE+0x64>
 2c4:	80 91 e8 00 	lds	r24, 0x00E8
 2c8:	8e 77       	andi	r24, 0x7E	; 126
 2ca:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	20 97       	sbiw	r28, 0x00	; 0
 2d0:	41 f0       	breq	.+16     	; 0x2e2 <Endpoint_Write_Stream_LE+0x5c>
 2d2:	88 81       	ld	r24, Y
				break;
 2d4:	99 81       	ldd	r25, Y+1	; 0x01

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	8c 0d       	add	r24, r12
 2d8:	9d 1d       	adc	r25, r13
 2da:	99 83       	std	Y+1, r25	; 0x01

				if (ParserData->UsingReportIDs)
 2dc:	88 83       	st	Y, r24
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	10 c0       	rjmp	.+32     	; 0x302 <Endpoint_Write_Stream_LE+0x7c>
 2e2:	72 d1       	rcall	.+740    	; 0x5c8 <Endpoint_WaitUntilReady>
 2e4:	88 23       	and	r24, r24
 2e6:	39 f3       	breq	.-50     	; 0x2b6 <Endpoint_Write_Stream_LE+0x30>
 2e8:	0c c0       	rjmp	.+24     	; 0x302 <Endpoint_Write_Stream_LE+0x7c>
 2ea:	f7 01       	movw	r30, r14
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	81 91       	ld	r24, Z+
 2ee:	7f 01       	movw	r14, r30
 2f0:	80 93 f1 00 	sts	0x00F1, r24
 2f4:	01 50       	subi	r16, 0x01	; 1
 2f6:	11 09       	sbc	r17, r1
 2f8:	ff ef       	ldi	r31, 0xFF	; 255
 2fa:	cf 1a       	sub	r12, r31
 2fc:	df 0a       	sbc	r13, r31
 2fe:	db cf       	rjmp	.-74     	; 0x2b6 <Endpoint_Write_Stream_LE+0x30>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	df 91       	pop	r29
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	08 95       	ret

00000314 <Endpoint_Read_Stream_LE>:
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	7c 01       	movw	r14, r24
 326:	8b 01       	movw	r16, r22
 328:	ea 01       	movw	r28, r20
 32a:	4e d1       	rcall	.+668    	; 0x5c8 <Endpoint_WaitUntilReady>
 32c:	81 11       	cpse	r24, r1
 32e:	30 c0       	rjmp	.+96     	; 0x390 <Endpoint_Read_Stream_LE+0x7c>
 330:	20 97       	sbiw	r28, 0x00	; 0
 332:	31 f0       	breq	.+12     	; 0x340 <Endpoint_Read_Stream_LE+0x2c>
 334:	88 81       	ld	r24, Y
 336:	99 81       	ldd	r25, Y+1	; 0x01
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	08 1b       	sub	r16, r24
 33a:	19 0b       	sbc	r17, r25
 33c:	e8 0e       	add	r14, r24
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	f9 1e       	adc	r15, r25
 340:	c1 2c       	mov	r12, r1
 342:	d1 2c       	mov	r13, r1
 344:	01 15       	cp	r16, r1
 346:	11 05       	cpc	r17, r1
 348:	11 f1       	breq	.+68     	; 0x38e <Endpoint_Read_Stream_LE+0x7a>
 34a:	80 91 e8 00 	lds	r24, 0x00E8
 34e:	85 fd       	sbrc	r24, 5
 350:	13 c0       	rjmp	.+38     	; 0x378 <Endpoint_Read_Stream_LE+0x64>
 352:	80 91 e8 00 	lds	r24, 0x00E8
 356:	8b 77       	andi	r24, 0x7B	; 123
 358:	80 93 e8 00 	sts	0x00E8, r24
 35c:	20 97       	sbiw	r28, 0x00	; 0
 35e:	41 f0       	breq	.+16     	; 0x370 <Endpoint_Read_Stream_LE+0x5c>
 360:	88 81       	ld	r24, Y
 362:	99 81       	ldd	r25, Y+1	; 0x01
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	8c 0d       	add	r24, r12
 366:	9d 1d       	adc	r25, r13
 368:	99 83       	std	Y+1, r25	; 0x01
 36a:	88 83       	st	Y, r24
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	10 c0       	rjmp	.+32     	; 0x390 <Endpoint_Read_Stream_LE+0x7c>
 370:	2b d1       	rcall	.+598    	; 0x5c8 <Endpoint_WaitUntilReady>
 372:	88 23       	and	r24, r24
 374:	39 f3       	breq	.-50     	; 0x344 <Endpoint_Read_Stream_LE+0x30>
 376:	0c c0       	rjmp	.+24     	; 0x390 <Endpoint_Read_Stream_LE+0x7c>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	80 91 f1 00 	lds	r24, 0x00F1
 37c:	f7 01       	movw	r30, r14
 37e:	81 93       	st	Z+, r24
 380:	7f 01       	movw	r14, r30
 382:	01 50       	subi	r16, 0x01	; 1
 384:	11 09       	sbc	r17, r1
 386:	ff ef       	ldi	r31, 0xFF	; 255
				break;
 388:	cf 1a       	sub	r12, r31

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	df 0a       	sbc	r13, r31
 38c:	db cf       	rjmp	.-74     	; 0x344 <Endpoint_Read_Stream_LE+0x30>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	08 95       	ret

000003a2 <Endpoint_Write_Control_Stream_LE>:
 3a2:	20 91 0b 01 	lds	r18, 0x010B
 3a6:	30 91 0c 01 	lds	r19, 0x010C
 3aa:	26 17       	cp	r18, r22
 3ac:	37 07       	cpc	r19, r23
 3ae:	48 f0       	brcs	.+18     	; 0x3c2 <Endpoint_Write_Control_Stream_LE+0x20>
				break;
 3b0:	61 15       	cp	r22, r1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	71 05       	cpc	r23, r1
 3b4:	39 f4       	brne	.+14     	; 0x3c4 <Endpoint_Write_Control_Stream_LE+0x22>
 3b6:	20 91 e8 00 	lds	r18, 0x00E8
 3ba:	2e 77       	andi	r18, 0x7E	; 126
 3bc:	20 93 e8 00 	sts	0x00E8, r18
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <Endpoint_Write_Control_Stream_LE+0x22>
 3c2:	b9 01       	movw	r22, r18
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	61 15       	cp	r22, r1
 3ca:	71 05       	cpc	r23, r1
 3cc:	99 f1       	breq	.+102    	; 0x434 <Endpoint_Write_Control_Stream_LE+0x92>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	80 91 04 01 	lds	r24, 0x0104
 3d2:	88 23       	and	r24, r24

					while (CurrCollectionPath->Parent != NULL)
 3d4:	e9 f1       	breq	.+122    	; 0x450 <Endpoint_Write_Control_Stream_LE+0xae>
 3d6:	85 30       	cpi	r24, 0x05	; 5
 3d8:	e9 f1       	breq	.+122    	; 0x454 <Endpoint_Write_Control_Stream_LE+0xb2>
 3da:	80 91 e8 00 	lds	r24, 0x00E8
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3de:	83 fd       	sbrc	r24, 3
 3e0:	3b c0       	rjmp	.+118    	; 0x458 <Endpoint_Write_Control_Stream_LE+0xb6>
 3e2:	80 91 e8 00 	lds	r24, 0x00E8
 3e6:	82 ff       	sbrs	r24, 2
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0x54>
 3ea:	80 91 e8 00 	lds	r24, 0x00E8
 3ee:	82 ff       	sbrs	r24, 2
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	24 c0       	rjmp	.+72     	; 0x43a <Endpoint_Write_Control_Stream_LE+0x98>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	08 95       	ret
 3f6:	80 91 e8 00 	lds	r24, 0x00E8
 3fa:	80 ff       	sbrs	r24, 0
 3fc:	e5 cf       	rjmp	.-54     	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0x26>
 3fe:	80 91 f2 00 	lds	r24, 0x00F2
 402:	90 91 f3 00 	lds	r25, 0x00F3
 406:	61 15       	cp	r22, r1
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	71 05       	cpc	r23, r1
 40a:	51 f0       	breq	.+20     	; 0x420 <Endpoint_Write_Control_Stream_LE+0x7e>
 40c:	88 30       	cpi	r24, 0x08	; 8
 40e:	91 05       	cpc	r25, r1
 410:	38 f4       	brcc	.+14     	; 0x420 <Endpoint_Write_Control_Stream_LE+0x7e>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	21 91       	ld	r18, Z+
 414:	20 93 f1 00 	sts	0x00F1, r18
 418:	61 50       	subi	r22, 0x01	; 1
 41a:	71 09       	sbc	r23, r1
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	f3 cf       	rjmp	.-26     	; 0x406 <Endpoint_Write_Control_Stream_LE+0x64>

				if (UsageListSize)
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	08 97       	sbiw	r24, 0x08	; 8
 424:	09 f0       	breq	.+2      	; 0x428 <Endpoint_Write_Control_Stream_LE+0x86>
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42c:	8e 77       	andi	r24, 0x7E	; 126
 42e:	80 93 e8 00 	sts	0x00E8, r24
 432:	ca cf       	rjmp	.-108    	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0x26>
 434:	21 11       	cpse	r18, r1
 436:	cb cf       	rjmp	.-106    	; 0x3ce <Endpoint_Write_Control_Stream_LE+0x2c>
 438:	d8 cf       	rjmp	.-80     	; 0x3ea <Endpoint_Write_Control_Stream_LE+0x48>
 43a:	80 91 04 01 	lds	r24, 0x0104
 43e:	88 23       	and	r24, r24

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	39 f0       	breq	.+14     	; 0x450 <Endpoint_Write_Control_Stream_LE+0xae>
 442:	85 30       	cpi	r24, 0x05	; 5
 444:	39 f0       	breq	.+14     	; 0x454 <Endpoint_Write_Control_Stream_LE+0xb2>
 446:	80 91 e8 00 	lds	r24, 0x00E8
 44a:	83 ff       	sbrs	r24, 3
					  UsageList[i - 1] = UsageList[i];
 44c:	ce cf       	rjmp	.-100    	; 0x3ea <Endpoint_Write_Control_Stream_LE+0x48>
 44e:	04 c0       	rjmp	.+8      	; 0x458 <Endpoint_Write_Control_Stream_LE+0xb6>
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	08 95       	ret

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	08 95       	ret
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret

0000045c <Endpoint_Write_Control_PStream_LE>:
 45c:	20 91 0b 01 	lds	r18, 0x010B
 460:	30 91 0c 01 	lds	r19, 0x010C
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 464:	26 17       	cp	r18, r22
 466:	37 07       	cpc	r19, r23
 468:	48 f0       	brcs	.+18     	; 0x47c <Endpoint_Write_Control_PStream_LE+0x20>
 46a:	61 15       	cp	r22, r1
 46c:	71 05       	cpc	r23, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	39 f4       	brne	.+14     	; 0x47e <Endpoint_Write_Control_PStream_LE+0x22>
 470:	20 91 e8 00 	lds	r18, 0x00E8
 474:	2e 77       	andi	r18, 0x7E	; 126
 476:	20 93 e8 00 	sts	0x00E8, r18
 47a:	01 c0       	rjmp	.+2      	; 0x47e <Endpoint_Write_Control_PStream_LE+0x22>
 47c:	b9 01       	movw	r22, r18
 47e:	fc 01       	movw	r30, r24
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	61 15       	cp	r22, r1
 484:	71 05       	cpc	r23, r1
 486:	b1 f1       	breq	.+108    	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x98>
 488:	80 91 04 01 	lds	r24, 0x0104
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48c:	88 23       	and	r24, r24
 48e:	09 f4       	brne	.+2      	; 0x492 <Endpoint_Write_Control_PStream_LE+0x36>
 490:	3f c0       	rjmp	.+126    	; 0x510 <Endpoint_Write_Control_PStream_LE+0xb4>
 492:	85 30       	cpi	r24, 0x05	; 5
 494:	09 f4       	brne	.+2      	; 0x498 <Endpoint_Write_Control_PStream_LE+0x3c>
 496:	3e c0       	rjmp	.+124    	; 0x514 <Endpoint_Write_Control_PStream_LE+0xb8>
 498:	80 91 e8 00 	lds	r24, 0x00E8
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49c:	83 fd       	sbrc	r24, 3
 49e:	3c c0       	rjmp	.+120    	; 0x518 <Endpoint_Write_Control_PStream_LE+0xbc>
 4a0:	80 91 e8 00 	lds	r24, 0x00E8
 4a4:	82 ff       	sbrs	r24, 2
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x58>
 4a8:	80 91 e8 00 	lds	r24, 0x00E8
				break;
 4ac:	82 ff       	sbrs	r24, 2
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	25 c0       	rjmp	.+74     	; 0x4fa <Endpoint_Write_Control_PStream_LE+0x9e>
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
 4b4:	80 91 e8 00 	lds	r24, 0x00E8
 4b8:	80 ff       	sbrs	r24, 0
 4ba:	e3 cf       	rjmp	.-58     	; 0x482 <Endpoint_Write_Control_PStream_LE+0x26>
 4bc:	80 91 f2 00 	lds	r24, 0x00F2
 4c0:	90 91 f3 00 	lds	r25, 0x00F3
 4c4:	61 15       	cp	r22, r1
 4c6:	71 05       	cpc	r23, r1
 4c8:	59 f0       	breq	.+22     	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0x84>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	88 30       	cpi	r24, 0x08	; 8
 4cc:	91 05       	cpc	r25, r1
 4ce:	40 f4       	brcc	.+16     	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0x84>
 4d0:	24 91       	lpm	r18, Z
 4d2:	20 93 f1 00 	sts	0x00F1, r18
 4d6:	31 96       	adiw	r30, 0x01	; 1
 4d8:	61 50       	subi	r22, 0x01	; 1
 4da:	71 09       	sbc	r23, r1
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <Endpoint_Write_Control_PStream_LE+0x68>
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	08 97       	sbiw	r24, 0x08	; 8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <Endpoint_Write_Control_PStream_LE+0x8c>
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	80 91 e8 00 	lds	r24, 0x00E8
 4ec:	8e 77       	andi	r24, 0x7E	; 126
 4ee:	80 93 e8 00 	sts	0x00E8, r24
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f2:	c7 cf       	rjmp	.-114    	; 0x482 <Endpoint_Write_Control_PStream_LE+0x26>
 4f4:	21 11       	cpse	r18, r1
 4f6:	c8 cf       	rjmp	.-112    	; 0x488 <Endpoint_Write_Control_PStream_LE+0x2c>
 4f8:	d7 cf       	rjmp	.-82     	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x4c>
 4fa:	80 91 04 01 	lds	r24, 0x0104
 4fe:	88 23       	and	r24, r24
 500:	39 f0       	breq	.+14     	; 0x510 <Endpoint_Write_Control_PStream_LE+0xb4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	85 30       	cpi	r24, 0x05	; 5
 504:	39 f0       	breq	.+14     	; 0x514 <Endpoint_Write_Control_PStream_LE+0xb8>
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	80 91 e8 00 	lds	r24, 0x00E8
 50a:	83 ff       	sbrs	r24, 3
 50c:	cd cf       	rjmp	.-102    	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x4c>
 50e:	04 c0       	rjmp	.+8      	; 0x518 <Endpoint_Write_Control_PStream_LE+0xbc>
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	08 95       	ret
 514:	83 e0       	ldi	r24, 0x03	; 3
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	08 95       	ret
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	08 95       	ret

0000051c <Endpoint_ConfigureEndpoint_Prv>:
 51c:	98 2f       	mov	r25, r24

					if (UsageListSize)
 51e:	97 30       	cpi	r25, 0x07	; 7
 520:	58 f5       	brcc	.+86     	; 0x578 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 522:	90 93 e9 00 	sts	0x00E9, r25
 526:	98 17       	cp	r25, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	39 f0       	breq	.+14     	; 0x538 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 52a:	70 91 ec 00 	lds	r23, 0x00EC
 52e:	20 91 ed 00 	lds	r18, 0x00ED
 532:	50 91 f0 00 	lds	r21, 0x00F0
 536:	03 c0       	rjmp	.+6      	; 0x53e <Endpoint_ConfigureEndpoint_Prv+0x22>
 538:	24 2f       	mov	r18, r20
 53a:	76 2f       	mov	r23, r22
 53c:	50 e0       	ldi	r21, 0x00	; 0

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	21 ff       	sbrs	r18, 1
 540:	19 c0       	rjmp	.+50     	; 0x574 <Endpoint_ConfigureEndpoint_Prv+0x58>
 542:	30 91 eb 00 	lds	r19, 0x00EB
 546:	3e 7f       	andi	r19, 0xFE	; 254
 548:	30 93 eb 00 	sts	0x00EB, r19
						  UsageList[i - 1] = UsageList[i];
 54c:	30 91 ed 00 	lds	r19, 0x00ED
 550:	3d 7f       	andi	r19, 0xFD	; 253

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	30 93 ed 00 	sts	0x00ED, r19
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	30 91 eb 00 	lds	r19, 0x00EB
 55a:	31 60       	ori	r19, 0x01	; 1
 55c:	30 93 eb 00 	sts	0x00EB, r19
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	70 93 ec 00 	sts	0x00EC, r23
 564:	20 93 ed 00 	sts	0x00ED, r18
 568:	50 93 f0 00 	sts	0x00F0, r21
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56c:	20 91 ee 00 	lds	r18, 0x00EE
 570:	27 ff       	sbrs	r18, 7
 572:	07 c0       	rjmp	.+14     	; 0x582 <Endpoint_ConfigureEndpoint_Prv+0x66>
 574:	9f 5f       	subi	r25, 0xFF	; 255
 576:	d3 cf       	rjmp	.-90     	; 0x51e <Endpoint_ConfigureEndpoint_Prv+0x2>
 578:	8f 70       	andi	r24, 0x0F	; 15
 57a:	80 93 e9 00 	sts	0x00E9, r24
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57e:	81 e0       	ldi	r24, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	08 95       	ret
 582:	80 e0       	ldi	r24, 0x00	; 0
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	08 95       	ret

00000586 <Endpoint_ClearStatusStage>:
 586:	80 91 05 01 	lds	r24, 0x0105
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 58a:	87 fd       	sbrc	r24, 7
 58c:	05 c0       	rjmp	.+10     	; 0x598 <Endpoint_ClearStatusStage+0x12>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	80 91 e8 00 	lds	r24, 0x00E8

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	80 ff       	sbrs	r24, 0
 594:	0e c0       	rjmp	.+28     	; 0x5b2 <Endpoint_ClearStatusStage+0x2c>
 596:	12 c0       	rjmp	.+36     	; 0x5bc <Endpoint_ClearStatusStage+0x36>
 598:	80 91 e8 00 	lds	r24, 0x00E8
 59c:	82 fd       	sbrc	r24, 2
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <Endpoint_ClearStatusStage+0x24>
 5a0:	80 91 04 01 	lds	r24, 0x0104
 5a4:	81 11       	cpse	r24, r1
 5a6:	f8 cf       	rjmp	.-16     	; 0x598 <Endpoint_ClearStatusStage+0x12>
 5a8:	08 95       	ret
 5aa:	80 91 e8 00 	lds	r24, 0x00E8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ae:	8b 77       	andi	r24, 0x7B	; 123
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <Endpoint_ClearStatusStage+0x3c>
 5b2:	80 91 04 01 	lds	r24, 0x0104
 5b6:	81 11       	cpse	r24, r1
 5b8:	ea cf       	rjmp	.-44     	; 0x58e <Endpoint_ClearStatusStage+0x8>
 5ba:	08 95       	ret

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	80 91 e8 00 	lds	r24, 0x00E8
 5c0:	8e 77       	andi	r24, 0x7E	; 126
 5c2:	80 93 e8 00 	sts	0x00E8, r24
 5c6:	08 95       	ret

000005c8 <Endpoint_WaitUntilReady>:
 5c8:	80 91 e4 00 	lds	r24, 0x00E4
 5cc:	90 91 e5 00 	lds	r25, 0x00E5
 5d0:	45 e6       	ldi	r20, 0x65	; 101
 5d2:	20 91 ec 00 	lds	r18, 0x00EC
 5d6:	20 ff       	sbrs	r18, 0
 5d8:	21 c0       	rjmp	.+66     	; 0x61c <Endpoint_WaitUntilReady+0x54>
 5da:	20 91 e8 00 	lds	r18, 0x00E8
 5de:	20 fd       	sbrc	r18, 0
 5e0:	21 c0       	rjmp	.+66     	; 0x624 <Endpoint_WaitUntilReady+0x5c>
 5e2:	20 91 04 01 	lds	r18, 0x0104
 5e6:	22 23       	and	r18, r18
 5e8:	89 f0       	breq	.+34     	; 0x60c <Endpoint_WaitUntilReady+0x44>
 5ea:	25 30       	cpi	r18, 0x05	; 5
 5ec:	89 f0       	breq	.+34     	; 0x610 <Endpoint_WaitUntilReady+0x48>
 5ee:	20 91 eb 00 	lds	r18, 0x00EB
 5f2:	25 fd       	sbrc	r18, 5

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	0f c0       	rjmp	.+30     	; 0x614 <Endpoint_WaitUntilReady+0x4c>
 5f6:	20 91 e4 00 	lds	r18, 0x00E4
 5fa:	30 91 e5 00 	lds	r19, 0x00E5
					  return HID_PARSE_InsufficientReportItems;
 5fe:	28 17       	cp	r18, r24
 600:	39 07       	cpc	r19, r25

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	39 f3       	breq	.-50     	; 0x5d2 <Endpoint_WaitUntilReady+0xa>
 604:	41 50       	subi	r20, 0x01	; 1
 606:	41 f0       	breq	.+16     	; 0x618 <Endpoint_WaitUntilReady+0x50>
 608:	c9 01       	movw	r24, r18
 60a:	e3 cf       	rjmp	.-58     	; 0x5d2 <Endpoint_WaitUntilReady+0xa>
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	08 95       	ret
 610:	83 e0       	ldi	r24, 0x03	; 3
 612:	08 95       	ret
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	08 95       	ret
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	08 95       	ret
 61c:	20 91 e8 00 	lds	r18, 0x00E8
 620:	22 ff       	sbrs	r18, 2
 622:	df cf       	rjmp	.-66     	; 0x5e2 <Endpoint_WaitUntilReady+0x1a>
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret

00000628 <USB_ResetInterface>:
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	4e d0       	rcall	.+156    	; 0x6ce <USB_INT_DisableAllInterrupts>
 632:	55 d0       	rcall	.+170    	; 0x6de <USB_INT_ClearAllInterrupts>
 634:	c8 ed       	ldi	r28, 0xD8	; 216
 636:	d0 e0       	ldi	r29, 0x00	; 0
 638:	88 81       	ld	r24, Y
 63a:	8f 77       	andi	r24, 0x7F	; 127
 63c:	88 83       	st	Y, r24
 63e:	88 81       	ld	r24, Y
 640:	80 68       	ori	r24, 0x80	; 128
 642:	88 83       	st	Y, r24
 644:	88 81       	ld	r24, Y
 646:	8f 7d       	andi	r24, 0xDF	; 223
 648:	88 83       	st	Y, r24
 64a:	e7 ed       	ldi	r30, 0xD7	; 215
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	80 68       	ori	r24, 0x80	; 128
 652:	80 83       	st	Z, r24
 654:	19 bc       	out	0x29, r1	; 41
 656:	10 92 04 01 	sts	0x0104, r1
 65a:	10 92 00 01 	sts	0x0100, r1
 65e:	10 92 02 01 	sts	0x0102, r1
 662:	10 92 01 01 	sts	0x0101, r1
 666:	00 ee       	ldi	r16, 0xE0	; 224
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	f8 01       	movw	r30, r16
 66c:	80 81       	ld	r24, Z
 66e:	8b 7f       	andi	r24, 0xFB	; 251
 670:	80 83       	st	Z, r24
 672:	88 81       	ld	r24, Y
 674:	81 60       	ori	r24, 0x01	; 1
 676:	88 83       	st	Y, r24
 678:	42 e0       	ldi	r20, 0x02	; 2
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	4e df       	rcall	.-356    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>
 680:	e1 ee       	ldi	r30, 0xE1	; 225
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	8e 7f       	andi	r24, 0xFE	; 254
					  ParserData->TotalReportItems++;
 688:	80 83       	st	Z, r24
 68a:	e2 ee       	ldi	r30, 0xE2	; 226
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	81 60       	ori	r24, 0x01	; 1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	80 83       	st	Z, r24
 694:	80 81       	ld	r24, Z
 696:	88 60       	ori	r24, 0x08	; 8
 698:	80 83       	st	Z, r24
 69a:	f8 01       	movw	r30, r16
 69c:	80 81       	ld	r24, Z
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	8e 7f       	andi	r24, 0xFE	; 254
 6a0:	80 83       	st	Z, r24
 6a2:	88 81       	ld	r24, Y
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	80 61       	ori	r24, 0x10	; 16
 6a6:	88 83       	st	Y, r24
 6a8:	df 91       	pop	r29
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

000006b2 <USB_Init>:
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	e8 ed       	ldi	r30, 0xD8	; 216
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	8f 7e       	andi	r24, 0xEF	; 239
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	80 83       	st	Z, r24
 6bc:	e7 ed       	ldi	r30, 0xD7	; 215

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	80 83       	st	Z, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 03 01 	sts	0x0103, r24
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6cc:	ad cf       	rjmp	.-166    	; 0x628 <USB_ResetInterface>

000006ce <USB_INT_DisableAllInterrupts>:

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	e8 ed       	ldi	r30, 0xD8	; 216
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	80 81       	ld	r24, Z
 6d4:	8c 7f       	andi	r24, 0xFC	; 252
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	80 83       	st	Z, r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	10 92 e2 00 	sts	0x00E2, r1
 6dc:	08 95       	ret

000006de <USB_INT_ClearAllInterrupts>:
 6de:	10 92 da 00 	sts	0x00DA, r1
 6e2:	10 92 e1 00 	sts	0x00E1, r1
 6e6:	08 95       	ret

000006e8 <__vector_10>:
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	0b b6       	in	r0, 0x3b	; 59
 6f4:	0f 92       	push	r0
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 70c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 70e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 712:	82 ff       	sbrs	r24, 2
 714:	0a c0       	rjmp	.+20     	; 0x72a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 716:	80 91 e2 00 	lds	r24, 0x00E2
 71a:	82 ff       	sbrs	r24, 2
 71c:	06 c0       	rjmp	.+12     	; 0x72a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 71e:	80 91 e1 00 	lds	r24, 0x00E1
 722:	8b 7f       	andi	r24, 0xFB	; 251
 724:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 728:	3e d2       	rcall	.+1148   	; 0xba6 <USB_Event_Stub>
 72a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 72e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 730:	1d c0       	rjmp	.+58     	; 0x76c <__vector_10+0x84>
 732:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 736:	80 ff       	sbrs	r24, 0
 738:	19 c0       	rjmp	.+50     	; 0x76c <__vector_10+0x84>
 73a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 73e:	8e 7f       	andi	r24, 0xFE	; 254
 740:	80 93 da 00 	sts	0x00DA, r24
 744:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 748:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 74a:	0c c0       	rjmp	.+24     	; 0x764 <__vector_10+0x7c>
 74c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 74e:	89 bd       	out	0x29, r24	; 41
 750:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 752:	89 bd       	out	0x29, r24	; 41
 754:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 756:	00 fe       	sbrs	r0, 0
 758:	fd cf       	rjmp	.-6      	; 0x754 <__vector_10+0x6c>
 75a:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 75c:	80 93 04 01 	sts	0x0104, r24
 760:	48 dd       	rcall	.-1392   	; 0x1f2 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 762:	04 c0       	rjmp	.+8      	; 0x76c <__vector_10+0x84>
 764:	19 bc       	out	0x29, r1	; 41
 766:	10 92 04 01 	sts	0x0104, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 76a:	45 dd       	rcall	.-1398   	; 0x1f6 <EVENT_USB_Device_Disconnect>
 76c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 770:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 772:	18 c0       	rjmp	.+48     	; 0x7a4 <__vector_10+0xbc>
 774:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 778:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 77a:	14 c0       	rjmp	.+40     	; 0x7a4 <__vector_10+0xbc>
 77c:	80 91 e2 00 	lds	r24, 0x00E2
 780:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 782:	80 93 e2 00 	sts	0x00E2, r24
 786:	80 91 e2 00 	lds	r24, 0x00E2
 78a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 78c:	80 93 e2 00 	sts	0x00E2, r24
 790:	80 91 d8 00 	lds	r24, 0x00D8
 794:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 796:	80 93 d8 00 	sts	0x00D8, r24
 79a:	19 bc       	out	0x29, r1	; 41
 79c:	85 e0       	ldi	r24, 0x05	; 5
 79e:	80 93 04 01 	sts	0x0104, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 7a2:	01 d2       	rcall	.+1026   	; 0xba6 <USB_Event_Stub>
 7a4:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 7a8:	84 ff       	sbrs	r24, 4
 7aa:	2f c0       	rjmp	.+94     	; 0x80a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 7ac:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7b0:	84 ff       	sbrs	r24, 4
 7b2:	2b c0       	rjmp	.+86     	; 0x80a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 7b4:	8c e0       	ldi	r24, 0x0C	; 12
 7b6:	89 bd       	out	0x29, r24	; 41
 7b8:	8e e0       	ldi	r24, 0x0E	; 14
 7ba:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7bc:	09 b4       	in	r0, 0x29	; 41
 7be:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7c0:	fd cf       	rjmp	.-6      	; 0x7bc <__vector_10+0xd4>
 7c2:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7c6:	8f 7d       	andi	r24, 0xDF	; 223
 7c8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7cc:	80 91 e1 00 	lds	r24, 0x00E1
 7d0:	8f 7e       	andi	r24, 0xEF	; 239
 7d2:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 7d6:	80 91 e2 00 	lds	r24, 0x00E2
 7da:	8f 7e       	andi	r24, 0xEF	; 239
 7dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 7e0:	80 91 e2 00 	lds	r24, 0x00E2
 7e4:	81 60       	ori	r24, 0x01	; 1
 7e6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7ea:	80 91 00 01 	lds	r24, 0x0100
 7ee:	88 23       	and	r24, r24
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <__vector_10+0x11c>
 7f6:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 7fa:	87 ff       	sbrs	r24, 7
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	01 c0       	rjmp	.+2      	; 0x804 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	80 93 04 01 	sts	0x0104, r24
 808:	ce d1       	rcall	.+924    	; 0xba6 <USB_Event_Stub>
 80a:	80 91 e1 00 	lds	r24, 0x00E1
 80e:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 810:	27 c0       	rjmp	.+78     	; 0x860 <__vector_10+0x178>
 812:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 816:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 818:	23 c0       	rjmp	.+70     	; 0x860 <__vector_10+0x178>
 81a:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 81e:	87 7f       	andi	r24, 0xF7	; 247
 820:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	80 93 04 01 	sts	0x0104, r24
 82a:	10 92 00 01 	sts	0x0100, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 82e:	80 91 e1 00 	lds	r24, 0x00E1
 832:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 834:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 838:	80 91 e2 00 	lds	r24, 0x00E2
 83c:	8e 7f       	andi	r24, 0xFE	; 254
 83e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 842:	80 91 e2 00 	lds	r24, 0x00E2
 846:	80 61       	ori	r24, 0x10	; 16
 848:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 84c:	42 e0       	ldi	r20, 0x02	; 2
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	64 de       	rcall	.-824    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>
 854:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 858:	88 60       	ori	r24, 0x08	; 8
 85a:	80 93 f0 00 	sts	0x00F0, r24
 85e:	a3 d1       	rcall	.+838    	; 0xba6 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 86a:	8f 91       	pop	r24
 86c:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 86e:	6f 91       	pop	r22
 870:	5f 91       	pop	r21
 872:	4f 91       	pop	r20
 874:	3f 91       	pop	r19
 876:	2f 91       	pop	r18
 878:	0f 90       	pop	r0
 87a:	0b be       	out	0x3b, r0	; 59
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__vector_11>:
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	0b b6       	in	r0, 0x3b	; 59
 892:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 894:	2f 93       	push	r18
 896:	3f 93       	push	r19
 898:	4f 93       	push	r20
 89a:	5f 93       	push	r21
 89c:	6f 93       	push	r22
 89e:	7f 93       	push	r23
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
 8a4:	af 93       	push	r26
 8a6:	bf 93       	push	r27
 8a8:	cf 93       	push	r28
 8aa:	ef 93       	push	r30
 8ac:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 8ae:	c0 91 e9 00 	lds	r28, 0x00E9
 8b2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8b4:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8b8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 8bc:	80 91 f0 00 	lds	r24, 0x00F0
 8c0:	87 7f       	andi	r24, 0xF7	; 247
 8c2:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 8c6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 8c8:	1d d0       	rcall	.+58     	; 0x904 <USB_Device_ProcessControlRequest>
 8ca:	10 92 e9 00 	sts	0x00E9, r1
 8ce:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 8d2:	88 60       	ori	r24, 0x08	; 8
 8d4:	80 93 f0 00 	sts	0x00F0, r24
 8d8:	c0 93 e9 00 	sts	0x00E9, r28
 8dc:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 8de:	ef 91       	pop	r30
 8e0:	cf 91       	pop	r28
 8e2:	bf 91       	pop	r27
 8e4:	af 91       	pop	r26
 8e6:	9f 91       	pop	r25
 8e8:	8f 91       	pop	r24
 8ea:	7f 91       	pop	r23
 8ec:	6f 91       	pop	r22
 8ee:	5f 91       	pop	r21
 8f0:	4f 91       	pop	r20
 8f2:	3f 91       	pop	r19
 8f4:	2f 91       	pop	r18
 8f6:	0f 90       	pop	r0
 8f8:	0b be       	out	0x3b, r0	; 59
 8fa:	0f 90       	pop	r0
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <USB_Device_ProcessControlRequest>:
 904:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	aa 97       	sbiw	r28, 0x2a	; 42
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	e5 e0       	ldi	r30, 0x05	; 5
 91c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 91e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 922:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 924:	21 e0       	ldi	r18, 0x01	; 1
 926:	ed 30       	cpi	r30, 0x0D	; 13
 928:	f2 07       	cpc	r31, r18
 92a:	c9 f7       	brne	.-14     	; 0x91e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 92c:	79 dc       	rcall	.-1806   	; 0x220 <EVENT_USB_Device_ControlRequest>
 92e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 932:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 934:	20 c1       	rjmp	.+576    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 936:	90 91 05 01 	lds	r25, 0x0105
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 93a:	80 91 06 01 	lds	r24, 0x0106

		switch (USB_ControlRequest.bRequest)
 93e:	85 30       	cpi	r24, 0x05	; 5
 940:	09 f4       	brne	.+2      	; 0x944 <USB_Device_ProcessControlRequest+0x40>
 942:	77 c0       	rjmp	.+238    	; 0xa32 <USB_Device_ProcessControlRequest+0x12e>
 944:	30 f4       	brcc	.+12     	; 0x952 <USB_Device_ProcessControlRequest+0x4e>
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	81 f1       	breq	.+96     	; 0x9aa <USB_Device_ProcessControlRequest+0xa6>
 94a:	68 f0       	brcs	.+26     	; 0x966 <USB_Device_ProcessControlRequest+0x62>
 94c:	83 30       	cpi	r24, 0x03	; 3
 94e:	69 f1       	breq	.+90     	; 0x9aa <USB_Device_ProcessControlRequest+0xa6>
 950:	12 c1       	rjmp	.+548    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 952:	88 30       	cpi	r24, 0x08	; 8
 954:	09 f4       	brne	.+2      	; 0x958 <USB_Device_ProcessControlRequest+0x54>
 956:	e1 c0       	rjmp	.+450    	; 0xb1a <USB_Device_ProcessControlRequest+0x216>
 958:	89 30       	cpi	r24, 0x09	; 9
 95a:	09 f4       	brne	.+2      	; 0x95e <USB_Device_ProcessControlRequest+0x5a>
 95c:	f0 c0       	rjmp	.+480    	; 0xb3e <USB_Device_ProcessControlRequest+0x23a>
 95e:	86 30       	cpi	r24, 0x06	; 6
 960:	09 f0       	breq	.+2      	; 0x964 <USB_Device_ProcessControlRequest+0x60>
 962:	09 c1       	rjmp	.+530    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 964:	88 c0       	rjmp	.+272    	; 0xa76 <USB_Device_ProcessControlRequest+0x172>
 966:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 968:	81 f0       	breq	.+32     	; 0x98a <USB_Device_ProcessControlRequest+0x86>
 96a:	92 38       	cpi	r25, 0x82	; 130
 96c:	09 f0       	breq	.+2      	; 0x970 <USB_Device_ProcessControlRequest+0x6c>
 96e:	03 c1       	rjmp	.+518    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 970:	80 91 09 01 	lds	r24, 0x0109
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 974:	8f 70       	andi	r24, 0x0F	; 15
 976:	80 93 e9 00 	sts	0x00E9, r24
 97a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 97e:	85 fb       	bst	r24, 5
 980:	88 27       	eor	r24, r24
 982:	80 f9       	bld	r24, 0
 984:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 988:	06 c0       	rjmp	.+12     	; 0x996 <USB_Device_ProcessControlRequest+0x92>
 98a:	80 91 01 01 	lds	r24, 0x0101
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 98e:	90 91 02 01 	lds	r25, 0x0102
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 992:	91 11       	cpse	r25, r1
 994:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 996:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 99a:	97 7f       	andi	r25, 0xF7	; 247
 99c:	90 93 e8 00 	sts	0x00E8, r25
 9a0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9a4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 9a8:	c3 c0       	rjmp	.+390    	; 0xb30 <USB_Device_ProcessControlRequest+0x22c>
 9aa:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9ac:	2d 7f       	andi	r18, 0xFD	; 253
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <USB_Device_ProcessControlRequest+0xae>
 9b0:	e2 c0       	rjmp	.+452    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 9b2:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9b4:	19 f0       	breq	.+6      	; 0x9bc <USB_Device_ProcessControlRequest+0xb8>
 9b6:	92 30       	cpi	r25, 0x02	; 2
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <USB_Device_ProcessControlRequest+0xce>
 9ba:	dd c0       	rjmp	.+442    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 9bc:	90 91 07 01 	lds	r25, 0x0107
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9c0:	91 30       	cpi	r25, 0x01	; 1
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <USB_Device_ProcessControlRequest+0xc2>
 9c4:	d8 c0       	rjmp	.+432    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 9c6:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9c8:	09 f0       	breq	.+2      	; 0x9cc <USB_Device_ProcessControlRequest+0xc8>
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	90 93 02 01 	sts	0x0102, r25
 9d0:	2a c0       	rjmp	.+84     	; 0xa26 <USB_Device_ProcessControlRequest+0x122>
 9d2:	90 91 07 01 	lds	r25, 0x0107

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9d6:	91 11       	cpse	r25, r1
 9d8:	26 c0       	rjmp	.+76     	; 0xa26 <USB_Device_ProcessControlRequest+0x122>
 9da:	20 91 09 01 	lds	r18, 0x0109
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9de:	2f 70       	andi	r18, 0x0F	; 15
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9e2:	c9 c0       	rjmp	.+402    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 9e4:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9e8:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9ec:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9ee:	1b c0       	rjmp	.+54     	; 0xa26 <USB_Device_ProcessControlRequest+0x122>
 9f0:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9f2:	21 f4       	brne	.+8      	; 0x9fc <USB_Device_ProcessControlRequest+0xf8>
 9f4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9f8:	80 62       	ori	r24, 0x20	; 32
 9fa:	13 c0       	rjmp	.+38     	; 0xa22 <USB_Device_ProcessControlRequest+0x11e>
 9fc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a00:	80 61       	ori	r24, 0x10	; 16
 a02:	80 93 eb 00 	sts	0x00EB, r24
 a06:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	02 2e       	mov	r0, r18
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x10c>
 a0e:	88 0f       	add	r24, r24
 a10:	0a 94       	dec	r0
 a12:	ea f7       	brpl	.-6      	; 0xa0e <USB_Device_ProcessControlRequest+0x10a>
 a14:	80 93 ea 00 	sts	0x00EA, r24
 a18:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 a1c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a20:	88 60       	ori	r24, 0x08	; 8
 a22:	80 93 eb 00 	sts	0x00EB, r24
 a26:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2e:	87 7f       	andi	r24, 0xF7	; 247
 a30:	82 c0       	rjmp	.+260    	; 0xb36 <USB_Device_ProcessControlRequest+0x232>
 a32:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a34:	a0 c0       	rjmp	.+320    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 a36:	10 91 07 01 	lds	r17, 0x0107
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a3a:	1f 77       	andi	r17, 0x7F	; 127
 a3c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a40:	80 78       	andi	r24, 0x80	; 128
 a42:	81 2b       	or	r24, r17
 a44:	80 93 e3 00 	sts	0x00E3, r24
 a48:	80 91 e8 00 	lds	r24, 0x00E8
 a4c:	87 7f       	andi	r24, 0xF7	; 247
 a4e:	80 93 e8 00 	sts	0x00E8, r24
 a52:	99 dd       	rcall	.-1230   	; 0x586 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a54:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a58:	80 ff       	sbrs	r24, 0
 a5a:	fc cf       	rjmp	.-8      	; 0xa54 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 a5c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 a60:	80 68       	ori	r24, 0x80	; 128
 a62:	80 93 e3 00 	sts	0x00E3, r24
 a66:	11 23       	and	r17, r17
 a68:	11 f0       	breq	.+4      	; 0xa6e <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a6a:	83 e0       	ldi	r24, 0x03	; 3
 a6c:	01 c0       	rjmp	.+2      	; 0xa70 <USB_Device_ProcessControlRequest+0x16c>
 a6e:	82 e0       	ldi	r24, 0x02	; 2
 a70:	80 93 04 01 	sts	0x0104, r24
 a74:	80 c0       	rjmp	.+256    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 a76:	90 58       	subi	r25, 0x80	; 128
 a78:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a7a:	08 f0       	brcs	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x17a>
 a7c:	7c c0       	rjmp	.+248    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 a7e:	80 91 07 01 	lds	r24, 0x0107
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a82:	90 91 08 01 	lds	r25, 0x0108
 a86:	8c 3d       	cpi	r24, 0xDC	; 220
 a88:	23 e0       	ldi	r18, 0x03	; 3
 a8a:	92 07       	cpc	r25, r18
 a8c:	71 f5       	brne	.+92     	; 0xaea <USB_Device_ProcessControlRequest+0x1e6>
 a8e:	83 e0       	ldi	r24, 0x03	; 3
 a90:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a92:	8a e2       	ldi	r24, 0x2A	; 42
 a94:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a96:	4f b7       	in	r20, 0x3f	; 63
 a98:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a9a:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a9c:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a9e:	20 e0       	ldi	r18, 0x00	; 0
 aa0:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aa2:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 aa4:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	50 93 57 00 	sts	0x0057, r21
 aac:	e4 91       	lpm	r30, Z
 aae:	20 ff       	sbrs	r18, 0
 ab0:	03 c0       	rjmp	.+6      	; 0xab8 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 ab2:	e2 95       	swap	r30
 ab4:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 ab6:	3f 5f       	subi	r19, 0xFF	; 255
 ab8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 aba:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	ea 30       	cpi	r30, 0x0A	; 10
 ac0:	10 f0       	brcs	.+4      	; 0xac6 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ac2:	c7 96       	adiw	r24, 0x37	; 55
 ac4:	01 c0       	rjmp	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x1c4>
 ac6:	c0 96       	adiw	r24, 0x30	; 48
 ac8:	8d 93       	st	X+, r24
 aca:	9d 93       	st	X+, r25
 acc:	2f 5f       	subi	r18, 0xFF	; 255
 ace:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ad0:	49 f7       	brne	.-46     	; 0xaa4 <USB_Device_ProcessControlRequest+0x1a0>
 ad2:	4f bf       	out	0x3f, r20	; 63
 ad4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad8:	87 7f       	andi	r24, 0xF7	; 247
 ada:	80 93 e8 00 	sts	0x00E8, r24
 ade:	6a e2       	ldi	r22, 0x2A	; 42
 ae0:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 ae2:	ce 01       	movw	r24, r28
 ae4:	01 96       	adiw	r24, 0x01	; 1
 ae6:	5d dc       	rcall	.-1862   	; 0x3a2 <Endpoint_Write_Control_Stream_LE>
 ae8:	12 c0       	rjmp	.+36     	; 0xb0e <USB_Device_ProcessControlRequest+0x20a>
 aea:	ae 01       	movw	r20, r28
 aec:	4f 5f       	subi	r20, 0xFF	; 255
 aee:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 af0:	60 91 09 01 	lds	r22, 0x0109
 af4:	96 db       	rcall	.-2260   	; 0x222 <CALLBACK_USB_GetDescriptor>
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	09 f4       	brne	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0x1f8>
 afa:	3d c0       	rjmp	.+122    	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 afc:	20 91 e8 00 	lds	r18, 0x00E8
 b00:	27 7f       	andi	r18, 0xF7	; 247
 b02:	20 93 e8 00 	sts	0x00E8, r18
 b06:	bc 01       	movw	r22, r24
 b08:	89 81       	ldd	r24, Y+1	; 0x01
 b0a:	9a 81       	ldd	r25, Y+2	; 0x02
 b0c:	a7 dc       	rcall	.-1714   	; 0x45c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b0e:	80 91 e8 00 	lds	r24, 0x00E8
 b12:	8b 77       	andi	r24, 0x7B	; 123
 b14:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b18:	2e c0       	rjmp	.+92     	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 b1a:	90 38       	cpi	r25, 0x80	; 128
 b1c:	61 f5       	brne	.+88     	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 b1e:	80 91 e8 00 	lds	r24, 0x00E8
 b22:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b24:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b28:	80 91 00 01 	lds	r24, 0x0100
 b2c:	80 93 f1 00 	sts	0x00F1, r24
 b30:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b34:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b36:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b3a:	25 dd       	rcall	.-1462   	; 0x586 <Endpoint_ClearStatusStage>
 b3c:	1c c0       	rjmp	.+56     	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 b3e:	91 11       	cpse	r25, r1
 b40:	1a c0       	rjmp	.+52     	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
 b42:	90 91 07 01 	lds	r25, 0x0107
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b46:	92 30       	cpi	r25, 0x02	; 2
 b48:	b0 f4       	brcc	.+44     	; 0xb76 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b4a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b4e:	87 7f       	andi	r24, 0xF7	; 247
 b50:	80 93 e8 00 	sts	0x00E8, r24
 b54:	90 93 00 01 	sts	0x0100, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b58:	16 dd       	rcall	.-1492   	; 0x586 <Endpoint_ClearStatusStage>
 b5a:	80 91 00 01 	lds	r24, 0x0100
 b5e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b60:	04 c0       	rjmp	.+8      	; 0xb6a <USB_Device_ProcessControlRequest+0x266>
 b62:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 b66:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <USB_Device_ProcessControlRequest+0x26a>
 b6a:	84 e0       	ldi	r24, 0x04	; 4
 b6c:	01 c0       	rjmp	.+2      	; 0xb70 <USB_Device_ProcessControlRequest+0x26c>
 b6e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b70:	80 93 04 01 	sts	0x0104, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b74:	42 db       	rcall	.-2428   	; 0x1fa <EVENT_USB_Device_ConfigurationChanged>
 b76:	80 91 e8 00 	lds	r24, 0x00E8
 b7a:	83 ff       	sbrs	r24, 3
 b7c:	0a c0       	rjmp	.+20     	; 0xb92 <USB_Device_ProcessControlRequest+0x28e>
 b7e:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 b82:	87 7f       	andi	r24, 0xF7	; 247
 b84:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b88:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b8c:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b8e:	80 93 eb 00 	sts	0x00EB, r24
 b92:	aa 96       	adiw	r28, 0x2a	; 42
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b98:	de bf       	out	0x3e, r29	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	cd bf       	out	0x3d, r28	; 61
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 ba2:	1f 91       	pop	r17
 ba4:	08 95       	ret

00000ba6 <USB_Event_Stub>:
 ba6:	08 95       	ret

00000ba8 <USB_USBTask>:
 ba8:	cf 93       	push	r28
 baa:	80 91 04 01 	lds	r24, 0x0104
 bae:	88 23       	and	r24, r24
 bb0:	a9 f0       	breq	.+42     	; 0xbdc <USB_USBTask+0x34>
 bb2:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bb6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 bb8:	90 91 ec 00 	lds	r25, 0x00EC
 bbc:	90 ff       	sbrs	r25, 0
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <USB_USBTask+0x1c>
 bc0:	90 e8       	ldi	r25, 0x80	; 128
 bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <USB_USBTask+0x1e>
 bc4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bc6:	c9 2f       	mov	r28, r25
 bc8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bca:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bce:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 bd2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 bd4:	97 de       	rcall	.-722    	; 0x904 <USB_Device_ProcessControlRequest>
 bd6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bd8:	c0 93 e9 00 	sts	0x00E9, r28
 bdc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 bde:	08 95       	ret

00000be0 <_exit>:
 be0:	f8 94       	cli

00000be2 <__stop_program>:
 be2:	ff cf       	rjmp	.-2      	; 0xbe2 <__stop_program>


DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000ed4  00000f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800160  00800160  00000fc8  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000058e8  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001624  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002539  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000934  00000000  00000000  0000b08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b71  00000000  00000000  0000b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c23  00000000  00000000  0000e531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  00012154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	d7 c4       	rjmp	.+2478   	; 0x9d8 <__vector_10>
  2a:	00 00       	nop
  2c:	a4 c5       	rjmp	.+2888   	; 0xb76 <__vector_11>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     &.L.U.F.A. .D.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  de:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ee:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
  fe:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10e:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 05 07     ................
 11e:	05 81 02 10 00 05 08 0b 02 02 02 02 01 00 09 04     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13e:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
 14e:	02 0a 00 00 00 07 05 05 02 10 00 05 07 05 84 02     ................

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 15e:	10 00 05                                            ...

00000161 <DeviceDescriptor>:
 161:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 171:	dc 01 00                                            ...

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
				ReportSize     -= 1;
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
				ReportData     += 1;
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e4 ed       	ldi	r30, 0xD4	; 212
 188:	fe e0       	ldi	r31, 0x0E	; 14
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a0 36       	cpi	r26, 0x60	; 96
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	a0 e6       	ldi	r26, 0x60	; 96
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ae 36       	cpi	r26, 0x6E	; 110
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	6d d1       	rcall	.+730    	; 0x486 <main>
 1ac:	91 c6       	rjmp	.+3362   	; 0xed0 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <LEDs_SetAllLEDs>:
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	9f 70       	andi	r25, 0x0F	; 15
				break;
 1b4:	98 2b       	or	r25, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	9b b9       	out	0x0b, r25	; 11
 1b8:	08 95       	ret

000001ba <SetupHardware>:
 1ba:	84 b7       	in	r24, 0x34	; 52
 1bc:	87 7f       	andi	r24, 0xF7	; 247
 1be:	84 bf       	out	0x34, r24	; 52
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	80 93 60 00 	sts	0x0060, r24
 1ca:	10 92 60 00 	sts	0x0060, r1
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0f b6       	in	r0, 0x3f	; 63
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	f8 94       	cli
 1d8:	80 93 61 00 	sts	0x0061, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	90 93 61 00 	sts	0x0061, r25
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	84 b1       	in	r24, 0x04	; 4
 1e4:	8f 71       	andi	r24, 0x1F	; 31
 1e6:	84 b9       	out	0x04, r24	; 4
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	8d b1       	in	r24, 0x0d	; 13
 1ea:	8f 7c       	andi	r24, 0xCF	; 207
				break;
 1ec:	8d b9       	out	0x0d, r24	; 13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	80 6e       	ori	r24, 0xE0	; 224
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	8e b1       	in	r24, 0x0e	; 14
 1f6:	80 63       	ori	r24, 0x30	; 48
 1f8:	8e b9       	out	0x0e, r24	; 14
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 6f       	ori	r24, 0xF0	; 240
 1fe:	8a b9       	out	0x0a, r24	; 10
 200:	8b b1       	in	r24, 0x0b	; 11
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	8b b9       	out	0x0b, r24	; 11
				break;
 206:	cd c3       	rjmp	.+1946   	; 0x9a2 <USB_Init>

00000208 <EVENT_USB_Device_Connect>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	80 ea       	ldi	r24, 0xA0	; 160
 20a:	d2 cf       	rjmp	.-92     	; 0x1b0 <LEDs_SetAllLEDs>

0000020c <EVENT_USB_Device_Disconnect>:
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	d0 cf       	rjmp	.-96     	; 0x1b0 <LEDs_SetAllLEDs>

00000210 <EVENT_USB_Device_ConfigurationChanged>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	42 e1       	ldi	r20, 0x12	; 18
 216:	61 e8       	ldi	r22, 0x81	; 129
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	f8 d2       	rcall	.+1520   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 21c:	d8 2f       	mov	r29, r24
 21e:	42 e1       	ldi	r20, 0x12	; 18
 220:	60 e8       	ldi	r22, 0x80	; 128
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	f3 d2       	rcall	.+1510   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 226:	c8 2f       	mov	r28, r24
 228:	42 e0       	ldi	r20, 0x02	; 2
 22a:	61 ec       	ldi	r22, 0xC1	; 193
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	ee d2       	rcall	.+1500   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 230:	cd 23       	and	r28, r29
 232:	c8 23       	and	r28, r24
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	42 e1       	ldi	r20, 0x12	; 18
 236:	61 e8       	ldi	r22, 0x81	; 129
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	e8 d2       	rcall	.+1488   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 23c:	c8 23       	and	r28, r24
 23e:	42 e1       	ldi	r20, 0x12	; 18
 240:	60 e8       	ldi	r22, 0x80	; 128
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	e3 d2       	rcall	.+1478   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 246:	c8 23       	and	r28, r24
 248:	42 e0       	ldi	r20, 0x02	; 2
 24a:	61 ec       	ldi	r22, 0xC1	; 193
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	de d2       	rcall	.+1468   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 250:	10 92 07 01 	sts	0x0107, r1
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 254:	10 92 08 01 	sts	0x0108, r1
 258:	10 92 09 01 	sts	0x0109, r1
 25c:	10 92 0a 01 	sts	0x010A, r1
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 260:	10 92 00 01 	sts	0x0100, r1
 264:	10 92 01 01 	sts	0x0101, r1
 268:	10 92 02 01 	sts	0x0102, r1
 26c:	10 92 03 01 	sts	0x0103, r1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	cc 23       	and	r28, r28
				break;
 272:	21 f0       	breq	.+8      	; 0x27c <EVENT_USB_Device_ConfigurationChanged+0x6c>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	88 23       	and	r24, r24
 276:	11 f0       	breq	.+4      	; 0x27c <EVENT_USB_Device_ConfigurationChanged+0x6c>
 278:	80 e6       	ldi	r24, 0x60	; 96
 27a:	01 c0       	rjmp	.+2      	; 0x27e <EVENT_USB_Device_ConfigurationChanged+0x6e>
 27c:	80 e9       	ldi	r24, 0x90	; 144
 27e:	df 91       	pop	r29
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	cf 91       	pop	r28
 282:	96 cf       	rjmp	.-212    	; 0x1b0 <LEDs_SetAllLEDs>

00000284 <EVENT_USB_Device_ControlRequest>:
				break;
 284:	80 91 6a 01 	lds	r24, 0x016A

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 288:	90 91 6b 01 	lds	r25, 0x016B
 28c:	89 2b       	or	r24, r25
 28e:	19 f4       	brne	.+6      	; 0x296 <EVENT_USB_Device_ControlRequest+0x12>
				break;
 290:	87 e0       	ldi	r24, 0x07	; 7

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	02 c0       	rjmp	.+4      	; 0x29a <EVENT_USB_Device_ControlRequest+0x16>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	20 91 67 01 	lds	r18, 0x0167
 29e:	21 32       	cpi	r18, 0x21	; 33
				break;
 2a0:	29 f0       	breq	.+10     	; 0x2ac <EVENT_USB_Device_ControlRequest+0x28>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	22 32       	cpi	r18, 0x22	; 34
 2a4:	29 f1       	breq	.+74     	; 0x2f0 <EVENT_USB_Device_ControlRequest+0x6c>
 2a6:	20 32       	cpi	r18, 0x20	; 32
 2a8:	69 f5       	brne	.+90     	; 0x304 <EVENT_USB_Device_ControlRequest+0x80>
 2aa:	10 c0       	rjmp	.+32     	; 0x2cc <EVENT_USB_Device_ControlRequest+0x48>
				break;
 2ac:	20 91 66 01 	lds	r18, 0x0166

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2b0:	21 3a       	cpi	r18, 0xA1	; 161
 2b2:	41 f5       	brne	.+80     	; 0x304 <EVENT_USB_Device_ControlRequest+0x80>
 2b4:	20 91 e8 00 	lds	r18, 0x00E8
 2b8:	27 7f       	andi	r18, 0xF7	; 247
 2ba:	20 93 e8 00 	sts	0x00E8, r18
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	a9 d1       	rcall	.+850    	; 0x616 <Endpoint_Write_Control_Stream_LE>
 2c4:	80 91 e8 00 	lds	r24, 0x00E8
 2c8:	8b 77       	andi	r24, 0x7B	; 123
 2ca:	0f c0       	rjmp	.+30     	; 0x2ea <EVENT_USB_Device_ControlRequest+0x66>
				break;
 2cc:	20 91 66 01 	lds	r18, 0x0166
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2d0:	21 32       	cpi	r18, 0x21	; 33
 2d2:	c1 f4       	brne	.+48     	; 0x304 <EVENT_USB_Device_ControlRequest+0x80>
				break;
 2d4:	20 91 e8 00 	lds	r18, 0x00E8

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d8:	27 7f       	andi	r18, 0xF7	; 247
 2da:	20 93 e8 00 	sts	0x00E8, r18

				if (ParserData->UsingReportIDs)
 2de:	67 e0       	ldi	r22, 0x07	; 7
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	f6 d1       	rcall	.+1004   	; 0x6d0 <Endpoint_Read_Control_Stream_LE>
 2e4:	80 91 e8 00 	lds	r24, 0x00E8
 2e8:	8e 77       	andi	r24, 0x7E	; 126
 2ea:	80 93 e8 00 	sts	0x00E8, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ee:	08 95       	ret
 2f0:	80 91 66 01 	lds	r24, 0x0166
 2f4:	81 32       	cpi	r24, 0x21	; 33
 2f6:	31 f4       	brne	.+12     	; 0x304 <EVENT_USB_Device_ControlRequest+0x80>
 2f8:	80 91 e8 00 	lds	r24, 0x00E8
 2fc:	87 7f       	andi	r24, 0xF7	; 247
 2fe:	80 93 e8 00 	sts	0x00E8, r24
 302:	b9 c2       	rjmp	.+1394   	; 0x876 <Endpoint_ClearStatusStage>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	08 95       	ret

00000306 <CDC1_Task>:
 306:	93 b1       	in	r25, 0x03	; 3
 308:	8c b1       	in	r24, 0x0c	; 12
 30a:	20 91 65 01 	lds	r18, 0x0165
 30e:	24 30       	cpi	r18, 0x04	; 4
 310:	09 f0       	breq	.+2      	; 0x314 <CDC1_Task+0xe>
 312:	5a c0       	rjmp	.+180    	; 0x3c8 <CDC1_Task+0xc2>
 314:	80 95       	com	r24
 316:	80 73       	andi	r24, 0x30	; 48
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	86 95       	lsr	r24
 31a:	90 95       	com	r25
 31c:	90 7e       	andi	r25, 0xE0	; 224
 31e:	89 2b       	or	r24, r25
 320:	87 fd       	sbrc	r24, 7
 322:	0b c0       	rjmp	.+22     	; 0x33a <CDC1_Task+0x34>
 324:	84 fd       	sbrc	r24, 4
 326:	44 c0       	rjmp	.+136    	; 0x3b0 <CDC1_Task+0xaa>
 328:	86 fd       	sbrc	r24, 6
 32a:	45 c0       	rjmp	.+138    	; 0x3b6 <CDC1_Task+0xb0>
 32c:	83 fd       	sbrc	r24, 3
 32e:	46 c0       	rjmp	.+140    	; 0x3bc <CDC1_Task+0xb6>
 330:	85 fd       	sbrc	r24, 5
 332:	47 c0       	rjmp	.+142    	; 0x3c2 <CDC1_Task+0xbc>
 334:	10 92 60 01 	sts	0x0160, r1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	2e c0       	rjmp	.+92     	; 0x396 <CDC1_Task+0x90>
 33a:	82 e5       	ldi	r24, 0x52	; 82
 33c:	91 e0       	ldi	r25, 0x01	; 1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	20 91 60 01 	lds	r18, 0x0160
 342:	21 11       	cpse	r18, r1
 344:	28 c0       	rjmp	.+80     	; 0x396 <CDC1_Task+0x90>
 346:	40 91 07 01 	lds	r20, 0x0107
 34a:	50 91 08 01 	lds	r21, 0x0108
 34e:	60 91 09 01 	lds	r22, 0x0109
 352:	70 91 0a 01 	lds	r23, 0x010A
 356:	45 2b       	or	r20, r21
 358:	46 2b       	or	r20, r22
 35a:	47 2b       	or	r20, r23
 35c:	e1 f0       	breq	.+56     	; 0x396 <CDC1_Task+0x90>
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	20 93 60 01 	sts	0x0160, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	20 93 e9 00 	sts	0x00E9, r18
 368:	fc 01       	movw	r30, r24
 36a:	01 90       	ld	r0, Z+
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	00 20       	and	r0, r0
 36e:	e9 f7       	brne	.-6      	; 0x36a <CDC1_Task+0x64>
 370:	bf 01       	movw	r22, r30
 372:	61 50       	subi	r22, 0x01	; 1
 374:	71 09       	sbc	r23, r1
 376:	68 1b       	sub	r22, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	79 0b       	sbc	r23, r25
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	bd d0       	rcall	.+378    	; 0x4fa <Endpoint_Write_Stream_LE>
 380:	80 91 e8 00 	lds	r24, 0x00E8
 384:	8e 77       	andi	r24, 0x7E	; 126
 386:	80 93 e8 00 	sts	0x00E8, r24
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	96 d2       	rcall	.+1324   	; 0x8b8 <Endpoint_WaitUntilReady>
 38c:	80 91 e8 00 	lds	r24, 0x00E8
 390:	8e 77       	andi	r24, 0x7E	; 126
 392:	80 93 e8 00 	sts	0x00E8, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	80 93 e9 00 	sts	0x00E9, r24
 39c:	80 91 e8 00 	lds	r24, 0x00E8
 3a0:	82 ff       	sbrs	r24, 2
 3a2:	12 c0       	rjmp	.+36     	; 0x3c8 <CDC1_Task+0xc2>
 3a4:	80 91 e8 00 	lds	r24, 0x00E8
 3a8:	8b 77       	andi	r24, 0x7B	; 123
 3aa:	80 93 e8 00 	sts	0x00E8, r24
 3ae:	08 95       	ret
				break;
 3b0:	82 e4       	ldi	r24, 0x42	; 66
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	c4 cf       	rjmp	.-120    	; 0x33e <CDC1_Task+0x38>
 3b6:	82 e3       	ldi	r24, 0x32	; 50
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	c1 cf       	rjmp	.-126    	; 0x33e <CDC1_Task+0x38>
 3bc:	81 e2       	ldi	r24, 0x21	; 33
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	be cf       	rjmp	.-132    	; 0x33e <CDC1_Task+0x38>
 3c2:	8e e0       	ldi	r24, 0x0E	; 14
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	bb cf       	rjmp	.-138    	; 0x33e <CDC1_Task+0x38>
 3c8:	08 95       	ret

000003ca <CDC2_Task>:
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15

					while (CurrCollectionPath->Parent != NULL)
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
 3e0:	ed b6       	in	r14, 0x3d	; 61
 3e2:	fe b6       	in	r15, 0x3e	; 62
 3e4:	b0 90 65 01 	lds	r11, 0x0165
 3e8:	24 e0       	ldi	r18, 0x04	; 4
 3ea:	b2 12       	cpse	r11, r18
 3ec:	3d c0       	rjmp	.+122    	; 0x468 <CDC2_Task+0x9e>
 3ee:	85 e0       	ldi	r24, 0x05	; 5
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	80 93 e9 00 	sts	0x00E9, r24
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	80 91 e8 00 	lds	r24, 0x00E8
 3f8:	82 ff       	sbrs	r24, 2
 3fa:	36 c0       	rjmp	.+108    	; 0x468 <CDC2_Task+0x9e>
 3fc:	80 91 f2 00 	lds	r24, 0x00F2
 400:	90 91 f3 00 	lds	r25, 0x00F3
 404:	2d b7       	in	r18, 0x3d	; 61
 406:	3e b7       	in	r19, 0x3e	; 62
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	28 1b       	sub	r18, r24
 40a:	39 0b       	sbc	r19, r25
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	3e bf       	out	0x3e, r19	; 62
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	0f be       	out	0x3f, r0	; 63
 414:	2d bf       	out	0x3d, r18	; 61
 416:	0d b7       	in	r16, 0x3d	; 61
 418:	1e b7       	in	r17, 0x3e	; 62
 41a:	0f 5f       	subi	r16, 0xFF	; 255
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
 41e:	c0 90 f2 00 	lds	r12, 0x00F2

				if (UsageListSize)
 422:	d0 90 f3 00 	lds	r13, 0x00F3
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	b6 01       	movw	r22, r12
 42c:	c8 01       	movw	r24, r16
 42e:	ac d0       	rcall	.+344    	; 0x588 <Endpoint_Read_Stream_LE>
 430:	80 91 e8 00 	lds	r24, 0x00E8
 434:	8b 77       	andi	r24, 0x7B	; 123
 436:	80 93 e8 00 	sts	0x00E8, r24
 43a:	b0 92 e9 00 	sts	0x00E9, r11
 43e:	40 e0       	ldi	r20, 0x00	; 0

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	b6 01       	movw	r22, r12
 444:	c8 01       	movw	r24, r16
 446:	59 d0       	rcall	.+178    	; 0x4fa <Endpoint_Write_Stream_LE>
 448:	80 91 e8 00 	lds	r24, 0x00E8
					  UsageList[i - 1] = UsageList[i];
 44c:	8e 77       	andi	r24, 0x7E	; 126
 44e:	80 93 e8 00 	sts	0x00E8, r24
 452:	32 d2       	rcall	.+1124   	; 0x8b8 <Endpoint_WaitUntilReady>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	80 91 e8 00 	lds	r24, 0x00E8
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	8e 77       	andi	r24, 0x7E	; 126
 45a:	80 93 e8 00 	sts	0x00E8, r24
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	fe be       	out	0x3e, r15	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	ed be       	out	0x3d, r14	; 61
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	fe be       	out	0x3e, r15	; 62
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	0f be       	out	0x3f, r0	; 63
 470:	ed be       	out	0x3d, r14	; 61
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	08 95       	ret

00000486 <main>:
 486:	99 de       	rcall	.-718    	; 0x1ba <SetupHardware>
 488:	80 e1       	ldi	r24, 0x10	; 16
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	92 de       	rcall	.-732    	; 0x1b0 <LEDs_SetAllLEDs>
 48c:	78 94       	sei
 48e:	3b df       	rcall	.-394    	; 0x306 <CDC1_Task>
 490:	9c df       	rcall	.-200    	; 0x3ca <CDC2_Task>
 492:	02 d5       	rcall	.+2564   	; 0xe98 <USB_USBTask>
 494:	fc cf       	rjmp	.-8      	; 0x48e <main+0x8>

00000496 <CALLBACK_USB_GetDescriptor>:
 496:	29 2f       	mov	r18, r25
 498:	33 27       	eor	r19, r19
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	22 30       	cpi	r18, 0x02	; 2
 49c:	31 05       	cpc	r19, r1
 49e:	59 f0       	breq	.+22     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x20>
 4a0:	23 30       	cpi	r18, 0x03	; 3
 4a2:	31 05       	cpc	r19, r1
 4a4:	69 f0       	breq	.+26     	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x2a>
 4a6:	21 30       	cpi	r18, 0x01	; 1
 4a8:	31 05       	cpc	r19, r1
 4aa:	f9 f4       	brne	.+62     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x54>
				break;
 4ac:	82 e1       	ldi	r24, 0x12	; 18
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	21 e6       	ldi	r18, 0x61	; 97
 4b2:	31 e0       	ldi	r19, 0x01	; 1
 4b4:	1e c0       	rjmp	.+60     	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x5c>
 4b6:	83 e8       	ldi	r24, 0x83	; 131
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	2e ed       	ldi	r18, 0xDE	; 222
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	19 c0       	rjmp	.+50     	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x5c>
 4c0:	99 27       	eor	r25, r25
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	91 05       	cpc	r25, r1
 4c6:	41 f0       	breq	.+16     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x42>
 4c8:	82 30       	cpi	r24, 0x02	; 2
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	91 05       	cpc	r25, r1
 4cc:	41 f0       	breq	.+16     	; 0x4de <CALLBACK_USB_GetDescriptor+0x48>
 4ce:	89 2b       	or	r24, r25
 4d0:	61 f4       	brne	.+24     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x54>
 4d2:	ea ed       	ldi	r30, 0xDA	; 218
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x4c>
 4d8:	e0 ec       	ldi	r30, 0xC0	; 192
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x4c>
 4de:	e8 e9       	ldi	r30, 0x98	; 152
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	84 91       	lpm	r24, Z
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	9f 01       	movw	r18, r30
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x5c>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	20 e0       	ldi	r18, 0x00	; 0
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	fa 01       	movw	r30, r20
 4f4:	31 83       	std	Z+1, r19	; 0x01
 4f6:	20 83       	st	Z, r18
 4f8:	08 95       	ret

000004fa <Endpoint_Write_Stream_LE>:
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	7c 01       	movw	r14, r24
 50c:	8b 01       	movw	r16, r22
 50e:	ea 01       	movw	r28, r20
 510:	d3 d1       	rcall	.+934    	; 0x8b8 <Endpoint_WaitUntilReady>
 512:	81 11       	cpse	r24, r1
 514:	30 c0       	rjmp	.+96     	; 0x576 <Endpoint_Write_Stream_LE+0x7c>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	20 97       	sbiw	r28, 0x00	; 0
 518:	31 f0       	breq	.+12     	; 0x526 <Endpoint_Write_Stream_LE+0x2c>
 51a:	88 81       	ld	r24, Y
 51c:	99 81       	ldd	r25, Y+1	; 0x01

					if (UsageListSize)
 51e:	08 1b       	sub	r16, r24
 520:	19 0b       	sbc	r17, r25
 522:	e8 0e       	add	r14, r24
 524:	f9 1e       	adc	r15, r25
 526:	c1 2c       	mov	r12, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	d1 2c       	mov	r13, r1
 52a:	01 15       	cp	r16, r1
 52c:	11 05       	cpc	r17, r1
 52e:	11 f1       	breq	.+68     	; 0x574 <Endpoint_Write_Stream_LE+0x7a>
 530:	80 91 e8 00 	lds	r24, 0x00E8
 534:	85 fd       	sbrc	r24, 5
 536:	13 c0       	rjmp	.+38     	; 0x55e <Endpoint_Write_Stream_LE+0x64>
 538:	80 91 e8 00 	lds	r24, 0x00E8
 53c:	8e 77       	andi	r24, 0x7E	; 126

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	80 93 e8 00 	sts	0x00E8, r24
 542:	20 97       	sbiw	r28, 0x00	; 0
 544:	41 f0       	breq	.+16     	; 0x556 <Endpoint_Write_Stream_LE+0x5c>
 546:	88 81       	ld	r24, Y
 548:	99 81       	ldd	r25, Y+1	; 0x01
						  UsageList[i - 1] = UsageList[i];
 54a:	8c 0d       	add	r24, r12
 54c:	9d 1d       	adc	r25, r13
 54e:	99 83       	std	Y+1, r25	; 0x01
 550:	88 83       	st	Y, r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	85 e0       	ldi	r24, 0x05	; 5
 554:	10 c0       	rjmp	.+32     	; 0x576 <Endpoint_Write_Stream_LE+0x7c>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	b0 d1       	rcall	.+864    	; 0x8b8 <Endpoint_WaitUntilReady>
 558:	88 23       	and	r24, r24
 55a:	39 f3       	breq	.-50     	; 0x52a <Endpoint_Write_Stream_LE+0x30>
 55c:	0c c0       	rjmp	.+24     	; 0x576 <Endpoint_Write_Stream_LE+0x7c>
 55e:	f7 01       	movw	r30, r14
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	81 91       	ld	r24, Z+
 562:	7f 01       	movw	r14, r30
 564:	80 93 f1 00 	sts	0x00F1, r24
 568:	01 50       	subi	r16, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	11 09       	sbc	r17, r1
 56c:	ff ef       	ldi	r31, 0xFF	; 255
 56e:	cf 1a       	sub	r12, r31
 570:	df 0a       	sbc	r13, r31
 572:	db cf       	rjmp	.-74     	; 0x52a <Endpoint_Write_Stream_LE+0x30>
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	cf 90       	pop	r12
 586:	08 95       	ret

00000588 <Endpoint_Read_Stream_LE>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	7c 01       	movw	r14, r24
 59a:	8b 01       	movw	r16, r22
 59c:	ea 01       	movw	r28, r20
 59e:	8c d1       	rcall	.+792    	; 0x8b8 <Endpoint_WaitUntilReady>
 5a0:	81 11       	cpse	r24, r1
 5a2:	30 c0       	rjmp	.+96     	; 0x604 <Endpoint_Read_Stream_LE+0x7c>
 5a4:	20 97       	sbiw	r28, 0x00	; 0
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <Endpoint_Read_Stream_LE+0x2c>
 5a8:	88 81       	ld	r24, Y
 5aa:	99 81       	ldd	r25, Y+1	; 0x01

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	08 1b       	sub	r16, r24
 5ae:	19 0b       	sbc	r17, r25
 5b0:	e8 0e       	add	r14, r24
 5b2:	f9 1e       	adc	r15, r25
 5b4:	c1 2c       	mov	r12, r1
 5b6:	d1 2c       	mov	r13, r1
 5b8:	01 15       	cp	r16, r1
 5ba:	11 05       	cpc	r17, r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	11 f1       	breq	.+68     	; 0x602 <Endpoint_Read_Stream_LE+0x7a>
 5be:	80 91 e8 00 	lds	r24, 0x00E8
 5c2:	85 fd       	sbrc	r24, 5
 5c4:	13 c0       	rjmp	.+38     	; 0x5ec <Endpoint_Read_Stream_LE+0x64>
 5c6:	80 91 e8 00 	lds	r24, 0x00E8
 5ca:	8b 77       	andi	r24, 0x7B	; 123
 5cc:	80 93 e8 00 	sts	0x00E8, r24
 5d0:	20 97       	sbiw	r28, 0x00	; 0
 5d2:	41 f0       	breq	.+16     	; 0x5e4 <Endpoint_Read_Stream_LE+0x5c>
 5d4:	88 81       	ld	r24, Y
 5d6:	99 81       	ldd	r25, Y+1	; 0x01
 5d8:	8c 0d       	add	r24, r12
 5da:	9d 1d       	adc	r25, r13
 5dc:	99 83       	std	Y+1, r25	; 0x01
 5de:	88 83       	st	Y, r24
 5e0:	85 e0       	ldi	r24, 0x05	; 5
 5e2:	10 c0       	rjmp	.+32     	; 0x604 <Endpoint_Read_Stream_LE+0x7c>
 5e4:	69 d1       	rcall	.+722    	; 0x8b8 <Endpoint_WaitUntilReady>
 5e6:	88 23       	and	r24, r24
 5e8:	39 f3       	breq	.-50     	; 0x5b8 <Endpoint_Read_Stream_LE+0x30>
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <Endpoint_Read_Stream_LE+0x7c>
 5ec:	80 91 f1 00 	lds	r24, 0x00F1
 5f0:	f7 01       	movw	r30, r14
 5f2:	81 93       	st	Z+, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	7f 01       	movw	r14, r30
 5f6:	01 50       	subi	r16, 0x01	; 1
 5f8:	11 09       	sbc	r17, r1
 5fa:	ff ef       	ldi	r31, 0xFF	; 255
 5fc:	cf 1a       	sub	r12, r31
					  return HID_PARSE_InsufficientReportItems;
 5fe:	df 0a       	sbc	r13, r31
 600:	db cf       	rjmp	.-74     	; 0x5b8 <Endpoint_Read_Stream_LE+0x30>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	08 95       	ret

00000616 <Endpoint_Write_Control_Stream_LE>:
 616:	20 91 6c 01 	lds	r18, 0x016C
 61a:	30 91 6d 01 	lds	r19, 0x016D
 61e:	26 17       	cp	r18, r22
 620:	37 07       	cpc	r19, r23
 622:	48 f0       	brcs	.+18     	; 0x636 <Endpoint_Write_Control_Stream_LE+0x20>
 624:	61 15       	cp	r22, r1
 626:	71 05       	cpc	r23, r1
 628:	39 f4       	brne	.+14     	; 0x638 <Endpoint_Write_Control_Stream_LE+0x22>
 62a:	20 91 e8 00 	lds	r18, 0x00E8
 62e:	2e 77       	andi	r18, 0x7E	; 126
 630:	20 93 e8 00 	sts	0x00E8, r18
 634:	01 c0       	rjmp	.+2      	; 0x638 <Endpoint_Write_Control_Stream_LE+0x22>
 636:	b9 01       	movw	r22, r18
 638:	fc 01       	movw	r30, r24
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	99 f1       	breq	.+102    	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0x92>
 642:	80 91 65 01 	lds	r24, 0x0165
 646:	88 23       	and	r24, r24
 648:	e9 f1       	breq	.+122    	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0xae>
 64a:	85 30       	cpi	r24, 0x05	; 5
 64c:	e9 f1       	breq	.+122    	; 0x6c8 <Endpoint_Write_Control_Stream_LE+0xb2>
 64e:	80 91 e8 00 	lds	r24, 0x00E8
 652:	83 fd       	sbrc	r24, 3
 654:	3b c0       	rjmp	.+118    	; 0x6cc <Endpoint_Write_Control_Stream_LE+0xb6>
 656:	80 91 e8 00 	lds	r24, 0x00E8
 65a:	82 ff       	sbrs	r24, 2
 65c:	06 c0       	rjmp	.+12     	; 0x66a <Endpoint_Write_Control_Stream_LE+0x54>
 65e:	80 91 e8 00 	lds	r24, 0x00E8
 662:	82 ff       	sbrs	r24, 2
 664:	24 c0       	rjmp	.+72     	; 0x6ae <Endpoint_Write_Control_Stream_LE+0x98>
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
 66a:	80 91 e8 00 	lds	r24, 0x00E8
 66e:	80 ff       	sbrs	r24, 0
 670:	e5 cf       	rjmp	.-54     	; 0x63c <Endpoint_Write_Control_Stream_LE+0x26>
 672:	80 91 f2 00 	lds	r24, 0x00F2
 676:	90 91 f3 00 	lds	r25, 0x00F3
 67a:	61 15       	cp	r22, r1
 67c:	71 05       	cpc	r23, r1
 67e:	51 f0       	breq	.+20     	; 0x694 <Endpoint_Write_Control_Stream_LE+0x7e>
 680:	88 30       	cpi	r24, 0x08	; 8
 682:	91 05       	cpc	r25, r1
 684:	38 f4       	brcc	.+14     	; 0x694 <Endpoint_Write_Control_Stream_LE+0x7e>
 686:	21 91       	ld	r18, Z+
					  ParserData->TotalReportItems++;
 688:	20 93 f1 00 	sts	0x00F1, r18
 68c:	61 50       	subi	r22, 0x01	; 1
 68e:	71 09       	sbc	r23, r1
 690:	01 96       	adiw	r24, 0x01	; 1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	f3 cf       	rjmp	.-26     	; 0x67a <Endpoint_Write_Control_Stream_LE+0x64>
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	08 97       	sbiw	r24, 0x08	; 8
 698:	09 f0       	breq	.+2      	; 0x69c <Endpoint_Write_Control_Stream_LE+0x86>
 69a:	20 e0       	ldi	r18, 0x00	; 0
 69c:	80 91 e8 00 	lds	r24, 0x00E8
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 6a0:	8e 77       	andi	r24, 0x7E	; 126
 6a2:	80 93 e8 00 	sts	0x00E8, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a6:	ca cf       	rjmp	.-108    	; 0x63c <Endpoint_Write_Control_Stream_LE+0x26>
 6a8:	21 11       	cpse	r18, r1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	cb cf       	rjmp	.-106    	; 0x642 <Endpoint_Write_Control_Stream_LE+0x2c>
 6ac:	d8 cf       	rjmp	.-80     	; 0x65e <Endpoint_Write_Control_Stream_LE+0x48>
 6ae:	80 91 65 01 	lds	r24, 0x0165
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	88 23       	and	r24, r24
 6b4:	39 f0       	breq	.+14     	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0xae>
 6b6:	85 30       	cpi	r24, 0x05	; 5
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <Endpoint_Write_Control_Stream_LE+0xb2>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	80 91 e8 00 	lds	r24, 0x00E8

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	83 ff       	sbrs	r24, 3
 6c0:	ce cf       	rjmp	.-100    	; 0x65e <Endpoint_Write_Control_Stream_LE+0x48>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <Endpoint_Write_Control_Stream_LE+0xb6>
 6c4:	82 e0       	ldi	r24, 0x02	; 2
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	08 95       	ret
 6c8:	83 e0       	ldi	r24, 0x03	; 3
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	08 95       	ret
 6cc:	81 e0       	ldi	r24, 0x01	; 1

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	08 95       	ret

000006d0 <Endpoint_Read_Control_Stream_LE>:
 6d0:	61 15       	cp	r22, r1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	71 05       	cpc	r23, r1
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <Endpoint_Read_Control_Stream_LE+0x10>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	20 91 e8 00 	lds	r18, 0x00E8

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6da:	2b 77       	andi	r18, 0x7B	; 123
 6dc:	20 93 e8 00 	sts	0x00E8, r18
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	31 f1       	breq	.+76     	; 0x732 <Endpoint_Read_Control_Stream_LE+0x62>
 6e6:	20 91 65 01 	lds	r18, 0x0165
 6ea:	22 23       	and	r18, r18
 6ec:	59 f1       	breq	.+86     	; 0x744 <Endpoint_Read_Control_Stream_LE+0x74>
 6ee:	25 30       	cpi	r18, 0x05	; 5
 6f0:	59 f1       	breq	.+86     	; 0x748 <Endpoint_Read_Control_Stream_LE+0x78>
 6f2:	20 91 e8 00 	lds	r18, 0x00E8
 6f6:	23 fd       	sbrc	r18, 3
 6f8:	21 c0       	rjmp	.+66     	; 0x73c <Endpoint_Read_Control_Stream_LE+0x6c>
 6fa:	20 91 e8 00 	lds	r18, 0x00E8
 6fe:	22 ff       	sbrs	r18, 2
 700:	f2 cf       	rjmp	.-28     	; 0x6e6 <Endpoint_Read_Control_Stream_LE+0x16>
 702:	fc 01       	movw	r30, r24
 704:	cf 01       	movw	r24, r30
 706:	20 91 f2 00 	lds	r18, 0x00F2
 70a:	30 91 f3 00 	lds	r19, 0x00F3
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 70e:	23 2b       	or	r18, r19
 710:	11 f3       	breq	.-60     	; 0x6d6 <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 712:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 716:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 718:	cf 01       	movw	r24, r30
				Length--;
 71a:	61 50       	subi	r22, 0x01	; 1
 71c:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	81 f7       	brne	.-32     	; 0x704 <Endpoint_Read_Control_Stream_LE+0x34>
 724:	d8 cf       	rjmp	.-80     	; 0x6d6 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 726:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 72a:	88 23       	and	r24, r24
 72c:	59 f0       	breq	.+22     	; 0x744 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 72e:	85 30       	cpi	r24, 0x05	; 5
 730:	59 f0       	breq	.+22     	; 0x748 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 732:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 736:	80 ff       	sbrs	r24, 0
 738:	f6 cf       	rjmp	.-20     	; 0x726 <Endpoint_Read_Control_Stream_LE+0x56>
 73a:	02 c0       	rjmp	.+4      	; 0x740 <Endpoint_Read_Control_Stream_LE+0x70>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 748:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 74a:	08 95       	ret

0000074c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 74c:	20 91 6c 01 	lds	r18, 0x016C
 750:	30 91 6d 01 	lds	r19, 0x016D
 754:	26 17       	cp	r18, r22
 756:	37 07       	cpc	r19, r23
 758:	48 f0       	brcs	.+18     	; 0x76c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 75a:	61 15       	cp	r22, r1
 75c:	71 05       	cpc	r23, r1
 75e:	39 f4       	brne	.+14     	; 0x76e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 760:	20 91 e8 00 	lds	r18, 0x00E8
 764:	2e 77       	andi	r18, 0x7E	; 126
 766:	20 93 e8 00 	sts	0x00E8, r18
 76a:	01 c0       	rjmp	.+2      	; 0x76e <Endpoint_Write_Control_PStream_LE+0x22>
 76c:	b9 01       	movw	r22, r18
 76e:	fc 01       	movw	r30, r24
 770:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 772:	61 15       	cp	r22, r1
 774:	71 05       	cpc	r23, r1
 776:	b1 f1       	breq	.+108    	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 778:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 77c:	88 23       	and	r24, r24
 77e:	09 f4       	brne	.+2      	; 0x782 <Endpoint_Write_Control_PStream_LE+0x36>
 780:	3f c0       	rjmp	.+126    	; 0x800 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 782:	85 30       	cpi	r24, 0x05	; 5
 784:	09 f4       	brne	.+2      	; 0x788 <Endpoint_Write_Control_PStream_LE+0x3c>
 786:	3e c0       	rjmp	.+124    	; 0x804 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 788:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 78c:	83 fd       	sbrc	r24, 3
 78e:	3c c0       	rjmp	.+120    	; 0x808 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 790:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 794:	82 ff       	sbrs	r24, 2
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0x58>
 798:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 79c:	82 ff       	sbrs	r24, 2
 79e:	25 c0       	rjmp	.+74     	; 0x7ea <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7a4:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
 7a8:	80 ff       	sbrs	r24, 0
 7aa:	e3 cf       	rjmp	.-58     	; 0x772 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 7ac:	80 91 f2 00 	lds	r24, 0x00F2
 7b0:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7b4:	61 15       	cp	r22, r1
 7b6:	71 05       	cpc	r23, r1
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0x84>
 7ba:	88 30       	cpi	r24, 0x08	; 8
 7bc:	91 05       	cpc	r25, r1
 7be:	40 f4       	brcc	.+16     	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7c0:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7c2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 7c6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 7c8:	61 50       	subi	r22, 0x01	; 1
 7ca:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	f2 cf       	rjmp	.-28     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	08 97       	sbiw	r24, 0x08	; 8
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <Endpoint_Write_Control_PStream_LE+0x8c>
 7d6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7d8:	80 91 e8 00 	lds	r24, 0x00E8
 7dc:	8e 77       	andi	r24, 0x7E	; 126
 7de:	80 93 e8 00 	sts	0x00E8, r24
 7e2:	c7 cf       	rjmp	.-114    	; 0x772 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7e4:	21 11       	cpse	r18, r1
 7e6:	c8 cf       	rjmp	.-112    	; 0x778 <Endpoint_Write_Control_PStream_LE+0x2c>
 7e8:	d7 cf       	rjmp	.-82     	; 0x798 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7ea:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7ee:	88 23       	and	r24, r24
 7f0:	39 f0       	breq	.+14     	; 0x800 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7f2:	85 30       	cpi	r24, 0x05	; 5
 7f4:	39 f0       	breq	.+14     	; 0x804 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7fa:	83 ff       	sbrs	r24, 3
 7fc:	cd cf       	rjmp	.-102    	; 0x798 <Endpoint_Write_Control_PStream_LE+0x4c>
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 804:	83 e0       	ldi	r24, 0x03	; 3
 806:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 808:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 80a:	08 95       	ret

0000080c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 80c:	98 2f       	mov	r25, r24
 80e:	97 30       	cpi	r25, 0x07	; 7
 810:	58 f5       	brcc	.+86     	; 0x868 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 812:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 816:	98 17       	cp	r25, r24
 818:	39 f0       	breq	.+14     	; 0x828 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 81a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 81e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 822:	50 91 f0 00 	lds	r21, 0x00F0
 826:	03 c0       	rjmp	.+6      	; 0x82e <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 828:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 82a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 82c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 82e:	21 ff       	sbrs	r18, 1
 830:	19 c0       	rjmp	.+50     	; 0x864 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 832:	30 91 eb 00 	lds	r19, 0x00EB
 836:	3e 7f       	andi	r19, 0xFE	; 254
 838:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 83c:	30 91 ed 00 	lds	r19, 0x00ED
 840:	3d 7f       	andi	r19, 0xFD	; 253
 842:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 846:	30 91 eb 00 	lds	r19, 0x00EB
 84a:	31 60       	ori	r19, 0x01	; 1
 84c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 850:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 854:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 858:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 85c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 860:	27 ff       	sbrs	r18, 7
 862:	07 c0       	rjmp	.+14     	; 0x872 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 864:	9f 5f       	subi	r25, 0xFF	; 255
 866:	d3 cf       	rjmp	.-90     	; 0x80e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 868:	8f 70       	andi	r24, 0x0F	; 15
 86a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 872:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 874:	08 95       	ret

00000876 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 876:	80 91 66 01 	lds	r24, 0x0166
 87a:	87 fd       	sbrc	r24, 7
 87c:	05 c0       	rjmp	.+10     	; 0x888 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 87e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 882:	80 ff       	sbrs	r24, 0
 884:	0e c0       	rjmp	.+28     	; 0x8a2 <Endpoint_ClearStatusStage+0x2c>
 886:	12 c0       	rjmp	.+36     	; 0x8ac <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 888:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 88c:	82 fd       	sbrc	r24, 2
 88e:	05 c0       	rjmp	.+10     	; 0x89a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 890:	80 91 65 01 	lds	r24, 0x0165
 894:	81 11       	cpse	r24, r1
 896:	f8 cf       	rjmp	.-16     	; 0x888 <Endpoint_ClearStatusStage+0x12>
 898:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 89a:	80 91 e8 00 	lds	r24, 0x00E8
 89e:	8b 77       	andi	r24, 0x7B	; 123
 8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8a2:	80 91 65 01 	lds	r24, 0x0165
 8a6:	81 11       	cpse	r24, r1
 8a8:	ea cf       	rjmp	.-44     	; 0x87e <Endpoint_ClearStatusStage+0x8>
 8aa:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8ac:	80 91 e8 00 	lds	r24, 0x00E8
 8b0:	8e 77       	andi	r24, 0x7E	; 126
 8b2:	80 93 e8 00 	sts	0x00E8, r24
 8b6:	08 95       	ret

000008b8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 8b8:	80 91 e4 00 	lds	r24, 0x00E4
 8bc:	90 91 e5 00 	lds	r25, 0x00E5
 8c0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8c2:	20 91 ec 00 	lds	r18, 0x00EC
 8c6:	20 ff       	sbrs	r18, 0
 8c8:	21 c0       	rjmp	.+66     	; 0x90c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8ca:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 8ce:	20 fd       	sbrc	r18, 0
 8d0:	21 c0       	rjmp	.+66     	; 0x914 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8d2:	20 91 65 01 	lds	r18, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8d6:	22 23       	and	r18, r18
 8d8:	89 f0       	breq	.+34     	; 0x8fc <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8da:	25 30       	cpi	r18, 0x05	; 5
 8dc:	89 f0       	breq	.+34     	; 0x900 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8de:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8e2:	25 fd       	sbrc	r18, 5
 8e4:	0f c0       	rjmp	.+30     	; 0x904 <Endpoint_WaitUntilReady+0x4c>
 8e6:	20 91 e4 00 	lds	r18, 0x00E4
 8ea:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8ee:	28 17       	cp	r18, r24
 8f0:	39 07       	cpc	r19, r25
 8f2:	39 f3       	breq	.-50     	; 0x8c2 <Endpoint_WaitUntilReady+0xa>
 8f4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8f6:	41 f0       	breq	.+16     	; 0x908 <Endpoint_WaitUntilReady+0x50>
 8f8:	c9 01       	movw	r24, r18
 8fa:	e3 cf       	rjmp	.-58     	; 0x8c2 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 900:	83 e0       	ldi	r24, 0x03	; 3
 902:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 908:	84 e0       	ldi	r24, 0x04	; 4
 90a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 90c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 910:	22 ff       	sbrs	r18, 2
 912:	df cf       	rjmp	.-66     	; 0x8d2 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	08 95       	ret

00000918 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 918:	0f 93       	push	r16
 91a:	1f 93       	push	r17
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 920:	4e d0       	rcall	.+156    	; 0x9be <USB_INT_DisableAllInterrupts>
 922:	55 d0       	rcall	.+170    	; 0x9ce <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 924:	c8 ed       	ldi	r28, 0xD8	; 216
 926:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 928:	88 81       	ld	r24, Y
 92a:	8f 77       	andi	r24, 0x7F	; 127
 92c:	88 83       	st	Y, r24
 92e:	88 81       	ld	r24, Y
 930:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 932:	88 83       	st	Y, r24
 934:	88 81       	ld	r24, Y
 936:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 938:	88 83       	st	Y, r24
 93a:	e7 ed       	ldi	r30, 0xD7	; 215
 93c:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 93e:	80 81       	ld	r24, Z
 940:	80 68       	ori	r24, 0x80	; 128
 942:	80 83       	st	Z, r24
 944:	19 bc       	out	0x29, r1	; 41
 946:	10 92 65 01 	sts	0x0165, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 94a:	10 92 61 01 	sts	0x0161, r1
	USB_Device_ConfigurationNumber  = 0;
 94e:	10 92 63 01 	sts	0x0163, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 952:	10 92 62 01 	sts	0x0162, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 956:	00 ee       	ldi	r16, 0xE0	; 224
 958:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 95a:	f8 01       	movw	r30, r16
 95c:	80 81       	ld	r24, Z
 95e:	8b 7f       	andi	r24, 0xFB	; 251
 960:	80 83       	st	Z, r24
 962:	88 81       	ld	r24, Y
 964:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 966:	88 83       	st	Y, r24
 968:	42 e0       	ldi	r20, 0x02	; 2
 96a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	4e df       	rcall	.-356    	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 970:	e1 ee       	ldi	r30, 0xE1	; 225
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 976:	8e 7f       	andi	r24, 0xFE	; 254
 978:	80 83       	st	Z, r24
 97a:	e2 ee       	ldi	r30, 0xE2	; 226
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 980:	81 60       	ori	r24, 0x01	; 1
 982:	80 83       	st	Z, r24
 984:	80 81       	ld	r24, Z
 986:	88 60       	ori	r24, 0x08	; 8
 988:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 98a:	f8 01       	movw	r30, r16
 98c:	80 81       	ld	r24, Z
 98e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 990:	80 83       	st	Z, r24
 992:	88 81       	ld	r24, Y
 994:	80 61       	ori	r24, 0x10	; 16
 996:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 99e:	0f 91       	pop	r16
 9a0:	08 95       	ret

000009a2 <USB_Init>:
 9a2:	e8 ed       	ldi	r30, 0xD8	; 216
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 9a8:	8f 7e       	andi	r24, 0xEF	; 239
 9aa:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 9ac:	e7 ed       	ldi	r30, 0xD7	; 215
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	81 60       	ori	r24, 0x01	; 1
 9b4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	80 93 64 01 	sts	0x0164, r24

	USB_ResetInterface();
 9bc:	ad cf       	rjmp	.-166    	; 0x918 <USB_ResetInterface>

000009be <USB_INT_DisableAllInterrupts>:
 9be:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	8c 7f       	andi	r24, 0xFC	; 252
 9c6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 9c8:	10 92 e2 00 	sts	0x00E2, r1
 9cc:	08 95       	ret

000009ce <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 9ce:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 9d2:	10 92 e1 00 	sts	0x00E1, r1
 9d6:	08 95       	ret

000009d8 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9d8:	1f 92       	push	r1
 9da:	0f 92       	push	r0
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	0f 92       	push	r0
 9e0:	11 24       	eor	r1, r1
 9e2:	0b b6       	in	r0, 0x3b	; 59
 9e4:	0f 92       	push	r0
 9e6:	2f 93       	push	r18
 9e8:	3f 93       	push	r19
 9ea:	4f 93       	push	r20
 9ec:	5f 93       	push	r21
 9ee:	6f 93       	push	r22
 9f0:	7f 93       	push	r23
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
 9f6:	af 93       	push	r26
 9f8:	bf 93       	push	r27
 9fa:	ef 93       	push	r30
 9fc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9fe:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a02:	82 ff       	sbrs	r24, 2
 a04:	0a c0       	rjmp	.+20     	; 0xa1a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a06:	80 91 e2 00 	lds	r24, 0x00E2
 a0a:	82 ff       	sbrs	r24, 2
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a0e:	80 91 e1 00 	lds	r24, 0x00E1
 a12:	8b 7f       	andi	r24, 0xFB	; 251
 a14:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 a18:	3e d2       	rcall	.+1148   	; 0xe96 <USB_Event_Stub>
 a1a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 a1e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 a20:	1d c0       	rjmp	.+58     	; 0xa5c <__vector_10+0x84>
 a22:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 a26:	80 ff       	sbrs	r24, 0
 a28:	19 c0       	rjmp	.+50     	; 0xa5c <__vector_10+0x84>
 a2a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 a2e:	8e 7f       	andi	r24, 0xFE	; 254
 a30:	80 93 da 00 	sts	0x00DA, r24
 a34:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a38:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a3a:	0c c0       	rjmp	.+24     	; 0xa54 <__vector_10+0x7c>
 a3c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a3e:	89 bd       	out	0x29, r24	; 41
 a40:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a42:	89 bd       	out	0x29, r24	; 41
 a44:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a46:	00 fe       	sbrs	r0, 0
 a48:	fd cf       	rjmp	.-6      	; 0xa44 <__vector_10+0x6c>
 a4a:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a4c:	80 93 65 01 	sts	0x0165, r24
 a50:	db db       	rcall	.-2122   	; 0x208 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 a52:	04 c0       	rjmp	.+8      	; 0xa5c <__vector_10+0x84>
 a54:	19 bc       	out	0x29, r1	; 41
 a56:	10 92 65 01 	sts	0x0165, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a5a:	d8 db       	rcall	.-2128   	; 0x20c <EVENT_USB_Device_Disconnect>
 a5c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 a60:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a62:	18 c0       	rjmp	.+48     	; 0xa94 <__vector_10+0xbc>
 a64:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a68:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a6a:	14 c0       	rjmp	.+40     	; 0xa94 <__vector_10+0xbc>
 a6c:	80 91 e2 00 	lds	r24, 0x00E2
 a70:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a72:	80 93 e2 00 	sts	0x00E2, r24
 a76:	80 91 e2 00 	lds	r24, 0x00E2
 a7a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a7c:	80 93 e2 00 	sts	0x00E2, r24
 a80:	80 91 d8 00 	lds	r24, 0x00D8
 a84:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a86:	80 93 d8 00 	sts	0x00D8, r24
 a8a:	19 bc       	out	0x29, r1	; 41
 a8c:	85 e0       	ldi	r24, 0x05	; 5
 a8e:	80 93 65 01 	sts	0x0165, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a92:	01 d2       	rcall	.+1026   	; 0xe96 <USB_Event_Stub>
 a94:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 a98:	84 ff       	sbrs	r24, 4
 a9a:	2f c0       	rjmp	.+94     	; 0xafa <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a9c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 aa0:	84 ff       	sbrs	r24, 4
 aa2:	2b c0       	rjmp	.+86     	; 0xafa <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 aa4:	8c e0       	ldi	r24, 0x0C	; 12
 aa6:	89 bd       	out	0x29, r24	; 41
 aa8:	8e e0       	ldi	r24, 0x0E	; 14
 aaa:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 aac:	09 b4       	in	r0, 0x29	; 41
 aae:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 ab0:	fd cf       	rjmp	.-6      	; 0xaac <__vector_10+0xd4>
 ab2:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 ab6:	8f 7d       	andi	r24, 0xDF	; 223
 ab8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 abc:	80 91 e1 00 	lds	r24, 0x00E1
 ac0:	8f 7e       	andi	r24, 0xEF	; 239
 ac2:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 ac6:	80 91 e2 00 	lds	r24, 0x00E2
 aca:	8f 7e       	andi	r24, 0xEF	; 239
 acc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 ad0:	80 91 e2 00 	lds	r24, 0x00E2
 ad4:	81 60       	ori	r24, 0x01	; 1
 ad6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 ada:	80 91 61 01 	lds	r24, 0x0161
 ade:	88 23       	and	r24, r24
 ae0:	11 f0       	breq	.+4      	; 0xae6 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 ae2:	84 e0       	ldi	r24, 0x04	; 4
 ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <__vector_10+0x11c>
 ae6:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 aea:	87 ff       	sbrs	r24, 7
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 aee:	83 e0       	ldi	r24, 0x03	; 3
 af0:	01 c0       	rjmp	.+2      	; 0xaf4 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	80 93 65 01 	sts	0x0165, r24
 af8:	ce d1       	rcall	.+924    	; 0xe96 <USB_Event_Stub>
 afa:	80 91 e1 00 	lds	r24, 0x00E1
 afe:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 b00:	27 c0       	rjmp	.+78     	; 0xb50 <__vector_10+0x178>
 b02:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b06:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b08:	23 c0       	rjmp	.+70     	; 0xb50 <__vector_10+0x178>
 b0a:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b0e:	87 7f       	andi	r24, 0xF7	; 247
 b10:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b14:	82 e0       	ldi	r24, 0x02	; 2
 b16:	80 93 65 01 	sts	0x0165, r24
 b1a:	10 92 61 01 	sts	0x0161, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b1e:	80 91 e1 00 	lds	r24, 0x00E1
 b22:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 b24:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b28:	80 91 e2 00 	lds	r24, 0x00E2
 b2c:	8e 7f       	andi	r24, 0xFE	; 254
 b2e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b32:	80 91 e2 00 	lds	r24, 0x00E2
 b36:	80 61       	ori	r24, 0x10	; 16
 b38:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b3c:	42 e0       	ldi	r20, 0x02	; 2
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	64 de       	rcall	.-824    	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 b44:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b48:	88 60       	ori	r24, 0x08	; 8
 b4a:	80 93 f0 00 	sts	0x00F0, r24
 b4e:	a3 d1       	rcall	.+838    	; 0xe96 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 b50:	ff 91       	pop	r31
 b52:	ef 91       	pop	r30
 b54:	bf 91       	pop	r27
 b56:	af 91       	pop	r26
 b58:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b5a:	8f 91       	pop	r24
 b5c:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b5e:	6f 91       	pop	r22
 b60:	5f 91       	pop	r21
 b62:	4f 91       	pop	r20
 b64:	3f 91       	pop	r19
 b66:	2f 91       	pop	r18
 b68:	0f 90       	pop	r0
 b6a:	0b be       	out	0x3b, r0	; 59
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	0f 90       	pop	r0
 b72:	1f 90       	pop	r1
 b74:	18 95       	reti

00000b76 <__vector_11>:
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	0b b6       	in	r0, 0x3b	; 59
 b82:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 b84:	2f 93       	push	r18
 b86:	3f 93       	push	r19
 b88:	4f 93       	push	r20
 b8a:	5f 93       	push	r21
 b8c:	6f 93       	push	r22
 b8e:	7f 93       	push	r23
 b90:	8f 93       	push	r24
 b92:	9f 93       	push	r25
 b94:	af 93       	push	r26
 b96:	bf 93       	push	r27
 b98:	cf 93       	push	r28
 b9a:	ef 93       	push	r30
 b9c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b9e:	c0 91 e9 00 	lds	r28, 0x00E9
 ba2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ba4:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ba8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 bac:	80 91 f0 00 	lds	r24, 0x00F0
 bb0:	87 7f       	andi	r24, 0xF7	; 247
 bb2:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 bb6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 bb8:	1d d0       	rcall	.+58     	; 0xbf4 <USB_Device_ProcessControlRequest>
 bba:	10 92 e9 00 	sts	0x00E9, r1
 bbe:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 bc2:	88 60       	ori	r24, 0x08	; 8
 bc4:	80 93 f0 00 	sts	0x00F0, r24
 bc8:	c0 93 e9 00 	sts	0x00E9, r28
 bcc:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 bce:	ef 91       	pop	r30
 bd0:	cf 91       	pop	r28
 bd2:	bf 91       	pop	r27
 bd4:	af 91       	pop	r26
 bd6:	9f 91       	pop	r25
 bd8:	8f 91       	pop	r24
 bda:	7f 91       	pop	r23
 bdc:	6f 91       	pop	r22
 bde:	5f 91       	pop	r21
 be0:	4f 91       	pop	r20
 be2:	3f 91       	pop	r19
 be4:	2f 91       	pop	r18
 be6:	0f 90       	pop	r0
 be8:	0b be       	out	0x3b, r0	; 59
 bea:	0f 90       	pop	r0
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	0f 90       	pop	r0
 bf0:	1f 90       	pop	r1
 bf2:	18 95       	reti

00000bf4 <USB_Device_ProcessControlRequest>:
 bf4:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	cd b7       	in	r28, 0x3d	; 61
 bfc:	de b7       	in	r29, 0x3e	; 62
 bfe:	aa 97       	sbiw	r28, 0x2a	; 42
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	e6 e6       	ldi	r30, 0x66	; 102
 c0c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c0e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 c12:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 c14:	21 e0       	ldi	r18, 0x01	; 1
 c16:	ee 36       	cpi	r30, 0x6E	; 110
 c18:	f2 07       	cpc	r31, r18
 c1a:	c9 f7       	brne	.-14     	; 0xc0e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 c1c:	33 db       	rcall	.-2458   	; 0x284 <EVENT_USB_Device_ControlRequest>
 c1e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c22:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 c24:	20 c1       	rjmp	.+576    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 c26:	90 91 66 01 	lds	r25, 0x0166
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c2a:	80 91 67 01 	lds	r24, 0x0167

		switch (USB_ControlRequest.bRequest)
 c2e:	85 30       	cpi	r24, 0x05	; 5
 c30:	09 f4       	brne	.+2      	; 0xc34 <USB_Device_ProcessControlRequest+0x40>
 c32:	77 c0       	rjmp	.+238    	; 0xd22 <USB_Device_ProcessControlRequest+0x12e>
 c34:	30 f4       	brcc	.+12     	; 0xc42 <USB_Device_ProcessControlRequest+0x4e>
 c36:	81 30       	cpi	r24, 0x01	; 1
 c38:	81 f1       	breq	.+96     	; 0xc9a <USB_Device_ProcessControlRequest+0xa6>
 c3a:	68 f0       	brcs	.+26     	; 0xc56 <USB_Device_ProcessControlRequest+0x62>
 c3c:	83 30       	cpi	r24, 0x03	; 3
 c3e:	69 f1       	breq	.+90     	; 0xc9a <USB_Device_ProcessControlRequest+0xa6>
 c40:	12 c1       	rjmp	.+548    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 c42:	88 30       	cpi	r24, 0x08	; 8
 c44:	09 f4       	brne	.+2      	; 0xc48 <USB_Device_ProcessControlRequest+0x54>
 c46:	e1 c0       	rjmp	.+450    	; 0xe0a <USB_Device_ProcessControlRequest+0x216>
 c48:	89 30       	cpi	r24, 0x09	; 9
 c4a:	09 f4       	brne	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0x5a>
 c4c:	f0 c0       	rjmp	.+480    	; 0xe2e <USB_Device_ProcessControlRequest+0x23a>
 c4e:	86 30       	cpi	r24, 0x06	; 6
 c50:	09 f0       	breq	.+2      	; 0xc54 <USB_Device_ProcessControlRequest+0x60>
 c52:	09 c1       	rjmp	.+530    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 c54:	88 c0       	rjmp	.+272    	; 0xd66 <USB_Device_ProcessControlRequest+0x172>
 c56:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c58:	81 f0       	breq	.+32     	; 0xc7a <USB_Device_ProcessControlRequest+0x86>
 c5a:	92 38       	cpi	r25, 0x82	; 130
 c5c:	09 f0       	breq	.+2      	; 0xc60 <USB_Device_ProcessControlRequest+0x6c>
 c5e:	03 c1       	rjmp	.+518    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 c60:	80 91 6a 01 	lds	r24, 0x016A
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c64:	8f 70       	andi	r24, 0x0F	; 15
 c66:	80 93 e9 00 	sts	0x00E9, r24
 c6a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c6e:	85 fb       	bst	r24, 5
 c70:	88 27       	eor	r24, r24
 c72:	80 f9       	bld	r24, 0
 c74:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <USB_Device_ProcessControlRequest+0x92>
 c7a:	80 91 62 01 	lds	r24, 0x0162
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 c7e:	90 91 63 01 	lds	r25, 0x0163
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c82:	91 11       	cpse	r25, r1
 c84:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c86:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c8a:	97 7f       	andi	r25, 0xF7	; 247
 c8c:	90 93 e8 00 	sts	0x00E8, r25
 c90:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c94:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 c98:	c3 c0       	rjmp	.+390    	; 0xe20 <USB_Device_ProcessControlRequest+0x22c>
 c9a:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c9c:	2d 7f       	andi	r18, 0xFD	; 253
 c9e:	09 f0       	breq	.+2      	; 0xca2 <USB_Device_ProcessControlRequest+0xae>
 ca0:	e2 c0       	rjmp	.+452    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 ca2:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ca4:	19 f0       	breq	.+6      	; 0xcac <USB_Device_ProcessControlRequest+0xb8>
 ca6:	92 30       	cpi	r25, 0x02	; 2
 ca8:	61 f0       	breq	.+24     	; 0xcc2 <USB_Device_ProcessControlRequest+0xce>
 caa:	dd c0       	rjmp	.+442    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 cac:	90 91 68 01 	lds	r25, 0x0168
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 cb0:	91 30       	cpi	r25, 0x01	; 1
 cb2:	09 f0       	breq	.+2      	; 0xcb6 <USB_Device_ProcessControlRequest+0xc2>
 cb4:	d8 c0       	rjmp	.+432    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 cb6:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 cb8:	09 f0       	breq	.+2      	; 0xcbc <USB_Device_ProcessControlRequest+0xc8>
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	90 93 63 01 	sts	0x0163, r25
 cc0:	2a c0       	rjmp	.+84     	; 0xd16 <USB_Device_ProcessControlRequest+0x122>
 cc2:	90 91 68 01 	lds	r25, 0x0168

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 cc6:	91 11       	cpse	r25, r1
 cc8:	26 c0       	rjmp	.+76     	; 0xd16 <USB_Device_ProcessControlRequest+0x122>
 cca:	20 91 6a 01 	lds	r18, 0x016A
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 cce:	2f 70       	andi	r18, 0x0F	; 15
 cd0:	09 f4       	brne	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 cd2:	c9 c0       	rjmp	.+402    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 cd4:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd8:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 cdc:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 cde:	1b c0       	rjmp	.+54     	; 0xd16 <USB_Device_ProcessControlRequest+0x122>
 ce0:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ce2:	21 f4       	brne	.+8      	; 0xcec <USB_Device_ProcessControlRequest+0xf8>
 ce4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ce8:	80 62       	ori	r24, 0x20	; 32
 cea:	13 c0       	rjmp	.+38     	; 0xd12 <USB_Device_ProcessControlRequest+0x11e>
 cec:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 cf0:	80 61       	ori	r24, 0x10	; 16
 cf2:	80 93 eb 00 	sts	0x00EB, r24
 cf6:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	02 2e       	mov	r0, r18
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <USB_Device_ProcessControlRequest+0x10c>
 cfe:	88 0f       	add	r24, r24
 d00:	0a 94       	dec	r0
 d02:	ea f7       	brpl	.-6      	; 0xcfe <USB_Device_ProcessControlRequest+0x10a>
 d04:	80 93 ea 00 	sts	0x00EA, r24
 d08:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 d0c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d10:	88 60       	ori	r24, 0x08	; 8
 d12:	80 93 eb 00 	sts	0x00EB, r24
 d16:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d1a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d1e:	87 7f       	andi	r24, 0xF7	; 247
 d20:	82 c0       	rjmp	.+260    	; 0xe26 <USB_Device_ProcessControlRequest+0x232>
 d22:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d24:	a0 c0       	rjmp	.+320    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 d26:	10 91 68 01 	lds	r17, 0x0168
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 d2a:	1f 77       	andi	r17, 0x7F	; 127
 d2c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 d30:	80 78       	andi	r24, 0x80	; 128
 d32:	81 2b       	or	r24, r17
 d34:	80 93 e3 00 	sts	0x00E3, r24
 d38:	80 91 e8 00 	lds	r24, 0x00E8
 d3c:	87 7f       	andi	r24, 0xF7	; 247
 d3e:	80 93 e8 00 	sts	0x00E8, r24
 d42:	99 dd       	rcall	.-1230   	; 0x876 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d44:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d48:	80 ff       	sbrs	r24, 0
 d4a:	fc cf       	rjmp	.-8      	; 0xd44 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 d4c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 d50:	80 68       	ori	r24, 0x80	; 128
 d52:	80 93 e3 00 	sts	0x00E3, r24
 d56:	11 23       	and	r17, r17
 d58:	11 f0       	breq	.+4      	; 0xd5e <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d5a:	83 e0       	ldi	r24, 0x03	; 3
 d5c:	01 c0       	rjmp	.+2      	; 0xd60 <USB_Device_ProcessControlRequest+0x16c>
 d5e:	82 e0       	ldi	r24, 0x02	; 2
 d60:	80 93 65 01 	sts	0x0165, r24
 d64:	80 c0       	rjmp	.+256    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 d66:	90 58       	subi	r25, 0x80	; 128
 d68:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d6a:	08 f0       	brcs	.+2      	; 0xd6e <USB_Device_ProcessControlRequest+0x17a>
 d6c:	7c c0       	rjmp	.+248    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 d6e:	80 91 68 01 	lds	r24, 0x0168
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 d72:	90 91 69 01 	lds	r25, 0x0169
 d76:	8c 3d       	cpi	r24, 0xDC	; 220
 d78:	23 e0       	ldi	r18, 0x03	; 3
 d7a:	92 07       	cpc	r25, r18
 d7c:	71 f5       	brne	.+92     	; 0xdda <USB_Device_ProcessControlRequest+0x1e6>
 d7e:	83 e0       	ldi	r24, 0x03	; 3
 d80:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d82:	8a e2       	ldi	r24, 0x2A	; 42
 d84:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d86:	4f b7       	in	r20, 0x3f	; 63
 d88:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d8a:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d8c:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d8e:	20 e0       	ldi	r18, 0x00	; 0
 d90:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d92:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d94:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d96:	f0 e0       	ldi	r31, 0x00	; 0
 d98:	50 93 57 00 	sts	0x0057, r21
 d9c:	e4 91       	lpm	r30, Z
 d9e:	20 ff       	sbrs	r18, 0
 da0:	03 c0       	rjmp	.+6      	; 0xda8 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 da2:	e2 95       	swap	r30
 da4:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 da6:	3f 5f       	subi	r19, 0xFF	; 255
 da8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 daa:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	ea 30       	cpi	r30, 0x0A	; 10
 db0:	10 f0       	brcs	.+4      	; 0xdb6 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 db2:	c7 96       	adiw	r24, 0x37	; 55
 db4:	01 c0       	rjmp	.+2      	; 0xdb8 <USB_Device_ProcessControlRequest+0x1c4>
 db6:	c0 96       	adiw	r24, 0x30	; 48
 db8:	8d 93       	st	X+, r24
 dba:	9d 93       	st	X+, r25
 dbc:	2f 5f       	subi	r18, 0xFF	; 255
 dbe:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 dc0:	49 f7       	brne	.-46     	; 0xd94 <USB_Device_ProcessControlRequest+0x1a0>
 dc2:	4f bf       	out	0x3f, r20	; 63
 dc4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc8:	87 7f       	andi	r24, 0xF7	; 247
 dca:	80 93 e8 00 	sts	0x00E8, r24
 dce:	6a e2       	ldi	r22, 0x2A	; 42
 dd0:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 dd2:	ce 01       	movw	r24, r28
 dd4:	01 96       	adiw	r24, 0x01	; 1
 dd6:	1f dc       	rcall	.-1986   	; 0x616 <Endpoint_Write_Control_Stream_LE>
 dd8:	12 c0       	rjmp	.+36     	; 0xdfe <USB_Device_ProcessControlRequest+0x20a>
 dda:	ae 01       	movw	r20, r28
 ddc:	4f 5f       	subi	r20, 0xFF	; 255
 dde:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 de0:	60 91 6a 01 	lds	r22, 0x016A
 de4:	58 db       	rcall	.-2384   	; 0x496 <CALLBACK_USB_GetDescriptor>
 de6:	00 97       	sbiw	r24, 0x00	; 0
 de8:	09 f4       	brne	.+2      	; 0xdec <USB_Device_ProcessControlRequest+0x1f8>
 dea:	3d c0       	rjmp	.+122    	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 dec:	20 91 e8 00 	lds	r18, 0x00E8
 df0:	27 7f       	andi	r18, 0xF7	; 247
 df2:	20 93 e8 00 	sts	0x00E8, r18
 df6:	bc 01       	movw	r22, r24
 df8:	89 81       	ldd	r24, Y+1	; 0x01
 dfa:	9a 81       	ldd	r25, Y+2	; 0x02
 dfc:	a7 dc       	rcall	.-1714   	; 0x74c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 dfe:	80 91 e8 00 	lds	r24, 0x00E8
 e02:	8b 77       	andi	r24, 0x7B	; 123
 e04:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e08:	2e c0       	rjmp	.+92     	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 e0a:	90 38       	cpi	r25, 0x80	; 128
 e0c:	61 f5       	brne	.+88     	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 e0e:	80 91 e8 00 	lds	r24, 0x00E8
 e12:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e14:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e18:	80 91 61 01 	lds	r24, 0x0161
 e1c:	80 93 f1 00 	sts	0x00F1, r24
 e20:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 e24:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e26:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e2a:	25 dd       	rcall	.-1462   	; 0x876 <Endpoint_ClearStatusStage>
 e2c:	1c c0       	rjmp	.+56     	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 e2e:	91 11       	cpse	r25, r1
 e30:	1a c0       	rjmp	.+52     	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
 e32:	90 91 68 01 	lds	r25, 0x0168
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 e36:	92 30       	cpi	r25, 0x02	; 2
 e38:	b0 f4       	brcc	.+44     	; 0xe66 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e3a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e3e:	87 7f       	andi	r24, 0xF7	; 247
 e40:	80 93 e8 00 	sts	0x00E8, r24
 e44:	90 93 61 01 	sts	0x0161, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e48:	16 dd       	rcall	.-1492   	; 0x876 <Endpoint_ClearStatusStage>
 e4a:	80 91 61 01 	lds	r24, 0x0161
 e4e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e50:	04 c0       	rjmp	.+8      	; 0xe5a <USB_Device_ProcessControlRequest+0x266>
 e52:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 e56:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 e58:	02 c0       	rjmp	.+4      	; 0xe5e <USB_Device_ProcessControlRequest+0x26a>
 e5a:	84 e0       	ldi	r24, 0x04	; 4
 e5c:	01 c0       	rjmp	.+2      	; 0xe60 <USB_Device_ProcessControlRequest+0x26c>
 e5e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e60:	80 93 65 01 	sts	0x0165, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e64:	d5 d9       	rcall	.-3158   	; 0x210 <EVENT_USB_Device_ConfigurationChanged>
 e66:	80 91 e8 00 	lds	r24, 0x00E8
 e6a:	83 ff       	sbrs	r24, 3
 e6c:	0a c0       	rjmp	.+20     	; 0xe82 <USB_Device_ProcessControlRequest+0x28e>
 e6e:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 e72:	87 7f       	andi	r24, 0xF7	; 247
 e74:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e78:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 e7c:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e7e:	80 93 eb 00 	sts	0x00EB, r24
 e82:	aa 96       	adiw	r28, 0x2a	; 42
 e84:	0f b6       	in	r0, 0x3f	; 63
 e86:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 e88:	de bf       	out	0x3e, r29	; 62
 e8a:	0f be       	out	0x3f, r0	; 63
 e8c:	cd bf       	out	0x3d, r28	; 61
 e8e:	df 91       	pop	r29
 e90:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e92:	1f 91       	pop	r17
 e94:	08 95       	ret

00000e96 <USB_Event_Stub>:
 e96:	08 95       	ret

00000e98 <USB_USBTask>:
 e98:	cf 93       	push	r28
 e9a:	80 91 65 01 	lds	r24, 0x0165
 e9e:	88 23       	and	r24, r24
 ea0:	a9 f0       	breq	.+42     	; 0xecc <USB_USBTask+0x34>
 ea2:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ea6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ea8:	90 91 ec 00 	lds	r25, 0x00EC
 eac:	90 ff       	sbrs	r25, 0
 eae:	02 c0       	rjmp	.+4      	; 0xeb4 <USB_USBTask+0x1c>
 eb0:	90 e8       	ldi	r25, 0x80	; 128
 eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <USB_USBTask+0x1e>
 eb4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 eb6:	c9 2f       	mov	r28, r25
 eb8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 eba:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ebe:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ec2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 ec4:	97 de       	rcall	.-722    	; 0xbf4 <USB_Device_ProcessControlRequest>
 ec6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ec8:	c0 93 e9 00 	sts	0x00E9, r28
 ecc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 ece:	08 95       	ret

00000ed0 <_exit>:
 ed0:	f8 94       	cli

00000ed2 <__stop_program>:
 ed2:	ff cf       	rjmp	.-2      	; 0xed2 <__stop_program>


MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00001f7a  0000200e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800180  00800180  0000208e  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002c97  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000700  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d663  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000031c2  00000000  00000000  00010a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004d24  00000000  00000000  00013bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011d0  00000000  00000000  000188f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000043af  00000000  00000000  00019ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007c6e  00000000  00000000  0001de73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000830  00000000  00000000  00025ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	c4 c0       	rjmp	.+392    	; 0x18a <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_10>
      2c:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_11>
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000e2 <ManufacturerString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000fc <LanguageString>:
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      fc:	04 03 09 04                                         ....

00000100 <ConfigurationDescriptor>:
		ReportSize--;
     100:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     110:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     120:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     130:	3f 00 07 05 81 03 08 00 05                          ?........

00000139 <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     139:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     149:	dc 01                                               ..

0000014b <KeyboardReport>:
     14b:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15b:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
				ReportSize     -= 2;
				ReportData     += 2;
     16b:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17b:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

0000018a <__ctors_end>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf ef       	ldi	r28, 0xFF	; 255
     190:	d0 e2       	ldi	r29, 0x20	; 32
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	ea e7       	ldi	r30, 0x7A	; 122
     19e:	ff e1       	ldi	r31, 0x1F	; 31
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	a0 38       	cpi	r26, 0x80	; 128
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e8       	ldi	r26, 0x80	; 128
				break;
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a5 39       	cpi	r26, 0x95	; 149
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	4c d0       	rcall	.+152    	; 0x25a <main>
     1c2:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <LEDs_SetAllLEDs>:
     1c8:	9b b1       	in	r25, 0x0b	; 11
     1ca:	9f 70       	andi	r25, 0x0F	; 15
     1cc:	98 2b       	or	r25, r24
     1ce:	9b b9       	out	0x0b, r25	; 11
     1d0:	08 95       	ret

000001d2 <SetupHardware>:
     1d2:	84 b7       	in	r24, 0x34	; 52
     1d4:	87 7f       	andi	r24, 0xF7	; 247
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	84 bf       	out	0x34, r24	; 52
     1d8:	88 e1       	ldi	r24, 0x18	; 24
     1da:	0f b6       	in	r0, 0x3f	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	f8 94       	cli
     1de:	80 93 60 00 	sts	0x0060, r24
     1e2:	10 92 60 00 	sts	0x0060, r1
     1e6:	0f be       	out	0x3f, r0	; 63
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	80 e8       	ldi	r24, 0x80	; 128
				break;
     1ec:	0f b6       	in	r0, 0x3f	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	f8 94       	cli
     1f0:	80 93 61 00 	sts	0x0061, r24
     1f4:	90 93 61 00 	sts	0x0061, r25
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	8a b1       	in	r24, 0x0a	; 10
     1fc:	80 6f       	ori	r24, 0xF0	; 240
     1fe:	8a b9       	out	0x0a, r24	; 10
     200:	8b b1       	in	r24, 0x0b	; 11
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	8f 70       	andi	r24, 0x0F	; 15
     204:	8b b9       	out	0x0b, r24	; 11
				break;
     206:	84 b1       	in	r24, 0x04	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	8f 71       	andi	r24, 0x1F	; 31
     20a:	84 b9       	out	0x04, r24	; 4
     20c:	8d b1       	in	r24, 0x0d	; 13
     20e:	8f 7c       	andi	r24, 0xCF	; 207
     210:	8d b9       	out	0x0d, r24	; 13
     212:	85 b1       	in	r24, 0x05	; 5
     214:	80 6e       	ori	r24, 0xE0	; 224
     216:	85 b9       	out	0x05, r24	; 5
     218:	8e b1       	in	r24, 0x0e	; 14
     21a:	80 63       	ori	r24, 0x30	; 48
     21c:	8e b9       	out	0x0e, r24	; 14
     21e:	6a 98       	cbi	0x0d, 2	; 13
     220:	72 9a       	sbi	0x0e, 2	; 14
     222:	8d b1       	in	r24, 0x0d	; 13
     224:	83 60       	ori	r24, 0x03	; 3
     226:	8d b9       	out	0x0d, r24	; 13
     228:	8e b1       	in	r24, 0x0e	; 14
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	8e b9       	out	0x0e, r24	; 14
     22e:	20 9a       	sbi	0x04, 0	; 4
     230:	28 9a       	sbi	0x05, 0	; 5
     232:	84 b1       	in	r24, 0x04	; 4
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	86 60       	ori	r24, 0x06	; 6
     236:	84 b9       	out	0x04, r24	; 4
     238:	23 98       	cbi	0x04, 3	; 4
     23a:	2b 9a       	sbi	0x05, 3	; 5
     23c:	8d b5       	in	r24, 0x2d	; 45
     23e:	81 60       	ori	r24, 0x01	; 1
     240:	8d bd       	out	0x2d, r24	; 45
     242:	20 98       	cbi	0x04, 0	; 4
     244:	8c e5       	ldi	r24, 0x5C	; 92
     246:	8c bd       	out	0x2c, r24	; 44
     248:	0e 94 87 09 	call	0x130e	; 0x130e <USB_Init>
     24c:	b4 d3       	rcall	.+1896   	; 0x9b6 <DataflashManager_CheckDataflashOperation>
     24e:	81 11       	cpse	r24, r1
     250:	03 c0       	rjmp	.+6      	; 0x258 <SetupHardware+0x86>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	80 e9       	ldi	r24, 0x90	; 144
     254:	b9 df       	rcall	.-142    	; 0x1c8 <LEDs_SetAllLEDs>
     256:	ff cf       	rjmp	.-2      	; 0x256 <SetupHardware+0x84>
     258:	5d c3       	rjmp	.+1722   	; 0x914 <DataflashManager_ResetDataflashProtections>

0000025a <main>:
     25a:	bb df       	rcall	.-138    	; 0x1d2 <SetupHardware>
     25c:	80 e1       	ldi	r24, 0x10	; 16
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	b4 df       	rcall	.-152    	; 0x1c8 <LEDs_SetAllLEDs>
     260:	78 94       	sei
     262:	80 e1       	ldi	r24, 0x10	; 16
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <MS_Device_USBTask>
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <HID_Device_USBTask>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     272:	0e 94 08 0c 	call	0x1810	; 0x1810 <USB_USBTask>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     276:	f5 cf       	rjmp	.-22     	; 0x262 <main+0x8>

00000278 <EVENT_USB_Device_Connect>:
     278:	80 ea       	ldi	r24, 0xA0	; 160
     27a:	a6 cf       	rjmp	.-180    	; 0x1c8 <LEDs_SetAllLEDs>

0000027c <EVENT_USB_Device_Disconnect>:
     27c:	80 e1       	ldi	r24, 0x10	; 16
     27e:	a4 cf       	rjmp	.-184    	; 0x1c8 <LEDs_SetAllLEDs>

00000280 <EVENT_USB_Device_ConfigurationChanged>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	cf 93       	push	r28
     282:	80 e0       	ldi	r24, 0x00	; 0
				break;
     284:	91 e0       	ldi	r25, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <HID_Device_ConfigureEndpoints>
     28a:	c8 2f       	mov	r28, r24
     28c:	80 e1       	ldi	r24, 0x10	; 16
     28e:	91 e0       	ldi	r25, 0x01	; 1
				break;
     290:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <MS_Device_ConfigureEndpoints>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	90 91 e2 00 	lds	r25, 0x00E2
     298:	94 60       	ori	r25, 0x04	; 4
     29a:	90 93 e2 00 	sts	0x00E2, r25
     29e:	88 23       	and	r24, r24
				break;
     2a0:	21 f0       	breq	.+8      	; 0x2aa <EVENT_USB_Device_ConfigurationChanged+0x2a>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	cc 23       	and	r28, r28
     2a4:	11 f0       	breq	.+4      	; 0x2aa <EVENT_USB_Device_ConfigurationChanged+0x2a>
     2a6:	80 e6       	ldi	r24, 0x60	; 96
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <EVENT_USB_Device_ConfigurationChanged+0x2c>
     2aa:	80 e9       	ldi	r24, 0x90	; 144
				break;
     2ac:	cf 91       	pop	r28

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	8c cf       	rjmp	.-232    	; 0x1c8 <LEDs_SetAllLEDs>

000002b0 <EVENT_USB_Device_ControlRequest>:
     2b0:	80 e1       	ldi	r24, 0x10	; 16
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <MS_Device_ProcessControlRequest>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	91 e0       	ldi	r25, 0x01	; 1
				break;
     2bc:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <HID_Device_ProcessControlRequest>

000002c0 <CALLBACK_MS_Device_SCSICommandReceived>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	ec 01       	movw	r28, r24
     2c6:	80 e2       	ldi	r24, 0x20	; 32
     2c8:	7f df       	rcall	.-258    	; 0x1c8 <LEDs_SetAllLEDs>
     2ca:	ce 01       	movw	r24, r28
				break;
     2cc:	df d3       	rcall	.+1982   	; 0xa8c <SCSI_DecodeSCSICommand>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	c8 2f       	mov	r28, r24
     2d0:	80 e6       	ldi	r24, 0x60	; 96
     2d2:	7a df       	rcall	.-268    	; 0x1c8 <LEDs_SetAllLEDs>
				break;
     2d4:	8c 2f       	mov	r24, r28

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <EVENT_USB_Device_StartOfFrame>:

				if (ParserData->UsingReportIDs)
     2dc:	80 91 0e 01 	lds	r24, 0x010E
     2e0:	90 91 0f 01 	lds	r25, 0x010F
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	29 f0       	breq	.+10     	; 0x2f2 <EVENT_USB_Device_StartOfFrame+0x16>
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	90 93 0f 01 	sts	0x010F, r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ee:	80 93 0e 01 	sts	0x010E, r24
     2f2:	08 95       	ret

000002f4 <CALLBACK_HID_Device_CreateHIDReport>:
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	f9 01       	movw	r30, r18
     2fa:	93 b1       	in	r25, 0x03	; 3
     2fc:	8c b1       	in	r24, 0x0c	; 12
     2fe:	80 95       	com	r24
     300:	80 73       	andi	r24, 0x30	; 48
     302:	86 95       	lsr	r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	90 95       	com	r25
     306:	90 7e       	andi	r25, 0xE0	; 224
     308:	89 2b       	or	r24, r25
     30a:	9c b1       	in	r25, 0x0c	; 12
     30c:	90 95       	com	r25
     30e:	22 e0       	ldi	r18, 0x02	; 2
     310:	20 83       	st	Z, r18
     312:	87 ff       	sbrs	r24, 7
     314:	02 c0       	rjmp	.+4      	; 0x31a <CALLBACK_HID_Device_CreateHIDReport+0x26>
     316:	24 e0       	ldi	r18, 0x04	; 4
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	03 c0       	rjmp	.+6      	; 0x320 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
     31a:	84 ff       	sbrs	r24, 4
     31c:	02 c0       	rjmp	.+4      	; 0x322 <CALLBACK_HID_Device_CreateHIDReport+0x2e>
     31e:	25 e0       	ldi	r18, 0x05	; 5
     320:	22 83       	std	Z+2, r18	; 0x02
     322:	86 ff       	sbrs	r24, 6
     324:	02 c0       	rjmp	.+4      	; 0x32a <CALLBACK_HID_Device_CreateHIDReport+0x36>
     326:	26 e0       	ldi	r18, 0x06	; 6
     328:	03 c0       	rjmp	.+6      	; 0x330 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     32a:	83 ff       	sbrs	r24, 3
     32c:	02 c0       	rjmp	.+4      	; 0x332 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
     32e:	27 e0       	ldi	r18, 0x07	; 7
     330:	22 83       	std	Z+2, r18	; 0x02
     332:	85 ff       	sbrs	r24, 5
     334:	02 c0       	rjmp	.+4      	; 0x33a <CALLBACK_HID_Device_CreateHIDReport+0x46>
     336:	88 e0       	ldi	r24, 0x08	; 8
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	82 83       	std	Z+2, r24	; 0x02
     33a:	92 ff       	sbrs	r25, 2
     33c:	02 c0       	rjmp	.+4      	; 0x342 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	89 e0       	ldi	r24, 0x09	; 9
     340:	82 83       	std	Z+2, r24	; 0x02
     342:	88 e0       	ldi	r24, 0x08	; 8
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	f8 01       	movw	r30, r16
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <CALLBACK_HID_Device_ProcessHIDReport>:
     354:	f9 01       	movw	r30, r18
     356:	90 81       	ld	r25, Z
     358:	90 fd       	sbrc	r25, 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	01 c0       	rjmp	.+2      	; 0x362 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
     360:	80 e1       	ldi	r24, 0x10	; 16
     362:	91 fd       	sbrc	r25, 1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	80 68       	ori	r24, 0x80	; 128
     366:	92 fd       	sbrc	r25, 2
     368:	80 64       	ori	r24, 0x40	; 64
     36a:	2e cf       	rjmp	.-420    	; 0x1c8 <LEDs_SetAllLEDs>

0000036c <CALLBACK_USB_GetDescriptor>:
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	29 2f       	mov	r18, r25
     36e:	33 27       	eor	r19, r19
     370:	23 30       	cpi	r18, 0x03	; 3
     372:	31 05       	cpc	r19, r1
     374:	b9 f0       	breq	.+46     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x38>
     376:	5c f4       	brge	.+22     	; 0x38e <CALLBACK_USB_GetDescriptor+0x22>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	21 30       	cpi	r18, 0x01	; 1
     37a:	31 05       	cpc	r19, r1
     37c:	69 f1       	breq	.+90     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x6c>
     37e:	22 30       	cpi	r18, 0x02	; 2
     380:	31 05       	cpc	r19, r1
     382:	79 f5       	brne	.+94     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x76>
     384:	89 e3       	ldi	r24, 0x39	; 57
     386:	90 e0       	ldi	r25, 0x00	; 0
				break;
     388:	20 e0       	ldi	r18, 0x00	; 0

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	2e c0       	rjmp	.+92     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x7e>
     38e:	21 32       	cpi	r18, 0x21	; 33
     390:	31 05       	cpc	r19, r1
     392:	e9 f0       	breq	.+58     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x62>
     394:	22 32       	cpi	r18, 0x22	; 34
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	31 05       	cpc	r19, r1
     398:	21 f5       	brne	.+72     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x76>
     39a:	8f e3       	ldi	r24, 0x3F	; 63
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	2b e4       	ldi	r18, 0x4B	; 75
     3a0:	31 e0       	ldi	r19, 0x01	; 1
     3a2:	23 c0       	rjmp	.+70     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x7e>
     3a4:	99 27       	eor	r25, r25
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	91 05       	cpc	r25, r1
     3aa:	41 f0       	breq	.+16     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x50>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	91 05       	cpc	r25, r1
				break;
     3b0:	41 f0       	breq	.+16     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x56>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	89 2b       	or	r24, r25
     3b4:	b1 f4       	brne	.+44     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x76>
     3b6:	ec ef       	ldi	r30, 0xFC	; 252
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x5a>
     3bc:	e2 ee       	ldi	r30, 0xE2	; 226
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x5a>
     3c2:	e8 e9       	ldi	r30, 0x98	; 152
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	84 91       	lpm	r24, Z
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9f 01       	movw	r18, r30
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x7e>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	89 e0       	ldi	r24, 0x09	; 9
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	29 e2       	ldi	r18, 0x29	; 41

					while (CurrCollectionPath->Parent != NULL)
     3d4:	31 e0       	ldi	r19, 0x01	; 1
     3d6:	09 c0       	rjmp	.+18     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x7e>
     3d8:	82 e1       	ldi	r24, 0x12	; 18
     3da:	90 e0       	ldi	r25, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	29 e3       	ldi	r18, 0x39	; 57
     3de:	31 e0       	ldi	r19, 0x01	; 1
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <CALLBACK_USB_GetDescriptor+0x7e>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	fa 01       	movw	r30, r20
     3ec:	31 83       	std	Z+1, r19	; 0x01
     3ee:	20 83       	st	Z, r18
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	08 95       	ret

000003f2 <Dataflash_ToggleSelectedChipCS>:
     3f2:	8e b1       	in	r24, 0x0e	; 14
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	9e b1       	in	r25, 0x0e	; 14
     3f6:	93 60       	ori	r25, 0x03	; 3
     3f8:	9e b9       	out	0x0e, r25	; 14
     3fa:	9e b1       	in	r25, 0x0e	; 14
     3fc:	8c 6f       	ori	r24, 0xFC	; 252
     3fe:	93 60       	ori	r25, 0x03	; 3
     400:	89 23       	and	r24, r25
     402:	8e b9       	out	0x0e, r24	; 14
     404:	08 95       	ret

00000406 <Dataflash_WaitWhileBusy>:
     406:	f5 df       	rcall	.-22     	; 0x3f2 <Dataflash_ToggleSelectedChipCS>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	87 ed       	ldi	r24, 0xD7	; 215
     40a:	8e bd       	out	0x2e, r24	; 46
     40c:	0d b4       	in	r0, 0x2d	; 45
     40e:	07 fe       	sbrs	r0, 7
     410:	fd cf       	rjmp	.-6      	; 0x40c <Dataflash_WaitWhileBusy+0x6>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	1e bc       	out	0x2e, r1	; 46
     414:	0d b4       	in	r0, 0x2d	; 45
     416:	07 fe       	sbrs	r0, 7
     418:	fd cf       	rjmp	.-6      	; 0x414 <Dataflash_WaitWhileBusy+0xe>
     41a:	0e b4       	in	r0, 0x2e	; 46
     41c:	07 fe       	sbrs	r0, 7
     41e:	f9 cf       	rjmp	.-14     	; 0x412 <Dataflash_WaitWhileBusy+0xc>

				if (UsageListSize)
     420:	e8 cf       	rjmp	.-48     	; 0x3f2 <Dataflash_ToggleSelectedChipCS>

00000422 <Dataflash_SendAddressBytes>:
     422:	9c 01       	movw	r18, r24
     424:	36 95       	lsr	r19
     426:	27 95       	ror	r18
     428:	56 e0       	ldi	r21, 0x06	; 6
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	96 95       	lsr	r25
     42c:	87 95       	ror	r24
     42e:	5a 95       	dec	r21
     430:	e1 f7       	brne	.-8      	; 0x42a <Dataflash_SendAddressBytes+0x8>
     432:	8e bd       	out	0x2e, r24	; 46
     434:	0d b4       	in	r0, 0x2d	; 45
     436:	07 fe       	sbrs	r0, 7
     438:	fd cf       	rjmp	.-6      	; 0x434 <Dataflash_SendAddressBytes+0x12>
     43a:	22 0f       	add	r18, r18
     43c:	22 0f       	add	r18, r18
     43e:	22 0f       	add	r18, r18

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	27 2b       	or	r18, r23
     442:	2e bd       	out	0x2e, r18	; 46
     444:	0d b4       	in	r0, 0x2d	; 45
     446:	07 fe       	sbrs	r0, 7
     448:	fd cf       	rjmp	.-6      	; 0x444 <Dataflash_SendAddressBytes+0x22>
     44a:	6e bd       	out	0x2e, r22	; 46
					  UsageList[i - 1] = UsageList[i];
     44c:	0d b4       	in	r0, 0x2d	; 45
     44e:	07 fe       	sbrs	r0, 7
     450:	fd cf       	rjmp	.-6      	; 0x44c <Dataflash_SendAddressBytes+0x2a>
     452:	08 95       	ret

00000454 <Dataflash_SelectChipFromPage>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	2e b1       	in	r18, 0x0e	; 14
     456:	23 60       	ori	r18, 0x03	; 3
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	2e b9       	out	0x0e, r18	; 14
     45a:	81 15       	cp	r24, r1
     45c:	20 e4       	ldi	r18, 0x40	; 64
     45e:	92 07       	cpc	r25, r18
     460:	50 f4       	brcc	.+20     	; 0x476 <Dataflash_SelectChipFromPage+0x22>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	80 ff       	sbrs	r24, 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <Dataflash_SelectChipFromPage+0x1a>
     466:	8e b1       	in	r24, 0x0e	; 14
     468:	83 60       	ori	r24, 0x03	; 3
     46a:	8d 7f       	andi	r24, 0xFD	; 253
     46c:	03 c0       	rjmp	.+6      	; 0x474 <Dataflash_SelectChipFromPage+0x20>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	8e b1       	in	r24, 0x0e	; 14
     470:	83 60       	ori	r24, 0x03	; 3
     472:	8e 7f       	andi	r24, 0xFE	; 254
     474:	8e b9       	out	0x0e, r24	; 14
     476:	08 95       	ret

00000478 <DataflashManager_WriteBlocks>:
     478:	4f 92       	push	r4
     47a:	5f 92       	push	r5
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	6c 01       	movw	r12, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	89 01       	movw	r16, r18
     49c:	4a 01       	movw	r8, r20
     49e:	5b 01       	movw	r10, r22
     4a0:	f9 e0       	ldi	r31, 0x09	; 9
     4a2:	88 0c       	add	r8, r8
     4a4:	99 1c       	adc	r9, r9
     4a6:	aa 1c       	adc	r10, r10
     4a8:	bb 1c       	adc	r11, r11
     4aa:	fa 95       	dec	r31
				break;
     4ac:	d1 f7       	brne	.-12     	; 0x4a2 <DataflashManager_WriteBlocks+0x2a>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	aa e0       	ldi	r26, 0x0A	; 10
     4b0:	b6 94       	lsr	r11
     4b2:	a7 94       	ror	r10
     4b4:	97 94       	ror	r9
     4b6:	87 94       	ror	r8
     4b8:	aa 95       	dec	r26
     4ba:	d1 f7       	brne	.-12     	; 0x4b0 <DataflashManager_WriteBlocks+0x38>
     4bc:	e4 01       	movw	r28, r8
     4be:	7a 01       	movw	r14, r20
     4c0:	fe 2c       	mov	r15, r14
     4c2:	ee 24       	eor	r14, r14
     4c4:	ff 0c       	add	r15, r15
     4c6:	ee 24       	eor	r14, r14
     4c8:	82 e0       	ldi	r24, 0x02	; 2
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	f8 22       	and	r15, r24
     4cc:	c4 01       	movw	r24, r8
     4ce:	c2 df       	rcall	.-124    	; 0x454 <Dataflash_SelectChipFromPage>
     4d0:	83 e5       	ldi	r24, 0x53	; 83
     4d2:	8e bd       	out	0x2e, r24	; 46
     4d4:	0d b4       	in	r0, 0x2d	; 45
     4d6:	07 fe       	sbrs	r0, 7
     4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <DataflashManager_WriteBlocks+0x5c>
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	c4 01       	movw	r24, r8
     4e0:	a0 df       	rcall	.-192    	; 0x422 <Dataflash_SendAddressBytes>
     4e2:	91 df       	rcall	.-222    	; 0x406 <Dataflash_WaitWhileBusy>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	84 e8       	ldi	r24, 0x84	; 132
     4e6:	8e bd       	out	0x2e, r24	; 46
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <DataflashManager_WriteBlocks+0x70>
     4ee:	b7 01       	movw	r22, r14
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	96 df       	rcall	.-212    	; 0x422 <Dataflash_SendAddressBytes>
     4f6:	96 d6       	rcall	.+3372   	; 0x1224 <Endpoint_WaitUntilReady>
     4f8:	81 11       	cpse	r24, r1
     4fa:	ec c0       	rjmp	.+472    	; 0x6d4 <DataflashManager_WriteBlocks+0x25c>
     4fc:	74 e0       	ldi	r23, 0x04	; 4
     4fe:	f6 94       	lsr	r15
     500:	e7 94       	ror	r14
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	7a 95       	dec	r23
     504:	e1 f7       	brne	.-8      	; 0x4fe <DataflashManager_WriteBlocks+0x86>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	38 01       	movw	r6, r16
     508:	e5 e0       	ldi	r30, 0x05	; 5
     50a:	66 0c       	add	r6, r6
     50c:	77 1c       	adc	r7, r7
     50e:	ea 95       	dec	r30
     510:	e1 f7       	brne	.-8      	; 0x50a <DataflashManager_WriteBlocks+0x92>
     512:	a1 2c       	mov	r10, r1
     514:	b1 2c       	mov	r11, r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	f1 2c       	mov	r15, r1
     518:	44 24       	eor	r4, r4
     51a:	43 94       	inc	r4
     51c:	01 15       	cp	r16, r1

					if (UsageListSize)
     51e:	11 05       	cpc	r17, r1
     520:	09 f4       	brne	.+2      	; 0x524 <DataflashManager_WriteBlocks+0xac>
     522:	bd c0       	rjmp	.+378    	; 0x69e <DataflashManager_WriteBlocks+0x226>
     524:	45 01       	movw	r8, r10
     526:	86 0c       	add	r8, r6
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	97 1c       	adc	r9, r7
     52a:	60 e2       	ldi	r22, 0x20	; 32
     52c:	56 2e       	mov	r5, r22
     52e:	80 91 e8 00 	lds	r24, 0x00E8
     532:	85 ff       	sbrs	r24, 5
     534:	04 c0       	rjmp	.+8      	; 0x53e <DataflashManager_WriteBlocks+0xc6>
     536:	e0 e4       	ldi	r30, 0x40	; 64
     538:	ee 12       	cpse	r14, r30
     53a:	43 c0       	rjmp	.+134    	; 0x5c2 <DataflashManager_WriteBlocks+0x14a>
     53c:	09 c0       	rjmp	.+18     	; 0x550 <DataflashManager_WriteBlocks+0xd8>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	80 91 e8 00 	lds	r24, 0x00E8
     542:	8b 77       	andi	r24, 0x7B	; 123
     544:	80 93 e8 00 	sts	0x00E8, r24
     548:	6d d6       	rcall	.+3290   	; 0x1224 <Endpoint_WaitUntilReady>
						  UsageList[i - 1] = UsageList[i];
     54a:	88 23       	and	r24, r24
     54c:	a1 f3       	breq	.-24     	; 0x536 <DataflashManager_WriteBlocks+0xbe>
     54e:	c2 c0       	rjmp	.+388    	; 0x6d4 <DataflashManager_WriteBlocks+0x25c>
     550:	5a df       	rcall	.-332    	; 0x406 <Dataflash_WaitWhileBusy>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	ff 20       	and	r15, r15
     554:	11 f0       	breq	.+4      	; 0x55a <DataflashManager_WriteBlocks+0xe2>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	86 e8       	ldi	r24, 0x86	; 134
     558:	01 c0       	rjmp	.+2      	; 0x55c <DataflashManager_WriteBlocks+0xe4>
     55a:	83 e8       	ldi	r24, 0x83	; 131
     55c:	8e bd       	out	0x2e, r24	; 46
     55e:	0d b4       	in	r0, 0x2d	; 45
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	07 fe       	sbrs	r0, 7
     562:	fd cf       	rjmp	.-6      	; 0x55e <DataflashManager_WriteBlocks+0xe6>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	ce 01       	movw	r24, r28
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	5b df       	rcall	.-330    	; 0x422 <Dataflash_SendAddressBytes>
     56c:	21 96       	adiw	r28, 0x01	; 1
     56e:	8e b1       	in	r24, 0x0e	; 14
     570:	80 95       	com	r24
     572:	83 70       	andi	r24, 0x03	; 3
     574:	82 30       	cpi	r24, 0x02	; 2
     576:	09 f4       	brne	.+2      	; 0x57a <DataflashManager_WriteBlocks+0x102>
     578:	f4 24       	eor	r15, r4
     57a:	ce 01       	movw	r24, r28
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	6b df       	rcall	.-298    	; 0x454 <Dataflash_SelectChipFromPage>
     57e:	f0 e4       	ldi	r31, 0x40	; 64
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	8f 16       	cp	r8, r31
     582:	91 04       	cpc	r9, r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	78 f4       	brcc	.+30     	; 0x5a4 <DataflashManager_WriteBlocks+0x12c>
     586:	3f df       	rcall	.-386    	; 0x406 <Dataflash_WaitWhileBusy>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	ff 20       	and	r15, r15
     58a:	11 f0       	breq	.+4      	; 0x590 <DataflashManager_WriteBlocks+0x118>
     58c:	85 e5       	ldi	r24, 0x55	; 85
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	01 c0       	rjmp	.+2      	; 0x592 <DataflashManager_WriteBlocks+0x11a>
     590:	83 e5       	ldi	r24, 0x53	; 83

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	8e bd       	out	0x2e, r24	; 46
     594:	0d b4       	in	r0, 0x2d	; 45
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <DataflashManager_WriteBlocks+0x11c>
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	ce 01       	movw	r24, r28
     5a0:	40 df       	rcall	.-384    	; 0x422 <Dataflash_SendAddressBytes>
     5a2:	31 df       	rcall	.-414    	; 0x406 <Dataflash_WaitWhileBusy>
     5a4:	ff 20       	and	r15, r15
     5a6:	11 f0       	breq	.+4      	; 0x5ac <DataflashManager_WriteBlocks+0x134>
     5a8:	87 e8       	ldi	r24, 0x87	; 135
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <DataflashManager_WriteBlocks+0x136>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	84 e8       	ldi	r24, 0x84	; 132
     5ae:	8e bd       	out	0x2e, r24	; 46
     5b0:	0d b4       	in	r0, 0x2d	; 45
     5b2:	07 fe       	sbrs	r0, 7
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <DataflashManager_WriteBlocks+0x138>
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	31 df       	rcall	.-414    	; 0x422 <Dataflash_SendAddressBytes>
     5c0:	e1 2c       	mov	r14, r1
     5c2:	80 91 f1 00 	lds	r24, 0x00F1
     5c6:	8e bd       	out	0x2e, r24	; 46
     5c8:	0d b4       	in	r0, 0x2d	; 45
     5ca:	07 fe       	sbrs	r0, 7
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <DataflashManager_WriteBlocks+0x150>
     5ce:	80 91 f1 00 	lds	r24, 0x00F1
     5d2:	8e bd       	out	0x2e, r24	; 46
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <DataflashManager_WriteBlocks+0x15c>
     5da:	80 91 f1 00 	lds	r24, 0x00F1
     5de:	8e bd       	out	0x2e, r24	; 46
     5e0:	0d b4       	in	r0, 0x2d	; 45
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_WriteBlocks+0x168>
     5e6:	80 91 f1 00 	lds	r24, 0x00F1
     5ea:	8e bd       	out	0x2e, r24	; 46
     5ec:	0d b4       	in	r0, 0x2d	; 45
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <DataflashManager_WriteBlocks+0x174>
     5f2:	80 91 f1 00 	lds	r24, 0x00F1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f6:	8e bd       	out	0x2e, r24	; 46
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <DataflashManager_WriteBlocks+0x180>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	80 91 f1 00 	lds	r24, 0x00F1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	8e bd       	out	0x2e, r24	; 46
     604:	0d b4       	in	r0, 0x2d	; 45
     606:	07 fe       	sbrs	r0, 7
     608:	fd cf       	rjmp	.-6      	; 0x604 <DataflashManager_WriteBlocks+0x18c>
     60a:	80 91 f1 00 	lds	r24, 0x00F1
     60e:	8e bd       	out	0x2e, r24	; 46
     610:	0d b4       	in	r0, 0x2d	; 45
     612:	07 fe       	sbrs	r0, 7
     614:	fd cf       	rjmp	.-6      	; 0x610 <DataflashManager_WriteBlocks+0x198>
     616:	80 91 f1 00 	lds	r24, 0x00F1
     61a:	8e bd       	out	0x2e, r24	; 46
     61c:	0d b4       	in	r0, 0x2d	; 45
     61e:	07 fe       	sbrs	r0, 7
     620:	fd cf       	rjmp	.-6      	; 0x61c <DataflashManager_WriteBlocks+0x1a4>
     622:	80 91 f1 00 	lds	r24, 0x00F1
     626:	8e bd       	out	0x2e, r24	; 46
     628:	0d b4       	in	r0, 0x2d	; 45
     62a:	07 fe       	sbrs	r0, 7
     62c:	fd cf       	rjmp	.-6      	; 0x628 <DataflashManager_WriteBlocks+0x1b0>
     62e:	80 91 f1 00 	lds	r24, 0x00F1
     632:	8e bd       	out	0x2e, r24	; 46
     634:	0d b4       	in	r0, 0x2d	; 45
     636:	07 fe       	sbrs	r0, 7
     638:	fd cf       	rjmp	.-6      	; 0x634 <DataflashManager_WriteBlocks+0x1bc>
     63a:	80 91 f1 00 	lds	r24, 0x00F1
     63e:	8e bd       	out	0x2e, r24	; 46
     640:	0d b4       	in	r0, 0x2d	; 45
     642:	07 fe       	sbrs	r0, 7
     644:	fd cf       	rjmp	.-6      	; 0x640 <DataflashManager_WriteBlocks+0x1c8>
     646:	80 91 f1 00 	lds	r24, 0x00F1
     64a:	8e bd       	out	0x2e, r24	; 46
     64c:	0d b4       	in	r0, 0x2d	; 45
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <DataflashManager_WriteBlocks+0x1d4>
     652:	80 91 f1 00 	lds	r24, 0x00F1
     656:	8e bd       	out	0x2e, r24	; 46
     658:	0d b4       	in	r0, 0x2d	; 45
     65a:	07 fe       	sbrs	r0, 7
     65c:	fd cf       	rjmp	.-6      	; 0x658 <DataflashManager_WriteBlocks+0x1e0>
     65e:	80 91 f1 00 	lds	r24, 0x00F1
     662:	8e bd       	out	0x2e, r24	; 46
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <DataflashManager_WriteBlocks+0x1ec>
     66a:	80 91 f1 00 	lds	r24, 0x00F1
     66e:	8e bd       	out	0x2e, r24	; 46
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <DataflashManager_WriteBlocks+0x1f8>
     676:	80 91 f1 00 	lds	r24, 0x00F1
     67a:	8e bd       	out	0x2e, r24	; 46
     67c:	0d b4       	in	r0, 0x2d	; 45
     67e:	07 fe       	sbrs	r0, 7
     680:	fd cf       	rjmp	.-6      	; 0x67c <DataflashManager_WriteBlocks+0x204>
     682:	e3 94       	inc	r14
     684:	f6 01       	movw	r30, r12
     686:	80 ad       	ldd	r24, Z+56	; 0x38
					  ParserData->TotalReportItems++;
     688:	81 11       	cpse	r24, r1
     68a:	24 c0       	rjmp	.+72     	; 0x6d4 <DataflashManager_WriteBlocks+0x25c>
     68c:	5a 94       	dec	r5
     68e:	09 f0       	breq	.+2      	; 0x692 <DataflashManager_WriteBlocks+0x21a>
     690:	4e cf       	rjmp	.-356    	; 0x52e <DataflashManager_WriteBlocks+0xb6>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	01 50       	subi	r16, 0x01	; 1
     694:	11 09       	sbc	r17, r1
     696:	f0 e2       	ldi	r31, 0x20	; 32
     698:	af 1a       	sub	r10, r31
     69a:	b1 08       	sbc	r11, r1
     69c:	3f cf       	rjmp	.-386    	; 0x51c <DataflashManager_WriteBlocks+0xa4>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	b3 de       	rcall	.-666    	; 0x406 <Dataflash_WaitWhileBusy>
     6a0:	ff 20       	and	r15, r15
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <DataflashManager_WriteBlocks+0x230>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	86 e8       	ldi	r24, 0x86	; 134
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <DataflashManager_WriteBlocks+0x232>
     6a8:	83 e8       	ldi	r24, 0x83	; 131
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	8e bd       	out	0x2e, r24	; 46
     6ac:	0d b4       	in	r0, 0x2d	; 45
     6ae:	07 fe       	sbrs	r0, 7
     6b0:	fd cf       	rjmp	.-6      	; 0x6ac <DataflashManager_WriteBlocks+0x234>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	ce 01       	movw	r24, r28
     6b8:	b4 de       	rcall	.-664    	; 0x422 <Dataflash_SendAddressBytes>
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	a5 de       	rcall	.-694    	; 0x406 <Dataflash_WaitWhileBusy>
     6bc:	80 91 e8 00 	lds	r24, 0x00E8

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6c0:	85 fd       	sbrc	r24, 5
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DataflashManager_WriteBlocks+0x256>
     6c4:	80 91 e8 00 	lds	r24, 0x00E8
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c8:	8b 77       	andi	r24, 0x7B	; 123
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	80 93 e8 00 	sts	0x00E8, r24

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	8e b1       	in	r24, 0x0e	; 14
     6d0:	83 60       	ori	r24, 0x03	; 3
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	8e b9       	out	0x0e, r24	; 14
     6d4:	df 91       	pop	r29
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	cf 91       	pop	r28

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	bf 90       	pop	r11
     6e6:	af 90       	pop	r10
     6e8:	9f 90       	pop	r9
     6ea:	8f 90       	pop	r8
     6ec:	7f 90       	pop	r7
     6ee:	6f 90       	pop	r6
     6f0:	5f 90       	pop	r5
     6f2:	4f 90       	pop	r4
     6f4:	08 95       	ret

000006f6 <DataflashManager_ReadBlocks>:
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     70c:	df 93       	push	r29
     70e:	6c 01       	movw	r12, r24
     710:	79 01       	movw	r14, r18
     712:	4a 01       	movw	r8, r20
     714:	5b 01       	movw	r10, r22
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     716:	29 e0       	ldi	r18, 0x09	; 9
     718:	88 0c       	add	r8, r8
     71a:	99 1c       	adc	r9, r9
     71c:	aa 1c       	adc	r10, r10
     71e:	bb 1c       	adc	r11, r11
     720:	2a 95       	dec	r18
     722:	d1 f7       	brne	.-12     	; 0x718 <DataflashManager_ReadBlocks+0x22>
     724:	3a e0       	ldi	r19, 0x0A	; 10
     726:	b6 94       	lsr	r11
     728:	a7 94       	ror	r10
     72a:	97 94       	ror	r9
     72c:	87 94       	ror	r8
     72e:	3a 95       	dec	r19
     730:	d1 f7       	brne	.-12     	; 0x726 <DataflashManager_ReadBlocks+0x30>
     732:	e4 01       	movw	r28, r8
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     734:	8a 01       	movw	r16, r20
     736:	10 2f       	mov	r17, r16
     738:	00 27       	eor	r16, r16
     73a:	11 0f       	add	r17, r17
     73c:	00 27       	eor	r16, r16
     73e:	12 70       	andi	r17, 0x02	; 2
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     740:	c4 01       	movw	r24, r8
     742:	88 de       	rcall	.-752    	; 0x454 <Dataflash_SelectChipFromPage>
     744:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     746:	8e bd       	out	0x2e, r24	; 46
     748:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     74a:	07 fe       	sbrs	r0, 7
     74c:	fd cf       	rjmp	.-6      	; 0x748 <DataflashManager_ReadBlocks+0x52>
     74e:	b8 01       	movw	r22, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     750:	c4 01       	movw	r24, r8
     752:	67 de       	rcall	.-818    	; 0x422 <Dataflash_SendAddressBytes>
     754:	1e bc       	out	0x2e, r1	; 46
     756:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     758:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     75a:	fd cf       	rjmp	.-6      	; 0x756 <DataflashManager_ReadBlocks+0x60>
     75c:	1e bc       	out	0x2e, r1	; 46
     75e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     760:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     762:	fd cf       	rjmp	.-6      	; 0x75e <DataflashManager_ReadBlocks+0x68>
     764:	1e bc       	out	0x2e, r1	; 46
     766:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     768:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_ReadBlocks+0x70>
     76c:	1e bc       	out	0x2e, r1	; 46
     76e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     770:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     772:	fd cf       	rjmp	.-6      	; 0x76e <DataflashManager_ReadBlocks+0x78>
     774:	57 d5       	rcall	.+2734   	; 0x1224 <Endpoint_WaitUntilReady>
     776:	81 11       	cpse	r24, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     778:	c0 c0       	rjmp	.+384    	; 0x8fa <DataflashManager_ReadBlocks+0x204>
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	16 95       	lsr	r17
     77e:	07 95       	ror	r16
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     780:	8a 95       	dec	r24
     782:	e1 f7       	brne	.-8      	; 0x77c <DataflashManager_ReadBlocks+0x86>
     784:	92 ed       	ldi	r25, 0xD2	; 210
     786:	b9 2e       	mov	r11, r25
     788:	e1 14       	cp	r14, r1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     78a:	f1 04       	cpc	r15, r1
     78c:	09 f4       	brne	.+2      	; 0x790 <DataflashManager_ReadBlocks+0x9a>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     78e:	a9 c0       	rjmp	.+338    	; 0x8e2 <DataflashManager_ReadBlocks+0x1ec>
     790:	10 e2       	ldi	r17, 0x20	; 32
     792:	80 91 e8 00 	lds	r24, 0x00E8
     796:	85 ff       	sbrs	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <DataflashManager_ReadBlocks+0xb2>
     79a:	00 34       	cpi	r16, 0x40	; 64

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     79c:	31 f5       	brne	.+76     	; 0x7ea <DataflashManager_ReadBlocks+0xf4>
     79e:	21 96       	adiw	r28, 0x01	; 1
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7a0:	ce 01       	movw	r24, r28
     7a2:	58 de       	rcall	.-848    	; 0x454 <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     7a4:	be bc       	out	0x2e, r11	; 46

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <DataflashManager_ReadBlocks+0xc4>
     7a8:	80 91 e8 00 	lds	r24, 0x00E8
     7ac:	8e 77       	andi	r24, 0x7E	; 126
     7ae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b2:	38 d5       	rcall	.+2672   	; 0x1224 <Endpoint_WaitUntilReady>
     7b4:	88 23       	and	r24, r24
     7b6:	89 f3       	breq	.-30     	; 0x79a <DataflashManager_ReadBlocks+0xa4>
     7b8:	a0 c0       	rjmp	.+320    	; 0x8fa <DataflashManager_ReadBlocks+0x204>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     7ba:	0d b4       	in	r0, 0x2d	; 45
     7bc:	07 fe       	sbrs	r0, 7
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <DataflashManager_ReadBlocks+0xc4>
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     7c4:	ce 01       	movw	r24, r28
     7c6:	2d de       	rcall	.-934    	; 0x422 <Dataflash_SendAddressBytes>
     7c8:	1e bc       	out	0x2e, r1	; 46
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     7ca:	0d b4       	in	r0, 0x2d	; 45
     7cc:	07 fe       	sbrs	r0, 7
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <DataflashManager_ReadBlocks+0xd4>
     7d0:	1e bc       	out	0x2e, r1	; 46
     7d2:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d4:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <DataflashManager_ReadBlocks+0xdc>
     7d8:	1e bc       	out	0x2e, r1	; 46
     7da:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7dc:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     7de:	fd cf       	rjmp	.-6      	; 0x7da <DataflashManager_ReadBlocks+0xe4>
     7e0:	1e bc       	out	0x2e, r1	; 46
     7e2:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e4:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_ReadBlocks+0xec>
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ec:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7ee:	07 fe       	sbrs	r0, 7
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <DataflashManager_ReadBlocks+0xf6>
     7f2:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     7f4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7f8:	1e bc       	out	0x2e, r1	; 46
     7fa:	0d b4       	in	r0, 0x2d	; 45
     7fc:	07 fe       	sbrs	r0, 7
				return SPDR;
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <DataflashManager_ReadBlocks+0x104>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     800:	8e b5       	in	r24, 0x2e	; 46
     802:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     806:	1e bc       	out	0x2e, r1	; 46
     808:	0d b4       	in	r0, 0x2d	; 45
     80a:	07 fe       	sbrs	r0, 7
				return SPDR;
     80c:	fd cf       	rjmp	.-6      	; 0x808 <DataflashManager_ReadBlocks+0x112>
     80e:	8e b5       	in	r24, 0x2e	; 46
     810:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     814:	1e bc       	out	0x2e, r1	; 46
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
				return SPDR;
     81a:	fd cf       	rjmp	.-6      	; 0x816 <DataflashManager_ReadBlocks+0x120>
     81c:	8e b5       	in	r24, 0x2e	; 46
     81e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     822:	1e bc       	out	0x2e, r1	; 46
     824:	0d b4       	in	r0, 0x2d	; 45
     826:	07 fe       	sbrs	r0, 7
				return SPDR;
     828:	fd cf       	rjmp	.-6      	; 0x824 <DataflashManager_ReadBlocks+0x12e>
     82a:	8e b5       	in	r24, 0x2e	; 46
     82c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     830:	1e bc       	out	0x2e, r1	; 46
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
				return SPDR;
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_ReadBlocks+0x13c>
     838:	8e b5       	in	r24, 0x2e	; 46
     83a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     83e:	1e bc       	out	0x2e, r1	; 46
     840:	0d b4       	in	r0, 0x2d	; 45
     842:	07 fe       	sbrs	r0, 7
				return SPDR;
     844:	fd cf       	rjmp	.-6      	; 0x840 <DataflashManager_ReadBlocks+0x14a>
     846:	8e b5       	in	r24, 0x2e	; 46
     848:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     84c:	1e bc       	out	0x2e, r1	; 46
     84e:	0d b4       	in	r0, 0x2d	; 45
     850:	07 fe       	sbrs	r0, 7
				return SPDR;
     852:	fd cf       	rjmp	.-6      	; 0x84e <DataflashManager_ReadBlocks+0x158>
     854:	8e b5       	in	r24, 0x2e	; 46
     856:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     85a:	1e bc       	out	0x2e, r1	; 46
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
				return SPDR;
     860:	fd cf       	rjmp	.-6      	; 0x85c <DataflashManager_ReadBlocks+0x166>
     862:	8e b5       	in	r24, 0x2e	; 46
     864:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     868:	1e bc       	out	0x2e, r1	; 46
     86a:	0d b4       	in	r0, 0x2d	; 45
     86c:	07 fe       	sbrs	r0, 7
				return SPDR;
     86e:	fd cf       	rjmp	.-6      	; 0x86a <DataflashManager_ReadBlocks+0x174>
     870:	8e b5       	in	r24, 0x2e	; 46
     872:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     876:	1e bc       	out	0x2e, r1	; 46
     878:	0d b4       	in	r0, 0x2d	; 45
     87a:	07 fe       	sbrs	r0, 7
				return SPDR;
     87c:	fd cf       	rjmp	.-6      	; 0x878 <DataflashManager_ReadBlocks+0x182>
     87e:	8e b5       	in	r24, 0x2e	; 46
     880:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     884:	1e bc       	out	0x2e, r1	; 46
     886:	0d b4       	in	r0, 0x2d	; 45
     888:	07 fe       	sbrs	r0, 7
				return SPDR;
     88a:	fd cf       	rjmp	.-6      	; 0x886 <DataflashManager_ReadBlocks+0x190>
     88c:	8e b5       	in	r24, 0x2e	; 46
     88e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     892:	1e bc       	out	0x2e, r1	; 46
     894:	0d b4       	in	r0, 0x2d	; 45
     896:	07 fe       	sbrs	r0, 7
				return SPDR;
     898:	fd cf       	rjmp	.-6      	; 0x894 <DataflashManager_ReadBlocks+0x19e>
     89a:	8e b5       	in	r24, 0x2e	; 46
     89c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8a0:	1e bc       	out	0x2e, r1	; 46
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
				return SPDR;
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_ReadBlocks+0x1ac>
     8a8:	8e b5       	in	r24, 0x2e	; 46
     8aa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8ae:	1e bc       	out	0x2e, r1	; 46
     8b0:	0d b4       	in	r0, 0x2d	; 45
     8b2:	07 fe       	sbrs	r0, 7
				return SPDR;
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <DataflashManager_ReadBlocks+0x1ba>
     8b6:	8e b5       	in	r24, 0x2e	; 46
     8b8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8bc:	1e bc       	out	0x2e, r1	; 46
     8be:	0d b4       	in	r0, 0x2d	; 45
     8c0:	07 fe       	sbrs	r0, 7
				return SPDR;
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <DataflashManager_ReadBlocks+0x1c8>
     8c4:	8e b5       	in	r24, 0x2e	; 46
     8c6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8ca:	0f 5f       	subi	r16, 0xFF	; 255
     8cc:	f6 01       	movw	r30, r12
     8ce:	80 ad       	ldd	r24, Z+56	; 0x38
				return SPDR;
     8d0:	81 11       	cpse	r24, r1
     8d2:	13 c0       	rjmp	.+38     	; 0x8fa <DataflashManager_ReadBlocks+0x204>
     8d4:	11 50       	subi	r17, 0x01	; 1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     8d6:	09 f0       	breq	.+2      	; 0x8da <DataflashManager_ReadBlocks+0x1e4>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     8d8:	5c cf       	rjmp	.-328    	; 0x792 <DataflashManager_ReadBlocks+0x9c>
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	ef 1a       	sub	r14, r31
     8de:	f1 08       	sbc	r15, r1
     8e0:	53 cf       	rjmp	.-346    	; 0x788 <DataflashManager_ReadBlocks+0x92>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     8e2:	80 91 e8 00 	lds	r24, 0x00E8
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     8e6:	85 fd       	sbrc	r24, 5
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <DataflashManager_ReadBlocks+0x1fe>
     8ea:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8ee:	8e 77       	andi	r24, 0x7E	; 126
     8f0:	80 93 e8 00 	sts	0x00E8, r24
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     8f4:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8f6:	83 60       	ori	r24, 0x03	; 3
     8f8:	8e b9       	out	0x0e, r24	; 14
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	9f 90       	pop	r9
     910:	8f 90       	pop	r8
     912:	08 95       	ret

00000914 <DataflashManager_ResetDataflashProtections>:
     914:	8e b1       	in	r24, 0x0e	; 14
     916:	83 60       	ori	r24, 0x03	; 3
     918:	8e 7f       	andi	r24, 0xFE	; 254
     91a:	8e b9       	out	0x0e, r24	; 14
     91c:	87 ed       	ldi	r24, 0xD7	; 215
     91e:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     920:	0d b4       	in	r0, 0x2d	; 45
     922:	07 fe       	sbrs	r0, 7
     924:	fd cf       	rjmp	.-6      	; 0x920 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     926:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     928:	0d b4       	in	r0, 0x2d	; 45
     92a:	07 fe       	sbrs	r0, 7
     92c:	fd cf       	rjmp	.-6      	; 0x928 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     92e:	0e b4       	in	r0, 0x2e	; 46
     930:	01 fc       	sbrc	r0, 1
     932:	07 c0       	rjmp	.+14     	; 0x942 <DataflashManager_ResetDataflashProtections+0x2e>
     934:	8e b1       	in	r24, 0x0e	; 14
     936:	83 60       	ori	r24, 0x03	; 3
     938:	8d 7f       	andi	r24, 0xFD	; 253
     93a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93c:	87 ed       	ldi	r24, 0xD7	; 215
     93e:	8e bd       	out	0x2e, r24	; 46
     940:	16 c0       	rjmp	.+44     	; 0x96e <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     942:	57 dd       	rcall	.-1362   	; 0x3f2 <Dataflash_ToggleSelectedChipCS>
     944:	8d e3       	ldi	r24, 0x3D	; 61
     946:	8e bd       	out	0x2e, r24	; 46
     948:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     94a:	07 fe       	sbrs	r0, 7
     94c:	fd cf       	rjmp	.-6      	; 0x948 <DataflashManager_ResetDataflashProtections+0x34>
     94e:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     950:	8e bd       	out	0x2e, r24	; 46
     952:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_ResetDataflashProtections+0x3e>
     958:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95a:	8e bd       	out	0x2e, r24	; 46
     95c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     95e:	07 fe       	sbrs	r0, 7
     960:	fd cf       	rjmp	.-6      	; 0x95c <DataflashManager_ResetDataflashProtections+0x48>
     962:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     964:	8e bd       	out	0x2e, r24	; 46
     966:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     968:	07 fe       	sbrs	r0, 7
     96a:	fd cf       	rjmp	.-6      	; 0x966 <DataflashManager_ResetDataflashProtections+0x52>
     96c:	e3 cf       	rjmp	.-58     	; 0x934 <DataflashManager_ResetDataflashProtections+0x20>
     96e:	0d b4       	in	r0, 0x2d	; 45
     970:	07 fe       	sbrs	r0, 7
     972:	fd cf       	rjmp	.-6      	; 0x96e <DataflashManager_ResetDataflashProtections+0x5a>
     974:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     976:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_ResetDataflashProtections+0x62>
     97c:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     97e:	01 fc       	sbrc	r0, 1
     980:	04 c0       	rjmp	.+8      	; 0x98a <DataflashManager_ResetDataflashProtections+0x76>
     982:	8e b1       	in	r24, 0x0e	; 14
     984:	83 60       	ori	r24, 0x03	; 3
     986:	8e b9       	out	0x0e, r24	; 14
     988:	08 95       	ret
     98a:	33 dd       	rcall	.-1434   	; 0x3f2 <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     98c:	8d e3       	ldi	r24, 0x3D	; 61
     98e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     990:	0d b4       	in	r0, 0x2d	; 45
     992:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     994:	fd cf       	rjmp	.-6      	; 0x990 <DataflashManager_ResetDataflashProtections+0x7c>
     996:	8a e2       	ldi	r24, 0x2A	; 42
     998:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     99a:	0d b4       	in	r0, 0x2d	; 45
     99c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     99e:	fd cf       	rjmp	.-6      	; 0x99a <DataflashManager_ResetDataflashProtections+0x86>
     9a0:	8f e7       	ldi	r24, 0x7F	; 127
     9a2:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9a4:	0d b4       	in	r0, 0x2d	; 45
     9a6:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     9a8:	fd cf       	rjmp	.-6      	; 0x9a4 <DataflashManager_ResetDataflashProtections+0x90>
     9aa:	8a e9       	ldi	r24, 0x9A	; 154
     9ac:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ae:	0d b4       	in	r0, 0x2d	; 45
     9b0:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     9b2:	fd cf       	rjmp	.-6      	; 0x9ae <DataflashManager_ResetDataflashProtections+0x9a>
     9b4:	e6 cf       	rjmp	.-52     	; 0x982 <DataflashManager_ResetDataflashProtections+0x6e>

000009b6 <DataflashManager_CheckDataflashOperation>:
     9b6:	8e b1       	in	r24, 0x0e	; 14
     9b8:	83 60       	ori	r24, 0x03	; 3
     9ba:	8e 7f       	andi	r24, 0xFE	; 254
     9bc:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9be:	8f e9       	ldi	r24, 0x9F	; 159
     9c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9c2:	0d b4       	in	r0, 0x2d	; 45
     9c4:	07 fe       	sbrs	r0, 7
     9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9c8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9ca:	0d b4       	in	r0, 0x2d	; 45
     9cc:	07 fe       	sbrs	r0, 7
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     9d0:	9e b5       	in	r25, 0x2e	; 46
     9d2:	8e b1       	in	r24, 0x0e	; 14
     9d4:	83 60       	ori	r24, 0x03	; 3
     9d6:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     9d8:	9f 31       	cpi	r25, 0x1F	; 31
     9da:	a1 f4       	brne	.+40     	; 0xa04 <DataflashManager_CheckDataflashOperation+0x4e>
     9dc:	8e b1       	in	r24, 0x0e	; 14
     9de:	83 60       	ori	r24, 0x03	; 3
     9e0:	8d 7f       	andi	r24, 0xFD	; 253
     9e2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9e4:	8f e9       	ldi	r24, 0x9F	; 159
     9e6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9e8:	0d b4       	in	r0, 0x2d	; 45
     9ea:	07 fe       	sbrs	r0, 7
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9f0:	0d b4       	in	r0, 0x2d	; 45
     9f2:	07 fe       	sbrs	r0, 7
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     9f6:	9e b5       	in	r25, 0x2e	; 46
     9f8:	8e b1       	in	r24, 0x0e	; 14
     9fa:	83 60       	ori	r24, 0x03	; 3
     9fc:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	9f 31       	cpi	r25, 0x1F	; 31
     a02:	09 f0       	breq	.+2      	; 0xa06 <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     a04:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     a06:	08 95       	ret

00000a08 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
     a12:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a14:	48 a1       	ldd	r20, Y+32	; 0x20
     a16:	5f 8d       	ldd	r21, Y+31	; 0x1f
     a18:	6e 8d       	ldd	r22, Y+30	; 0x1e
     a1a:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a1c:	0b a1       	ldd	r16, Y+35	; 0x23
     a1e:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a20:	41 15       	cp	r20, r1
     a22:	90 e8       	ldi	r25, 0x80	; 128
     a24:	59 07       	cpc	r21, r25
     a26:	61 05       	cpc	r22, r1
     a28:	71 05       	cpc	r23, r1
     a2a:	68 f0       	brcs	.+26     	; 0xa46 <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a2c:	80 91 4b 01 	lds	r24, 0x014B
     a30:	80 7f       	andi	r24, 0xF0	; 240
     a32:	85 60       	ori	r24, 0x05	; 5
     a34:	80 93 4b 01 	sts	0x014B, r24
     a38:	81 e2       	ldi	r24, 0x21	; 33
     a3a:	80 93 55 01 	sts	0x0155, r24
     a3e:	10 92 56 01 	sts	0x0156, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	1e c0       	rjmp	.+60     	; 0xa82 <SCSI_Command_ReadWrite_10+0x7a>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a46:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a48:	88 23       	and	r24, r24
     a4a:	19 f0       	breq	.+6      	; 0xa52 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a4c:	ce 01       	movw	r24, r28
     a4e:	53 de       	rcall	.-858    	; 0x6f6 <DataflashManager_ReadBlocks>
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <SCSI_Command_ReadWrite_10+0x4e>
     a52:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a54:	11 dd       	rcall	.-1502   	; 0x478 <DataflashManager_WriteBlocks>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a5a:	89 e0       	ldi	r24, 0x09	; 9
     a5c:	00 0f       	add	r16, r16
     a5e:	11 1f       	adc	r17, r17
     a60:	22 1f       	adc	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	8a 95       	dec	r24
     a66:	d1 f7       	brne	.-12     	; 0xa5c <SCSI_Command_ReadWrite_10+0x54>
     a68:	4c 89       	ldd	r20, Y+20	; 0x14
     a6a:	5d 89       	ldd	r21, Y+21	; 0x15
     a6c:	6e 89       	ldd	r22, Y+22	; 0x16
     a6e:	7f 89       	ldd	r23, Y+23	; 0x17
     a70:	40 1b       	sub	r20, r16
     a72:	51 0b       	sbc	r21, r17
     a74:	62 0b       	sbc	r22, r18
     a76:	73 0b       	sbc	r23, r19
     a78:	4c 8b       	std	Y+20, r20	; 0x14
     a7a:	5d 8b       	std	Y+21, r21	; 0x15
     a7c:	6e 8b       	std	Y+22, r22	; 0x16
     a7e:	7f 8b       	std	Y+23, r23	; 0x17
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	df 91       	pop	r29

	return true;
     a84:	cf 91       	pop	r28
}
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <SCSI_DecodeSCSICommand>:
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	28 97       	sbiw	r28, 0x08	; 8
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     aae:	fc 01       	movw	r30, r24
     ab0:	83 8d       	ldd	r24, Z+27	; 0x1b
     ab2:	8d 31       	cpi	r24, 0x1D	; 29
     ab4:	09 f4       	brne	.+2      	; 0xab8 <SCSI_DecodeSCSICommand+0x2c>
     ab6:	a7 c0       	rjmp	.+334    	; 0xc06 <SCSI_DecodeSCSICommand+0x17a>
     ab8:	90 f4       	brcc	.+36     	; 0xade <SCSI_DecodeSCSICommand+0x52>
     aba:	82 31       	cpi	r24, 0x12	; 18
     abc:	09 f4       	brne	.+2      	; 0xac0 <SCSI_DecodeSCSICommand+0x34>
     abe:	4c c0       	rjmp	.+152    	; 0xb58 <SCSI_DecodeSCSICommand+0xcc>
     ac0:	38 f4       	brcc	.+14     	; 0xad0 <SCSI_DecodeSCSICommand+0x44>
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <SCSI_DecodeSCSICommand+0x3c>
     ac6:	dc c0       	rjmp	.+440    	; 0xc80 <SCSI_DecodeSCSICommand+0x1f4>
     ac8:	83 30       	cpi	r24, 0x03	; 3
     aca:	09 f4       	brne	.+2      	; 0xace <SCSI_DecodeSCSICommand+0x42>
     acc:	72 c0       	rjmp	.+228    	; 0xbb2 <SCSI_DecodeSCSICommand+0x126>
     ace:	de c0       	rjmp	.+444    	; 0xc8c <SCSI_DecodeSCSICommand+0x200>
     ad0:	8a 31       	cpi	r24, 0x1A	; 26
     ad2:	09 f4       	brne	.+2      	; 0xad6 <SCSI_DecodeSCSICommand+0x4a>
     ad4:	ba c0       	rjmp	.+372    	; 0xc4a <SCSI_DecodeSCSICommand+0x1be>
     ad6:	8b 31       	cpi	r24, 0x1B	; 27
     ad8:	09 f4       	brne	.+2      	; 0xadc <SCSI_DecodeSCSICommand+0x50>
     ada:	d2 c0       	rjmp	.+420    	; 0xc80 <SCSI_DecodeSCSICommand+0x1f4>
     adc:	d7 c0       	rjmp	.+430    	; 0xc8c <SCSI_DecodeSCSICommand+0x200>
     ade:	88 32       	cpi	r24, 0x28	; 40
     ae0:	09 f4       	brne	.+2      	; 0xae4 <SCSI_DecodeSCSICommand+0x58>
     ae2:	ad c0       	rjmp	.+346    	; 0xc3e <SCSI_DecodeSCSICommand+0x1b2>
     ae4:	90 f5       	brcc	.+100    	; 0xb4a <SCSI_DecodeSCSICommand+0xbe>
     ae6:	8e 31       	cpi	r24, 0x1E	; 30
     ae8:	09 f4       	brne	.+2      	; 0xaec <SCSI_DecodeSCSICommand+0x60>
     aea:	ca c0       	rjmp	.+404    	; 0xc80 <SCSI_DecodeSCSICommand+0x1f4>
     aec:	85 32       	cpi	r24, 0x25	; 37
     aee:	09 f0       	breq	.+2      	; 0xaf2 <SCSI_DecodeSCSICommand+0x66>
     af0:	cd c0       	rjmp	.+410    	; 0xc8c <SCSI_DecodeSCSICommand+0x200>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9f e7       	ldi	r25, 0x7F	; 127
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	8d 83       	std	Y+5, r24	; 0x05
     afc:	9e 83       	std	Y+6, r25	; 0x06
     afe:	af 83       	std	Y+7, r26	; 0x07
     b00:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	9a 83       	std	Y+2, r25	; 0x02
     b0e:	ab 83       	std	Y+3, r26	; 0x03
     b10:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	64 e0       	ldi	r22, 0x04	; 4
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	ce 01       	movw	r24, r28
     b1c:	05 96       	adiw	r24, 0x05	; 5
     b1e:	5f d1       	rcall	.+702    	; 0xdde <Endpoint_Write_Stream_BE>
     b20:	40 e0       	ldi	r20, 0x00	; 0
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	64 e0       	ldi	r22, 0x04	; 4
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	58 d1       	rcall	.+688    	; 0xdde <Endpoint_Write_Stream_BE>
     b2e:	80 91 e8 00 	lds	r24, 0x00E8
     b32:	8e 77       	andi	r24, 0x7E	; 126
     b34:	80 93 e8 00 	sts	0x00E8, r24
     b38:	f8 01       	movw	r30, r16
     b3a:	84 89       	ldd	r24, Z+20	; 0x14
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     b3c:	95 89       	ldd	r25, Z+21	; 0x15
     b3e:	a6 89       	ldd	r26, Z+22	; 0x16
     b40:	b7 89       	ldd	r27, Z+23	; 0x17
     b42:	08 97       	sbiw	r24, 0x08	; 8
     b44:	a1 09       	sbc	r26, r1
     b46:	b1 09       	sbc	r27, r1
     b48:	59 c0       	rjmp	.+178    	; 0xbfc <SCSI_DecodeSCSICommand+0x170>
     b4a:	8a 32       	cpi	r24, 0x2A	; 42
     b4c:	09 f4       	brne	.+2      	; 0xb50 <SCSI_DecodeSCSICommand+0xc4>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     b4e:	75 c0       	rjmp	.+234    	; 0xc3a <SCSI_DecodeSCSICommand+0x1ae>
     b50:	8f 32       	cpi	r24, 0x2F	; 47
     b52:	09 f4       	brne	.+2      	; 0xb56 <SCSI_DecodeSCSICommand+0xca>
     b54:	95 c0       	rjmp	.+298    	; 0xc80 <SCSI_DecodeSCSICommand+0x1f4>
     b56:	9a c0       	rjmp	.+308    	; 0xc8c <SCSI_DecodeSCSICommand+0x200>
     b58:	f8 01       	movw	r30, r16
     b5a:	e7 8c       	ldd	r14, Z+31	; 0x1f
     b5c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     b5e:	84 8d       	ldd	r24, Z+28	; 0x1c
     b60:	83 70       	andi	r24, 0x03	; 3
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b62:	09 f0       	breq	.+2      	; 0xb66 <SCSI_DecodeSCSICommand+0xda>
     b64:	54 c0       	rjmp	.+168    	; 0xc0e <SCSI_DecodeSCSICommand+0x182>
     b66:	85 8d       	ldd	r24, Z+29	; 0x1d
     b68:	81 11       	cpse	r24, r1
     b6a:	51 c0       	rjmp	.+162    	; 0xc0e <SCSI_DecodeSCSICommand+0x182>
     b6c:	67 01       	movw	r12, r14
     b6e:	f5 e2       	ldi	r31, 0x25	; 37
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b70:	ef 16       	cp	r14, r31
     b72:	f1 04       	cpc	r15, r1
     b74:	18 f0       	brcs	.+6      	; 0xb7c <SCSI_DecodeSCSICommand+0xf0>
     b76:	24 e2       	ldi	r18, 0x24	; 36
     b78:	c2 2e       	mov	r12, r18
     b7a:	d1 2c       	mov	r13, r1
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b80:	b6 01       	movw	r22, r12
     b82:	8b e5       	ldi	r24, 0x5B	; 91
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	e4 d0       	rcall	.+456    	; 0xd50 <Endpoint_Write_Stream_LE>
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	c7 01       	movw	r24, r14

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b8e:	8c 19       	sub	r24, r12
     b90:	9d 09       	sbc	r25, r13
     b92:	a1 d0       	rcall	.+322    	; 0xcd6 <Endpoint_Null_Stream>
     b94:	80 91 e8 00 	lds	r24, 0x00E8
     b98:	8e 77       	andi	r24, 0x7E	; 126
     b9a:	80 93 e8 00 	sts	0x00E8, r24
     b9e:	f8 01       	movw	r30, r16
     ba0:	84 89       	ldd	r24, Z+20	; 0x14
     ba2:	95 89       	ldd	r25, Z+21	; 0x15
     ba4:	a6 89       	ldd	r26, Z+22	; 0x16

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     ba6:	b7 89       	ldd	r27, Z+23	; 0x17
     ba8:	8c 19       	sub	r24, r12
     baa:	9d 09       	sbc	r25, r13
     bac:	a1 09       	sbc	r26, r1
     bae:	b1 09       	sbc	r27, r1
     bb0:	25 c0       	rjmp	.+74     	; 0xbfc <SCSI_DecodeSCSICommand+0x170>
     bb2:	f8 01       	movw	r30, r16
     bb4:	c7 8c       	ldd	r12, Z+31	; 0x1f
     bb6:	dc 2c       	mov	r13, r12
     bb8:	f2 e1       	ldi	r31, 0x12	; 18
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     bba:	fc 15       	cp	r31, r12
     bbc:	10 f4       	brcc	.+4      	; 0xbc2 <SCSI_DecodeSCSICommand+0x136>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     bbe:	92 e1       	ldi	r25, 0x12	; 18
     bc0:	d9 2e       	mov	r13, r25
     bc2:	ed 2c       	mov	r14, r13
     bc4:	f1 2c       	mov	r15, r1
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     bca:	b7 01       	movw	r22, r14
     bcc:	89 e4       	ldi	r24, 0x49	; 73
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	bf d0       	rcall	.+382    	; 0xd50 <Endpoint_Write_Stream_LE>
     bd2:	8c 2d       	mov	r24, r12
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	8e 19       	sub	r24, r14
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     bdc:	9f 09       	sbc	r25, r15
     bde:	7b d0       	rcall	.+246    	; 0xcd6 <Endpoint_Null_Stream>
     be0:	80 91 e8 00 	lds	r24, 0x00E8
     be4:	8e 77       	andi	r24, 0x7E	; 126
     be6:	80 93 e8 00 	sts	0x00E8, r24
     bea:	f8 01       	movw	r30, r16
     bec:	84 89       	ldd	r24, Z+20	; 0x14
     bee:	95 89       	ldd	r25, Z+21	; 0x15
     bf0:	a6 89       	ldd	r26, Z+22	; 0x16
     bf2:	b7 89       	ldd	r27, Z+23	; 0x17
     bf4:	8d 19       	sub	r24, r13
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     bf6:	91 09       	sbc	r25, r1
     bf8:	a1 09       	sbc	r26, r1
     bfa:	b1 09       	sbc	r27, r1
     bfc:	84 8b       	std	Z+20, r24	; 0x14
     bfe:	95 8b       	std	Z+21, r25	; 0x15
     c00:	a6 8b       	std	Z+22, r26	; 0x16
     c02:	b7 8b       	std	Z+23, r27	; 0x17
     c04:	4d c0       	rjmp	.+154    	; 0xca0 <SCSI_DecodeSCSICommand+0x214>
     c06:	f8 01       	movw	r30, r16
     c08:	84 8d       	ldd	r24, Z+28	; 0x1c
     c0a:	82 fd       	sbrc	r24, 2
     c0c:	08 c0       	rjmp	.+16     	; 0xc1e <SCSI_DecodeSCSICommand+0x192>
     c0e:	80 91 4b 01 	lds	r24, 0x014B
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     c12:	80 7f       	andi	r24, 0xF0	; 240
     c14:	85 60       	ori	r24, 0x05	; 5
     c16:	80 93 4b 01 	sts	0x014B, r24
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c1a:	84 e2       	ldi	r24, 0x24	; 36
     c1c:	3e c0       	rjmp	.+124    	; 0xc9a <SCSI_DecodeSCSICommand+0x20e>
     c1e:	cb de       	rcall	.-618    	; 0x9b6 <DataflashManager_CheckDataflashOperation>
     c20:	81 11       	cpse	r24, r1
     c22:	2e c0       	rjmp	.+92     	; 0xc80 <SCSI_DecodeSCSICommand+0x1f4>
     c24:	80 91 4b 01 	lds	r24, 0x014B
     c28:	80 7f       	andi	r24, 0xF0	; 240

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     c2a:	84 60       	ori	r24, 0x04	; 4
     c2c:	80 93 4b 01 	sts	0x014B, r24
     c30:	10 92 55 01 	sts	0x0155, r1
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     c34:	10 92 56 01 	sts	0x0156, r1
     c38:	3e c0       	rjmp	.+124    	; 0xcb6 <SCSI_DecodeSCSICommand+0x22a>
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <SCSI_DecodeSCSICommand+0x1b4>
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	c8 01       	movw	r24, r16
     c42:	e2 de       	rcall	.-572    	; 0xa08 <SCSI_Command_ReadWrite_10>
     c44:	88 23       	and	r24, r24
     c46:	b9 f1       	breq	.+110    	; 0xcb6 <SCSI_DecodeSCSICommand+0x22a>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c48:	2b c0       	rjmp	.+86     	; 0xca0 <SCSI_DecodeSCSICommand+0x214>
     c4a:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c4e:	10 92 f1 00 	sts	0x00F1, r1
     c52:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c56:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c5a:	80 91 e8 00 	lds	r24, 0x00E8
     c5e:	8e 77       	andi	r24, 0x7E	; 126
     c60:	80 93 e8 00 	sts	0x00E8, r24
     c64:	f8 01       	movw	r30, r16
     c66:	44 89       	ldd	r20, Z+20	; 0x14
     c68:	55 89       	ldd	r21, Z+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c6a:	66 89       	ldd	r22, Z+22	; 0x16
     c6c:	77 89       	ldd	r23, Z+23	; 0x17
     c6e:	44 50       	subi	r20, 0x04	; 4
     c70:	51 09       	sbc	r21, r1
     c72:	61 09       	sbc	r22, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c74:	71 09       	sbc	r23, r1
     c76:	44 8b       	std	Z+20, r20	; 0x14
     c78:	55 8b       	std	Z+21, r21	; 0x15
     c7a:	66 8b       	std	Z+22, r22	; 0x16
     c7c:	77 8b       	std	Z+23, r23	; 0x17
     c7e:	10 c0       	rjmp	.+32     	; 0xca0 <SCSI_DecodeSCSICommand+0x214>
     c80:	f8 01       	movw	r30, r16
     c82:	14 8a       	std	Z+20, r1	; 0x14
     c84:	15 8a       	std	Z+21, r1	; 0x15
     c86:	16 8a       	std	Z+22, r1	; 0x16
     c88:	17 8a       	std	Z+23, r1	; 0x17
     c8a:	0a c0       	rjmp	.+20     	; 0xca0 <SCSI_DecodeSCSICommand+0x214>
     c8c:	80 91 4b 01 	lds	r24, 0x014B
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c90:	80 7f       	andi	r24, 0xF0	; 240
     c92:	85 60       	ori	r24, 0x05	; 5
     c94:	80 93 4b 01 	sts	0x014B, r24
     c98:	80 e2       	ldi	r24, 0x20	; 32
			break;
     c9a:	80 93 55 01 	sts	0x0155, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c9e:	ca cf       	rjmp	.-108    	; 0xc34 <SCSI_DecodeSCSICommand+0x1a8>
     ca0:	80 91 4b 01 	lds	r24, 0x014B
     ca4:	80 7f       	andi	r24, 0xF0	; 240
     ca6:	80 93 4b 01 	sts	0x014B, r24
     caa:	10 92 55 01 	sts	0x0155, r1
     cae:	10 92 56 01 	sts	0x0156, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <SCSI_DecodeSCSICommand+0x22c>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	28 96       	adiw	r28, 0x08	; 8
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
	}

	return false;
     cc6:	cf 91       	pop	r28
}
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	08 95       	ret

00000cd6 <Endpoint_Null_Stream>:
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	8c 01       	movw	r16, r24
     ce4:	eb 01       	movw	r28, r22
                             uint16_t* const BytesProcessed)
{
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     ce6:	9e d2       	rcall	.+1340   	; 0x1224 <Endpoint_WaitUntilReady>
     ce8:	81 11       	cpse	r24, r1
     cea:	2b c0       	rjmp	.+86     	; 0xd42 <Endpoint_Null_Stream+0x6c>
     cec:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cee:	21 f0       	breq	.+8      	; 0xcf8 <Endpoint_Null_Stream+0x22>
     cf0:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
     cf2:	99 81       	ldd	r25, Y+1	; 0x01
     cf4:	08 1b       	sub	r16, r24
     cf6:	19 0b       	sbc	r17, r25
     cf8:	e1 2c       	mov	r14, r1
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     cfa:	f1 2c       	mov	r15, r1
     cfc:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     cfe:	11 05       	cpc	r17, r1
     d00:	f9 f0       	breq	.+62     	; 0xd40 <Endpoint_Null_Stream+0x6a>
     d02:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d06:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <Endpoint_Null_Stream+0x5a>
     d0a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d0e:	8e 77       	andi	r24, 0x7E	; 126
     d10:	80 93 e8 00 	sts	0x00E8, r24
     d14:	20 97       	sbiw	r28, 0x00	; 0
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     d16:	41 f0       	breq	.+16     	; 0xd28 <Endpoint_Null_Stream+0x52>
     d18:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	8e 0d       	add	r24, r14
     d1e:	9f 1d       	adc	r25, r15
     d20:	99 83       	std	Y+1, r25	; 0x01
     d22:	88 83       	st	Y, r24
     d24:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <Endpoint_Null_Stream+0x6c>
     d28:	7d d2       	rcall	.+1274   	; 0x1224 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d2a:	88 23       	and	r24, r24
     d2c:	39 f3       	breq	.-50     	; 0xcfc <Endpoint_Null_Stream+0x26>
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <Endpoint_Null_Stream+0x6c>
     d30:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d34:	01 50       	subi	r16, 0x01	; 1
     d36:	11 09       	sbc	r17, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
     d3c:	f8 0a       	sbc	r15, r24
     d3e:	de cf       	rjmp	.-68     	; 0xcfc <Endpoint_Null_Stream+0x26>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     d44:	cf 91       	pop	r28
}
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	08 95       	ret

00000d50 <Endpoint_Write_Stream_LE>:
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	7c 01       	movw	r14, r24
     d62:	8b 01       	movw	r16, r22
     d64:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d66:	5e d2       	rcall	.+1212   	; 0x1224 <Endpoint_WaitUntilReady>
     d68:	81 11       	cpse	r24, r1
     d6a:	30 c0       	rjmp	.+96     	; 0xdcc <Endpoint_Write_Stream_LE+0x7c>
     d6c:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d6e:	31 f0       	breq	.+12     	; 0xd7c <Endpoint_Write_Stream_LE+0x2c>
     d70:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     d72:	99 81       	ldd	r25, Y+1	; 0x01
     d74:	08 1b       	sub	r16, r24
     d76:	19 0b       	sbc	r17, r25
     d78:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d7a:	f9 1e       	adc	r15, r25
     d7c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d7e:	d1 2c       	mov	r13, r1
     d80:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d82:	11 05       	cpc	r17, r1
     d84:	11 f1       	breq	.+68     	; 0xdca <Endpoint_Write_Stream_LE+0x7a>
     d86:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d8a:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d8c:	13 c0       	rjmp	.+38     	; 0xdb4 <Endpoint_Write_Stream_LE+0x64>
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d92:	8e 77       	andi	r24, 0x7E	; 126
     d94:	80 93 e8 00 	sts	0x00E8, r24
     d98:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d9a:	41 f0       	breq	.+16     	; 0xdac <Endpoint_Write_Stream_LE+0x5c>
     d9c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     d9e:	99 81       	ldd	r25, Y+1	; 0x01
     da0:	8c 0d       	add	r24, r12
     da2:	9d 1d       	adc	r25, r13
     da4:	99 83       	std	Y+1, r25	; 0x01
     da6:	88 83       	st	Y, r24
     da8:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     daa:	10 c0       	rjmp	.+32     	; 0xdcc <Endpoint_Write_Stream_LE+0x7c>
     dac:	3b d2       	rcall	.+1142   	; 0x1224 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     dae:	88 23       	and	r24, r24
     db0:	39 f3       	breq	.-50     	; 0xd80 <Endpoint_Write_Stream_LE+0x30>
     db2:	0c c0       	rjmp	.+24     	; 0xdcc <Endpoint_Write_Stream_LE+0x7c>
     db4:	f7 01       	movw	r30, r14
     db6:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     db8:	7f 01       	movw	r14, r30
     dba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dbe:	01 50       	subi	r16, 0x01	; 1
     dc0:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dc2:	ff ef       	ldi	r31, 0xFF	; 255
     dc4:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     dc6:	df 0a       	sbc	r13, r31
     dc8:	db cf       	rjmp	.-74     	; 0xd80 <Endpoint_Write_Stream_LE+0x30>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     dce:	cf 91       	pop	r28
}
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <Endpoint_Write_Stream_BE>:
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	6c 01       	movw	r12, r24
     df0:	8b 01       	movw	r16, r22
     df2:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     df4:	17 d2       	rcall	.+1070   	; 0x1224 <Endpoint_WaitUntilReady>
     df6:	81 11       	cpse	r24, r1
     df8:	37 c0       	rjmp	.+110    	; 0xe68 <Endpoint_Write_Stream_BE+0x8a>
     dfa:	e8 01       	movw	r28, r16

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     dfc:	21 97       	sbiw	r28, 0x01	; 1
     dfe:	cc 0d       	add	r28, r12
     e00:	dd 1d       	adc	r29, r13
     e02:	e1 14       	cp	r14, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e04:	f1 04       	cpc	r15, r1
     e06:	39 f0       	breq	.+14     	; 0xe16 <Endpoint_Write_Stream_BE+0x38>
     e08:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	08 1b       	sub	r16, r24
     e10:	19 0b       	sbc	r17, r25
     e12:	c8 1b       	sub	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e14:	d9 0b       	sbc	r29, r25
     e16:	c1 2c       	mov	r12, r1
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e18:	d1 2c       	mov	r13, r1
     e1a:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e1c:	11 05       	cpc	r17, r1
     e1e:	19 f1       	breq	.+70     	; 0xe66 <Endpoint_Write_Stream_BE+0x88>
     e20:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e24:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e26:	15 c0       	rjmp	.+42     	; 0xe52 <Endpoint_Write_Stream_BE+0x74>
     e28:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e2c:	8e 77       	andi	r24, 0x7E	; 126
     e2e:	80 93 e8 00 	sts	0x00E8, r24
     e32:	e1 14       	cp	r14, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e34:	f1 04       	cpc	r15, r1
     e36:	49 f0       	breq	.+18     	; 0xe4a <Endpoint_Write_Stream_BE+0x6c>
     e38:	f7 01       	movw	r30, r14
			{
				*BytesProcessed += BytesInTransfer;
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	8c 0d       	add	r24, r12
     e40:	9d 1d       	adc	r25, r13
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
     e46:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <Endpoint_Write_Stream_BE+0x8a>
     e4a:	ec d1       	rcall	.+984    	; 0x1224 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e4c:	88 23       	and	r24, r24
     e4e:	29 f3       	breq	.-54     	; 0xe1a <Endpoint_Write_Stream_BE+0x3c>
     e50:	0b c0       	rjmp	.+22     	; 0xe68 <Endpoint_Write_Stream_BE+0x8a>
     e52:	88 81       	ld	r24, Y
     e54:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e58:	21 97       	sbiw	r28, 0x01	; 1
     e5a:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     e5c:	11 09       	sbc	r17, r1
			Length--;
     e5e:	ff ef       	ldi	r31, 0xFF	; 255
     e60:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     e62:	df 0a       	sbc	r13, r31
     e64:	da cf       	rjmp	.-76     	; 0xe1a <Endpoint_Write_Stream_BE+0x3c>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     e6a:	cf 91       	pop	r28
}
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	08 95       	ret

00000e7a <Endpoint_Read_Stream_LE>:
     e7a:	cf 92       	push	r12
     e7c:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	7c 01       	movw	r14, r24
     e8c:	8b 01       	movw	r16, r22
     e8e:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e90:	c9 d1       	rcall	.+914    	; 0x1224 <Endpoint_WaitUntilReady>
     e92:	81 11       	cpse	r24, r1
     e94:	30 c0       	rjmp	.+96     	; 0xef6 <Endpoint_Read_Stream_LE+0x7c>
     e96:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e98:	31 f0       	breq	.+12     	; 0xea6 <Endpoint_Read_Stream_LE+0x2c>
     e9a:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     e9c:	99 81       	ldd	r25, Y+1	; 0x01
     e9e:	08 1b       	sub	r16, r24
     ea0:	19 0b       	sbc	r17, r25
     ea2:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ea4:	f9 1e       	adc	r15, r25
     ea6:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ea8:	d1 2c       	mov	r13, r1
     eaa:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     eac:	11 05       	cpc	r17, r1
     eae:	11 f1       	breq	.+68     	; 0xef4 <Endpoint_Read_Stream_LE+0x7a>
     eb0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     eb4:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     eb6:	13 c0       	rjmp	.+38     	; 0xede <Endpoint_Read_Stream_LE+0x64>
     eb8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ebc:	8b 77       	andi	r24, 0x7B	; 123
     ebe:	80 93 e8 00 	sts	0x00E8, r24
     ec2:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     ec4:	41 f0       	breq	.+16     	; 0xed6 <Endpoint_Read_Stream_LE+0x5c>
     ec6:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     ec8:	99 81       	ldd	r25, Y+1	; 0x01
     eca:	8c 0d       	add	r24, r12
     ecc:	9d 1d       	adc	r25, r13
     ece:	99 83       	std	Y+1, r25	; 0x01
     ed0:	88 83       	st	Y, r24
     ed2:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     ed4:	10 c0       	rjmp	.+32     	; 0xef6 <Endpoint_Read_Stream_LE+0x7c>
     ed6:	a6 d1       	rcall	.+844    	; 0x1224 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ed8:	88 23       	and	r24, r24
     eda:	39 f3       	breq	.-50     	; 0xeaa <Endpoint_Read_Stream_LE+0x30>
     edc:	0c c0       	rjmp	.+24     	; 0xef6 <Endpoint_Read_Stream_LE+0x7c>
     ede:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ee2:	f7 01       	movw	r30, r14
     ee4:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ee6:	7f 01       	movw	r14, r30
     ee8:	01 50       	subi	r16, 0x01	; 1
     eea:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     eec:	ff ef       	ldi	r31, 0xFF	; 255
     eee:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     ef0:	df 0a       	sbc	r13, r31
     ef2:	db cf       	rjmp	.-74     	; 0xeaa <Endpoint_Read_Stream_LE+0x30>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     ef8:	cf 91       	pop	r28
}
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	08 95       	ret

00000f08 <Endpoint_Write_Control_Stream_LE>:
     f08:	20 91 93 01 	lds	r18, 0x0193
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f0c:	30 91 94 01 	lds	r19, 0x0194
     f10:	26 17       	cp	r18, r22
     f12:	37 07       	cpc	r19, r23
     f14:	48 f0       	brcs	.+18     	; 0xf28 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f16:	61 15       	cp	r22, r1
     f18:	71 05       	cpc	r23, r1
     f1a:	39 f4       	brne	.+14     	; 0xf2a <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f1c:	20 91 e8 00 	lds	r18, 0x00E8
     f20:	2e 77       	andi	r18, 0x7E	; 126
     f22:	20 93 e8 00 	sts	0x00E8, r18
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <Endpoint_Write_Control_Stream_LE+0x22>
     f28:	b9 01       	movw	r22, r18
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f2e:	61 15       	cp	r22, r1
     f30:	71 05       	cpc	r23, r1
     f32:	99 f1       	breq	.+102    	; 0xf9a <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f34:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f38:	88 23       	and	r24, r24
     f3a:	e9 f1       	breq	.+122    	; 0xfb6 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f3c:	85 30       	cpi	r24, 0x05	; 5
     f3e:	e9 f1       	breq	.+122    	; 0xfba <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f40:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f44:	83 fd       	sbrc	r24, 3
     f46:	3b c0       	rjmp	.+118    	; 0xfbe <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f48:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f4c:	82 ff       	sbrs	r24, 2
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <Endpoint_Write_Control_Stream_LE+0x54>
     f50:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f54:	82 ff       	sbrs	r24, 2
     f56:	24 c0       	rjmp	.+72     	; 0xfa0 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f5c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     f60:	80 ff       	sbrs	r24, 0
     f62:	e5 cf       	rjmp	.-54     	; 0xf2e <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f64:	80 91 f2 00 	lds	r24, 0x00F2
     f68:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f6c:	61 15       	cp	r22, r1
     f6e:	71 05       	cpc	r23, r1
     f70:	51 f0       	breq	.+20     	; 0xf86 <Endpoint_Write_Control_Stream_LE+0x7e>
     f72:	88 30       	cpi	r24, 0x08	; 8
     f74:	91 05       	cpc	r25, r1
     f76:	38 f4       	brcc	.+14     	; 0xf86 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f78:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f7a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     f7e:	61 50       	subi	r22, 0x01	; 1
     f80:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	f3 cf       	rjmp	.-26     	; 0xf6c <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	08 97       	sbiw	r24, 0x08	; 8
     f8a:	09 f0       	breq	.+2      	; 0xf8e <Endpoint_Write_Control_Stream_LE+0x86>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f8e:	80 91 e8 00 	lds	r24, 0x00E8
     f92:	8e 77       	andi	r24, 0x7E	; 126
     f94:	80 93 e8 00 	sts	0x00E8, r24
     f98:	ca cf       	rjmp	.-108    	; 0xf2e <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f9a:	21 11       	cpse	r18, r1
     f9c:	cb cf       	rjmp	.-106    	; 0xf34 <Endpoint_Write_Control_Stream_LE+0x2c>
     f9e:	d8 cf       	rjmp	.-80     	; 0xf50 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fa0:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fa4:	88 23       	and	r24, r24
     fa6:	39 f0       	breq	.+14     	; 0xfb6 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fa8:	85 30       	cpi	r24, 0x05	; 5
     faa:	39 f0       	breq	.+14     	; 0xfba <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fac:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fb0:	83 ff       	sbrs	r24, 3
     fb2:	ce cf       	rjmp	.-100    	; 0xf50 <Endpoint_Write_Control_Stream_LE+0x48>
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     fc0:	08 95       	ret

00000fc2 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     fc2:	61 15       	cp	r22, r1
     fc4:	71 05       	cpc	r23, r1
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fc8:	20 91 e8 00 	lds	r18, 0x00E8
     fcc:	2b 77       	andi	r18, 0x7B	; 123
     fce:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
     fd2:	61 15       	cp	r22, r1
     fd4:	71 05       	cpc	r23, r1
     fd6:	31 f1       	breq	.+76     	; 0x1024 <Endpoint_Read_Control_Stream_LE+0x62>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fd8:	20 91 8c 01 	lds	r18, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fdc:	22 23       	and	r18, r18
     fde:	59 f1       	breq	.+86     	; 0x1036 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fe0:	25 30       	cpi	r18, 0x05	; 5
     fe2:	59 f1       	breq	.+86     	; 0x103a <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fe4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fe8:	23 fd       	sbrc	r18, 3
     fea:	21 c0       	rjmp	.+66     	; 0x102e <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fec:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     ff0:	22 ff       	sbrs	r18, 2
     ff2:	f2 cf       	rjmp	.-28     	; 0xfd8 <Endpoint_Read_Control_Stream_LE+0x16>
     ff4:	fc 01       	movw	r30, r24
     ff6:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ff8:	20 91 f2 00 	lds	r18, 0x00F2
     ffc:	30 91 f3 00 	lds	r19, 0x00F3
		{
			while (Length && Endpoint_BytesInEndpoint())
    1000:	23 2b       	or	r18, r19
    1002:	11 f3       	breq	.-60     	; 0xfc8 <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1004:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1008:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    100a:	cf 01       	movw	r24, r30
				Length--;
    100c:	61 50       	subi	r22, 0x01	; 1
    100e:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1010:	61 15       	cp	r22, r1
    1012:	71 05       	cpc	r23, r1
    1014:	81 f7       	brne	.-32     	; 0xff6 <Endpoint_Read_Control_Stream_LE+0x34>
    1016:	d8 cf       	rjmp	.-80     	; 0xfc8 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1018:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    101c:	88 23       	and	r24, r24
    101e:	59 f0       	breq	.+22     	; 0x1036 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1020:	85 30       	cpi	r24, 0x05	; 5
    1022:	59 f0       	breq	.+22     	; 0x103a <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1024:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1028:	80 ff       	sbrs	r24, 0
    102a:	f6 cf       	rjmp	.-20     	; 0x1018 <Endpoint_Read_Control_Stream_LE+0x56>
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <Endpoint_Read_Control_Stream_LE+0x70>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    103a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    103c:	08 95       	ret

0000103e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    103e:	20 91 93 01 	lds	r18, 0x0193
    1042:	30 91 94 01 	lds	r19, 0x0194
    1046:	26 17       	cp	r18, r22
    1048:	37 07       	cpc	r19, r23
    104a:	48 f0       	brcs	.+18     	; 0x105e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	39 f4       	brne	.+14     	; 0x1060 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1052:	20 91 e8 00 	lds	r18, 0x00E8
    1056:	2e 77       	andi	r18, 0x7E	; 126
    1058:	20 93 e8 00 	sts	0x00E8, r18
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <Endpoint_Write_Control_PStream_LE+0x22>
    105e:	b9 01       	movw	r22, r18
    1060:	fc 01       	movw	r30, r24
    1062:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1064:	61 15       	cp	r22, r1
    1066:	71 05       	cpc	r23, r1
    1068:	b1 f1       	breq	.+108    	; 0x10d6 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    106a:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    106e:	88 23       	and	r24, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <Endpoint_Write_Control_PStream_LE+0x36>
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1074:	85 30       	cpi	r24, 0x05	; 5
    1076:	09 f4       	brne	.+2      	; 0x107a <Endpoint_Write_Control_PStream_LE+0x3c>
    1078:	3e c0       	rjmp	.+124    	; 0x10f6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    107a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    107e:	83 fd       	sbrc	r24, 3
    1080:	3c c0       	rjmp	.+120    	; 0x10fa <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1082:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1086:	82 ff       	sbrs	r24, 2
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <Endpoint_Write_Control_PStream_LE+0x58>
    108a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    108e:	82 ff       	sbrs	r24, 2
    1090:	25 c0       	rjmp	.+74     	; 0x10dc <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1096:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    109a:	80 ff       	sbrs	r24, 0
    109c:	e3 cf       	rjmp	.-58     	; 0x1064 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    109e:	80 91 f2 00 	lds	r24, 0x00F2
    10a2:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    10a6:	61 15       	cp	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	59 f0       	breq	.+22     	; 0x10c2 <Endpoint_Write_Control_PStream_LE+0x84>
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	91 05       	cpc	r25, r1
    10b0:	40 f4       	brcc	.+16     	; 0x10c2 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10b2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10b4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    10b8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    10ba:	61 50       	subi	r22, 0x01	; 1
    10bc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	f2 cf       	rjmp	.-28     	; 0x10a6 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	08 97       	sbiw	r24, 0x08	; 8
    10c6:	09 f0       	breq	.+2      	; 0x10ca <Endpoint_Write_Control_PStream_LE+0x8c>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ca:	80 91 e8 00 	lds	r24, 0x00E8
    10ce:	8e 77       	andi	r24, 0x7E	; 126
    10d0:	80 93 e8 00 	sts	0x00E8, r24
    10d4:	c7 cf       	rjmp	.-114    	; 0x1064 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    10d6:	21 11       	cpse	r18, r1
    10d8:	c8 cf       	rjmp	.-112    	; 0x106a <Endpoint_Write_Control_PStream_LE+0x2c>
    10da:	d7 cf       	rjmp	.-82     	; 0x108a <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10dc:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10e0:	88 23       	and	r24, r24
    10e2:	39 f0       	breq	.+14     	; 0x10f2 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10e4:	85 30       	cpi	r24, 0x05	; 5
    10e6:	39 f0       	breq	.+14     	; 0x10f6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    10ec:	83 ff       	sbrs	r24, 3
    10ee:	cd cf       	rjmp	.-102    	; 0x108a <Endpoint_Write_Control_PStream_LE+0x4c>
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10fc:	08 95       	ret

000010fe <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    10fe:	98 2f       	mov	r25, r24
    1100:	97 30       	cpi	r25, 0x07	; 7
    1102:	58 f5       	brcc	.+86     	; 0x115a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1104:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1108:	98 17       	cp	r25, r24
    110a:	39 f0       	breq	.+14     	; 0x111a <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    110c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1110:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1114:	50 91 f0 00 	lds	r21, 0x00F0
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    111a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    111c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    111e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1120:	21 ff       	sbrs	r18, 1
    1122:	19 c0       	rjmp	.+50     	; 0x1156 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1124:	30 91 eb 00 	lds	r19, 0x00EB
    1128:	3e 7f       	andi	r19, 0xFE	; 254
    112a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    112e:	30 91 ed 00 	lds	r19, 0x00ED
    1132:	3d 7f       	andi	r19, 0xFD	; 253
    1134:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1138:	30 91 eb 00 	lds	r19, 0x00EB
    113c:	31 60       	ori	r19, 0x01	; 1
    113e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1142:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1146:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    114a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    114e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1152:	27 ff       	sbrs	r18, 7
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1156:	9f 5f       	subi	r25, 0xFF	; 255
    1158:	d3 cf       	rjmp	.-90     	; 0x1100 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    115a:	8f 70       	andi	r24, 0x0F	; 15
    115c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1164:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1166:	08 95       	ret

00001168 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	06 2f       	mov	r16, r22
    1172:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	10 17       	cp	r17, r16
    1178:	71 f1       	breq	.+92     	; 0x11d6 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    117a:	98 81       	ld	r25, Y
    117c:	99 23       	and	r25, r25
    117e:	41 f1       	breq	.+80     	; 0x11d0 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	e9 81       	ldd	r30, Y+1	; 0x01
    1184:	fa 81       	ldd	r31, Y+2	; 0x02
    1186:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1188:	89 2f       	mov	r24, r25
    118a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    118c:	87 30       	cpi	r24, 0x07	; 7
    118e:	10 f0       	brcs	.+4      	; 0x1194 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	22 c0       	rjmp	.+68     	; 0x11d8 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	10 f0       	brcs	.+4      	; 0x119c <Endpoint_ConfigureEndpointTable+0x34>
    1198:	56 e0       	ldi	r21, 0x06	; 6
    119a:	01 c0       	rjmp	.+2      	; 0x119e <Endpoint_ConfigureEndpointTable+0x36>
    119c:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    119e:	28 e0       	ldi	r18, 0x08	; 8
    11a0:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    11a2:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    11a4:	2e 17       	cp	r18, r30
    11a6:	3f 07       	cpc	r19, r31
    11a8:	20 f4       	brcc	.+8      	; 0x11b2 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    11aa:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	f9 cf       	rjmp	.-14     	; 0x11a4 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    11b2:	42 95       	swap	r20
    11b4:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    11b6:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    11b8:	69 2f       	mov	r22, r25
    11ba:	66 1f       	adc	r22, r22
    11bc:	66 27       	eor	r22, r22
    11be:	66 1f       	adc	r22, r22
    11c0:	90 e4       	ldi	r25, 0x40	; 64
    11c2:	79 9f       	mul	r23, r25
    11c4:	90 01       	movw	r18, r0
    11c6:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    11c8:	62 2b       	or	r22, r18
    11ca:	99 df       	rcall	.-206    	; 0x10fe <Endpoint_ConfigureEndpoint_Prv>
    11cc:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    11ce:	01 f3       	breq	.-64     	; 0x1190 <Endpoint_ConfigureEndpointTable+0x28>
    11d0:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    11d2:	25 96       	adiw	r28, 0x05	; 5
    11d4:	d0 cf       	rjmp	.-96     	; 0x1176 <Endpoint_ConfigureEndpointTable+0xe>
    11d6:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    11d8:	df 91       	pop	r29
}
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <Endpoint_ClearStatusStage>:
    11e2:	80 91 8d 01 	lds	r24, 0x018D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    11e6:	87 fd       	sbrc	r24, 7
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ea:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    11ee:	80 ff       	sbrs	r24, 0
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <Endpoint_ClearStatusStage+0x2c>
    11f2:	12 c0       	rjmp	.+36     	; 0x1218 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11f4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    11f8:	82 fd       	sbrc	r24, 2
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11fc:	80 91 8c 01 	lds	r24, 0x018C
    1200:	81 11       	cpse	r24, r1
    1202:	f8 cf       	rjmp	.-16     	; 0x11f4 <Endpoint_ClearStatusStage+0x12>
    1204:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1206:	80 91 e8 00 	lds	r24, 0x00E8
    120a:	8b 77       	andi	r24, 0x7B	; 123
    120c:	08 c0       	rjmp	.+16     	; 0x121e <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    120e:	80 91 8c 01 	lds	r24, 0x018C
    1212:	81 11       	cpse	r24, r1
    1214:	ea cf       	rjmp	.-44     	; 0x11ea <Endpoint_ClearStatusStage+0x8>
    1216:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1218:	80 91 e8 00 	lds	r24, 0x00E8
    121c:	8e 77       	andi	r24, 0x7E	; 126
    121e:	80 93 e8 00 	sts	0x00E8, r24
    1222:	08 95       	ret

00001224 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1224:	80 91 e4 00 	lds	r24, 0x00E4
    1228:	90 91 e5 00 	lds	r25, 0x00E5
    122c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    122e:	20 91 ec 00 	lds	r18, 0x00EC
    1232:	20 ff       	sbrs	r18, 0
    1234:	21 c0       	rjmp	.+66     	; 0x1278 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1236:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    123a:	20 fd       	sbrc	r18, 0
    123c:	21 c0       	rjmp	.+66     	; 0x1280 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    123e:	20 91 8c 01 	lds	r18, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1242:	22 23       	and	r18, r18
    1244:	89 f0       	breq	.+34     	; 0x1268 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1246:	25 30       	cpi	r18, 0x05	; 5
    1248:	89 f0       	breq	.+34     	; 0x126c <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    124a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    124e:	25 fd       	sbrc	r18, 5
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <Endpoint_WaitUntilReady+0x4c>
    1252:	20 91 e4 00 	lds	r18, 0x00E4
    1256:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    125a:	28 17       	cp	r18, r24
    125c:	39 07       	cpc	r19, r25
    125e:	39 f3       	breq	.-50     	; 0x122e <Endpoint_WaitUntilReady+0xa>
    1260:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1262:	41 f0       	breq	.+16     	; 0x1274 <Endpoint_WaitUntilReady+0x50>
    1264:	c9 01       	movw	r24, r18
    1266:	e3 cf       	rjmp	.-58     	; 0x122e <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1278:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    127c:	22 ff       	sbrs	r18, 2
    127e:	df cf       	rjmp	.-66     	; 0x123e <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	08 95       	ret

00001284 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    128c:	4e d0       	rcall	.+156    	; 0x132a <USB_INT_DisableAllInterrupts>
    128e:	55 d0       	rcall	.+170    	; 0x133a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1290:	c8 ed       	ldi	r28, 0xD8	; 216
    1292:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1294:	88 81       	ld	r24, Y
    1296:	8f 77       	andi	r24, 0x7F	; 127
    1298:	88 83       	st	Y, r24
    129a:	88 81       	ld	r24, Y
    129c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    129e:	88 83       	st	Y, r24
    12a0:	88 81       	ld	r24, Y
    12a2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    12a4:	88 83       	st	Y, r24
    12a6:	e7 ed       	ldi	r30, 0xD7	; 215
    12a8:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    12aa:	80 81       	ld	r24, Z
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	80 83       	st	Z, r24
    12b0:	19 bc       	out	0x29, r1	; 41
    12b2:	10 92 8c 01 	sts	0x018C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    12b6:	10 92 88 01 	sts	0x0188, r1
	USB_Device_ConfigurationNumber  = 0;
    12ba:	10 92 8a 01 	sts	0x018A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    12be:	10 92 89 01 	sts	0x0189, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    12c2:	00 ee       	ldi	r16, 0xE0	; 224
    12c4:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    12c6:	f8 01       	movw	r30, r16
    12c8:	80 81       	ld	r24, Z
    12ca:	8b 7f       	andi	r24, 0xFB	; 251
    12cc:	80 83       	st	Z, r24
    12ce:	88 81       	ld	r24, Y
    12d0:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    12d2:	88 83       	st	Y, r24
    12d4:	42 e0       	ldi	r20, 0x02	; 2
    12d6:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	11 df       	rcall	.-478    	; 0x10fe <Endpoint_ConfigureEndpoint_Prv>
    12dc:	e1 ee       	ldi	r30, 0xE1	; 225
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12e2:	8e 7f       	andi	r24, 0xFE	; 254
    12e4:	80 83       	st	Z, r24
    12e6:	e2 ee       	ldi	r30, 0xE2	; 226
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	80 83       	st	Z, r24
    12f0:	80 81       	ld	r24, Z
    12f2:	88 60       	ori	r24, 0x08	; 8
    12f4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    12f6:	f8 01       	movw	r30, r16
    12f8:	80 81       	ld	r24, Z
    12fa:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12fc:	80 83       	st	Z, r24
    12fe:	88 81       	ld	r24, Y
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <USB_Init>:
    130e:	e8 ed       	ldi	r30, 0xD8	; 216
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1314:	8f 7e       	andi	r24, 0xEF	; 239
    1316:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1318:	e7 ed       	ldi	r30, 0xD7	; 215
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 8b 01 	sts	0x018B, r24

	USB_ResetInterface();
    1328:	ad cf       	rjmp	.-166    	; 0x1284 <USB_ResetInterface>

0000132a <USB_INT_DisableAllInterrupts>:
    132a:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8c 7f       	andi	r24, 0xFC	; 252
    1332:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1334:	10 92 e2 00 	sts	0x00E2, r1
    1338:	08 95       	ret

0000133a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    133a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    133e:	10 92 e1 00 	sts	0x00E1, r1
    1342:	08 95       	ret

00001344 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	0b b6       	in	r0, 0x3b	; 59
    1350:	0f 92       	push	r0
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    136a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    136e:	82 ff       	sbrs	r24, 2
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1372:	80 91 e2 00 	lds	r24, 0x00E2
    1376:	82 ff       	sbrs	r24, 2
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    137a:	80 91 e1 00 	lds	r24, 0x00E1
    137e:	8b 7f       	andi	r24, 0xFB	; 251
    1380:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1384:	0e 94 6e 01 	call	0x2dc	; 0x2dc <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1388:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    138c:	80 ff       	sbrs	r24, 0
    138e:	1f c0       	rjmp	.+62     	; 0x13ce <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1390:	80 91 d8 00 	lds	r24, 0x00D8
    1394:	80 ff       	sbrs	r24, 0
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1398:	80 91 da 00 	lds	r24, 0x00DA
    139c:	8e 7f       	andi	r24, 0xFE	; 254
    139e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    13a2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    13a6:	80 ff       	sbrs	r24, 0
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13aa:	8c e0       	ldi	r24, 0x0C	; 12
    13ac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13ae:	8e e0       	ldi	r24, 0x0E	; 14
    13b0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    13b2:	09 b4       	in	r0, 0x29	; 41
    13b4:	00 fe       	sbrs	r0, 0
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 8c 01 	sts	0x018C, r24
			EVENT_USB_Device_Connect();
    13be:	0e 94 3c 01 	call	0x278	; 0x278 <EVENT_USB_Device_Connect>
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    13c4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    13c6:	10 92 8c 01 	sts	0x018C, r1
			EVENT_USB_Device_Disconnect();
    13ca:	0e 94 3e 01 	call	0x27c	; 0x27c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    13ce:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    13d2:	80 ff       	sbrs	r24, 0
    13d4:	18 c0       	rjmp	.+48     	; 0x1406 <__vector_10+0xc2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    13d6:	80 91 e2 00 	lds	r24, 0x00E2
    13da:	80 ff       	sbrs	r24, 0
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <__vector_10+0xc2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    13de:	80 91 e2 00 	lds	r24, 0x00E2
    13e2:	8e 7f       	andi	r24, 0xFE	; 254
    13e4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    13e8:	80 91 e2 00 	lds	r24, 0x00E2
    13ec:	80 61       	ori	r24, 0x10	; 16
    13ee:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    13f2:	80 91 d8 00 	lds	r24, 0x00D8
    13f6:	80 62       	ori	r24, 0x20	; 32
    13f8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    13fc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    13fe:	85 e0       	ldi	r24, 0x05	; 5
    1400:	80 93 8c 01 	sts	0x018C, r24
		EVENT_USB_Device_Suspend();
    1404:	04 d2       	rcall	.+1032   	; 0x180e <USB_Event_Stub>
    1406:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    140a:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    140c:	2f c0       	rjmp	.+94     	; 0x146c <__vector_10+0x128>
    140e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1412:	84 ff       	sbrs	r24, 4
    1414:	2b c0       	rjmp	.+86     	; 0x146c <__vector_10+0x128>
    1416:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1418:	89 bd       	out	0x29, r24	; 41
    141a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    141c:	89 bd       	out	0x29, r24	; 41
    141e:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1420:	00 fe       	sbrs	r0, 0
    1422:	fd cf       	rjmp	.-6      	; 0x141e <__vector_10+0xda>
    1424:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	80 93 d8 00 	sts	0x00D8, r24
    142e:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1432:	8f 7e       	andi	r24, 0xEF	; 239
    1434:	80 93 e1 00 	sts	0x00E1, r24
    1438:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    143c:	8f 7e       	andi	r24, 0xEF	; 239
    143e:	80 93 e2 00 	sts	0x00E2, r24
    1442:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	80 93 e2 00 	sts	0x00E2, r24
    144c:	80 91 88 01 	lds	r24, 0x0188
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1450:	88 23       	and	r24, r24
    1452:	11 f0       	breq	.+4      	; 0x1458 <__vector_10+0x114>
    1454:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    1456:	07 c0       	rjmp	.+14     	; 0x1466 <__vector_10+0x122>
    1458:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    145c:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <__vector_10+0x120>
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <__vector_10+0x122>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 8c 01 	sts	0x018C, r24
    146a:	d1 d1       	rcall	.+930    	; 0x180e <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    146c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1470:	83 ff       	sbrs	r24, 3
    1472:	27 c0       	rjmp	.+78     	; 0x14c2 <__vector_10+0x17e>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1474:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1478:	83 ff       	sbrs	r24, 3
    147a:	23 c0       	rjmp	.+70     	; 0x14c2 <__vector_10+0x17e>
    147c:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	80 93 e1 00 	sts	0x00E1, r24
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	80 93 8c 01 	sts	0x018C, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    148c:	10 92 88 01 	sts	0x0188, r1
		USB_Device_ConfigurationNumber = 0;
    1490:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1494:	8e 7f       	andi	r24, 0xFE	; 254
    1496:	80 93 e1 00 	sts	0x00E1, r24
    149a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	80 93 e2 00 	sts	0x00E2, r24
    14a4:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    14a8:	80 61       	ori	r24, 0x10	; 16
    14aa:	80 93 e2 00 	sts	0x00E2, r24
    14ae:	42 e0       	ldi	r20, 0x02	; 2
    14b0:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	24 de       	rcall	.-952    	; 0x10fe <Endpoint_ConfigureEndpoint_Prv>
    14b6:	80 91 f0 00 	lds	r24, 0x00F0
    14ba:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    14bc:	80 93 f0 00 	sts	0x00F0, r24
    14c0:	a6 d1       	rcall	.+844    	; 0x180e <USB_Event_Stub>
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0b be       	out	0x3b, r0	; 59
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_11>:
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    14f0:	11 24       	eor	r1, r1
    14f2:	0b b6       	in	r0, 0x3b	; 59
    14f4:	0f 92       	push	r0
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	cf 93       	push	r28
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1510:	c0 91 e9 00 	lds	r28, 0x00E9
    1514:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1516:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    151a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    151e:	80 91 f0 00 	lds	r24, 0x00F0
    1522:	87 7f       	andi	r24, 0xF7	; 247
    1524:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1528:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    152a:	1d d0       	rcall	.+58     	; 0x1566 <USB_Device_ProcessControlRequest>
    152c:	10 92 e9 00 	sts	0x00E9, r1
    1530:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1534:	88 60       	ori	r24, 0x08	; 8
    1536:	80 93 f0 00 	sts	0x00F0, r24
    153a:	c0 93 e9 00 	sts	0x00E9, r28
    153e:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1540:	ef 91       	pop	r30
    1542:	cf 91       	pop	r28
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0b be       	out	0x3b, r0	; 59
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <USB_Device_ProcessControlRequest>:
    1566:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	aa 97       	sbiw	r28, 0x2a	; 42
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	ed e8       	ldi	r30, 0x8D	; 141
    157e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1580:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1584:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	e5 39       	cpi	r30, 0x95	; 149
    158a:	f2 07       	cpc	r31, r18
    158c:	c9 f7       	brne	.-14     	; 0x1580 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    158e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1592:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1596:	83 ff       	sbrs	r24, 3
    1598:	22 c1       	rjmp	.+580    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    159a:	90 91 8d 01 	lds	r25, 0x018D

		switch (USB_ControlRequest.bRequest)
    159e:	80 91 8e 01 	lds	r24, 0x018E
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <USB_Device_ProcessControlRequest+0x42>
    15a6:	77 c0       	rjmp	.+238    	; 0x1696 <USB_Device_ProcessControlRequest+0x130>
    15a8:	30 f4       	brcc	.+12     	; 0x15b6 <USB_Device_ProcessControlRequest+0x50>
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	81 f1       	breq	.+96     	; 0x160e <USB_Device_ProcessControlRequest+0xa8>
    15ae:	68 f0       	brcs	.+26     	; 0x15ca <USB_Device_ProcessControlRequest+0x64>
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	69 f1       	breq	.+90     	; 0x160e <USB_Device_ProcessControlRequest+0xa8>
    15b4:	14 c1       	rjmp	.+552    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    15b6:	88 30       	cpi	r24, 0x08	; 8
    15b8:	09 f4       	brne	.+2      	; 0x15bc <USB_Device_ProcessControlRequest+0x56>
    15ba:	e2 c0       	rjmp	.+452    	; 0x1780 <USB_Device_ProcessControlRequest+0x21a>
    15bc:	89 30       	cpi	r24, 0x09	; 9
    15be:	09 f4       	brne	.+2      	; 0x15c2 <USB_Device_ProcessControlRequest+0x5c>
    15c0:	f1 c0       	rjmp	.+482    	; 0x17a4 <USB_Device_ProcessControlRequest+0x23e>
    15c2:	86 30       	cpi	r24, 0x06	; 6
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <USB_Device_ProcessControlRequest+0x62>
    15c6:	0b c1       	rjmp	.+534    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    15c8:	88 c0       	rjmp	.+272    	; 0x16da <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15ca:	90 38       	cpi	r25, 0x80	; 128
    15cc:	81 f0       	breq	.+32     	; 0x15ee <USB_Device_ProcessControlRequest+0x88>
    15ce:	92 38       	cpi	r25, 0x82	; 130
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <USB_Device_ProcessControlRequest+0x6e>
    15d2:	05 c1       	rjmp	.+522    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15d4:	80 91 91 01 	lds	r24, 0x0191
    15d8:	8f 70       	andi	r24, 0x0F	; 15
    15da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15de:	80 91 eb 00 	lds	r24, 0x00EB
    15e2:	85 fb       	bst	r24, 5
    15e4:	88 27       	eor	r24, r24
    15e6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15e8:	10 92 e9 00 	sts	0x00E9, r1
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <USB_Device_ProcessControlRequest+0x94>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    15ee:	80 91 89 01 	lds	r24, 0x0189
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    15f2:	90 91 8a 01 	lds	r25, 0x018A
    15f6:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15f8:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15fa:	90 91 e8 00 	lds	r25, 0x00E8
    15fe:	97 7f       	andi	r25, 0xF7	; 247
    1600:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1604:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1608:	10 92 f1 00 	sts	0x00F1, r1
    160c:	c4 c0       	rjmp	.+392    	; 0x1796 <USB_Device_ProcessControlRequest+0x230>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    160e:	29 2f       	mov	r18, r25
    1610:	2d 7f       	andi	r18, 0xFD	; 253
    1612:	09 f0       	breq	.+2      	; 0x1616 <USB_Device_ProcessControlRequest+0xb0>
    1614:	e4 c0       	rjmp	.+456    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1616:	99 23       	and	r25, r25
    1618:	19 f0       	breq	.+6      	; 0x1620 <USB_Device_ProcessControlRequest+0xba>
    161a:	92 30       	cpi	r25, 0x02	; 2
    161c:	61 f0       	breq	.+24     	; 0x1636 <USB_Device_ProcessControlRequest+0xd0>
    161e:	df c0       	rjmp	.+446    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1620:	90 91 8f 01 	lds	r25, 0x018F
    1624:	91 30       	cpi	r25, 0x01	; 1
    1626:	09 f0       	breq	.+2      	; 0x162a <USB_Device_ProcessControlRequest+0xc4>
    1628:	da c0       	rjmp	.+436    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	09 f0       	breq	.+2      	; 0x1630 <USB_Device_ProcessControlRequest+0xca>
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 8a 01 	sts	0x018A, r25
    1634:	2a c0       	rjmp	.+84     	; 0x168a <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1636:	90 91 8f 01 	lds	r25, 0x018F
    163a:	91 11       	cpse	r25, r1
    163c:	26 c0       	rjmp	.+76     	; 0x168a <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    163e:	20 91 91 01 	lds	r18, 0x0191
    1642:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1644:	09 f4       	brne	.+2      	; 0x1648 <USB_Device_ProcessControlRequest+0xe2>
    1646:	cb c0       	rjmp	.+406    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1648:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    164c:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1650:	90 ff       	sbrs	r25, 0
    1652:	1b c0       	rjmp	.+54     	; 0x168a <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	21 f4       	brne	.+8      	; 0x1660 <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1658:	80 91 eb 00 	lds	r24, 0x00EB
    165c:	80 62       	ori	r24, 0x20	; 32
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1660:	80 91 eb 00 	lds	r24, 0x00EB
    1664:	80 61       	ori	r24, 0x10	; 16
    1666:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <USB_Device_ProcessControlRequest+0x10e>
    1672:	88 0f       	add	r24, r24
    1674:	0a 94       	dec	r0
    1676:	ea f7       	brpl	.-6      	; 0x1672 <USB_Device_ProcessControlRequest+0x10c>
    1678:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    167c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1680:	80 91 eb 00 	lds	r24, 0x00EB
    1684:	88 60       	ori	r24, 0x08	; 8
    1686:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    168a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    168e:	80 91 e8 00 	lds	r24, 0x00E8
    1692:	87 7f       	andi	r24, 0xF7	; 247
    1694:	83 c0       	rjmp	.+262    	; 0x179c <USB_Device_ProcessControlRequest+0x236>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1696:	91 11       	cpse	r25, r1
    1698:	a2 c0       	rjmp	.+324    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    169a:	10 91 8f 01 	lds	r17, 0x018F
    169e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    16a0:	80 91 e3 00 	lds	r24, 0x00E3
    16a4:	80 78       	andi	r24, 0x80	; 128
    16a6:	81 2b       	or	r24, r17
    16a8:	80 93 e3 00 	sts	0x00E3, r24
    16ac:	80 91 e8 00 	lds	r24, 0x00E8
    16b0:	87 7f       	andi	r24, 0xF7	; 247
    16b2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    16b6:	95 dd       	rcall	.-1238   	; 0x11e2 <Endpoint_ClearStatusStage>
    16b8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16bc:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    16be:	fc cf       	rjmp	.-8      	; 0x16b8 <USB_Device_ProcessControlRequest+0x152>
    16c0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    16c4:	80 68       	ori	r24, 0x80	; 128
    16c6:	80 93 e3 00 	sts	0x00E3, r24
    16ca:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <USB_Device_ProcessControlRequest+0x16c>
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <USB_Device_ProcessControlRequest+0x16e>
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	80 93 8c 01 	sts	0x018C, r24
    16d8:	82 c0       	rjmp	.+260    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    16da:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16dc:	92 30       	cpi	r25, 0x02	; 2
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <USB_Device_ProcessControlRequest+0x17c>
    16e0:	7e c0       	rjmp	.+252    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    16e2:	80 91 8f 01 	lds	r24, 0x018F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    16e6:	90 91 90 01 	lds	r25, 0x0190
    16ea:	8c 3d       	cpi	r24, 0xDC	; 220
    16ec:	23 e0       	ldi	r18, 0x03	; 3
    16ee:	92 07       	cpc	r25, r18
    16f0:	71 f5       	brne	.+92     	; 0x174e <USB_Device_ProcessControlRequest+0x1e8>
    16f2:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    16f4:	8a 83       	std	Y+2, r24	; 0x02
    16f6:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16fc:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16fe:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1700:	13 96       	adiw	r26, 0x03	; 3
    1702:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1704:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1706:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1708:	e3 2f       	mov	r30, r19
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	50 93 57 00 	sts	0x0057, r21
    1710:	e4 91       	lpm	r30, Z
    1712:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    1714:	03 c0       	rjmp	.+6      	; 0x171c <USB_Device_ProcessControlRequest+0x1b6>
    1716:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    1718:	ef 70       	andi	r30, 0x0F	; 15
    171a:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    171c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    171e:	8e 2f       	mov	r24, r30
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1724:	10 f0       	brcs	.+4      	; 0x172a <USB_Device_ProcessControlRequest+0x1c4>
    1726:	c7 96       	adiw	r24, 0x37	; 55
    1728:	01 c0       	rjmp	.+2      	; 0x172c <USB_Device_ProcessControlRequest+0x1c6>
    172a:	c0 96       	adiw	r24, 0x30	; 48
    172c:	8d 93       	st	X+, r24
    172e:	9d 93       	st	X+, r25
    1730:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1732:	24 31       	cpi	r18, 0x14	; 20
    1734:	49 f7       	brne	.-46     	; 0x1708 <USB_Device_ProcessControlRequest+0x1a2>
    1736:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1738:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    173c:	87 7f       	andi	r24, 0xF7	; 247
    173e:	80 93 e8 00 	sts	0x00E8, r24
    1742:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	de db       	rcall	.-2116   	; 0xf08 <Endpoint_Write_Control_Stream_LE>
    174c:	13 c0       	rjmp	.+38     	; 0x1774 <USB_Device_ProcessControlRequest+0x20e>
    174e:	ae 01       	movw	r20, r28
    1750:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	60 91 91 01 	lds	r22, 0x0191
    1758:	0e 94 b6 01 	call	0x36c	; 0x36c <CALLBACK_USB_GetDescriptor>
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	09 f4       	brne	.+2      	; 0x1762 <USB_Device_ProcessControlRequest+0x1fc>
    1760:	3e c0       	rjmp	.+124    	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    1762:	20 91 e8 00 	lds	r18, 0x00E8
    1766:	27 7f       	andi	r18, 0xF7	; 247
    1768:	20 93 e8 00 	sts	0x00E8, r18
    176c:	bc 01       	movw	r22, r24
    176e:	89 81       	ldd	r24, Y+1	; 0x01
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	65 dc       	rcall	.-1846   	; 0x103e <Endpoint_Write_Control_PStream_LE>
    1774:	80 91 e8 00 	lds	r24, 0x00E8
    1778:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    177a:	80 93 e8 00 	sts	0x00E8, r24
    177e:	2f c0       	rjmp	.+94     	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    1780:	90 38       	cpi	r25, 0x80	; 128
    1782:	69 f5       	brne	.+90     	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    1784:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1788:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    178a:	80 93 e8 00 	sts	0x00E8, r24
    178e:	80 91 88 01 	lds	r24, 0x0188
    1792:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1796:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    179a:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    179c:	80 93 e8 00 	sts	0x00E8, r24
    17a0:	20 dd       	rcall	.-1472   	; 0x11e2 <Endpoint_ClearStatusStage>
    17a2:	1d c0       	rjmp	.+58     	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    17a4:	91 11       	cpse	r25, r1
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    17a6:	1b c0       	rjmp	.+54     	; 0x17de <USB_Device_ProcessControlRequest+0x278>
    17a8:	90 91 8f 01 	lds	r25, 0x018F
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17ac:	92 30       	cpi	r25, 0x02	; 2
    17ae:	b8 f4       	brcc	.+46     	; 0x17de <USB_Device_ProcessControlRequest+0x278>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17b0:	80 91 e8 00 	lds	r24, 0x00E8
    17b4:	87 7f       	andi	r24, 0xF7	; 247
    17b6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17ba:	90 93 88 01 	sts	0x0188, r25
    17be:	11 dd       	rcall	.-1502   	; 0x11e2 <Endpoint_ClearStatusStage>
    17c0:	80 91 88 01 	lds	r24, 0x0188
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    17c4:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <USB_Device_ProcessControlRequest+0x26a>
    17c8:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    17cc:	87 ff       	sbrs	r24, 7
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <USB_Device_ProcessControlRequest+0x26e>
    17d0:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <USB_Device_ProcessControlRequest+0x270>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    17d6:	80 93 8c 01 	sts	0x018C, r24
    17da:	0e 94 40 01 	call	0x280	; 0x280 <EVENT_USB_Device_ConfigurationChanged>
    17de:	80 91 e8 00 	lds	r24, 0x00E8
    17e2:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    17e4:	0a c0       	rjmp	.+20     	; 0x17fa <USB_Device_ProcessControlRequest+0x294>
    17e6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17ea:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    17ec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17f0:	80 91 eb 00 	lds	r24, 0x00EB
    17f4:	80 62       	ori	r24, 0x20	; 32
    17f6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17fa:	aa 96       	adiw	r28, 0x2a	; 42
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	08 95       	ret

0000180e <USB_Event_Stub>:
    180e:	08 95       	ret

00001810 <USB_USBTask>:
    1810:	cf 93       	push	r28
    1812:	80 91 8c 01 	lds	r24, 0x018C
    1816:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1818:	a9 f0       	breq	.+42     	; 0x1844 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    181a:	80 91 e9 00 	lds	r24, 0x00E9
    181e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1820:	90 91 ec 00 	lds	r25, 0x00EC
    1824:	90 ff       	sbrs	r25, 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <USB_USBTask+0x1c>
    1828:	90 e8       	ldi	r25, 0x80	; 128
    182a:	01 c0       	rjmp	.+2      	; 0x182e <USB_USBTask+0x1e>
    182c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    182e:	c9 2f       	mov	r28, r25
    1830:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1832:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1836:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    183a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    183c:	94 de       	rcall	.-728    	; 0x1566 <USB_Device_ProcessControlRequest>
    183e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1840:	c0 93 e9 00 	sts	0x00E9, r28
    1844:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1846:	08 95       	ret

00001848 <HID_Device_ProcessControlRequest>:
    1848:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    184a:	7f 92       	push	r7
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	00 d0       	rcall	.+0      	; 0x1866 <HID_Device_ProcessControlRequest+0x1e>
    1866:	1f 92       	push	r1
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    186e:	ad b6       	in	r10, 0x3d	; 61
    1870:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1872:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1876:	83 ff       	sbrs	r24, 3
    1878:	04 c1       	rjmp	.+520    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    187a:	f7 01       	movw	r30, r14
    187c:	80 81       	ld	r24, Z
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	20 91 91 01 	lds	r18, 0x0191
    1884:	30 91 92 01 	lds	r19, 0x0192
    1888:	28 17       	cp	r18, r24
    188a:	39 07       	cpc	r19, r25
    188c:	09 f0       	breq	.+2      	; 0x1890 <HID_Device_ProcessControlRequest+0x48>
    188e:	f9 c0       	rjmp	.+498    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1890:	80 91 8e 01 	lds	r24, 0x018E
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	09 f4       	brne	.+2      	; 0x189a <HID_Device_ProcessControlRequest+0x52>
    1898:	9b c0       	rjmp	.+310    	; 0x19d0 <HID_Device_ProcessControlRequest+0x188>
    189a:	30 f4       	brcc	.+12     	; 0x18a8 <HID_Device_ProcessControlRequest+0x60>
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	71 f0       	breq	.+28     	; 0x18bc <HID_Device_ProcessControlRequest+0x74>
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <HID_Device_ProcessControlRequest+0x5e>
    18a4:	d2 c0       	rjmp	.+420    	; 0x1a4a <HID_Device_ProcessControlRequest+0x202>
    18a6:	ed c0       	rjmp	.+474    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    18a8:	8a 30       	cpi	r24, 0x0A	; 10
    18aa:	09 f4       	brne	.+2      	; 0x18ae <HID_Device_ProcessControlRequest+0x66>
    18ac:	b6 c0       	rjmp	.+364    	; 0x1a1a <HID_Device_ProcessControlRequest+0x1d2>
    18ae:	8b 30       	cpi	r24, 0x0B	; 11
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <HID_Device_ProcessControlRequest+0x6c>
    18b2:	9f c0       	rjmp	.+318    	; 0x19f2 <HID_Device_ProcessControlRequest+0x1aa>
    18b4:	89 30       	cpi	r24, 0x09	; 9
    18b6:	09 f0       	breq	.+2      	; 0x18ba <HID_Device_ProcessControlRequest+0x72>
    18b8:	e4 c0       	rjmp	.+456    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    18ba:	4c c0       	rjmp	.+152    	; 0x1954 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18bc:	80 91 8d 01 	lds	r24, 0x018D
    18c0:	81 3a       	cpi	r24, 0xA1	; 161
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <HID_Device_ProcessControlRequest+0x7e>
    18c4:	de c0       	rjmp	.+444    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    18c6:	8d b6       	in	r8, 0x3d	; 61
    18c8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    18ca:	1a 82       	std	Y+2, r1	; 0x02
    18cc:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    18ce:	80 91 8f 01 	lds	r24, 0x018F
    18d2:	10 91 90 01 	lds	r17, 0x0190
    18d6:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    18d8:	f7 01       	movw	r30, r14
    18da:	40 85       	ldd	r20, Z+8	; 0x08
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	8d b7       	in	r24, 0x3d	; 61
    18e0:	9e b7       	in	r25, 0x3e	; 62
    18e2:	84 1b       	sub	r24, r20
    18e4:	95 0b       	sbc	r25, r21
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	9e bf       	out	0x3e, r25	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	8d bf       	out	0x3d, r24	; 61
    18f0:	ed b7       	in	r30, 0x3d	; 61
    18f2:	fe b7       	in	r31, 0x3e	; 62
    18f4:	31 96       	adiw	r30, 0x01	; 1
    18f6:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	cf 01       	movw	r24, r30
    18fe:	34 d3       	rcall	.+1640   	; 0x1f68 <memset>
    1900:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1902:	41 0f       	add	r20, r17
    1904:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1906:	0f 5f       	subi	r16, 0xFF	; 255
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	96 01       	movw	r18, r12
    190c:	be 01       	movw	r22, r28
    190e:	6d 5f       	subi	r22, 0xFD	; 253
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	c7 01       	movw	r24, r14
    1914:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CALLBACK_HID_Device_CreateHIDReport>
    1918:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    191a:	86 81       	ldd	r24, Z+6	; 0x06
    191c:	97 81       	ldd	r25, Z+7	; 0x07
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	21 f0       	breq	.+8      	; 0x192a <HID_Device_ProcessControlRequest+0xe2>
    1922:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	b6 01       	movw	r22, r12
    1928:	16 d3       	rcall	.+1580   	; 0x1f56 <memcpy>
    192a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    192e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1932:	87 7f       	andi	r24, 0xF7	; 247
    1934:	80 93 e8 00 	sts	0x00E8, r24
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	81 11       	cpse	r24, r1

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    193c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1940:	69 81       	ldd	r22, Y+1	; 0x01
    1942:	7a 81       	ldd	r23, Y+2	; 0x02
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1944:	c6 01       	movw	r24, r12
    1946:	e0 da       	rcall	.-2624   	; 0xf08 <Endpoint_Write_Control_Stream_LE>
    1948:	80 91 e8 00 	lds	r24, 0x00E8
    194c:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    194e:	80 93 e8 00 	sts	0x00E8, r24
    1952:	38 c0       	rjmp	.+112    	; 0x19c4 <HID_Device_ProcessControlRequest+0x17c>
    1954:	80 91 8d 01 	lds	r24, 0x018D
    1958:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    195a:	09 f0       	breq	.+2      	; 0x195e <HID_Device_ProcessControlRequest+0x116>
    195c:	92 c0       	rjmp	.+292    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    195e:	8d b6       	in	r8, 0x3d	; 61
    1960:	9e b6       	in	r9, 0x3e	; 62
    1962:	00 91 93 01 	lds	r16, 0x0193
    1966:	10 91 94 01 	lds	r17, 0x0194
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    196a:	70 90 8f 01 	lds	r7, 0x018F
    196e:	60 90 90 01 	lds	r6, 0x0190
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1972:	8d b7       	in	r24, 0x3d	; 61
    1974:	9e b7       	in	r25, 0x3e	; 62
    1976:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1978:	91 0b       	sbc	r25, r17
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	9e bf       	out	0x3e, r25	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	8d bf       	out	0x3d, r24	; 61
    1984:	ed b7       	in	r30, 0x3d	; 61
    1986:	fe b7       	in	r31, 0x3e	; 62
    1988:	31 96       	adiw	r30, 0x01	; 1
    198a:	6f 01       	movw	r12, r30
    198c:	80 91 e8 00 	lds	r24, 0x00E8
    1990:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1992:	80 93 e8 00 	sts	0x00E8, r24
    1996:	b8 01       	movw	r22, r16
    1998:	cf 01       	movw	r24, r30
    199a:	13 db       	rcall	.-2522   	; 0xfc2 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    199c:	80 91 e8 00 	lds	r24, 0x00E8
    19a0:	8e 77       	andi	r24, 0x7E	; 126
    19a2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a6:	21 e0       	ldi	r18, 0x01	; 1
    19a8:	71 10       	cpse	r7, r1
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <HID_Device_ProcessControlRequest+0x166>
    19ac:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	02 1b       	sub	r16, r18
    19b2:	13 0b       	sbc	r17, r19
    19b4:	2c 0d       	add	r18, r12
    19b6:	3d 1d       	adc	r19, r13
    19b8:	4f ef       	ldi	r20, 0xFF	; 255
    19ba:	46 0d       	add	r20, r6
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    19bc:	67 2d       	mov	r22, r7
    19be:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    19c0:	0e 94 aa 01 	call	0x354	; 0x354 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	9e be       	out	0x3e, r9	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	8d be       	out	0x3d, r8	; 61
    19ce:	59 c0       	rjmp	.+178    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    19d0:	80 91 8d 01 	lds	r24, 0x018D
    19d4:	81 3a       	cpi	r24, 0xA1	; 161
    19d6:	09 f0       	breq	.+2      	; 0x19da <HID_Device_ProcessControlRequest+0x192>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19d8:	54 c0       	rjmp	.+168    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    19da:	80 91 e8 00 	lds	r24, 0x00E8
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19e4:	80 91 e8 00 	lds	r24, 0x00E8
    19e8:	80 ff       	sbrs	r24, 0
    19ea:	fc cf       	rjmp	.-8      	; 0x19e4 <HID_Device_ProcessControlRequest+0x19c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19ec:	f7 01       	movw	r30, r14
    19ee:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    19f0:	40 c0       	rjmp	.+128    	; 0x1a72 <HID_Device_ProcessControlRequest+0x22a>
    19f2:	80 91 8d 01 	lds	r24, 0x018D
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    19f6:	81 32       	cpi	r24, 0x21	; 33
    19f8:	09 f0       	breq	.+2      	; 0x19fc <HID_Device_ProcessControlRequest+0x1b4>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19fa:	43 c0       	rjmp	.+134    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    19fc:	80 91 e8 00 	lds	r24, 0x00E8
    1a00:	87 7f       	andi	r24, 0xF7	; 247
    1a02:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a06:	ed db       	rcall	.-2086   	; 0x11e2 <Endpoint_ClearStatusStage>
    1a08:	90 91 8f 01 	lds	r25, 0x018F
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a0e:	91 11       	cpse	r25, r1
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <HID_Device_ProcessControlRequest+0x1cc>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	f7 01       	movw	r30, r14
    1a16:	81 87       	std	Z+9, r24	; 0x09
    1a18:	34 c0       	rjmp	.+104    	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    1a1a:	80 91 8d 01 	lds	r24, 0x018D
    1a1e:	81 32       	cpi	r24, 0x21	; 33
    1a20:	81 f5       	brne	.+96     	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    1a22:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a26:	87 7f       	andi	r24, 0xF7	; 247
    1a28:	80 93 e8 00 	sts	0x00E8, r24
    1a2c:	da db       	rcall	.-2124   	; 0x11e2 <Endpoint_ClearStatusStage>
    1a2e:	80 91 8f 01 	lds	r24, 0x018F
    1a32:	90 91 90 01 	lds	r25, 0x0190
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a36:	88 27       	eor	r24, r24
    1a38:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	3a 95       	dec	r19
    1a40:	e1 f7       	brne	.-8      	; 0x1a3a <HID_Device_ProcessControlRequest+0x1f2>
    1a42:	f7 01       	movw	r30, r14
    1a44:	95 87       	std	Z+13, r25	; 0x0d
    1a46:	84 87       	std	Z+12, r24	; 0x0c
    1a48:	1c c0       	rjmp	.+56     	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    1a4a:	80 91 8d 01 	lds	r24, 0x018D
    1a4e:	81 3a       	cpi	r24, 0xA1	; 161
    1a50:	c1 f4       	brne	.+48     	; 0x1a82 <HID_Device_ProcessControlRequest+0x23a>
    1a52:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a56:	87 7f       	andi	r24, 0xF7	; 247
    1a58:	80 93 e8 00 	sts	0x00E8, r24
    1a5c:	80 91 e8 00 	lds	r24, 0x00E8
    1a60:	80 ff       	sbrs	r24, 0
    1a62:	fc cf       	rjmp	.-8      	; 0x1a5c <HID_Device_ProcessControlRequest+0x214>
    1a64:	f7 01       	movw	r30, r14
    1a66:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a68:	95 85       	ldd	r25, Z+13	; 0x0d
    1a6a:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1a6c:	87 95       	ror	r24
    1a6e:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1a70:	87 95       	ror	r24
    1a72:	80 93 f1 00 	sts	0x00F1, r24
    1a76:	80 91 e8 00 	lds	r24, 0x00E8
    1a7a:	8e 77       	andi	r24, 0x7E	; 126
    1a7c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a80:	b0 db       	rcall	.-2208   	; 0x11e2 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	be be       	out	0x3e, r11	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
			}

			break;
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	9f 90       	pop	r9
    1aa8:	8f 90       	pop	r8
    1aaa:	7f 90       	pop	r7
    1aac:	6f 90       	pop	r6
    1aae:	08 95       	ret

00001ab0 <HID_Device_ConfigureEndpoints>:
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	39 96       	adiw	r30, 0x09	; 9
    1ab4:	27 e0       	ldi	r18, 0x07	; 7
    1ab6:	df 01       	movw	r26, r30
    1ab8:	1d 92       	st	X+, r1
    1aba:	2a 95       	dec	r18
    1abc:	e9 f7       	brne	.-6      	; 0x1ab8 <HID_Device_ConfigureEndpoints+0x8>

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1abe:	21 e0       	ldi	r18, 0x01	; 1
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1ac4:	24 ef       	ldi	r18, 0xF4	; 244
    1ac6:	31 e0       	ldi	r19, 0x01	; 1
    1ac8:	35 87       	std	Z+13, r19	; 0x0d
    1aca:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1acc:	23 e0       	ldi	r18, 0x03	; 3
    1ace:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	49 cb       	rjmp	.-2414   	; 0x1168 <Endpoint_ConfigureEndpointTable>

00001ad6 <HID_Device_USBTask>:
    1ad6:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1ad8:	6f 92       	push	r6
    1ada:	7f 92       	push	r7
    1adc:	8f 92       	push	r8
    1ade:	9f 92       	push	r9
    1ae0:	af 92       	push	r10
    1ae2:	bf 92       	push	r11
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <HID_Device_USBTask+0x20>
    1af6:	1f 92       	push	r1
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1afe:	ad b6       	in	r10, 0x3d	; 61
    1b00:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1b02:	80 91 8c 01 	lds	r24, 0x018C
    1b06:	84 30       	cpi	r24, 0x04	; 4
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <HID_Device_USBTask+0x36>
    1b0a:	8b c0       	rjmp	.+278    	; 0x1c22 <HID_Device_USBTask+0x14c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b0c:	80 91 e4 00 	lds	r24, 0x00E4
    1b10:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1b14:	f7 01       	movw	r30, r14
    1b16:	22 85       	ldd	r18, Z+10	; 0x0a
    1b18:	33 85       	ldd	r19, Z+11	; 0x0b
    1b1a:	28 17       	cp	r18, r24
    1b1c:	39 07       	cpc	r19, r25
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <HID_Device_USBTask+0x4c>
    1b20:	80 c0       	rjmp	.+256    	; 0x1c22 <HID_Device_USBTask+0x14c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b22:	81 81       	ldd	r24, Z+1	; 0x01
    1b24:	8f 70       	andi	r24, 0x0F	; 15
    1b26:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b2a:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1b2e:	85 ff       	sbrs	r24, 5
    1b30:	78 c0       	rjmp	.+240    	; 0x1c22 <HID_Device_USBTask+0x14c>
    1b32:	8d b6       	in	r8, 0x3d	; 61
    1b34:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1b36:	40 85       	ldd	r20, Z+8	; 0x08
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	8d b7       	in	r24, 0x3d	; 61
    1b3c:	9e b7       	in	r25, 0x3e	; 62
    1b3e:	84 1b       	sub	r24, r20
    1b40:	95 0b       	sbc	r25, r21
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	9e bf       	out	0x3e, r25	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	8d bf       	out	0x3d, r24	; 61
    1b4c:	ed b7       	in	r30, 0x3d	; 61
    1b4e:	fe b7       	in	r31, 0x3e	; 62
    1b50:	31 96       	adiw	r30, 0x01	; 1
    1b52:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1b54:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1b56:	1a 82       	std	Y+2, r1	; 0x02
    1b58:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	cf 01       	movw	r24, r30
    1b60:	03 d2       	rcall	.+1030   	; 0x1f68 <memset>
    1b62:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1b64:	0f 5f       	subi	r16, 0xFF	; 255
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	96 01       	movw	r18, r12
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	be 01       	movw	r22, r28
    1b6e:	6d 5f       	subi	r22, 0xFD	; 253
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	c7 01       	movw	r24, r14
    1b74:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CALLBACK_HID_Device_CreateHIDReport>
    1b78:	68 2e       	mov	r6, r24
    1b7a:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1b7c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b7e:	95 85       	ldd	r25, Z+13	; 0x0d
    1b80:	89 2b       	or	r24, r25
    1b82:	41 f0       	breq	.+16     	; 0x1b94 <HID_Device_USBTask+0xbe>
    1b84:	21 e0       	ldi	r18, 0x01	; 1
    1b86:	86 85       	ldd	r24, Z+14	; 0x0e
    1b88:	97 85       	ldd	r25, Z+15	; 0x0f
    1b8a:	89 2b       	or	r24, r25
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <HID_Device_USBTask+0xba>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	72 2e       	mov	r7, r18
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <HID_Device_USBTask+0xc0>
    1b94:	71 2c       	mov	r7, r1
    1b96:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1b98:	06 81       	ldd	r16, Z+6	; 0x06
    1b9a:	17 81       	ldd	r17, Z+7	; 0x07
    1b9c:	01 15       	cp	r16, r1
    1b9e:	11 05       	cpc	r17, r1
    1ba0:	89 f0       	breq	.+34     	; 0x1bc4 <HID_Device_USBTask+0xee>
    1ba2:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1ba4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ba6:	b8 01       	movw	r22, r16
    1ba8:	c6 01       	movw	r24, r12
    1baa:	c8 d1       	rcall	.+912    	; 0x1f3c <memcmp>
    1bac:	55 24       	eor	r5, r5
    1bae:	53 94       	inc	r5
    1bb0:	89 2b       	or	r24, r25
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <HID_Device_USBTask+0xe0>
    1bb4:	51 2c       	mov	r5, r1
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	b6 01       	movw	r22, r12
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	ca d1       	rcall	.+916    	; 0x1f56 <memcpy>
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <HID_Device_USBTask+0xf0>
    1bc4:	51 2c       	mov	r5, r1
    1bc6:	29 81       	ldd	r18, Y+1	; 0x01
    1bc8:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1bca:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1bcc:	f1 f0       	breq	.+60     	; 0x1c0a <HID_Device_USBTask+0x134>
    1bce:	61 10       	cpse	r6, r1
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <HID_Device_USBTask+0x104>
    1bd2:	51 10       	cpse	r5, r1
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <HID_Device_USBTask+0x104>
    1bd6:	70 fe       	sbrs	r7, 0
    1bd8:	18 c0       	rjmp	.+48     	; 0x1c0a <HID_Device_USBTask+0x134>
    1bda:	f7 01       	movw	r30, r14
    1bdc:	84 85       	ldd	r24, Z+12	; 0x0c
    1bde:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1be0:	97 87       	std	Z+15, r25	; 0x0f
    1be2:	86 87       	std	Z+14, r24	; 0x0e
    1be4:	81 81       	ldd	r24, Z+1	; 0x01
    1be6:	8f 70       	andi	r24, 0x0F	; 15
    1be8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	81 11       	cpse	r24, r1
    1bf0:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1bf4:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bf6:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	c6 01       	movw	r24, r12
    1bfe:	a8 d8       	rcall	.-3760   	; 0xd50 <Endpoint_Write_Stream_LE>
    1c00:	80 91 e8 00 	lds	r24, 0x00E8
    1c04:	8e 77       	andi	r24, 0x7E	; 126
    1c06:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c0a:	80 91 e4 00 	lds	r24, 0x00E4
    1c0e:	90 91 e5 00 	lds	r25, 0x00E5
    1c12:	f7 01       	movw	r30, r14
    1c14:	93 87       	std	Z+11, r25	; 0x0b
    1c16:	82 87       	std	Z+10, r24	; 0x0a
    1c18:	0f b6       	in	r0, 0x3f	; 63

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1c1a:	f8 94       	cli
    1c1c:	9e be       	out	0x3e, r9	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	8d be       	out	0x3d, r8	; 61
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	be be       	out	0x3e, r11	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
	}
}
    1c2a:	ad be       	out	0x3d, r10	; 61
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	08 95       	ret

00001c52 <MS_Device_ProcessControlRequest>:
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
    1c58:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1c5c:	83 ff       	sbrs	r24, 3
    1c5e:	35 c0       	rjmp	.+106    	; 0x1cca <MS_Device_ProcessControlRequest+0x78>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1c60:	88 81       	ld	r24, Y
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	20 91 91 01 	lds	r18, 0x0191
    1c68:	30 91 92 01 	lds	r19, 0x0192
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	61 f5       	brne	.+88     	; 0x1cca <MS_Device_ProcessControlRequest+0x78>
	  return;

	switch (USB_ControlRequest.bRequest)
    1c72:	80 91 8e 01 	lds	r24, 0x018E
    1c76:	8e 3f       	cpi	r24, 0xFE	; 254
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <MS_Device_ProcessControlRequest+0x46>
    1c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c7c:	31 f5       	brne	.+76     	; 0x1cca <MS_Device_ProcessControlRequest+0x78>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c7e:	80 91 8d 01 	lds	r24, 0x018D
    1c82:	81 32       	cpi	r24, 0x21	; 33
    1c84:	11 f5       	brne	.+68     	; 0x1cca <MS_Device_ProcessControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c86:	80 91 e8 00 	lds	r24, 0x00E8
    1c8a:	87 7f       	andi	r24, 0xF7	; 247
    1c8c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c90:	a8 da       	rcall	.-2736   	; 0x11e2 <Endpoint_ClearStatusStage>
    1c92:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1c94:	88 af       	std	Y+56, r24	; 0x38
    1c96:	19 c0       	rjmp	.+50     	; 0x1cca <MS_Device_ProcessControlRequest+0x78>
    1c98:	80 91 8d 01 	lds	r24, 0x018D
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c9c:	81 3a       	cpi	r24, 0xA1	; 161
    1c9e:	a9 f4       	brne	.+42     	; 0x1cca <MS_Device_ProcessControlRequest+0x78>
    1ca0:	80 91 e8 00 	lds	r24, 0x00E8
    1ca4:	87 7f       	andi	r24, 0xF7	; 247
    1ca6:	80 93 e8 00 	sts	0x00E8, r24
    1caa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cae:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1cb0:	fc cf       	rjmp	.-8      	; 0x1caa <MS_Device_ProcessControlRequest+0x58>
    1cb2:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cba:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cbe:	8e 77       	andi	r24, 0x7E	; 126
    1cc0:	80 93 e8 00 	sts	0x00E8, r24
    1cc4:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1cc6:	cf 91       	pop	r28
    1cc8:	8c ca       	rjmp	.-2792   	; 0x11e2 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
			}

			break;
	}
}
    1cce:	08 95       	ret

00001cd0 <MS_Device_ConfigureEndpoints>:
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1cd4:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	3c 96       	adiw	r30, 0x0c	; 12
    1cda:	8d e2       	ldi	r24, 0x2D	; 45
    1cdc:	df 01       	movw	r26, r30
    1cde:	1d 92       	st	X+, r1
    1ce0:	8a 95       	dec	r24
    1ce2:	e9 f7       	brne	.-6      	; 0x1cde <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1ce8:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	ce 01       	movw	r24, r28
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	3b da       	rcall	.-2954   	; 0x1168 <Endpoint_ConfigureEndpointTable>
    1cf2:	88 23       	and	r24, r24
    1cf4:	31 f0       	breq	.+12     	; 0x1d02 <MS_Device_ConfigureEndpoints+0x32>
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	06 96       	adiw	r24, 0x06	; 6
    1cfc:	df 91       	pop	r29
	  return false;

	return true;
}
    1cfe:	cf 91       	pop	r28
    1d00:	33 ca       	rjmp	.-2970   	; 0x1168 <Endpoint_ConfigureEndpointTable>
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	df 91       	pop	r29
	  return false;

	return true;
}
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <MS_Device_USBTask>:
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <MS_Device_USBTask+0xe>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1d1e:	80 91 8c 01 	lds	r24, 0x018C
    1d22:	84 30       	cpi	r24, 0x04	; 4
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <MS_Device_USBTask+0x1e>
    1d26:	01 c1       	rjmp	.+514    	; 0x1f2a <MS_Device_USBTask+0x220>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d28:	f8 01       	movw	r30, r16
    1d2a:	86 81       	ldd	r24, Z+6	; 0x06
    1d2c:	8f 70       	andi	r24, 0x0F	; 15
    1d2e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d32:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1d36:	82 ff       	sbrs	r24, 2
    1d38:	be c0       	rjmp	.+380    	; 0x1eb6 <MS_Device_USBTask+0x1ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d3a:	86 81       	ldd	r24, Z+6	; 0x06
    1d3c:	8f 70       	andi	r24, 0x0F	; 15
    1d3e:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    1d42:	1a 82       	std	Y+2, r1	; 0x02
    1d44:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1d46:	78 01       	movw	r14, r16
    1d48:	fc e0       	ldi	r31, 0x0C	; 12
    1d4a:	ef 0e       	add	r14, r31
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	ae 01       	movw	r20, r28
    1d50:	4f 5f       	subi	r20, 0xFF	; 255
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	6f e0       	ldi	r22, 0x0F	; 15
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	c7 01       	movw	r24, r14
    1d5a:	8f d8       	rcall	.-3810   	; 0xe7a <Endpoint_Read_Stream_LE>
    1d5c:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d5e:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <MS_Device_USBTask+0x60>
    1d62:	80 ad       	ldd	r24, Z+56	; 0x38
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d64:	88 23       	and	r24, r24
    1d66:	99 f3       	breq	.-26     	; 0x1d4e <MS_Device_USBTask+0x44>
    1d68:	a6 c0       	rjmp	.+332    	; 0x1eb6 <MS_Device_USBTask+0x1ac>
    1d6a:	84 85       	ldd	r24, Z+12	; 0x0c
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1d6c:	95 85       	ldd	r25, Z+13	; 0x0d
    1d6e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1d70:	b7 85       	ldd	r27, Z+15	; 0x0f
    1d72:	85 35       	cpi	r24, 0x55	; 85
    1d74:	93 45       	sbci	r25, 0x53	; 83
    1d76:	a2 44       	sbci	r26, 0x42	; 66
    1d78:	b3 44       	sbci	r27, 0x43	; 67
    1d7a:	61 f4       	brne	.+24     	; 0x1d94 <MS_Device_USBTask+0x8a>
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	91 8d       	ldd	r25, Z+25	; 0x19
    1d80:	83 85       	ldd	r24, Z+11	; 0x0b
    1d82:	98 17       	cp	r25, r24
    1d84:	38 f4       	brcc	.+14     	; 0x1d94 <MS_Device_USBTask+0x8a>
    1d86:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1d88:	8f 71       	andi	r24, 0x1F	; 31
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <MS_Device_USBTask+0x8a>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1d8c:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1d8e:	81 50       	subi	r24, 0x01	; 1
    1d90:	80 31       	cpi	r24, 0x10	; 16
    1d92:	80 f0       	brcs	.+32     	; 0x1db4 <MS_Device_USBTask+0xaa>
    1d94:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d98:	80 62       	ori	r24, 0x20	; 32
    1d9a:	80 93 eb 00 	sts	0x00EB, r24
    1d9e:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1da0:	81 81       	ldd	r24, Z+1	; 0x01
    1da2:	8f 70       	andi	r24, 0x0F	; 15
    1da4:	80 93 e9 00 	sts	0x00E9, r24
    1da8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1dac:	80 62       	ori	r24, 0x20	; 32
    1dae:	80 93 eb 00 	sts	0x00EB, r24
    1db2:	81 c0       	rjmp	.+258    	; 0x1eb6 <MS_Device_USBTask+0x1ac>
    1db4:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	78 01       	movw	r14, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1dba:	fb e1       	ldi	r31, 0x1B	; 27
    1dbc:	ef 0e       	add	r14, r31
    1dbe:	f1 1c       	adc	r15, r1
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	62 8d       	ldd	r22, Z+26	; 0x1a
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	ae 01       	movw	r20, r28
    1dc8:	4f 5f       	subi	r20, 0xFF	; 255
    1dca:	5f 4f       	sbci	r21, 0xFF	; 255
    1dcc:	c7 01       	movw	r24, r14
    1dce:	55 d8       	rcall	.-3926   	; 0xe7a <Endpoint_Read_Stream_LE>
    1dd0:	85 30       	cpi	r24, 0x05	; 5
    1dd2:	29 f4       	brne	.+10     	; 0x1dde <MS_Device_USBTask+0xd4>
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 ad       	ldd	r24, Z+56	; 0x38
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1dd8:	88 23       	and	r24, r24
    1dda:	91 f3       	breq	.-28     	; 0x1dc0 <MS_Device_USBTask+0xb6>
    1ddc:	6c c0       	rjmp	.+216    	; 0x1eb6 <MS_Device_USBTask+0x1ac>
    1dde:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1de2:	8b 77       	andi	r24, 0x7B	; 123
    1de4:	80 93 e8 00 	sts	0x00E8, r24
    1de8:	f8 01       	movw	r30, r16
    1dea:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1dec:	87 ff       	sbrs	r24, 7
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <MS_Device_USBTask+0xee>
    1df0:	81 81       	ldd	r24, Z+1	; 0x01
    1df2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1df4:	80 93 e9 00 	sts	0x00E9, r24
    1df8:	c8 01       	movw	r24, r16
    1dfa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	98 27       	eor	r25, r24

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1e02:	f8 01       	movw	r30, r16
    1e04:	97 ab       	std	Z+55, r25	; 0x37
    1e06:	45 e5       	ldi	r20, 0x55	; 85
    1e08:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1e0a:	62 e4       	ldi	r22, 0x42	; 66
    1e0c:	73 e5       	ldi	r23, 0x53	; 83
    1e0e:	43 a7       	std	Z+43, r20	; 0x2b
    1e10:	54 a7       	std	Z+44, r21	; 0x2c
    1e12:	65 a7       	std	Z+45, r22	; 0x2d
    1e14:	76 a7       	std	Z+46, r23	; 0x2e
    1e16:	40 89       	ldd	r20, Z+16	; 0x10
    1e18:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1e1a:	62 89       	ldd	r22, Z+18	; 0x12
    1e1c:	73 89       	ldd	r23, Z+19	; 0x13
    1e1e:	47 a7       	std	Z+47, r20	; 0x2f
    1e20:	50 ab       	std	Z+48, r21	; 0x30
    1e22:	61 ab       	std	Z+49, r22	; 0x31
    1e24:	72 ab       	std	Z+50, r23	; 0x32
    1e26:	44 89       	ldd	r20, Z+20	; 0x14
    1e28:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1e2a:	66 89       	ldd	r22, Z+22	; 0x16
    1e2c:	77 89       	ldd	r23, Z+23	; 0x17
    1e2e:	43 ab       	std	Z+51, r20	; 0x33
    1e30:	54 ab       	std	Z+52, r21	; 0x34
    1e32:	65 ab       	std	Z+53, r22	; 0x35
    1e34:	76 ab       	std	Z+54, r23	; 0x36
    1e36:	81 11       	cpse	r24, r1
    1e38:	09 c0       	rjmp	.+18     	; 0x1e4c <MS_Device_USBTask+0x142>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1e3a:	45 2b       	or	r20, r21
    1e3c:	46 2b       	or	r20, r22
    1e3e:	47 2b       	or	r20, r23
    1e40:	29 f0       	breq	.+10     	; 0x1e4c <MS_Device_USBTask+0x142>
    1e42:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e46:	80 62       	ori	r24, 0x20	; 32
    1e48:	80 93 eb 00 	sts	0x00EB, r24
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e50:	8f 70       	andi	r24, 0x0F	; 15
    1e52:	80 93 e9 00 	sts	0x00E9, r24
    1e56:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <MS_Device_USBTask+0x15e>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1e60:	80 ad       	ldd	r24, Z+56	; 0x38
    1e62:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e64:	c1 f3       	breq	.-16     	; 0x1e56 <MS_Device_USBTask+0x14c>
    1e66:	27 c0       	rjmp	.+78     	; 0x1eb6 <MS_Device_USBTask+0x1ac>
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e6c:	80 93 e9 00 	sts	0x00E9, r24
    1e70:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e74:	85 ff       	sbrs	r24, 5
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <MS_Device_USBTask+0x178>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1e78:	f8 01       	movw	r30, r16
    1e7a:	80 ad       	ldd	r24, Z+56	; 0x38
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e7c:	88 23       	and	r24, r24
    1e7e:	c1 f3       	breq	.-16     	; 0x1e70 <MS_Device_USBTask+0x166>
    1e80:	1a c0       	rjmp	.+52     	; 0x1eb6 <MS_Device_USBTask+0x1ac>
    1e82:	1a 82       	std	Y+2, r1	; 0x02
    1e84:	19 82       	std	Y+1, r1	; 0x01
		  return;
	}

	uint16_t BytesProcessed = 0;
    1e86:	78 01       	movw	r14, r16
    1e88:	fb e2       	ldi	r31, 0x2B	; 43
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1e8a:	ef 0e       	add	r14, r31
    1e8c:	f1 1c       	adc	r15, r1
    1e8e:	ae 01       	movw	r20, r28
    1e90:	4f 5f       	subi	r20, 0xFF	; 255
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	6d e0       	ldi	r22, 0x0D	; 13
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	c7 01       	movw	r24, r14
    1e9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <Endpoint_Write_Stream_LE>
    1e9e:	85 30       	cpi	r24, 0x05	; 5
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <MS_Device_USBTask+0x1a2>
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	80 ad       	ldd	r24, Z+56	; 0x38
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ea6:	88 23       	and	r24, r24
    1ea8:	91 f3       	breq	.-28     	; 0x1e8e <MS_Device_USBTask+0x184>
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <MS_Device_USBTask+0x1ac>
    1eac:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1eb0:	8e 77       	andi	r24, 0x7E	; 126
    1eb2:	80 93 e8 00 	sts	0x00E8, r24
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	80 ad       	ldd	r24, Z+56	; 0x38

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1eba:	88 23       	and	r24, r24
    1ebc:	b1 f1       	breq	.+108    	; 0x1f2a <MS_Device_USBTask+0x220>
    1ebe:	26 81       	ldd	r18, Z+6	; 0x06
    1ec0:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	ac 01       	movw	r20, r24
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <MS_Device_USBTask+0x1c4>
    1eca:	44 0f       	add	r20, r20
    1ecc:	55 1f       	adc	r21, r21
    1ece:	2a 95       	dec	r18
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <MS_Device_USBTask+0x1c0>
    1ed2:	40 93 ea 00 	sts	0x00EA, r20
    1ed6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1eda:	21 81       	ldd	r18, Z+1	; 0x01
    1edc:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1ede:	02 2e       	mov	r0, r18
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <MS_Device_USBTask+0x1da>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	0a 94       	dec	r0
    1ee6:	ea f7       	brpl	.-6      	; 0x1ee2 <MS_Device_USBTask+0x1d8>
    1ee8:	80 93 ea 00 	sts	0x00EA, r24
    1eec:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1ef0:	86 81       	ldd	r24, Z+6	; 0x06
    1ef2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef4:	80 93 e9 00 	sts	0x00E9, r24
    1ef8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1efc:	80 61       	ori	r24, 0x10	; 16
    1efe:	80 93 eb 00 	sts	0x00EB, r24
    1f02:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f06:	88 60       	ori	r24, 0x08	; 8
    1f08:	80 93 eb 00 	sts	0x00EB, r24
    1f0c:	81 81       	ldd	r24, Z+1	; 0x01
    1f0e:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f10:	80 93 e9 00 	sts	0x00E9, r24
    1f14:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f18:	80 61       	ori	r24, 0x10	; 16
    1f1a:	80 93 eb 00 	sts	0x00EB, r24
    1f1e:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f22:	88 60       	ori	r24, 0x08	; 8
    1f24:	80 93 eb 00 	sts	0x00EB, r24
    1f28:	10 ae       	std	Z+56, r1	; 0x38
    1f2a:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1f2c:	0f 90       	pop	r0
	}
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	08 95       	ret

00001f3c <memcmp>:
    1f3c:	fb 01       	movw	r30, r22
    1f3e:	dc 01       	movw	r26, r24
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <memcmp+0xe>
    1f42:	8d 91       	ld	r24, X+
    1f44:	01 90       	ld	r0, Z+
    1f46:	80 19       	sub	r24, r0
    1f48:	21 f4       	brne	.+8      	; 0x1f52 <memcmp+0x16>
    1f4a:	41 50       	subi	r20, 0x01	; 1
    1f4c:	50 40       	sbci	r21, 0x00	; 0
    1f4e:	c8 f7       	brcc	.-14     	; 0x1f42 <memcmp+0x6>
    1f50:	88 1b       	sub	r24, r24
    1f52:	99 0b       	sbc	r25, r25
    1f54:	08 95       	ret

00001f56 <memcpy>:
    1f56:	fb 01       	movw	r30, r22
    1f58:	dc 01       	movw	r26, r24
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <memcpy+0xa>
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	41 50       	subi	r20, 0x01	; 1
    1f62:	50 40       	sbci	r21, 0x00	; 0
    1f64:	d8 f7       	brcc	.-10     	; 0x1f5c <memcpy+0x6>
    1f66:	08 95       	ret

00001f68 <memset>:
    1f68:	dc 01       	movw	r26, r24
    1f6a:	01 c0       	rjmp	.+2      	; 0x1f6e <memset+0x6>
    1f6c:	6d 93       	st	X+, r22
    1f6e:	41 50       	subi	r20, 0x01	; 1
    1f70:	50 40       	sbci	r21, 0x00	; 0
    1f72:	e0 f7       	brcc	.-8      	; 0x1f6c <memset+0x4>
    1f74:	08 95       	ret

00001f76 <_exit>:
    1f76:	f8 94       	cli

00001f78 <__stop_program>:
    1f78:	ff cf       	rjmp	.-2      	; 0x1f78 <__stop_program>

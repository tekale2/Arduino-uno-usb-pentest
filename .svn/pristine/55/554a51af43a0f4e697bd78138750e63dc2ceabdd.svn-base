
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001944  000019d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800170  00800170  00001a48  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000264f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e8  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d0e5  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000313f  00000000  00000000  0000fe2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004bd7  00000000  00000000  00012f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000118c  00000000  00000000  00017b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000040e6  00000000  00000000  00018cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000079bb  00000000  00000000  0001cdb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000818  00000000  00000000  00024771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_10>
      2c:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000c8 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

00000106 <DeviceDescriptor>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e4 e4       	ldi	r30, 0x44	; 68
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     12c:	f9 e1       	ldi	r31, 0x19	; 25
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	a0 37       	cpi	r26, 0x70	; 112
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a0 e7       	ldi	r26, 0x70	; 112
     142:	b1 e0       	ldi	r27, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
				ReportData     += 4;
     148:	ad 37       	cpi	r26, 0x7D	; 125
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
				break;
     14e:	3d d0       	rcall	.+122    	; 0x1ca <main>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
     156:	9b b1       	in	r25, 0x0b	; 11
     158:	9f 70       	andi	r25, 0x0F	; 15
     15a:	98 2b       	or	r25, r24
     15c:	9b b9       	out	0x0b, r25	; 11
     15e:	08 95       	ret

00000160 <SetupHardware>:
     160:	84 b7       	in	r24, 0x34	; 52
				ReportSize     -= 2;
     162:	87 7f       	andi	r24, 0xF7	; 247
     164:	84 bf       	out	0x34, r24	; 52
				ReportData     += 2;
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
				break;
     16c:	80 93 60 00 	sts	0x0060, r24

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     170:	10 92 60 00 	sts	0x0060, r1
     174:	0f be       	out	0x3f, r0	; 63
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 e8       	ldi	r24, 0x80	; 128
				ReportSize     -= 1;
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
				ReportData     += 1;
     17e:	80 93 61 00 	sts	0x0061, r24
     182:	90 93 61 00 	sts	0x0061, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	0f be       	out	0x3f, r0	; 63
     188:	8a b1       	in	r24, 0x0a	; 10
     18a:	80 6f       	ori	r24, 0xF0	; 240
     18c:	8a b9       	out	0x0a, r24	; 10
     18e:	8b b1       	in	r24, 0x0b	; 11
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	8b b9       	out	0x0b, r24	; 11
     194:	8d b1       	in	r24, 0x0d	; 13
     196:	83 60       	ori	r24, 0x03	; 3
     198:	8d b9       	out	0x0d, r24	; 13
     19a:	8e b1       	in	r24, 0x0e	; 14
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	8e b9       	out	0x0e, r24	; 14
     1a0:	20 9a       	sbi	0x04, 0	; 4
     1a2:	28 9a       	sbi	0x05, 0	; 5
     1a4:	84 b1       	in	r24, 0x04	; 4
     1a6:	86 60       	ori	r24, 0x06	; 6
     1a8:	84 b9       	out	0x04, r24	; 4

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	23 98       	cbi	0x04, 3	; 4
     1ac:	2b 9a       	sbi	0x05, 3	; 5
     1ae:	8d b5       	in	r24, 0x2d	; 45
     1b0:	81 60       	ori	r24, 0x01	; 1
     1b2:	8d bd       	out	0x2d, r24	; 45
				break;
     1b4:	20 98       	cbi	0x04, 0	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	8c e5       	ldi	r24, 0x5C	; 92
     1b8:	8c bd       	out	0x2c, r24	; 44
     1ba:	b4 d7       	rcall	.+3944   	; 0x1124 <USB_Init>
     1bc:	45 d3       	rcall	.+1674   	; 0x848 <DataflashManager_CheckDataflashOperation>
     1be:	81 11       	cpse	r24, r1
     1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <SetupHardware+0x68>
     1c2:	80 e9       	ldi	r24, 0x90	; 144
     1c4:	c8 df       	rcall	.-112    	; 0x156 <LEDs_SetAllLEDs>
     1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <SetupHardware+0x66>
     1c8:	ee c2       	rjmp	.+1500   	; 0x7a6 <DataflashManager_ResetDataflashProtections>

000001ca <main>:
     1ca:	ca df       	rcall	.-108    	; 0x160 <SetupHardware>
     1cc:	80 e1       	ldi	r24, 0x10	; 16
     1ce:	c3 df       	rcall	.-122    	; 0x156 <LEDs_SetAllLEDs>
     1d0:	78 94       	sei
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	91 e0       	ldi	r25, 0x01	; 1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	0e 94 88 0b 	call	0x1710	; 0x1710 <MS_Device_USBTask>
     1da:	0e 94 10 0b 	call	0x1620	; 0x1620 <USB_USBTask>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1de:	f9 cf       	rjmp	.-14     	; 0x1d2 <main+0x8>

000001e0 <EVENT_USB_Device_Connect>:
     1e0:	80 ea       	ldi	r24, 0xA0	; 160
     1e2:	b9 cf       	rjmp	.-142    	; 0x156 <LEDs_SetAllLEDs>

000001e4 <EVENT_USB_Device_Disconnect>:
     1e4:	80 e1       	ldi	r24, 0x10	; 16
     1e6:	b7 cf       	rjmp	.-146    	; 0x156 <LEDs_SetAllLEDs>

000001e8 <EVENT_USB_Device_ConfigurationChanged>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	91 e0       	ldi	r25, 0x01	; 1
				break;
     1ec:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <MS_Device_ConfigureEndpoints>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f0:	88 23       	and	r24, r24
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <EVENT_USB_Device_ConfigurationChanged+0x10>
     1f4:	80 e6       	ldi	r24, 0x60	; 96
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x12>
     1f8:	80 e9       	ldi	r24, 0x90	; 144
     1fa:	ad cf       	rjmp	.-166    	; 0x156 <LEDs_SetAllLEDs>

000001fc <EVENT_USB_Device_ControlRequest>:
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <MS_Device_ProcessControlRequest>

00000204 <CALLBACK_MS_Device_SCSICommandReceived>:
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     204:	cf 93       	push	r28
				break;
     206:	df 93       	push	r29
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	ec 01       	movw	r28, r24
     20a:	80 e2       	ldi	r24, 0x20	; 32
     20c:	a4 df       	rcall	.-184    	; 0x156 <LEDs_SetAllLEDs>
     20e:	ce 01       	movw	r24, r28
     210:	86 d3       	rcall	.+1804   	; 0x91e <SCSI_DecodeSCSICommand>
     212:	c8 2f       	mov	r28, r24
     214:	80 e6       	ldi	r24, 0x60	; 96
     216:	9f df       	rcall	.-194    	; 0x156 <LEDs_SetAllLEDs>
     218:	8c 2f       	mov	r24, r28
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <CALLBACK_USB_GetDescriptor>:
     220:	29 2f       	mov	r18, r25
     222:	33 27       	eor	r19, r19
     224:	22 30       	cpi	r18, 0x02	; 2
     226:	31 05       	cpc	r19, r1
     228:	59 f0       	breq	.+22     	; 0x240 <CALLBACK_USB_GetDescriptor+0x20>
     22a:	23 30       	cpi	r18, 0x03	; 3
     22c:	31 05       	cpc	r19, r1
     22e:	69 f0       	breq	.+26     	; 0x24a <CALLBACK_USB_GetDescriptor+0x2a>
     230:	21 30       	cpi	r18, 0x01	; 1
     232:	31 05       	cpc	r19, r1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	f9 f4       	brne	.+62     	; 0x274 <CALLBACK_USB_GetDescriptor+0x54>
     236:	82 e1       	ldi	r24, 0x12	; 18
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	26 e0       	ldi	r18, 0x06	; 6
     23c:	31 e0       	ldi	r19, 0x01	; 1
     23e:	1e c0       	rjmp	.+60     	; 0x27c <CALLBACK_USB_GetDescriptor+0x5c>
     240:	80 e2       	ldi	r24, 0x20	; 32
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	26 ee       	ldi	r18, 0xE6	; 230
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	19 c0       	rjmp	.+50     	; 0x27c <CALLBACK_USB_GetDescriptor+0x5c>
     24a:	99 27       	eor	r25, r25
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	91 05       	cpc	r25, r1
     250:	41 f0       	breq	.+16     	; 0x262 <CALLBACK_USB_GetDescriptor+0x42>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	91 05       	cpc	r25, r1
     256:	41 f0       	breq	.+16     	; 0x268 <CALLBACK_USB_GetDescriptor+0x48>
     258:	89 2b       	or	r24, r25
     25a:	61 f4       	brne	.+24     	; 0x274 <CALLBACK_USB_GetDescriptor+0x54>
     25c:	e2 ee       	ldi	r30, 0xE2	; 226
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	05 c0       	rjmp	.+10     	; 0x26c <CALLBACK_USB_GetDescriptor+0x4c>
     262:	e8 ec       	ldi	r30, 0xC8	; 200
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <CALLBACK_USB_GetDescriptor+0x4c>
     268:	e8 e9       	ldi	r30, 0x98	; 152
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	84 91       	lpm	r24, Z
     26e:	90 e0       	ldi	r25, 0x00	; 0
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	9f 01       	movw	r18, r30
				break;
     272:	04 c0       	rjmp	.+8      	; 0x27c <CALLBACK_USB_GetDescriptor+0x5c>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	fa 01       	movw	r30, r20
     27e:	31 83       	std	Z+1, r19	; 0x01
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	20 83       	st	Z, r18
     282:	08 95       	ret

00000284 <Dataflash_ToggleSelectedChipCS>:
				break;
     284:	8e b1       	in	r24, 0x0e	; 14

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	9e b1       	in	r25, 0x0e	; 14
     288:	93 60       	ori	r25, 0x03	; 3
     28a:	9e b9       	out	0x0e, r25	; 14
     28c:	9e b1       	in	r25, 0x0e	; 14
     28e:	8c 6f       	ori	r24, 0xFC	; 252
				break;
     290:	93 60       	ori	r25, 0x03	; 3

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	89 23       	and	r24, r25
     294:	8e b9       	out	0x0e, r24	; 14
     296:	08 95       	ret

00000298 <Dataflash_WaitWhileBusy>:
     298:	f5 df       	rcall	.-22     	; 0x284 <Dataflash_ToggleSelectedChipCS>
     29a:	87 ed       	ldi	r24, 0xD7	; 215
     29c:	8e bd       	out	0x2e, r24	; 46
     29e:	0d b4       	in	r0, 0x2d	; 45
				break;
     2a0:	07 fe       	sbrs	r0, 7

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	fd cf       	rjmp	.-6      	; 0x29e <Dataflash_WaitWhileBusy+0x6>
     2a4:	1e bc       	out	0x2e, r1	; 46
     2a6:	0d b4       	in	r0, 0x2d	; 45
     2a8:	07 fe       	sbrs	r0, 7
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <Dataflash_WaitWhileBusy+0xe>
				break;
     2ac:	0e b4       	in	r0, 0x2e	; 46

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	f9 cf       	rjmp	.-14     	; 0x2a4 <Dataflash_WaitWhileBusy+0xc>
     2b2:	e8 cf       	rjmp	.-48     	; 0x284 <Dataflash_ToggleSelectedChipCS>

000002b4 <Dataflash_SendAddressBytes>:
     2b4:	9c 01       	movw	r18, r24
     2b6:	36 95       	lsr	r19
     2b8:	27 95       	ror	r18
     2ba:	56 e0       	ldi	r21, 0x06	; 6
				break;
     2bc:	96 95       	lsr	r25
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	87 95       	ror	r24
     2c0:	5a 95       	dec	r21
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <Dataflash_SendAddressBytes+0x8>
     2c4:	8e bd       	out	0x2e, r24	; 46
     2c6:	0d b4       	in	r0, 0x2d	; 45
     2c8:	07 fe       	sbrs	r0, 7
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <Dataflash_SendAddressBytes+0x12>
				break;
     2cc:	22 0f       	add	r18, r18
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	22 0f       	add	r18, r18
     2d0:	22 0f       	add	r18, r18
     2d2:	27 2b       	or	r18, r23
				break;
     2d4:	2e bd       	out	0x2e, r18	; 46

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	0d b4       	in	r0, 0x2d	; 45
     2d8:	07 fe       	sbrs	r0, 7
     2da:	fd cf       	rjmp	.-6      	; 0x2d6 <Dataflash_SendAddressBytes+0x22>

				if (ParserData->UsingReportIDs)
     2dc:	6e bd       	out	0x2e, r22	; 46
     2de:	0d b4       	in	r0, 0x2d	; 45
     2e0:	07 fe       	sbrs	r0, 7
     2e2:	fd cf       	rjmp	.-6      	; 0x2de <Dataflash_SendAddressBytes+0x2a>
     2e4:	08 95       	ret

000002e6 <Dataflash_SelectChipFromPage>:
     2e6:	2e b1       	in	r18, 0x0e	; 14
     2e8:	23 60       	ori	r18, 0x03	; 3
     2ea:	2e b9       	out	0x0e, r18	; 14
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	81 15       	cp	r24, r1
     2ee:	20 e4       	ldi	r18, 0x40	; 64
     2f0:	92 07       	cpc	r25, r18
     2f2:	50 f4       	brcc	.+20     	; 0x308 <Dataflash_SelectChipFromPage+0x22>
     2f4:	80 ff       	sbrs	r24, 0
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <Dataflash_SelectChipFromPage+0x1a>
     2f8:	8e b1       	in	r24, 0x0e	; 14
     2fa:	83 60       	ori	r24, 0x03	; 3
     2fc:	8d 7f       	andi	r24, 0xFD	; 253
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <Dataflash_SelectChipFromPage+0x20>
     300:	8e b1       	in	r24, 0x0e	; 14
     302:	83 60       	ori	r24, 0x03	; 3
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	8e 7f       	andi	r24, 0xFE	; 254
     306:	8e b9       	out	0x0e, r24	; 14
     308:	08 95       	ret

0000030a <DataflashManager_WriteBlocks>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	6c 01       	movw	r12, r24
     32c:	89 01       	movw	r16, r18
     32e:	4a 01       	movw	r8, r20
     330:	5b 01       	movw	r10, r22
     332:	f9 e0       	ldi	r31, 0x09	; 9
     334:	88 0c       	add	r8, r8
     336:	99 1c       	adc	r9, r9
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	aa 1c       	adc	r10, r10
     33a:	bb 1c       	adc	r11, r11
     33c:	fa 95       	dec	r31
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	d1 f7       	brne	.-12     	; 0x334 <DataflashManager_WriteBlocks+0x2a>
     340:	aa e0       	ldi	r26, 0x0A	; 10
     342:	b6 94       	lsr	r11
     344:	a7 94       	ror	r10
     346:	97 94       	ror	r9
     348:	87 94       	ror	r8
     34a:	aa 95       	dec	r26
     34c:	d1 f7       	brne	.-12     	; 0x342 <DataflashManager_WriteBlocks+0x38>
     34e:	e4 01       	movw	r28, r8
     350:	7a 01       	movw	r14, r20
     352:	fe 2c       	mov	r15, r14
     354:	ee 24       	eor	r14, r14
     356:	ff 0c       	add	r15, r15
     358:	ee 24       	eor	r14, r14
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	f8 22       	and	r15, r24
     35e:	c4 01       	movw	r24, r8
     360:	c2 df       	rcall	.-124    	; 0x2e6 <Dataflash_SelectChipFromPage>
     362:	83 e5       	ldi	r24, 0x53	; 83
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	8e bd       	out	0x2e, r24	; 46
     366:	0d b4       	in	r0, 0x2d	; 45
     368:	07 fe       	sbrs	r0, 7
     36a:	fd cf       	rjmp	.-6      	; 0x366 <DataflashManager_WriteBlocks+0x5c>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	c4 01       	movw	r24, r8
     372:	a0 df       	rcall	.-192    	; 0x2b4 <Dataflash_SendAddressBytes>
     374:	91 df       	rcall	.-222    	; 0x298 <Dataflash_WaitWhileBusy>
     376:	84 e8       	ldi	r24, 0x84	; 132

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	8e bd       	out	0x2e, r24	; 46
     37a:	0d b4       	in	r0, 0x2d	; 45
     37c:	07 fe       	sbrs	r0, 7
     37e:	fd cf       	rjmp	.-6      	; 0x37a <DataflashManager_WriteBlocks+0x70>
     380:	b7 01       	movw	r22, r14
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	96 df       	rcall	.-212    	; 0x2b4 <Dataflash_SendAddressBytes>
				break;
     388:	58 d6       	rcall	.+3248   	; 0x103a <Endpoint_WaitUntilReady>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	81 11       	cpse	r24, r1
     38c:	ec c0       	rjmp	.+472    	; 0x566 <DataflashManager_WriteBlocks+0x25c>
     38e:	74 e0       	ldi	r23, 0x04	; 4
     390:	f6 94       	lsr	r15
     392:	e7 94       	ror	r14
     394:	7a 95       	dec	r23
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	e1 f7       	brne	.-8      	; 0x390 <DataflashManager_WriteBlocks+0x86>
     398:	38 01       	movw	r6, r16
     39a:	e5 e0       	ldi	r30, 0x05	; 5
     39c:	66 0c       	add	r6, r6
     39e:	77 1c       	adc	r7, r7
     3a0:	ea 95       	dec	r30
     3a2:	e1 f7       	brne	.-8      	; 0x39c <DataflashManager_WriteBlocks+0x92>
     3a4:	a1 2c       	mov	r10, r1
     3a6:	b1 2c       	mov	r11, r1
     3a8:	f1 2c       	mov	r15, r1
     3aa:	44 24       	eor	r4, r4
     3ac:	43 94       	inc	r4
     3ae:	01 15       	cp	r16, r1
				break;
     3b0:	11 05       	cpc	r17, r1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <DataflashManager_WriteBlocks+0xac>
     3b4:	bd c0       	rjmp	.+378    	; 0x530 <DataflashManager_WriteBlocks+0x226>
     3b6:	45 01       	movw	r8, r10
     3b8:	86 0c       	add	r8, r6
     3ba:	97 1c       	adc	r9, r7
     3bc:	60 e2       	ldi	r22, 0x20	; 32
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	56 2e       	mov	r5, r22
     3c0:	80 91 e8 00 	lds	r24, 0x00E8
     3c4:	85 ff       	sbrs	r24, 5
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <DataflashManager_WriteBlocks+0xc6>
     3c8:	e0 e4       	ldi	r30, 0x40	; 64
     3ca:	ee 12       	cpse	r14, r30
     3cc:	43 c0       	rjmp	.+134    	; 0x454 <DataflashManager_WriteBlocks+0x14a>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <DataflashManager_WriteBlocks+0xd8>
     3d0:	80 91 e8 00 	lds	r24, 0x00E8

					while (CurrCollectionPath->Parent != NULL)
     3d4:	8b 77       	andi	r24, 0x7B	; 123
     3d6:	80 93 e8 00 	sts	0x00E8, r24
     3da:	2f d6       	rcall	.+3166   	; 0x103a <Endpoint_WaitUntilReady>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	88 23       	and	r24, r24
     3de:	a1 f3       	breq	.-24     	; 0x3c8 <DataflashManager_WriteBlocks+0xbe>
     3e0:	c2 c0       	rjmp	.+388    	; 0x566 <DataflashManager_WriteBlocks+0x25c>
     3e2:	5a df       	rcall	.-332    	; 0x298 <Dataflash_WaitWhileBusy>
     3e4:	ff 20       	and	r15, r15
     3e6:	11 f0       	breq	.+4      	; 0x3ec <DataflashManager_WriteBlocks+0xe2>
     3e8:	86 e8       	ldi	r24, 0x86	; 134
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <DataflashManager_WriteBlocks+0xe4>
     3ec:	83 e8       	ldi	r24, 0x83	; 131
     3ee:	8e bd       	out	0x2e, r24	; 46
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	0d b4       	in	r0, 0x2d	; 45
     3f2:	07 fe       	sbrs	r0, 7
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <DataflashManager_WriteBlocks+0xe6>
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	ce 01       	movw	r24, r28
     3fc:	5b df       	rcall	.-330    	; 0x2b4 <Dataflash_SendAddressBytes>
     3fe:	21 96       	adiw	r28, 0x01	; 1
     400:	8e b1       	in	r24, 0x0e	; 14
     402:	80 95       	com	r24
     404:	83 70       	andi	r24, 0x03	; 3
     406:	82 30       	cpi	r24, 0x02	; 2
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	09 f4       	brne	.+2      	; 0x40c <DataflashManager_WriteBlocks+0x102>
     40a:	f4 24       	eor	r15, r4
     40c:	ce 01       	movw	r24, r28
     40e:	6b df       	rcall	.-298    	; 0x2e6 <Dataflash_SelectChipFromPage>
     410:	f0 e4       	ldi	r31, 0x40	; 64
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	8f 16       	cp	r8, r31
     414:	91 04       	cpc	r9, r1
     416:	78 f4       	brcc	.+30     	; 0x436 <DataflashManager_WriteBlocks+0x12c>
     418:	3f df       	rcall	.-386    	; 0x298 <Dataflash_WaitWhileBusy>
     41a:	ff 20       	and	r15, r15
     41c:	11 f0       	breq	.+4      	; 0x422 <DataflashManager_WriteBlocks+0x118>
     41e:	85 e5       	ldi	r24, 0x55	; 85

				if (UsageListSize)
     420:	01 c0       	rjmp	.+2      	; 0x424 <DataflashManager_WriteBlocks+0x11a>
     422:	83 e5       	ldi	r24, 0x53	; 83
     424:	8e bd       	out	0x2e, r24	; 46
     426:	0d b4       	in	r0, 0x2d	; 45
     428:	07 fe       	sbrs	r0, 7
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	fd cf       	rjmp	.-6      	; 0x426 <DataflashManager_WriteBlocks+0x11c>
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	ce 01       	movw	r24, r28
     432:	40 df       	rcall	.-384    	; 0x2b4 <Dataflash_SendAddressBytes>
     434:	31 df       	rcall	.-414    	; 0x298 <Dataflash_WaitWhileBusy>
     436:	ff 20       	and	r15, r15
     438:	11 f0       	breq	.+4      	; 0x43e <DataflashManager_WriteBlocks+0x134>
     43a:	87 e8       	ldi	r24, 0x87	; 135
     43c:	01 c0       	rjmp	.+2      	; 0x440 <DataflashManager_WriteBlocks+0x136>
     43e:	84 e8       	ldi	r24, 0x84	; 132

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	8e bd       	out	0x2e, r24	; 46
     442:	0d b4       	in	r0, 0x2d	; 45
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <DataflashManager_WriteBlocks+0x138>
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	31 df       	rcall	.-414    	; 0x2b4 <Dataflash_SendAddressBytes>
     452:	e1 2c       	mov	r14, r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	80 91 f1 00 	lds	r24, 0x00F1
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	8e bd       	out	0x2e, r24	; 46
     45a:	0d b4       	in	r0, 0x2d	; 45
     45c:	07 fe       	sbrs	r0, 7
     45e:	fd cf       	rjmp	.-6      	; 0x45a <DataflashManager_WriteBlocks+0x150>
     460:	80 91 f1 00 	lds	r24, 0x00F1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     464:	8e bd       	out	0x2e, r24	; 46
     466:	0d b4       	in	r0, 0x2d	; 45
     468:	07 fe       	sbrs	r0, 7
     46a:	fd cf       	rjmp	.-6      	; 0x466 <DataflashManager_WriteBlocks+0x15c>
     46c:	80 91 f1 00 	lds	r24, 0x00F1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     470:	8e bd       	out	0x2e, r24	; 46
     472:	0d b4       	in	r0, 0x2d	; 45
     474:	07 fe       	sbrs	r0, 7
     476:	fd cf       	rjmp	.-6      	; 0x472 <DataflashManager_WriteBlocks+0x168>
     478:	80 91 f1 00 	lds	r24, 0x00F1
     47c:	8e bd       	out	0x2e, r24	; 46
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <DataflashManager_WriteBlocks+0x174>
     484:	80 91 f1 00 	lds	r24, 0x00F1
     488:	8e bd       	out	0x2e, r24	; 46
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	0d b4       	in	r0, 0x2d	; 45
     48c:	07 fe       	sbrs	r0, 7
     48e:	fd cf       	rjmp	.-6      	; 0x48a <DataflashManager_WriteBlocks+0x180>
     490:	80 91 f1 00 	lds	r24, 0x00F1
     494:	8e bd       	out	0x2e, r24	; 46
     496:	0d b4       	in	r0, 0x2d	; 45
     498:	07 fe       	sbrs	r0, 7
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	fd cf       	rjmp	.-6      	; 0x496 <DataflashManager_WriteBlocks+0x18c>
     49c:	80 91 f1 00 	lds	r24, 0x00F1
     4a0:	8e bd       	out	0x2e, r24	; 46
     4a2:	0d b4       	in	r0, 0x2d	; 45
     4a4:	07 fe       	sbrs	r0, 7
     4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <DataflashManager_WriteBlocks+0x198>
     4a8:	80 91 f1 00 	lds	r24, 0x00F1
				break;
     4ac:	8e bd       	out	0x2e, r24	; 46
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	0d b4       	in	r0, 0x2d	; 45
     4b0:	07 fe       	sbrs	r0, 7
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <DataflashManager_WriteBlocks+0x1a4>
     4b4:	80 91 f1 00 	lds	r24, 0x00F1
     4b8:	8e bd       	out	0x2e, r24	; 46
     4ba:	0d b4       	in	r0, 0x2d	; 45
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <DataflashManager_WriteBlocks+0x1b0>
     4c0:	80 91 f1 00 	lds	r24, 0x00F1
     4c4:	8e bd       	out	0x2e, r24	; 46
     4c6:	0d b4       	in	r0, 0x2d	; 45
     4c8:	07 fe       	sbrs	r0, 7
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <DataflashManager_WriteBlocks+0x1bc>
     4cc:	80 91 f1 00 	lds	r24, 0x00F1
     4d0:	8e bd       	out	0x2e, r24	; 46
     4d2:	0d b4       	in	r0, 0x2d	; 45
     4d4:	07 fe       	sbrs	r0, 7
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <DataflashManager_WriteBlocks+0x1c8>
     4d8:	80 91 f1 00 	lds	r24, 0x00F1
     4dc:	8e bd       	out	0x2e, r24	; 46
     4de:	0d b4       	in	r0, 0x2d	; 45
     4e0:	07 fe       	sbrs	r0, 7
     4e2:	fd cf       	rjmp	.-6      	; 0x4de <DataflashManager_WriteBlocks+0x1d4>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	80 91 f1 00 	lds	r24, 0x00F1
     4e8:	8e bd       	out	0x2e, r24	; 46
     4ea:	0d b4       	in	r0, 0x2d	; 45
     4ec:	07 fe       	sbrs	r0, 7
     4ee:	fd cf       	rjmp	.-6      	; 0x4ea <DataflashManager_WriteBlocks+0x1e0>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	80 91 f1 00 	lds	r24, 0x00F1
     4f4:	8e bd       	out	0x2e, r24	; 46
     4f6:	0d b4       	in	r0, 0x2d	; 45
     4f8:	07 fe       	sbrs	r0, 7
     4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <DataflashManager_WriteBlocks+0x1ec>
     4fc:	80 91 f1 00 	lds	r24, 0x00F1
     500:	8e bd       	out	0x2e, r24	; 46
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	0d b4       	in	r0, 0x2d	; 45
     504:	07 fe       	sbrs	r0, 7
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	fd cf       	rjmp	.-6      	; 0x502 <DataflashManager_WriteBlocks+0x1f8>
     508:	80 91 f1 00 	lds	r24, 0x00F1
     50c:	8e bd       	out	0x2e, r24	; 46
     50e:	0d b4       	in	r0, 0x2d	; 45
     510:	07 fe       	sbrs	r0, 7
     512:	fd cf       	rjmp	.-6      	; 0x50e <DataflashManager_WriteBlocks+0x204>
     514:	e3 94       	inc	r14
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	f6 01       	movw	r30, r12
     518:	80 ad       	ldd	r24, Z+56	; 0x38
     51a:	81 11       	cpse	r24, r1
     51c:	24 c0       	rjmp	.+72     	; 0x566 <DataflashManager_WriteBlocks+0x25c>

					if (UsageListSize)
     51e:	5a 94       	dec	r5
     520:	09 f0       	breq	.+2      	; 0x524 <DataflashManager_WriteBlocks+0x21a>
     522:	4e cf       	rjmp	.-356    	; 0x3c0 <DataflashManager_WriteBlocks+0xb6>
     524:	01 50       	subi	r16, 0x01	; 1
     526:	11 09       	sbc	r17, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	f0 e2       	ldi	r31, 0x20	; 32
     52a:	af 1a       	sub	r10, r31
     52c:	b1 08       	sbc	r11, r1
     52e:	3f cf       	rjmp	.-386    	; 0x3ae <DataflashManager_WriteBlocks+0xa4>
     530:	b3 de       	rcall	.-666    	; 0x298 <Dataflash_WaitWhileBusy>
     532:	ff 20       	and	r15, r15
     534:	11 f0       	breq	.+4      	; 0x53a <DataflashManager_WriteBlocks+0x230>
     536:	86 e8       	ldi	r24, 0x86	; 134
     538:	01 c0       	rjmp	.+2      	; 0x53c <DataflashManager_WriteBlocks+0x232>
     53a:	83 e8       	ldi	r24, 0x83	; 131
     53c:	8e bd       	out	0x2e, r24	; 46

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	0d b4       	in	r0, 0x2d	; 45
     540:	07 fe       	sbrs	r0, 7
     542:	fd cf       	rjmp	.-6      	; 0x53e <DataflashManager_WriteBlocks+0x234>
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	ce 01       	movw	r24, r28
						  UsageList[i - 1] = UsageList[i];
     54a:	b4 de       	rcall	.-664    	; 0x2b4 <Dataflash_SendAddressBytes>
     54c:	a5 de       	rcall	.-694    	; 0x298 <Dataflash_WaitWhileBusy>
     54e:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	85 fd       	sbrc	r24, 5
     554:	05 c0       	rjmp	.+10     	; 0x560 <DataflashManager_WriteBlocks+0x256>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	80 91 e8 00 	lds	r24, 0x00E8
     55a:	8b 77       	andi	r24, 0x7B	; 123
     55c:	80 93 e8 00 	sts	0x00E8, r24
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	8e b1       	in	r24, 0x0e	; 14
     562:	83 60       	ori	r24, 0x03	; 3
     564:	8e b9       	out	0x0e, r24	; 14
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	8f 90       	pop	r8
     57e:	7f 90       	pop	r7
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	6f 90       	pop	r6
     582:	5f 90       	pop	r5
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	4f 90       	pop	r4
     586:	08 95       	ret

00000588 <DataflashManager_ReadBlocks>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	8f 92       	push	r8
     58a:	9f 92       	push	r9
     58c:	af 92       	push	r10
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	bf 92       	push	r11
     590:	cf 92       	push	r12

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	df 92       	push	r13
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	6c 01       	movw	r12, r24
     5a2:	79 01       	movw	r14, r18
     5a4:	4a 01       	movw	r8, r20
     5a6:	5b 01       	movw	r10, r22
     5a8:	29 e0       	ldi	r18, 0x09	; 9
     5aa:	88 0c       	add	r8, r8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	99 1c       	adc	r9, r9
     5ae:	aa 1c       	adc	r10, r10
     5b0:	bb 1c       	adc	r11, r11
     5b2:	2a 95       	dec	r18
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <DataflashManager_ReadBlocks+0x22>
     5b6:	3a e0       	ldi	r19, 0x0A	; 10
     5b8:	b6 94       	lsr	r11
     5ba:	a7 94       	ror	r10

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	97 94       	ror	r9
     5be:	87 94       	ror	r8
     5c0:	3a 95       	dec	r19
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <DataflashManager_ReadBlocks+0x30>
     5c4:	e4 01       	movw	r28, r8
     5c6:	8a 01       	movw	r16, r20
     5c8:	10 2f       	mov	r17, r16
     5ca:	00 27       	eor	r16, r16
     5cc:	11 0f       	add	r17, r17
     5ce:	00 27       	eor	r16, r16
     5d0:	12 70       	andi	r17, 0x02	; 2
     5d2:	c4 01       	movw	r24, r8
     5d4:	88 de       	rcall	.-752    	; 0x2e6 <Dataflash_SelectChipFromPage>
     5d6:	82 ed       	ldi	r24, 0xD2	; 210
     5d8:	8e bd       	out	0x2e, r24	; 46
     5da:	0d b4       	in	r0, 0x2d	; 45
     5dc:	07 fe       	sbrs	r0, 7
     5de:	fd cf       	rjmp	.-6      	; 0x5da <DataflashManager_ReadBlocks+0x52>
     5e0:	b8 01       	movw	r22, r16
     5e2:	c4 01       	movw	r24, r8
     5e4:	67 de       	rcall	.-818    	; 0x2b4 <Dataflash_SendAddressBytes>
     5e6:	1e bc       	out	0x2e, r1	; 46
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <DataflashManager_ReadBlocks+0x60>
     5ee:	1e bc       	out	0x2e, r1	; 46
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_ReadBlocks+0x68>
     5f6:	1e bc       	out	0x2e, r1	; 46
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <DataflashManager_ReadBlocks+0x70>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	1e bc       	out	0x2e, r1	; 46
     600:	0d b4       	in	r0, 0x2d	; 45

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	07 fe       	sbrs	r0, 7
     604:	fd cf       	rjmp	.-6      	; 0x600 <DataflashManager_ReadBlocks+0x78>
     606:	19 d5       	rcall	.+2610   	; 0x103a <Endpoint_WaitUntilReady>
     608:	81 11       	cpse	r24, r1
     60a:	c0 c0       	rjmp	.+384    	; 0x78c <DataflashManager_ReadBlocks+0x204>
     60c:	84 e0       	ldi	r24, 0x04	; 4
     60e:	16 95       	lsr	r17
     610:	07 95       	ror	r16
     612:	8a 95       	dec	r24
     614:	e1 f7       	brne	.-8      	; 0x60e <DataflashManager_ReadBlocks+0x86>
     616:	92 ed       	ldi	r25, 0xD2	; 210
     618:	b9 2e       	mov	r11, r25
     61a:	e1 14       	cp	r14, r1
     61c:	f1 04       	cpc	r15, r1
     61e:	09 f4       	brne	.+2      	; 0x622 <DataflashManager_ReadBlocks+0x9a>
     620:	a9 c0       	rjmp	.+338    	; 0x774 <DataflashManager_ReadBlocks+0x1ec>
     622:	10 e2       	ldi	r17, 0x20	; 32
     624:	80 91 e8 00 	lds	r24, 0x00E8
     628:	85 ff       	sbrs	r24, 5
     62a:	07 c0       	rjmp	.+14     	; 0x63a <DataflashManager_ReadBlocks+0xb2>
     62c:	00 34       	cpi	r16, 0x40	; 64
     62e:	31 f5       	brne	.+76     	; 0x67c <DataflashManager_ReadBlocks+0xf4>
     630:	21 96       	adiw	r28, 0x01	; 1
     632:	ce 01       	movw	r24, r28
     634:	58 de       	rcall	.-848    	; 0x2e6 <Dataflash_SelectChipFromPage>
     636:	be bc       	out	0x2e, r11	; 46
     638:	09 c0       	rjmp	.+18     	; 0x64c <DataflashManager_ReadBlocks+0xc4>
     63a:	80 91 e8 00 	lds	r24, 0x00E8
     63e:	8e 77       	andi	r24, 0x7E	; 126
     640:	80 93 e8 00 	sts	0x00E8, r24
     644:	fa d4       	rcall	.+2548   	; 0x103a <Endpoint_WaitUntilReady>
     646:	88 23       	and	r24, r24
     648:	89 f3       	breq	.-30     	; 0x62c <DataflashManager_ReadBlocks+0xa4>
     64a:	a0 c0       	rjmp	.+320    	; 0x78c <DataflashManager_ReadBlocks+0x204>
     64c:	0d b4       	in	r0, 0x2d	; 45
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <DataflashManager_ReadBlocks+0xc4>
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	ce 01       	movw	r24, r28
     658:	2d de       	rcall	.-934    	; 0x2b4 <Dataflash_SendAddressBytes>
     65a:	1e bc       	out	0x2e, r1	; 46
     65c:	0d b4       	in	r0, 0x2d	; 45
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <DataflashManager_ReadBlocks+0xd4>
     662:	1e bc       	out	0x2e, r1	; 46
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <DataflashManager_ReadBlocks+0xdc>
     66a:	1e bc       	out	0x2e, r1	; 46
     66c:	0d b4       	in	r0, 0x2d	; 45
     66e:	07 fe       	sbrs	r0, 7
     670:	fd cf       	rjmp	.-6      	; 0x66c <DataflashManager_ReadBlocks+0xe4>
     672:	1e bc       	out	0x2e, r1	; 46
     674:	0d b4       	in	r0, 0x2d	; 45
     676:	07 fe       	sbrs	r0, 7
     678:	fd cf       	rjmp	.-6      	; 0x674 <DataflashManager_ReadBlocks+0xec>
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	1e bc       	out	0x2e, r1	; 46
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <DataflashManager_ReadBlocks+0xf6>
     684:	8e b5       	in	r24, 0x2e	; 46
     686:	80 93 f1 00 	sts	0x00F1, r24
					  ParserData->TotalReportItems++;
     68a:	1e bc       	out	0x2e, r1	; 46
     68c:	0d b4       	in	r0, 0x2d	; 45
     68e:	07 fe       	sbrs	r0, 7
     690:	fd cf       	rjmp	.-6      	; 0x68c <DataflashManager_ReadBlocks+0x104>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	8e b5       	in	r24, 0x2e	; 46
     694:	80 93 f1 00 	sts	0x00F1, r24
     698:	1e bc       	out	0x2e, r1	; 46
     69a:	0d b4       	in	r0, 0x2d	; 45
     69c:	07 fe       	sbrs	r0, 7
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	fd cf       	rjmp	.-6      	; 0x69a <DataflashManager_ReadBlocks+0x112>
     6a0:	8e b5       	in	r24, 0x2e	; 46
     6a2:	80 93 f1 00 	sts	0x00F1, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a6:	1e bc       	out	0x2e, r1	; 46
     6a8:	0d b4       	in	r0, 0x2d	; 45
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	07 fe       	sbrs	r0, 7
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <DataflashManager_ReadBlocks+0x120>
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	80 93 f1 00 	sts	0x00F1, r24
		}
	}

	if (!(ParserData->TotalReportItems))
     6b4:	1e bc       	out	0x2e, r1	; 46
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <DataflashManager_ReadBlocks+0x12e>
     6bc:	8e b5       	in	r24, 0x2e	; 46

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	80 93 f1 00 	sts	0x00F1, r24
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	1e bc       	out	0x2e, r1	; 46
     6c4:	0d b4       	in	r0, 0x2d	; 45
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	07 fe       	sbrs	r0, 7
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <DataflashManager_ReadBlocks+0x13c>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	8e b5       	in	r24, 0x2e	; 46
     6cc:	80 93 f1 00 	sts	0x00F1, r24

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6d0:	1e bc       	out	0x2e, r1	; 46
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	0d b4       	in	r0, 0x2d	; 45
     6d4:	07 fe       	sbrs	r0, 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <DataflashManager_ReadBlocks+0x14a>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	8e b5       	in	r24, 0x2e	; 46
     6da:	80 93 f1 00 	sts	0x00F1, r24
     6de:	1e bc       	out	0x2e, r1	; 46
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <DataflashManager_ReadBlocks+0x158>
     6e6:	8e b5       	in	r24, 0x2e	; 46
     6e8:	80 93 f1 00 	sts	0x00F1, r24
     6ec:	1e bc       	out	0x2e, r1	; 46
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <DataflashManager_ReadBlocks+0x166>
     6f4:	8e b5       	in	r24, 0x2e	; 46
     6f6:	80 93 f1 00 	sts	0x00F1, r24
     6fa:	1e bc       	out	0x2e, r1	; 46
     6fc:	0d b4       	in	r0, 0x2d	; 45
     6fe:	07 fe       	sbrs	r0, 7
     700:	fd cf       	rjmp	.-6      	; 0x6fc <DataflashManager_ReadBlocks+0x174>
     702:	8e b5       	in	r24, 0x2e	; 46
     704:	80 93 f1 00 	sts	0x00F1, r24
     708:	1e bc       	out	0x2e, r1	; 46
     70a:	0d b4       	in	r0, 0x2d	; 45
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     70c:	07 fe       	sbrs	r0, 7
				return SPDR;
     70e:	fd cf       	rjmp	.-6      	; 0x70a <DataflashManager_ReadBlocks+0x182>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     710:	8e b5       	in	r24, 0x2e	; 46
     712:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     716:	1e bc       	out	0x2e, r1	; 46
     718:	0d b4       	in	r0, 0x2d	; 45
     71a:	07 fe       	sbrs	r0, 7
				return SPDR;
     71c:	fd cf       	rjmp	.-6      	; 0x718 <DataflashManager_ReadBlocks+0x190>
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     724:	1e bc       	out	0x2e, r1	; 46
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
				return SPDR;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_ReadBlocks+0x19e>
     72c:	8e b5       	in	r24, 0x2e	; 46
     72e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     732:	1e bc       	out	0x2e, r1	; 46
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
				return SPDR;
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_ReadBlocks+0x1ac>
     73a:	8e b5       	in	r24, 0x2e	; 46
     73c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     740:	1e bc       	out	0x2e, r1	; 46
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
				return SPDR;
     746:	fd cf       	rjmp	.-6      	; 0x742 <DataflashManager_ReadBlocks+0x1ba>
     748:	8e b5       	in	r24, 0x2e	; 46
     74a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     74e:	1e bc       	out	0x2e, r1	; 46
     750:	0d b4       	in	r0, 0x2d	; 45
     752:	07 fe       	sbrs	r0, 7
				return SPDR;
     754:	fd cf       	rjmp	.-6      	; 0x750 <DataflashManager_ReadBlocks+0x1c8>
     756:	8e b5       	in	r24, 0x2e	; 46
     758:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     75c:	0f 5f       	subi	r16, 0xFF	; 255
     75e:	f6 01       	movw	r30, r12
     760:	80 ad       	ldd	r24, Z+56	; 0x38
				return SPDR;
     762:	81 11       	cpse	r24, r1
     764:	13 c0       	rjmp	.+38     	; 0x78c <DataflashManager_ReadBlocks+0x204>
     766:	11 50       	subi	r17, 0x01	; 1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     768:	09 f0       	breq	.+2      	; 0x76c <DataflashManager_ReadBlocks+0x1e4>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     76a:	5c cf       	rjmp	.-328    	; 0x624 <DataflashManager_ReadBlocks+0x9c>
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	ef 1a       	sub	r14, r31
     770:	f1 08       	sbc	r15, r1
     772:	53 cf       	rjmp	.-346    	; 0x61a <DataflashManager_ReadBlocks+0x92>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     774:	80 91 e8 00 	lds	r24, 0x00E8
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     778:	85 fd       	sbrc	r24, 5
     77a:	05 c0       	rjmp	.+10     	; 0x786 <DataflashManager_ReadBlocks+0x1fe>
     77c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     780:	8e 77       	andi	r24, 0x7E	; 126
     782:	80 93 e8 00 	sts	0x00E8, r24
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     786:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     788:	83 60       	ori	r24, 0x03	; 3
     78a:	8e b9       	out	0x0e, r24	; 14
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	08 95       	ret

000007a6 <DataflashManager_ResetDataflashProtections>:
     7a6:	8e b1       	in	r24, 0x0e	; 14
     7a8:	83 60       	ori	r24, 0x03	; 3
     7aa:	8e 7f       	andi	r24, 0xFE	; 254
     7ac:	8e b9       	out	0x0e, r24	; 14
     7ae:	87 ed       	ldi	r24, 0xD7	; 215
     7b0:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     7b2:	0d b4       	in	r0, 0x2d	; 45
     7b4:	07 fe       	sbrs	r0, 7
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7b8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ba:	0d b4       	in	r0, 0x2d	; 45
     7bc:	07 fe       	sbrs	r0, 7
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7c0:	0e b4       	in	r0, 0x2e	; 46
     7c2:	01 fc       	sbrc	r0, 1
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <DataflashManager_ResetDataflashProtections+0x2e>
     7c6:	8e b1       	in	r24, 0x0e	; 14
     7c8:	83 60       	ori	r24, 0x03	; 3
     7ca:	8d 7f       	andi	r24, 0xFD	; 253
     7cc:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ce:	87 ed       	ldi	r24, 0xD7	; 215
     7d0:	8e bd       	out	0x2e, r24	; 46
     7d2:	16 c0       	rjmp	.+44     	; 0x800 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     7d4:	57 dd       	rcall	.-1362   	; 0x284 <Dataflash_ToggleSelectedChipCS>
     7d6:	8d e3       	ldi	r24, 0x3D	; 61
     7d8:	8e bd       	out	0x2e, r24	; 46
     7da:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <DataflashManager_ResetDataflashProtections+0x34>
     7e0:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e2:	8e bd       	out	0x2e, r24	; 46
     7e4:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7e6:	07 fe       	sbrs	r0, 7
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <DataflashManager_ResetDataflashProtections+0x3e>
     7ea:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ec:	8e bd       	out	0x2e, r24	; 46
     7ee:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7f0:	07 fe       	sbrs	r0, 7
     7f2:	fd cf       	rjmp	.-6      	; 0x7ee <DataflashManager_ResetDataflashProtections+0x48>
     7f4:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f6:	8e bd       	out	0x2e, r24	; 46
     7f8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_ResetDataflashProtections+0x52>
     7fe:	e3 cf       	rjmp	.-58     	; 0x7c6 <DataflashManager_ResetDataflashProtections+0x20>
     800:	0d b4       	in	r0, 0x2d	; 45
     802:	07 fe       	sbrs	r0, 7
     804:	fd cf       	rjmp	.-6      	; 0x800 <DataflashManager_ResetDataflashProtections+0x5a>
     806:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     808:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     80a:	07 fe       	sbrs	r0, 7
     80c:	fd cf       	rjmp	.-6      	; 0x808 <DataflashManager_ResetDataflashProtections+0x62>
     80e:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     810:	01 fc       	sbrc	r0, 1
     812:	04 c0       	rjmp	.+8      	; 0x81c <DataflashManager_ResetDataflashProtections+0x76>
     814:	8e b1       	in	r24, 0x0e	; 14
     816:	83 60       	ori	r24, 0x03	; 3
     818:	8e b9       	out	0x0e, r24	; 14
     81a:	08 95       	ret
     81c:	33 dd       	rcall	.-1434   	; 0x284 <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     81e:	8d e3       	ldi	r24, 0x3D	; 61
     820:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     822:	0d b4       	in	r0, 0x2d	; 45
     824:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     826:	fd cf       	rjmp	.-6      	; 0x822 <DataflashManager_ResetDataflashProtections+0x7c>
     828:	8a e2       	ldi	r24, 0x2A	; 42
     82a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82c:	0d b4       	in	r0, 0x2d	; 45
     82e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     830:	fd cf       	rjmp	.-6      	; 0x82c <DataflashManager_ResetDataflashProtections+0x86>
     832:	8f e7       	ldi	r24, 0x7F	; 127
     834:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     836:	0d b4       	in	r0, 0x2d	; 45
     838:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     83a:	fd cf       	rjmp	.-6      	; 0x836 <DataflashManager_ResetDataflashProtections+0x90>
     83c:	8a e9       	ldi	r24, 0x9A	; 154
     83e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     840:	0d b4       	in	r0, 0x2d	; 45
     842:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     844:	fd cf       	rjmp	.-6      	; 0x840 <DataflashManager_ResetDataflashProtections+0x9a>
     846:	e6 cf       	rjmp	.-52     	; 0x814 <DataflashManager_ResetDataflashProtections+0x6e>

00000848 <DataflashManager_CheckDataflashOperation>:
     848:	8e b1       	in	r24, 0x0e	; 14
     84a:	83 60       	ori	r24, 0x03	; 3
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     850:	8f e9       	ldi	r24, 0x9F	; 159
     852:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     854:	0d b4       	in	r0, 0x2d	; 45
     856:	07 fe       	sbrs	r0, 7
     858:	fd cf       	rjmp	.-6      	; 0x854 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     85a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
     860:	fd cf       	rjmp	.-6      	; 0x85c <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     862:	9e b5       	in	r25, 0x2e	; 46
     864:	8e b1       	in	r24, 0x0e	; 14
     866:	83 60       	ori	r24, 0x03	; 3
     868:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     86a:	9f 31       	cpi	r25, 0x1F	; 31
     86c:	a1 f4       	brne	.+40     	; 0x896 <DataflashManager_CheckDataflashOperation+0x4e>
     86e:	8e b1       	in	r24, 0x0e	; 14
     870:	83 60       	ori	r24, 0x03	; 3
     872:	8d 7f       	andi	r24, 0xFD	; 253
     874:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     876:	8f e9       	ldi	r24, 0x9F	; 159
     878:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     87a:	0d b4       	in	r0, 0x2d	; 45
     87c:	07 fe       	sbrs	r0, 7
     87e:	fd cf       	rjmp	.-6      	; 0x87a <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     880:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     882:	0d b4       	in	r0, 0x2d	; 45
     884:	07 fe       	sbrs	r0, 7
     886:	fd cf       	rjmp	.-6      	; 0x882 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     888:	9e b5       	in	r25, 0x2e	; 46
     88a:	8e b1       	in	r24, 0x0e	; 14
     88c:	83 60       	ori	r24, 0x03	; 3
     88e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	9f 31       	cpi	r25, 0x1F	; 31
     894:	09 f0       	breq	.+2      	; 0x898 <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     896:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     898:	08 95       	ret

0000089a <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	ec 01       	movw	r28, r24
     8a4:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     8a6:	48 a1       	ldd	r20, Y+32	; 0x20
     8a8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     8aa:	6e 8d       	ldd	r22, Y+30	; 0x1e
     8ac:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8ae:	0b a1       	ldd	r16, Y+35	; 0x23
     8b0:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     8b2:	41 15       	cp	r20, r1
     8b4:	90 e8       	ldi	r25, 0x80	; 128
     8b6:	59 07       	cpc	r21, r25
     8b8:	61 05       	cpc	r22, r1
     8ba:	71 05       	cpc	r23, r1
     8bc:	68 f0       	brcs	.+26     	; 0x8d8 <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8be:	80 91 3b 01 	lds	r24, 0x013B
     8c2:	80 7f       	andi	r24, 0xF0	; 240
     8c4:	85 60       	ori	r24, 0x05	; 5
     8c6:	80 93 3b 01 	sts	0x013B, r24
     8ca:	81 e2       	ldi	r24, 0x21	; 33
     8cc:	80 93 45 01 	sts	0x0145, r24
     8d0:	10 92 46 01 	sts	0x0146, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	1e c0       	rjmp	.+60     	; 0x914 <SCSI_Command_ReadWrite_10+0x7a>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8d8:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     8da:	88 23       	and	r24, r24
     8dc:	19 f0       	breq	.+6      	; 0x8e4 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8de:	ce 01       	movw	r24, r28
     8e0:	53 de       	rcall	.-858    	; 0x588 <DataflashManager_ReadBlocks>
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <SCSI_Command_ReadWrite_10+0x4e>
     8e4:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8e6:	11 dd       	rcall	.-1502   	; 0x30a <DataflashManager_WriteBlocks>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	00 0f       	add	r16, r16
     8f0:	11 1f       	adc	r17, r17
     8f2:	22 1f       	adc	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	8a 95       	dec	r24
     8f8:	d1 f7       	brne	.-12     	; 0x8ee <SCSI_Command_ReadWrite_10+0x54>
     8fa:	4c 89       	ldd	r20, Y+20	; 0x14
     8fc:	5d 89       	ldd	r21, Y+21	; 0x15
     8fe:	6e 89       	ldd	r22, Y+22	; 0x16
     900:	7f 89       	ldd	r23, Y+23	; 0x17
     902:	40 1b       	sub	r20, r16
     904:	51 0b       	sbc	r21, r17
     906:	62 0b       	sbc	r22, r18
     908:	73 0b       	sbc	r23, r19
     90a:	4c 8b       	std	Y+20, r20	; 0x14
     90c:	5d 8b       	std	Y+21, r21	; 0x15
     90e:	6e 8b       	std	Y+22, r22	; 0x16
     910:	7f 8b       	std	Y+23, r23	; 0x17
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	df 91       	pop	r29

	return true;
     916:	cf 91       	pop	r28
}
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <SCSI_DecodeSCSICommand>:
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	28 97       	sbiw	r28, 0x08	; 8
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     940:	fc 01       	movw	r30, r24
     942:	83 8d       	ldd	r24, Z+27	; 0x1b
     944:	8d 31       	cpi	r24, 0x1D	; 29
     946:	09 f4       	brne	.+2      	; 0x94a <SCSI_DecodeSCSICommand+0x2c>
     948:	a7 c0       	rjmp	.+334    	; 0xa98 <SCSI_DecodeSCSICommand+0x17a>
     94a:	90 f4       	brcc	.+36     	; 0x970 <SCSI_DecodeSCSICommand+0x52>
     94c:	82 31       	cpi	r24, 0x12	; 18
     94e:	09 f4       	brne	.+2      	; 0x952 <SCSI_DecodeSCSICommand+0x34>
     950:	4c c0       	rjmp	.+152    	; 0x9ea <SCSI_DecodeSCSICommand+0xcc>
     952:	38 f4       	brcc	.+14     	; 0x962 <SCSI_DecodeSCSICommand+0x44>
     954:	88 23       	and	r24, r24
     956:	09 f4       	brne	.+2      	; 0x95a <SCSI_DecodeSCSICommand+0x3c>
     958:	dc c0       	rjmp	.+440    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f4>
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	09 f4       	brne	.+2      	; 0x960 <SCSI_DecodeSCSICommand+0x42>
     95e:	72 c0       	rjmp	.+228    	; 0xa44 <SCSI_DecodeSCSICommand+0x126>
     960:	de c0       	rjmp	.+444    	; 0xb1e <SCSI_DecodeSCSICommand+0x200>
     962:	8a 31       	cpi	r24, 0x1A	; 26
     964:	09 f4       	brne	.+2      	; 0x968 <SCSI_DecodeSCSICommand+0x4a>
     966:	ba c0       	rjmp	.+372    	; 0xadc <SCSI_DecodeSCSICommand+0x1be>
     968:	8b 31       	cpi	r24, 0x1B	; 27
     96a:	09 f4       	brne	.+2      	; 0x96e <SCSI_DecodeSCSICommand+0x50>
     96c:	d2 c0       	rjmp	.+420    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f4>
     96e:	d7 c0       	rjmp	.+430    	; 0xb1e <SCSI_DecodeSCSICommand+0x200>
     970:	88 32       	cpi	r24, 0x28	; 40
     972:	09 f4       	brne	.+2      	; 0x976 <SCSI_DecodeSCSICommand+0x58>
     974:	ad c0       	rjmp	.+346    	; 0xad0 <SCSI_DecodeSCSICommand+0x1b2>
     976:	90 f5       	brcc	.+100    	; 0x9dc <SCSI_DecodeSCSICommand+0xbe>
     978:	8e 31       	cpi	r24, 0x1E	; 30
     97a:	09 f4       	brne	.+2      	; 0x97e <SCSI_DecodeSCSICommand+0x60>
     97c:	ca c0       	rjmp	.+404    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f4>
     97e:	85 32       	cpi	r24, 0x25	; 37
     980:	09 f0       	breq	.+2      	; 0x984 <SCSI_DecodeSCSICommand+0x66>
     982:	cd c0       	rjmp	.+410    	; 0xb1e <SCSI_DecodeSCSICommand+0x200>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	9f e7       	ldi	r25, 0x7F	; 127
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	8d 83       	std	Y+5, r24	; 0x05
     98e:	9e 83       	std	Y+6, r25	; 0x06
     990:	af 83       	std	Y+7, r26	; 0x07
     992:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	ab 83       	std	Y+3, r26	; 0x03
     9a2:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	64 e0       	ldi	r22, 0x04	; 4
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	ce 01       	movw	r24, r28
     9ae:	05 96       	adiw	r24, 0x05	; 5
     9b0:	5f d1       	rcall	.+702    	; 0xc70 <Endpoint_Write_Stream_BE>
     9b2:	40 e0       	ldi	r20, 0x00	; 0
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	64 e0       	ldi	r22, 0x04	; 4
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	58 d1       	rcall	.+688    	; 0xc70 <Endpoint_Write_Stream_BE>
     9c0:	80 91 e8 00 	lds	r24, 0x00E8
     9c4:	8e 77       	andi	r24, 0x7E	; 126
     9c6:	80 93 e8 00 	sts	0x00E8, r24
     9ca:	f8 01       	movw	r30, r16
     9cc:	84 89       	ldd	r24, Z+20	; 0x14
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     9ce:	95 89       	ldd	r25, Z+21	; 0x15
     9d0:	a6 89       	ldd	r26, Z+22	; 0x16
     9d2:	b7 89       	ldd	r27, Z+23	; 0x17
     9d4:	08 97       	sbiw	r24, 0x08	; 8
     9d6:	a1 09       	sbc	r26, r1
     9d8:	b1 09       	sbc	r27, r1
     9da:	59 c0       	rjmp	.+178    	; 0xa8e <SCSI_DecodeSCSICommand+0x170>
     9dc:	8a 32       	cpi	r24, 0x2A	; 42
     9de:	09 f4       	brne	.+2      	; 0x9e2 <SCSI_DecodeSCSICommand+0xc4>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     9e0:	75 c0       	rjmp	.+234    	; 0xacc <SCSI_DecodeSCSICommand+0x1ae>
     9e2:	8f 32       	cpi	r24, 0x2F	; 47
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <SCSI_DecodeSCSICommand+0xca>
     9e6:	95 c0       	rjmp	.+298    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f4>
     9e8:	9a c0       	rjmp	.+308    	; 0xb1e <SCSI_DecodeSCSICommand+0x200>
     9ea:	f8 01       	movw	r30, r16
     9ec:	e7 8c       	ldd	r14, Z+31	; 0x1f
     9ee:	f6 8c       	ldd	r15, Z+30	; 0x1e
     9f0:	84 8d       	ldd	r24, Z+28	; 0x1c
     9f2:	83 70       	andi	r24, 0x03	; 3
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <SCSI_DecodeSCSICommand+0xda>
     9f6:	54 c0       	rjmp	.+168    	; 0xaa0 <SCSI_DecodeSCSICommand+0x182>
     9f8:	85 8d       	ldd	r24, Z+29	; 0x1d
     9fa:	81 11       	cpse	r24, r1
     9fc:	51 c0       	rjmp	.+162    	; 0xaa0 <SCSI_DecodeSCSICommand+0x182>
     9fe:	67 01       	movw	r12, r14
     a00:	f5 e2       	ldi	r31, 0x25	; 37
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     a02:	ef 16       	cp	r14, r31
     a04:	f1 04       	cpc	r15, r1
     a06:	18 f0       	brcs	.+6      	; 0xa0e <SCSI_DecodeSCSICommand+0xf0>
     a08:	24 e2       	ldi	r18, 0x24	; 36
     a0a:	c2 2e       	mov	r12, r18
     a0c:	d1 2c       	mov	r13, r1
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     a12:	b6 01       	movw	r22, r12
     a14:	8b e4       	ldi	r24, 0x4B	; 75
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	e4 d0       	rcall	.+456    	; 0xbe2 <Endpoint_Write_Stream_LE>
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	c7 01       	movw	r24, r14

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a20:	8c 19       	sub	r24, r12
     a22:	9d 09       	sbc	r25, r13
     a24:	a1 d0       	rcall	.+322    	; 0xb68 <Endpoint_Null_Stream>
     a26:	80 91 e8 00 	lds	r24, 0x00E8
     a2a:	8e 77       	andi	r24, 0x7E	; 126
     a2c:	80 93 e8 00 	sts	0x00E8, r24
     a30:	f8 01       	movw	r30, r16
     a32:	84 89       	ldd	r24, Z+20	; 0x14
     a34:	95 89       	ldd	r25, Z+21	; 0x15
     a36:	a6 89       	ldd	r26, Z+22	; 0x16

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a38:	b7 89       	ldd	r27, Z+23	; 0x17
     a3a:	8c 19       	sub	r24, r12
     a3c:	9d 09       	sbc	r25, r13
     a3e:	a1 09       	sbc	r26, r1
     a40:	b1 09       	sbc	r27, r1
     a42:	25 c0       	rjmp	.+74     	; 0xa8e <SCSI_DecodeSCSICommand+0x170>
     a44:	f8 01       	movw	r30, r16
     a46:	c7 8c       	ldd	r12, Z+31	; 0x1f
     a48:	dc 2c       	mov	r13, r12
     a4a:	f2 e1       	ldi	r31, 0x12	; 18
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     a4c:	fc 15       	cp	r31, r12
     a4e:	10 f4       	brcc	.+4      	; 0xa54 <SCSI_DecodeSCSICommand+0x136>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     a50:	92 e1       	ldi	r25, 0x12	; 18
     a52:	d9 2e       	mov	r13, r25
     a54:	ed 2c       	mov	r14, r13
     a56:	f1 2c       	mov	r15, r1
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a5c:	b7 01       	movw	r22, r14
     a5e:	89 e3       	ldi	r24, 0x39	; 57
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	bf d0       	rcall	.+382    	; 0xbe2 <Endpoint_Write_Stream_LE>
     a64:	8c 2d       	mov	r24, r12
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	8e 19       	sub	r24, r14
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a6e:	9f 09       	sbc	r25, r15
     a70:	7b d0       	rcall	.+246    	; 0xb68 <Endpoint_Null_Stream>
     a72:	80 91 e8 00 	lds	r24, 0x00E8
     a76:	8e 77       	andi	r24, 0x7E	; 126
     a78:	80 93 e8 00 	sts	0x00E8, r24
     a7c:	f8 01       	movw	r30, r16
     a7e:	84 89       	ldd	r24, Z+20	; 0x14
     a80:	95 89       	ldd	r25, Z+21	; 0x15
     a82:	a6 89       	ldd	r26, Z+22	; 0x16
     a84:	b7 89       	ldd	r27, Z+23	; 0x17
     a86:	8d 19       	sub	r24, r13
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a88:	91 09       	sbc	r25, r1
     a8a:	a1 09       	sbc	r26, r1
     a8c:	b1 09       	sbc	r27, r1
     a8e:	84 8b       	std	Z+20, r24	; 0x14
     a90:	95 8b       	std	Z+21, r25	; 0x15
     a92:	a6 8b       	std	Z+22, r26	; 0x16
     a94:	b7 8b       	std	Z+23, r27	; 0x17
     a96:	4d c0       	rjmp	.+154    	; 0xb32 <SCSI_DecodeSCSICommand+0x214>
     a98:	f8 01       	movw	r30, r16
     a9a:	84 8d       	ldd	r24, Z+28	; 0x1c
     a9c:	82 fd       	sbrc	r24, 2
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <SCSI_DecodeSCSICommand+0x192>
     aa0:	80 91 3b 01 	lds	r24, 0x013B
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     aa4:	80 7f       	andi	r24, 0xF0	; 240
     aa6:	85 60       	ori	r24, 0x05	; 5
     aa8:	80 93 3b 01 	sts	0x013B, r24
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     aac:	84 e2       	ldi	r24, 0x24	; 36
     aae:	3e c0       	rjmp	.+124    	; 0xb2c <SCSI_DecodeSCSICommand+0x20e>
     ab0:	cb de       	rcall	.-618    	; 0x848 <DataflashManager_CheckDataflashOperation>
     ab2:	81 11       	cpse	r24, r1
     ab4:	2e c0       	rjmp	.+92     	; 0xb12 <SCSI_DecodeSCSICommand+0x1f4>
     ab6:	80 91 3b 01 	lds	r24, 0x013B
     aba:	80 7f       	andi	r24, 0xF0	; 240

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	80 93 3b 01 	sts	0x013B, r24
     ac2:	10 92 45 01 	sts	0x0145, r1
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     ac6:	10 92 46 01 	sts	0x0146, r1
     aca:	3e c0       	rjmp	.+124    	; 0xb48 <SCSI_DecodeSCSICommand+0x22a>
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <SCSI_DecodeSCSICommand+0x1b4>
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	c8 01       	movw	r24, r16
     ad4:	e2 de       	rcall	.-572    	; 0x89a <SCSI_Command_ReadWrite_10>
     ad6:	88 23       	and	r24, r24
     ad8:	b9 f1       	breq	.+110    	; 0xb48 <SCSI_DecodeSCSICommand+0x22a>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     ada:	2b c0       	rjmp	.+86     	; 0xb32 <SCSI_DecodeSCSICommand+0x214>
     adc:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     ae0:	10 92 f1 00 	sts	0x00F1, r1
     ae4:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     ae8:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aec:	80 91 e8 00 	lds	r24, 0x00E8
     af0:	8e 77       	andi	r24, 0x7E	; 126
     af2:	80 93 e8 00 	sts	0x00E8, r24
     af6:	f8 01       	movw	r30, r16
     af8:	44 89       	ldd	r20, Z+20	; 0x14
     afa:	55 89       	ldd	r21, Z+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     afc:	66 89       	ldd	r22, Z+22	; 0x16
     afe:	77 89       	ldd	r23, Z+23	; 0x17
     b00:	44 50       	subi	r20, 0x04	; 4
     b02:	51 09       	sbc	r21, r1
     b04:	61 09       	sbc	r22, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     b06:	71 09       	sbc	r23, r1
     b08:	44 8b       	std	Z+20, r20	; 0x14
     b0a:	55 8b       	std	Z+21, r21	; 0x15
     b0c:	66 8b       	std	Z+22, r22	; 0x16
     b0e:	77 8b       	std	Z+23, r23	; 0x17
     b10:	10 c0       	rjmp	.+32     	; 0xb32 <SCSI_DecodeSCSICommand+0x214>
     b12:	f8 01       	movw	r30, r16
     b14:	14 8a       	std	Z+20, r1	; 0x14
     b16:	15 8a       	std	Z+21, r1	; 0x15
     b18:	16 8a       	std	Z+22, r1	; 0x16
     b1a:	17 8a       	std	Z+23, r1	; 0x17
     b1c:	0a c0       	rjmp	.+20     	; 0xb32 <SCSI_DecodeSCSICommand+0x214>
     b1e:	80 91 3b 01 	lds	r24, 0x013B
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     b22:	80 7f       	andi	r24, 0xF0	; 240
     b24:	85 60       	ori	r24, 0x05	; 5
     b26:	80 93 3b 01 	sts	0x013B, r24
     b2a:	80 e2       	ldi	r24, 0x20	; 32
			break;
     b2c:	80 93 45 01 	sts	0x0145, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b30:	ca cf       	rjmp	.-108    	; 0xac6 <SCSI_DecodeSCSICommand+0x1a8>
     b32:	80 91 3b 01 	lds	r24, 0x013B
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	80 93 3b 01 	sts	0x013B, r24
     b3c:	10 92 45 01 	sts	0x0145, r1
     b40:	10 92 46 01 	sts	0x0146, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <SCSI_DecodeSCSICommand+0x22c>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	28 96       	adiw	r28, 0x08	; 8
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
	}

	return false;
     b58:	cf 91       	pop	r28
}
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <Endpoint_Null_Stream>:
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	8c 01       	movw	r16, r24
     b76:	eb 01       	movw	r28, r22
                             uint16_t* const BytesProcessed)
{
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     b78:	60 d2       	rcall	.+1216   	; 0x103a <Endpoint_WaitUntilReady>
     b7a:	81 11       	cpse	r24, r1
     b7c:	2b c0       	rjmp	.+86     	; 0xbd4 <Endpoint_Null_Stream+0x6c>
     b7e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b80:	21 f0       	breq	.+8      	; 0xb8a <Endpoint_Null_Stream+0x22>
     b82:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
     b84:	99 81       	ldd	r25, Y+1	; 0x01
     b86:	08 1b       	sub	r16, r24
     b88:	19 0b       	sbc	r17, r25
     b8a:	e1 2c       	mov	r14, r1
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     b8c:	f1 2c       	mov	r15, r1
     b8e:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     b90:	11 05       	cpc	r17, r1
     b92:	f9 f0       	breq	.+62     	; 0xbd2 <Endpoint_Null_Stream+0x6a>
     b94:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b98:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     b9a:	13 c0       	rjmp	.+38     	; 0xbc2 <Endpoint_Null_Stream+0x5a>
     b9c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba0:	8e 77       	andi	r24, 0x7E	; 126
     ba2:	80 93 e8 00 	sts	0x00E8, r24
     ba6:	20 97       	sbiw	r28, 0x00	; 0
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     ba8:	41 f0       	breq	.+16     	; 0xbba <Endpoint_Null_Stream+0x52>
     baa:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     bac:	99 81       	ldd	r25, Y+1	; 0x01
     bae:	8e 0d       	add	r24, r14
     bb0:	9f 1d       	adc	r25, r15
     bb2:	99 83       	std	Y+1, r25	; 0x01
     bb4:	88 83       	st	Y, r24
     bb6:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <Endpoint_Null_Stream+0x6c>
     bba:	3f d2       	rcall	.+1150   	; 0x103a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     bbc:	88 23       	and	r24, r24
     bbe:	39 f3       	breq	.-50     	; 0xb8e <Endpoint_Null_Stream+0x26>
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <Endpoint_Null_Stream+0x6c>
     bc2:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bc6:	01 50       	subi	r16, 0x01	; 1
     bc8:	11 09       	sbc	r17, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
     bce:	f8 0a       	sbc	r15, r24
     bd0:	de cf       	rjmp	.-68     	; 0xb8e <Endpoint_Null_Stream+0x26>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     bd6:	cf 91       	pop	r28
}
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	08 95       	ret

00000be2 <Endpoint_Write_Stream_LE>:
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	7c 01       	movw	r14, r24
     bf4:	8b 01       	movw	r16, r22
     bf6:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     bf8:	20 d2       	rcall	.+1088   	; 0x103a <Endpoint_WaitUntilReady>
     bfa:	81 11       	cpse	r24, r1
     bfc:	30 c0       	rjmp	.+96     	; 0xc5e <Endpoint_Write_Stream_LE+0x7c>
     bfe:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c00:	31 f0       	breq	.+12     	; 0xc0e <Endpoint_Write_Stream_LE+0x2c>
     c02:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     c04:	99 81       	ldd	r25, Y+1	; 0x01
     c06:	08 1b       	sub	r16, r24
     c08:	19 0b       	sbc	r17, r25
     c0a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c0c:	f9 1e       	adc	r15, r25
     c0e:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c10:	d1 2c       	mov	r13, r1
     c12:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c14:	11 05       	cpc	r17, r1
     c16:	11 f1       	breq	.+68     	; 0xc5c <Endpoint_Write_Stream_LE+0x7a>
     c18:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c1c:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c1e:	13 c0       	rjmp	.+38     	; 0xc46 <Endpoint_Write_Stream_LE+0x64>
     c20:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c24:	8e 77       	andi	r24, 0x7E	; 126
     c26:	80 93 e8 00 	sts	0x00E8, r24
     c2a:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     c2c:	41 f0       	breq	.+16     	; 0xc3e <Endpoint_Write_Stream_LE+0x5c>
     c2e:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     c30:	99 81       	ldd	r25, Y+1	; 0x01
     c32:	8c 0d       	add	r24, r12
     c34:	9d 1d       	adc	r25, r13
     c36:	99 83       	std	Y+1, r25	; 0x01
     c38:	88 83       	st	Y, r24
     c3a:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     c3c:	10 c0       	rjmp	.+32     	; 0xc5e <Endpoint_Write_Stream_LE+0x7c>
     c3e:	fd d1       	rcall	.+1018   	; 0x103a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c40:	88 23       	and	r24, r24
     c42:	39 f3       	breq	.-50     	; 0xc12 <Endpoint_Write_Stream_LE+0x30>
     c44:	0c c0       	rjmp	.+24     	; 0xc5e <Endpoint_Write_Stream_LE+0x7c>
     c46:	f7 01       	movw	r30, r14
     c48:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c4a:	7f 01       	movw	r14, r30
     c4c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c50:	01 50       	subi	r16, 0x01	; 1
     c52:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c54:	ff ef       	ldi	r31, 0xFF	; 255
     c56:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     c58:	df 0a       	sbc	r13, r31
     c5a:	db cf       	rjmp	.-74     	; 0xc12 <Endpoint_Write_Stream_LE+0x30>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     c60:	cf 91       	pop	r28
}
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	08 95       	ret

00000c70 <Endpoint_Write_Stream_BE>:
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	6c 01       	movw	r12, r24
     c82:	8b 01       	movw	r16, r22
     c84:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c86:	d9 d1       	rcall	.+946    	; 0x103a <Endpoint_WaitUntilReady>
     c88:	81 11       	cpse	r24, r1
     c8a:	37 c0       	rjmp	.+110    	; 0xcfa <Endpoint_Write_Stream_BE+0x8a>
     c8c:	e8 01       	movw	r28, r16

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c8e:	21 97       	sbiw	r28, 0x01	; 1
     c90:	cc 0d       	add	r28, r12
     c92:	dd 1d       	adc	r29, r13
     c94:	e1 14       	cp	r14, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c96:	f1 04       	cpc	r15, r1
     c98:	39 f0       	breq	.+14     	; 0xca8 <Endpoint_Write_Stream_BE+0x38>
     c9a:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	08 1b       	sub	r16, r24
     ca2:	19 0b       	sbc	r17, r25
     ca4:	c8 1b       	sub	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ca6:	d9 0b       	sbc	r29, r25
     ca8:	c1 2c       	mov	r12, r1
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     caa:	d1 2c       	mov	r13, r1
     cac:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     cae:	11 05       	cpc	r17, r1
     cb0:	19 f1       	breq	.+70     	; 0xcf8 <Endpoint_Write_Stream_BE+0x88>
     cb2:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cb6:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     cb8:	15 c0       	rjmp	.+42     	; 0xce4 <Endpoint_Write_Stream_BE+0x74>
     cba:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cbe:	8e 77       	andi	r24, 0x7E	; 126
     cc0:	80 93 e8 00 	sts	0x00E8, r24
     cc4:	e1 14       	cp	r14, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     cc6:	f1 04       	cpc	r15, r1
     cc8:	49 f0       	breq	.+18     	; 0xcdc <Endpoint_Write_Stream_BE+0x6c>
     cca:	f7 01       	movw	r30, r14
			{
				*BytesProcessed += BytesInTransfer;
     ccc:	80 81       	ld	r24, Z
     cce:	91 81       	ldd	r25, Z+1	; 0x01
     cd0:	8c 0d       	add	r24, r12
     cd2:	9d 1d       	adc	r25, r13
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
     cd8:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <Endpoint_Write_Stream_BE+0x8a>
     cdc:	ae d1       	rcall	.+860    	; 0x103a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     cde:	88 23       	and	r24, r24
     ce0:	29 f3       	breq	.-54     	; 0xcac <Endpoint_Write_Stream_BE+0x3c>
     ce2:	0b c0       	rjmp	.+22     	; 0xcfa <Endpoint_Write_Stream_BE+0x8a>
     ce4:	88 81       	ld	r24, Y
     ce6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cea:	21 97       	sbiw	r28, 0x01	; 1
     cec:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     cee:	11 09       	sbc	r17, r1
			Length--;
     cf0:	ff ef       	ldi	r31, 0xFF	; 255
     cf2:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     cf4:	df 0a       	sbc	r13, r31
     cf6:	da cf       	rjmp	.-76     	; 0xcac <Endpoint_Write_Stream_BE+0x3c>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     cfc:	cf 91       	pop	r28
}
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	08 95       	ret

00000d0c <Endpoint_Read_Stream_LE>:
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	7c 01       	movw	r14, r24
     d1e:	8b 01       	movw	r16, r22
     d20:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d22:	8b d1       	rcall	.+790    	; 0x103a <Endpoint_WaitUntilReady>
     d24:	81 11       	cpse	r24, r1
     d26:	30 c0       	rjmp	.+96     	; 0xd88 <Endpoint_Read_Stream_LE+0x7c>
     d28:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d2a:	31 f0       	breq	.+12     	; 0xd38 <Endpoint_Read_Stream_LE+0x2c>
     d2c:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     d2e:	99 81       	ldd	r25, Y+1	; 0x01
     d30:	08 1b       	sub	r16, r24
     d32:	19 0b       	sbc	r17, r25
     d34:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d36:	f9 1e       	adc	r15, r25
     d38:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d3a:	d1 2c       	mov	r13, r1
     d3c:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d3e:	11 05       	cpc	r17, r1
     d40:	11 f1       	breq	.+68     	; 0xd86 <Endpoint_Read_Stream_LE+0x7a>
     d42:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d46:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d48:	13 c0       	rjmp	.+38     	; 0xd70 <Endpoint_Read_Stream_LE+0x64>
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d4e:	8b 77       	andi	r24, 0x7B	; 123
     d50:	80 93 e8 00 	sts	0x00E8, r24
     d54:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d56:	41 f0       	breq	.+16     	; 0xd68 <Endpoint_Read_Stream_LE+0x5c>
     d58:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     d5a:	99 81       	ldd	r25, Y+1	; 0x01
     d5c:	8c 0d       	add	r24, r12
     d5e:	9d 1d       	adc	r25, r13
     d60:	99 83       	std	Y+1, r25	; 0x01
     d62:	88 83       	st	Y, r24
     d64:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <Endpoint_Read_Stream_LE+0x7c>
     d68:	68 d1       	rcall	.+720    	; 0x103a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d6a:	88 23       	and	r24, r24
     d6c:	39 f3       	breq	.-50     	; 0xd3c <Endpoint_Read_Stream_LE+0x30>
     d6e:	0c c0       	rjmp	.+24     	; 0xd88 <Endpoint_Read_Stream_LE+0x7c>
     d70:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d74:	f7 01       	movw	r30, r14
     d76:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d78:	7f 01       	movw	r14, r30
     d7a:	01 50       	subi	r16, 0x01	; 1
     d7c:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d7e:	ff ef       	ldi	r31, 0xFF	; 255
     d80:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     d82:	df 0a       	sbc	r13, r31
     d84:	db cf       	rjmp	.-74     	; 0xd3c <Endpoint_Read_Stream_LE+0x30>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     d8a:	cf 91       	pop	r28
}
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <Endpoint_Write_Control_Stream_LE>:
     d9a:	20 91 7b 01 	lds	r18, 0x017B
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d9e:	30 91 7c 01 	lds	r19, 0x017C
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 f0       	brcs	.+18     	; 0xdba <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     da8:	61 15       	cp	r22, r1
     daa:	71 05       	cpc	r23, r1
     dac:	39 f4       	brne	.+14     	; 0xdbc <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dae:	20 91 e8 00 	lds	r18, 0x00E8
     db2:	2e 77       	andi	r18, 0x7E	; 126
     db4:	20 93 e8 00 	sts	0x00E8, r18
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <Endpoint_Write_Control_Stream_LE+0x22>
     dba:	b9 01       	movw	r22, r18
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     dc0:	61 15       	cp	r22, r1
     dc2:	71 05       	cpc	r23, r1
     dc4:	99 f1       	breq	.+102    	; 0xe2c <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dc6:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dca:	88 23       	and	r24, r24
     dcc:	e9 f1       	breq	.+122    	; 0xe48 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	e9 f1       	breq	.+122    	; 0xe4c <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     dd6:	83 fd       	sbrc	r24, 3
     dd8:	3b c0       	rjmp	.+118    	; 0xe50 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dda:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     dde:	82 ff       	sbrs	r24, 2
     de0:	06 c0       	rjmp	.+12     	; 0xdee <Endpoint_Write_Control_Stream_LE+0x54>
     de2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     de6:	82 ff       	sbrs	r24, 2
     de8:	24 c0       	rjmp	.+72     	; 0xe32 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dee:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     df2:	80 ff       	sbrs	r24, 0
     df4:	e5 cf       	rjmp	.-54     	; 0xdc0 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     df6:	80 91 f2 00 	lds	r24, 0x00F2
     dfa:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     dfe:	61 15       	cp	r22, r1
     e00:	71 05       	cpc	r23, r1
     e02:	51 f0       	breq	.+20     	; 0xe18 <Endpoint_Write_Control_Stream_LE+0x7e>
     e04:	88 30       	cpi	r24, 0x08	; 8
     e06:	91 05       	cpc	r25, r1
     e08:	38 f4       	brcc	.+14     	; 0xe18 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e0a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e0c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     e10:	61 50       	subi	r22, 0x01	; 1
     e12:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	f3 cf       	rjmp	.-26     	; 0xdfe <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	08 97       	sbiw	r24, 0x08	; 8
     e1c:	09 f0       	breq	.+2      	; 0xe20 <Endpoint_Write_Control_Stream_LE+0x86>
     e1e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e20:	80 91 e8 00 	lds	r24, 0x00E8
     e24:	8e 77       	andi	r24, 0x7E	; 126
     e26:	80 93 e8 00 	sts	0x00E8, r24
     e2a:	ca cf       	rjmp	.-108    	; 0xdc0 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e2c:	21 11       	cpse	r18, r1
     e2e:	cb cf       	rjmp	.-106    	; 0xdc6 <Endpoint_Write_Control_Stream_LE+0x2c>
     e30:	d8 cf       	rjmp	.-80     	; 0xde2 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e32:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e36:	88 23       	and	r24, r24
     e38:	39 f0       	breq	.+14     	; 0xe48 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	39 f0       	breq	.+14     	; 0xe4c <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e42:	83 ff       	sbrs	r24, 3
     e44:	ce cf       	rjmp	.-100    	; 0xde2 <Endpoint_Write_Control_Stream_LE+0x48>
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     e50:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e52:	08 95       	ret

00000e54 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e54:	20 91 7b 01 	lds	r18, 0x017B
     e58:	30 91 7c 01 	lds	r19, 0x017C
     e5c:	26 17       	cp	r18, r22
     e5e:	37 07       	cpc	r19, r23
     e60:	48 f0       	brcs	.+18     	; 0xe74 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e62:	61 15       	cp	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	39 f4       	brne	.+14     	; 0xe76 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e68:	20 91 e8 00 	lds	r18, 0x00E8
     e6c:	2e 77       	andi	r18, 0x7E	; 126
     e6e:	20 93 e8 00 	sts	0x00E8, r18
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <Endpoint_Write_Control_PStream_LE+0x22>
     e74:	b9 01       	movw	r22, r18
     e76:	fc 01       	movw	r30, r24
     e78:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e7a:	61 15       	cp	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	b1 f1       	breq	.+108    	; 0xeec <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e80:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <Endpoint_Write_Control_PStream_LE+0x36>
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e8a:	85 30       	cpi	r24, 0x05	; 5
     e8c:	09 f4       	brne	.+2      	; 0xe90 <Endpoint_Write_Control_PStream_LE+0x3c>
     e8e:	3e c0       	rjmp	.+124    	; 0xf0c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e90:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e94:	83 fd       	sbrc	r24, 3
     e96:	3c c0       	rjmp	.+120    	; 0xf10 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e98:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e9c:	82 ff       	sbrs	r24, 2
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <Endpoint_Write_Control_PStream_LE+0x58>
     ea0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ea4:	82 ff       	sbrs	r24, 2
     ea6:	25 c0       	rjmp	.+74     	; 0xef2 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eac:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     eb0:	80 ff       	sbrs	r24, 0
     eb2:	e3 cf       	rjmp	.-58     	; 0xe7a <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     eb4:	80 91 f2 00 	lds	r24, 0x00F2
     eb8:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ebc:	61 15       	cp	r22, r1
     ebe:	71 05       	cpc	r23, r1
     ec0:	59 f0       	breq	.+22     	; 0xed8 <Endpoint_Write_Control_PStream_LE+0x84>
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	91 05       	cpc	r25, r1
     ec6:	40 f4       	brcc	.+16     	; 0xed8 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ec8:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eca:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ece:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     ed0:	61 50       	subi	r22, 0x01	; 1
     ed2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	f2 cf       	rjmp	.-28     	; 0xebc <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	08 97       	sbiw	r24, 0x08	; 8
     edc:	09 f0       	breq	.+2      	; 0xee0 <Endpoint_Write_Control_PStream_LE+0x8c>
     ede:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
     ee4:	8e 77       	andi	r24, 0x7E	; 126
     ee6:	80 93 e8 00 	sts	0x00E8, r24
     eea:	c7 cf       	rjmp	.-114    	; 0xe7a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     eec:	21 11       	cpse	r18, r1
     eee:	c8 cf       	rjmp	.-112    	; 0xe80 <Endpoint_Write_Control_PStream_LE+0x2c>
     ef0:	d7 cf       	rjmp	.-82     	; 0xea0 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ef2:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ef6:	88 23       	and	r24, r24
     ef8:	39 f0       	breq	.+14     	; 0xf08 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	39 f0       	breq	.+14     	; 0xf0c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     efe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f02:	83 ff       	sbrs	r24, 3
     f04:	cd cf       	rjmp	.-102    	; 0xea0 <Endpoint_Write_Control_PStream_LE+0x4c>
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     f10:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f12:	08 95       	ret

00000f14 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     f14:	98 2f       	mov	r25, r24
     f16:	97 30       	cpi	r25, 0x07	; 7
     f18:	58 f5       	brcc	.+86     	; 0xf70 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f1a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     f1e:	98 17       	cp	r25, r24
     f20:	39 f0       	breq	.+14     	; 0xf30 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     f22:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     f26:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     f2a:	50 91 f0 00 	lds	r21, 0x00F0
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     f30:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     f32:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     f34:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     f36:	21 ff       	sbrs	r18, 1
     f38:	19 c0       	rjmp	.+50     	; 0xf6c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     f3a:	30 91 eb 00 	lds	r19, 0x00EB
     f3e:	3e 7f       	andi	r19, 0xFE	; 254
     f40:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     f44:	30 91 ed 00 	lds	r19, 0x00ED
     f48:	3d 7f       	andi	r19, 0xFD	; 253
     f4a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     f4e:	30 91 eb 00 	lds	r19, 0x00EB
     f52:	31 60       	ori	r19, 0x01	; 1
     f54:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     f58:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     f5c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     f60:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     f64:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     f68:	27 ff       	sbrs	r18, 7
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     f6c:	9f 5f       	subi	r25, 0xFF	; 255
     f6e:	d3 cf       	rjmp	.-90     	; 0xf16 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f70:	8f 70       	andi	r24, 0x0F	; 15
     f72:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     f7c:	08 95       	ret

00000f7e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	06 2f       	mov	r16, r22
     f88:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	10 17       	cp	r17, r16
     f8e:	71 f1       	breq	.+92     	; 0xfec <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
     f90:	98 81       	ld	r25, Y
     f92:	99 23       	and	r25, r25
     f94:	41 f1       	breq	.+80     	; 0xfe6 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	e9 81       	ldd	r30, Y+1	; 0x01
     f9a:	fa 81       	ldd	r31, Y+2	; 0x02
     f9c:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     f9e:	89 2f       	mov	r24, r25
     fa0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     fa2:	87 30       	cpi	r24, 0x07	; 7
     fa4:	10 f0       	brcs	.+4      	; 0xfaa <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	22 c0       	rjmp	.+68     	; 0xfee <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	10 f0       	brcs	.+4      	; 0xfb2 <Endpoint_ConfigureEndpointTable+0x34>
     fae:	56 e0       	ldi	r21, 0x06	; 6
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <Endpoint_ConfigureEndpointTable+0x36>
     fb2:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     fb4:	28 e0       	ldi	r18, 0x08	; 8
     fb6:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     fb8:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     fba:	2e 17       	cp	r18, r30
     fbc:	3f 07       	cpc	r19, r31
     fbe:	20 f4       	brcc	.+8      	; 0xfc8 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     fc0:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	f9 cf       	rjmp	.-14     	; 0xfba <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     fc8:	42 95       	swap	r20
     fca:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     fcc:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     fce:	69 2f       	mov	r22, r25
     fd0:	66 1f       	adc	r22, r22
     fd2:	66 27       	eor	r22, r22
     fd4:	66 1f       	adc	r22, r22
     fd6:	90 e4       	ldi	r25, 0x40	; 64
     fd8:	79 9f       	mul	r23, r25
     fda:	90 01       	movw	r18, r0
     fdc:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     fde:	62 2b       	or	r22, r18
     fe0:	99 df       	rcall	.-206    	; 0xf14 <Endpoint_ConfigureEndpoint_Prv>
     fe2:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     fe4:	01 f3       	breq	.-64     	; 0xfa6 <Endpoint_ConfigureEndpointTable+0x28>
     fe6:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	d0 cf       	rjmp	.-96     	; 0xf8c <Endpoint_ConfigureEndpointTable+0xe>
     fec:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     fee:	df 91       	pop	r29
}
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <Endpoint_ClearStatusStage>:
     ff8:	80 91 75 01 	lds	r24, 0x0175
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ffc:	87 fd       	sbrc	r24, 7
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1000:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1004:	80 ff       	sbrs	r24, 0
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <Endpoint_ClearStatusStage+0x2c>
    1008:	12 c0       	rjmp	.+36     	; 0x102e <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    100a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    100e:	82 fd       	sbrc	r24, 2
    1010:	05 c0       	rjmp	.+10     	; 0x101c <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1012:	80 91 74 01 	lds	r24, 0x0174
    1016:	81 11       	cpse	r24, r1
    1018:	f8 cf       	rjmp	.-16     	; 0x100a <Endpoint_ClearStatusStage+0x12>
    101a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101c:	80 91 e8 00 	lds	r24, 0x00E8
    1020:	8b 77       	andi	r24, 0x7B	; 123
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1024:	80 91 74 01 	lds	r24, 0x0174
    1028:	81 11       	cpse	r24, r1
    102a:	ea cf       	rjmp	.-44     	; 0x1000 <Endpoint_ClearStatusStage+0x8>
    102c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    102e:	80 91 e8 00 	lds	r24, 0x00E8
    1032:	8e 77       	andi	r24, 0x7E	; 126
    1034:	80 93 e8 00 	sts	0x00E8, r24
    1038:	08 95       	ret

0000103a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    103a:	80 91 e4 00 	lds	r24, 0x00E4
    103e:	90 91 e5 00 	lds	r25, 0x00E5
    1042:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1044:	20 91 ec 00 	lds	r18, 0x00EC
    1048:	20 ff       	sbrs	r18, 0
    104a:	21 c0       	rjmp	.+66     	; 0x108e <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    104c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1050:	20 fd       	sbrc	r18, 0
    1052:	21 c0       	rjmp	.+66     	; 0x1096 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1054:	20 91 74 01 	lds	r18, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1058:	22 23       	and	r18, r18
    105a:	89 f0       	breq	.+34     	; 0x107e <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    105c:	25 30       	cpi	r18, 0x05	; 5
    105e:	89 f0       	breq	.+34     	; 0x1082 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1060:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1064:	25 fd       	sbrc	r18, 5
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <Endpoint_WaitUntilReady+0x4c>
    1068:	20 91 e4 00 	lds	r18, 0x00E4
    106c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	39 f3       	breq	.-50     	; 0x1044 <Endpoint_WaitUntilReady+0xa>
    1076:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1078:	41 f0       	breq	.+16     	; 0x108a <Endpoint_WaitUntilReady+0x50>
    107a:	c9 01       	movw	r24, r18
    107c:	e3 cf       	rjmp	.-58     	; 0x1044 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    108a:	84 e0       	ldi	r24, 0x04	; 4
    108c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    108e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1092:	22 ff       	sbrs	r18, 2
    1094:	df cf       	rjmp	.-66     	; 0x1054 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret

0000109a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    10a2:	4e d0       	rcall	.+156    	; 0x1140 <USB_INT_DisableAllInterrupts>
    10a4:	55 d0       	rcall	.+170    	; 0x1150 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    10a6:	c8 ed       	ldi	r28, 0xD8	; 216
    10a8:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    10aa:	88 81       	ld	r24, Y
    10ac:	8f 77       	andi	r24, 0x7F	; 127
    10ae:	88 83       	st	Y, r24
    10b0:	88 81       	ld	r24, Y
    10b2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    10b4:	88 83       	st	Y, r24
    10b6:	88 81       	ld	r24, Y
    10b8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    10ba:	88 83       	st	Y, r24
    10bc:	e7 ed       	ldi	r30, 0xD7	; 215
    10be:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    10c0:	80 81       	ld	r24, Z
    10c2:	80 68       	ori	r24, 0x80	; 128
    10c4:	80 83       	st	Z, r24
    10c6:	19 bc       	out	0x29, r1	; 41
    10c8:	10 92 74 01 	sts	0x0174, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    10cc:	10 92 70 01 	sts	0x0170, r1
	USB_Device_ConfigurationNumber  = 0;
    10d0:	10 92 72 01 	sts	0x0172, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    10d4:	10 92 71 01 	sts	0x0171, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    10d8:	00 ee       	ldi	r16, 0xE0	; 224
    10da:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    10dc:	f8 01       	movw	r30, r16
    10de:	80 81       	ld	r24, Z
    10e0:	8b 7f       	andi	r24, 0xFB	; 251
    10e2:	80 83       	st	Z, r24
    10e4:	88 81       	ld	r24, Y
    10e6:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    10e8:	88 83       	st	Y, r24
    10ea:	42 e0       	ldi	r20, 0x02	; 2
    10ec:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	11 df       	rcall	.-478    	; 0xf14 <Endpoint_ConfigureEndpoint_Prv>
    10f2:	e1 ee       	ldi	r30, 0xE1	; 225
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    10f8:	8e 7f       	andi	r24, 0xFE	; 254
    10fa:	80 83       	st	Z, r24
    10fc:	e2 ee       	ldi	r30, 0xE2	; 226
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	80 83       	st	Z, r24
    1106:	80 81       	ld	r24, Z
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    110c:	f8 01       	movw	r30, r16
    110e:	80 81       	ld	r24, Z
    1110:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1112:	80 83       	st	Z, r24
    1114:	88 81       	ld	r24, Y
    1116:	80 61       	ori	r24, 0x10	; 16
    1118:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <USB_Init>:
    1124:	e8 ed       	ldi	r30, 0xD8	; 216
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    112a:	8f 7e       	andi	r24, 0xEF	; 239
    112c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    112e:	e7 ed       	ldi	r30, 0xD7	; 215
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 73 01 	sts	0x0173, r24

	USB_ResetInterface();
    113e:	ad cf       	rjmp	.-166    	; 0x109a <USB_ResetInterface>

00001140 <USB_INT_DisableAllInterrupts>:
    1140:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8c 7f       	andi	r24, 0xFC	; 252
    1148:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    114a:	10 92 e2 00 	sts	0x00E2, r1
    114e:	08 95       	ret

00001150 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1150:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1154:	10 92 e1 00 	sts	0x00E1, r1
    1158:	08 95       	ret

0000115a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1180:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1184:	82 ff       	sbrs	r24, 2
    1186:	0a c0       	rjmp	.+20     	; 0x119c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1188:	80 91 e2 00 	lds	r24, 0x00E2
    118c:	82 ff       	sbrs	r24, 2
    118e:	06 c0       	rjmp	.+12     	; 0x119c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1190:	80 91 e1 00 	lds	r24, 0x00E1
    1194:	8b 7f       	andi	r24, 0xFB	; 251
    1196:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    119a:	41 d2       	rcall	.+1154   	; 0x161e <USB_Event_Stub>
    119c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    11a0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    11a2:	1d c0       	rjmp	.+58     	; 0x11de <__vector_10+0x84>
    11a4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    11a8:	80 ff       	sbrs	r24, 0
    11aa:	19 c0       	rjmp	.+50     	; 0x11de <__vector_10+0x84>
    11ac:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    11b0:	8e 7f       	andi	r24, 0xFE	; 254
    11b2:	80 93 da 00 	sts	0x00DA, r24
    11b6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    11ba:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    11bc:	0c c0       	rjmp	.+24     	; 0x11d6 <__vector_10+0x7c>
    11be:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    11c0:	89 bd       	out	0x29, r24	; 41
    11c2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11c4:	89 bd       	out	0x29, r24	; 41
    11c6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    11c8:	00 fe       	sbrs	r0, 0
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <__vector_10+0x6c>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    11ce:	80 93 74 01 	sts	0x0174, r24
    11d2:	06 d8       	rcall	.-4084   	; 0x1e0 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <__vector_10+0x84>
    11d6:	19 bc       	out	0x29, r1	; 41
    11d8:	10 92 74 01 	sts	0x0174, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    11dc:	03 d8       	rcall	.-4090   	; 0x1e4 <EVENT_USB_Device_Disconnect>
    11de:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
    11e2:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    11e4:	18 c0       	rjmp	.+48     	; 0x1216 <__vector_10+0xbc>
    11e6:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    11ea:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <__vector_10+0xbc>
    11ee:	80 91 e2 00 	lds	r24, 0x00E2
    11f2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    11f4:	80 93 e2 00 	sts	0x00E2, r24
    11f8:	80 91 e2 00 	lds	r24, 0x00E2
    11fc:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    11fe:	80 93 e2 00 	sts	0x00E2, r24
    1202:	80 91 d8 00 	lds	r24, 0x00D8
    1206:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1208:	80 93 d8 00 	sts	0x00D8, r24
    120c:	19 bc       	out	0x29, r1	; 41
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	80 93 74 01 	sts	0x0174, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1214:	04 d2       	rcall	.+1032   	; 0x161e <USB_Event_Stub>
    1216:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    121a:	84 ff       	sbrs	r24, 4
    121c:	2f c0       	rjmp	.+94     	; 0x127c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    121e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1222:	84 ff       	sbrs	r24, 4
    1224:	2b c0       	rjmp	.+86     	; 0x127c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	89 bd       	out	0x29, r24	; 41
    122a:	8e e0       	ldi	r24, 0x0E	; 14
    122c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    122e:	09 b4       	in	r0, 0x29	; 41
    1230:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1232:	fd cf       	rjmp	.-6      	; 0x122e <__vector_10+0xd4>
    1234:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1238:	8f 7d       	andi	r24, 0xDF	; 223
    123a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    123e:	80 91 e1 00 	lds	r24, 0x00E1
    1242:	8f 7e       	andi	r24, 0xEF	; 239
    1244:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1248:	80 91 e2 00 	lds	r24, 0x00E2
    124c:	8f 7e       	andi	r24, 0xEF	; 239
    124e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1252:	80 91 e2 00 	lds	r24, 0x00E2
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    125c:	80 91 70 01 	lds	r24, 0x0170
    1260:	88 23       	and	r24, r24
    1262:	11 f0       	breq	.+4      	; 0x1268 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <__vector_10+0x11c>
    1268:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
    126c:	87 ff       	sbrs	r24, 7
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 74 01 	sts	0x0174, r24
    127a:	d1 d1       	rcall	.+930    	; 0x161e <USB_Event_Stub>
    127c:	80 91 e1 00 	lds	r24, 0x00E1
    1280:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1282:	27 c0       	rjmp	.+78     	; 0x12d2 <__vector_10+0x178>
    1284:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1288:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    128a:	23 c0       	rjmp	.+70     	; 0x12d2 <__vector_10+0x178>
    128c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1290:	87 7f       	andi	r24, 0xF7	; 247
    1292:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	80 93 74 01 	sts	0x0174, r24
    129c:	10 92 70 01 	sts	0x0170, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    12a0:	80 91 e1 00 	lds	r24, 0x00E1
    12a4:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
    12a6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12aa:	80 91 e2 00 	lds	r24, 0x00E2
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    12b4:	80 91 e2 00 	lds	r24, 0x00E2
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    12be:	42 e0       	ldi	r20, 0x02	; 2
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	27 de       	rcall	.-946    	; 0xf14 <Endpoint_ConfigureEndpoint_Prv>
    12c6:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	80 93 f0 00 	sts	0x00F0, r24
    12d0:	a6 d1       	rcall	.+844    	; 0x161e <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0b be       	out	0x3b, r0	; 59
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <__vector_11>:
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	0b b6       	in	r0, 0x3b	; 59
    1304:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	cf 93       	push	r28
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1320:	c0 91 e9 00 	lds	r28, 0x00E9
    1324:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1326:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    132a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    132e:	80 91 f0 00 	lds	r24, 0x00F0
    1332:	87 7f       	andi	r24, 0xF7	; 247
    1334:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1338:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    133a:	1d d0       	rcall	.+58     	; 0x1376 <USB_Device_ProcessControlRequest>
    133c:	10 92 e9 00 	sts	0x00E9, r1
    1340:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	80 93 f0 00 	sts	0x00F0, r24
    134a:	c0 93 e9 00 	sts	0x00E9, r28
    134e:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1350:	ef 91       	pop	r30
    1352:	cf 91       	pop	r28
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <USB_Device_ProcessControlRequest>:
    1376:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	aa 97       	sbiw	r28, 0x2a	; 42
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	e5 e7       	ldi	r30, 0x75	; 117
    138e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1390:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1394:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1396:	21 e0       	ldi	r18, 0x01	; 1
    1398:	ed 37       	cpi	r30, 0x7D	; 125
    139a:	f2 07       	cpc	r31, r18
    139c:	c9 f7       	brne	.-14     	; 0x1390 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    139e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13a2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    13a6:	83 ff       	sbrs	r24, 3
    13a8:	22 c1       	rjmp	.+580    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    13aa:	90 91 75 01 	lds	r25, 0x0175

		switch (USB_ControlRequest.bRequest)
    13ae:	80 91 76 01 	lds	r24, 0x0176
    13b2:	85 30       	cpi	r24, 0x05	; 5
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <USB_Device_ProcessControlRequest+0x42>
    13b6:	77 c0       	rjmp	.+238    	; 0x14a6 <USB_Device_ProcessControlRequest+0x130>
    13b8:	30 f4       	brcc	.+12     	; 0x13c6 <USB_Device_ProcessControlRequest+0x50>
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	81 f1       	breq	.+96     	; 0x141e <USB_Device_ProcessControlRequest+0xa8>
    13be:	68 f0       	brcs	.+26     	; 0x13da <USB_Device_ProcessControlRequest+0x64>
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	69 f1       	breq	.+90     	; 0x141e <USB_Device_ProcessControlRequest+0xa8>
    13c4:	14 c1       	rjmp	.+552    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	09 f4       	brne	.+2      	; 0x13cc <USB_Device_ProcessControlRequest+0x56>
    13ca:	e2 c0       	rjmp	.+452    	; 0x1590 <USB_Device_ProcessControlRequest+0x21a>
    13cc:	89 30       	cpi	r24, 0x09	; 9
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <USB_Device_ProcessControlRequest+0x5c>
    13d0:	f1 c0       	rjmp	.+482    	; 0x15b4 <USB_Device_ProcessControlRequest+0x23e>
    13d2:	86 30       	cpi	r24, 0x06	; 6
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <USB_Device_ProcessControlRequest+0x62>
    13d6:	0b c1       	rjmp	.+534    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    13d8:	88 c0       	rjmp	.+272    	; 0x14ea <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13da:	90 38       	cpi	r25, 0x80	; 128
    13dc:	81 f0       	breq	.+32     	; 0x13fe <USB_Device_ProcessControlRequest+0x88>
    13de:	92 38       	cpi	r25, 0x82	; 130
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <USB_Device_ProcessControlRequest+0x6e>
    13e2:	05 c1       	rjmp	.+522    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13e4:	80 91 79 01 	lds	r24, 0x0179
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    13ee:	80 91 eb 00 	lds	r24, 0x00EB
    13f2:	85 fb       	bst	r24, 5
    13f4:	88 27       	eor	r24, r24
    13f6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f8:	10 92 e9 00 	sts	0x00E9, r1
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <USB_Device_ProcessControlRequest+0x94>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    13fe:	80 91 71 01 	lds	r24, 0x0171
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1402:	90 91 72 01 	lds	r25, 0x0172
    1406:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1408:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    140a:	90 91 e8 00 	lds	r25, 0x00E8
    140e:	97 7f       	andi	r25, 0xF7	; 247
    1410:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1414:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1418:	10 92 f1 00 	sts	0x00F1, r1
    141c:	c4 c0       	rjmp	.+392    	; 0x15a6 <USB_Device_ProcessControlRequest+0x230>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    141e:	29 2f       	mov	r18, r25
    1420:	2d 7f       	andi	r18, 0xFD	; 253
    1422:	09 f0       	breq	.+2      	; 0x1426 <USB_Device_ProcessControlRequest+0xb0>
    1424:	e4 c0       	rjmp	.+456    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1426:	99 23       	and	r25, r25
    1428:	19 f0       	breq	.+6      	; 0x1430 <USB_Device_ProcessControlRequest+0xba>
    142a:	92 30       	cpi	r25, 0x02	; 2
    142c:	61 f0       	breq	.+24     	; 0x1446 <USB_Device_ProcessControlRequest+0xd0>
    142e:	df c0       	rjmp	.+446    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1430:	90 91 77 01 	lds	r25, 0x0177
    1434:	91 30       	cpi	r25, 0x01	; 1
    1436:	09 f0       	breq	.+2      	; 0x143a <USB_Device_ProcessControlRequest+0xc4>
    1438:	da c0       	rjmp	.+436    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	09 f0       	breq	.+2      	; 0x1440 <USB_Device_ProcessControlRequest+0xca>
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	90 93 72 01 	sts	0x0172, r25
    1444:	2a c0       	rjmp	.+84     	; 0x149a <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1446:	90 91 77 01 	lds	r25, 0x0177
    144a:	91 11       	cpse	r25, r1
    144c:	26 c0       	rjmp	.+76     	; 0x149a <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    144e:	20 91 79 01 	lds	r18, 0x0179
    1452:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1454:	09 f4       	brne	.+2      	; 0x1458 <USB_Device_ProcessControlRequest+0xe2>
    1456:	cb c0       	rjmp	.+406    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1458:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    145c:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1460:	90 ff       	sbrs	r25, 0
    1462:	1b c0       	rjmp	.+54     	; 0x149a <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	21 f4       	brne	.+8      	; 0x1470 <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1468:	80 91 eb 00 	lds	r24, 0x00EB
    146c:	80 62       	ori	r24, 0x20	; 32
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1470:	80 91 eb 00 	lds	r24, 0x00EB
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <USB_Device_ProcessControlRequest+0x10e>
    1482:	88 0f       	add	r24, r24
    1484:	0a 94       	dec	r0
    1486:	ea f7       	brpl	.-6      	; 0x1482 <USB_Device_ProcessControlRequest+0x10c>
    1488:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    148c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1490:	80 91 eb 00 	lds	r24, 0x00EB
    1494:	88 60       	ori	r24, 0x08	; 8
    1496:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    149a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    149e:	80 91 e8 00 	lds	r24, 0x00E8
    14a2:	87 7f       	andi	r24, 0xF7	; 247
    14a4:	83 c0       	rjmp	.+262    	; 0x15ac <USB_Device_ProcessControlRequest+0x236>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14a6:	91 11       	cpse	r25, r1
    14a8:	a2 c0       	rjmp	.+324    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    14aa:	10 91 77 01 	lds	r17, 0x0177
    14ae:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    14b0:	80 91 e3 00 	lds	r24, 0x00E3
    14b4:	80 78       	andi	r24, 0x80	; 128
    14b6:	81 2b       	or	r24, r17
    14b8:	80 93 e3 00 	sts	0x00E3, r24
    14bc:	80 91 e8 00 	lds	r24, 0x00E8
    14c0:	87 7f       	andi	r24, 0xF7	; 247
    14c2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    14c6:	98 dd       	rcall	.-1232   	; 0xff8 <Endpoint_ClearStatusStage>
    14c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14cc:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    14ce:	fc cf       	rjmp	.-8      	; 0x14c8 <USB_Device_ProcessControlRequest+0x152>
    14d0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    14d4:	80 68       	ori	r24, 0x80	; 128
    14d6:	80 93 e3 00 	sts	0x00E3, r24
    14da:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <USB_Device_ProcessControlRequest+0x16c>
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <USB_Device_ProcessControlRequest+0x16e>
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	80 93 74 01 	sts	0x0174, r24
    14e8:	82 c0       	rjmp	.+260    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    14ea:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14ec:	92 30       	cpi	r25, 0x02	; 2
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <USB_Device_ProcessControlRequest+0x17c>
    14f0:	7e c0       	rjmp	.+252    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    14f2:	80 91 77 01 	lds	r24, 0x0177
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    14f6:	90 91 78 01 	lds	r25, 0x0178
    14fa:	8c 3d       	cpi	r24, 0xDC	; 220
    14fc:	23 e0       	ldi	r18, 0x03	; 3
    14fe:	92 07       	cpc	r25, r18
    1500:	71 f5       	brne	.+92     	; 0x155e <USB_Device_ProcessControlRequest+0x1e8>
    1502:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    150c:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    150e:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1510:	13 96       	adiw	r26, 0x03	; 3
    1512:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1514:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1516:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1518:	e3 2f       	mov	r30, r19
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	50 93 57 00 	sts	0x0057, r21
    1520:	e4 91       	lpm	r30, Z
    1522:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    1524:	03 c0       	rjmp	.+6      	; 0x152c <USB_Device_ProcessControlRequest+0x1b6>
    1526:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    1528:	ef 70       	andi	r30, 0x0F	; 15
    152a:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    152c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    152e:	8e 2f       	mov	r24, r30
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1534:	10 f0       	brcs	.+4      	; 0x153a <USB_Device_ProcessControlRequest+0x1c4>
    1536:	c7 96       	adiw	r24, 0x37	; 55
    1538:	01 c0       	rjmp	.+2      	; 0x153c <USB_Device_ProcessControlRequest+0x1c6>
    153a:	c0 96       	adiw	r24, 0x30	; 48
    153c:	8d 93       	st	X+, r24
    153e:	9d 93       	st	X+, r25
    1540:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1542:	24 31       	cpi	r18, 0x14	; 20
    1544:	49 f7       	brne	.-46     	; 0x1518 <USB_Device_ProcessControlRequest+0x1a2>
    1546:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1548:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    154c:	87 7f       	andi	r24, 0xF7	; 247
    154e:	80 93 e8 00 	sts	0x00E8, r24
    1552:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	ce 01       	movw	r24, r28
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	1f dc       	rcall	.-1986   	; 0xd9a <Endpoint_Write_Control_Stream_LE>
    155c:	13 c0       	rjmp	.+38     	; 0x1584 <USB_Device_ProcessControlRequest+0x20e>
    155e:	ae 01       	movw	r20, r28
    1560:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	60 91 79 01 	lds	r22, 0x0179
    1568:	0e 94 10 01 	call	0x220	; 0x220 <CALLBACK_USB_GetDescriptor>
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	09 f4       	brne	.+2      	; 0x1572 <USB_Device_ProcessControlRequest+0x1fc>
    1570:	3e c0       	rjmp	.+124    	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    1572:	20 91 e8 00 	lds	r18, 0x00E8
    1576:	27 7f       	andi	r18, 0xF7	; 247
    1578:	20 93 e8 00 	sts	0x00E8, r18
    157c:	bc 01       	movw	r22, r24
    157e:	89 81       	ldd	r24, Y+1	; 0x01
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	68 dc       	rcall	.-1840   	; 0xe54 <Endpoint_Write_Control_PStream_LE>
    1584:	80 91 e8 00 	lds	r24, 0x00E8
    1588:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    158a:	80 93 e8 00 	sts	0x00E8, r24
    158e:	2f c0       	rjmp	.+94     	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    1590:	90 38       	cpi	r25, 0x80	; 128
    1592:	69 f5       	brne	.+90     	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    1594:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1598:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    159a:	80 93 e8 00 	sts	0x00E8, r24
    159e:	80 91 70 01 	lds	r24, 0x0170
    15a2:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    15a6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15aa:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15ac:	80 93 e8 00 	sts	0x00E8, r24
    15b0:	23 dd       	rcall	.-1466   	; 0xff8 <Endpoint_ClearStatusStage>
    15b2:	1d c0       	rjmp	.+58     	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    15b4:	91 11       	cpse	r25, r1
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    15b6:	1b c0       	rjmp	.+54     	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
    15b8:	90 91 77 01 	lds	r25, 0x0177
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15bc:	92 30       	cpi	r25, 0x02	; 2
    15be:	b8 f4       	brcc	.+46     	; 0x15ee <USB_Device_ProcessControlRequest+0x278>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    15c0:	80 91 e8 00 	lds	r24, 0x00E8
    15c4:	87 7f       	andi	r24, 0xF7	; 247
    15c6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ca:	90 93 70 01 	sts	0x0170, r25
    15ce:	14 dd       	rcall	.-1496   	; 0xff8 <Endpoint_ClearStatusStage>
    15d0:	80 91 70 01 	lds	r24, 0x0170
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    15d4:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <USB_Device_ProcessControlRequest+0x26a>
    15d8:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    15dc:	87 ff       	sbrs	r24, 7
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <USB_Device_ProcessControlRequest+0x26e>
    15e0:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <USB_Device_ProcessControlRequest+0x270>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    15e6:	80 93 74 01 	sts	0x0174, r24
    15ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <EVENT_USB_Device_ConfigurationChanged>
    15ee:	80 91 e8 00 	lds	r24, 0x00E8
    15f2:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    15f4:	0a c0       	rjmp	.+20     	; 0x160a <USB_Device_ProcessControlRequest+0x294>
    15f6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15fa:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    15fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1600:	80 91 eb 00 	lds	r24, 0x00EB
    1604:	80 62       	ori	r24, 0x20	; 32
    1606:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    160a:	aa 96       	adiw	r28, 0x2a	; 42
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	08 95       	ret

0000161e <USB_Event_Stub>:
    161e:	08 95       	ret

00001620 <USB_USBTask>:
    1620:	cf 93       	push	r28
    1622:	80 91 74 01 	lds	r24, 0x0174
    1626:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1628:	a9 f0       	breq	.+42     	; 0x1654 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    162a:	80 91 e9 00 	lds	r24, 0x00E9
    162e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1630:	90 91 ec 00 	lds	r25, 0x00EC
    1634:	90 ff       	sbrs	r25, 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <USB_USBTask+0x1c>
    1638:	90 e8       	ldi	r25, 0x80	; 128
    163a:	01 c0       	rjmp	.+2      	; 0x163e <USB_USBTask+0x1e>
    163c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    163e:	c9 2f       	mov	r28, r25
    1640:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1642:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1646:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    164a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    164c:	94 de       	rcall	.-728    	; 0x1376 <USB_Device_ProcessControlRequest>
    164e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1650:	c0 93 e9 00 	sts	0x00E9, r28
    1654:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1656:	08 95       	ret

00001658 <MS_Device_ProcessControlRequest>:
    1658:	cf 93       	push	r28
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    165a:	df 93       	push	r29
    165c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    165e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1662:	83 ff       	sbrs	r24, 3
    1664:	35 c0       	rjmp	.+106    	; 0x16d0 <MS_Device_ProcessControlRequest+0x78>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1666:	88 81       	ld	r24, Y
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	20 91 79 01 	lds	r18, 0x0179
    166e:	30 91 7a 01 	lds	r19, 0x017A
    1672:	28 17       	cp	r18, r24
    1674:	39 07       	cpc	r19, r25
    1676:	61 f5       	brne	.+88     	; 0x16d0 <MS_Device_ProcessControlRequest+0x78>
	  return;

	switch (USB_ControlRequest.bRequest)
    1678:	80 91 76 01 	lds	r24, 0x0176
    167c:	8e 3f       	cpi	r24, 0xFE	; 254
    167e:	79 f0       	breq	.+30     	; 0x169e <MS_Device_ProcessControlRequest+0x46>
    1680:	8f 3f       	cpi	r24, 0xFF	; 255
    1682:	31 f5       	brne	.+76     	; 0x16d0 <MS_Device_ProcessControlRequest+0x78>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1684:	80 91 75 01 	lds	r24, 0x0175
    1688:	81 32       	cpi	r24, 0x21	; 33
    168a:	11 f5       	brne	.+68     	; 0x16d0 <MS_Device_ProcessControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    168c:	80 91 e8 00 	lds	r24, 0x00E8
    1690:	87 7f       	andi	r24, 0xF7	; 247
    1692:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1696:	b0 dc       	rcall	.-1696   	; 0xff8 <Endpoint_ClearStatusStage>
    1698:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    169a:	88 af       	std	Y+56, r24	; 0x38
    169c:	19 c0       	rjmp	.+50     	; 0x16d0 <MS_Device_ProcessControlRequest+0x78>
    169e:	80 91 75 01 	lds	r24, 0x0175
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    16a2:	81 3a       	cpi	r24, 0xA1	; 161
    16a4:	a9 f4       	brne	.+42     	; 0x16d0 <MS_Device_ProcessControlRequest+0x78>
    16a6:	80 91 e8 00 	lds	r24, 0x00E8
    16aa:	87 7f       	andi	r24, 0xF7	; 247
    16ac:	80 93 e8 00 	sts	0x00E8, r24
    16b0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16b4:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    16b6:	fc cf       	rjmp	.-8      	; 0x16b0 <MS_Device_ProcessControlRequest+0x58>
    16b8:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16c0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16c4:	8e 77       	andi	r24, 0x7E	; 126
    16c6:	80 93 e8 00 	sts	0x00E8, r24
    16ca:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    16cc:	cf 91       	pop	r28
    16ce:	94 cc       	rjmp	.-1752   	; 0xff8 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
			}

			break;
	}
}
    16d4:	08 95       	ret

000016d6 <MS_Device_ConfigureEndpoints>:
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    16da:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    16dc:	fc 01       	movw	r30, r24
    16de:	3c 96       	adiw	r30, 0x0c	; 12
    16e0:	8d e2       	ldi	r24, 0x2D	; 45
    16e2:	df 01       	movw	r26, r30
    16e4:	1d 92       	st	X+, r1
    16e6:	8a 95       	dec	r24
    16e8:	e9 f7       	brne	.-6      	; 0x16e4 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    16ee:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	ce 01       	movw	r24, r28
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	43 dc       	rcall	.-1914   	; 0xf7e <Endpoint_ConfigureEndpointTable>
    16f8:	88 23       	and	r24, r24
    16fa:	31 f0       	breq	.+12     	; 0x1708 <MS_Device_ConfigureEndpoints+0x32>
    16fc:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    16fe:	ce 01       	movw	r24, r28
    1700:	06 96       	adiw	r24, 0x06	; 6
    1702:	df 91       	pop	r29
	  return false;

	return true;
}
    1704:	cf 91       	pop	r28
    1706:	3b cc       	rjmp	.-1930   	; 0xf7e <Endpoint_ConfigureEndpointTable>
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	df 91       	pop	r29
	  return false;

	return true;
}
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <MS_Device_USBTask>:
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	00 d0       	rcall	.+0      	; 0x171e <MS_Device_USBTask+0xe>
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1724:	80 91 74 01 	lds	r24, 0x0174
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	09 f0       	breq	.+2      	; 0x172e <MS_Device_USBTask+0x1e>
    172c:	00 c1       	rjmp	.+512    	; 0x192e <MS_Device_USBTask+0x21e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172e:	f8 01       	movw	r30, r16
    1730:	86 81       	ldd	r24, Z+6	; 0x06
    1732:	8f 70       	andi	r24, 0x0F	; 15
    1734:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1738:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    173c:	82 ff       	sbrs	r24, 2
    173e:	bd c0       	rjmp	.+378    	; 0x18ba <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1740:	86 81       	ldd	r24, Z+6	; 0x06
    1742:	8f 70       	andi	r24, 0x0F	; 15
    1744:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    174c:	78 01       	movw	r14, r16
    174e:	fc e0       	ldi	r31, 0x0C	; 12
    1750:	ef 0e       	add	r14, r31
    1752:	f1 1c       	adc	r15, r1
    1754:	ae 01       	movw	r20, r28
    1756:	4f 5f       	subi	r20, 0xFF	; 255
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	6f e0       	ldi	r22, 0x0F	; 15
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	c7 01       	movw	r24, r14
    1760:	d5 da       	rcall	.-2646   	; 0xd0c <Endpoint_Read_Stream_LE>
    1762:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1764:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1766:	21 f4       	brne	.+8      	; 0x1770 <MS_Device_USBTask+0x60>
    1768:	80 ad       	ldd	r24, Z+56	; 0x38
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    176a:	88 23       	and	r24, r24
    176c:	99 f3       	breq	.-26     	; 0x1754 <MS_Device_USBTask+0x44>
    176e:	a5 c0       	rjmp	.+330    	; 0x18ba <MS_Device_USBTask+0x1aa>
    1770:	84 85       	ldd	r24, Z+12	; 0x0c
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1772:	95 85       	ldd	r25, Z+13	; 0x0d
    1774:	a6 85       	ldd	r26, Z+14	; 0x0e
    1776:	b7 85       	ldd	r27, Z+15	; 0x0f
    1778:	85 35       	cpi	r24, 0x55	; 85
    177a:	93 45       	sbci	r25, 0x53	; 83
    177c:	a2 44       	sbci	r26, 0x42	; 66
    177e:	b3 44       	sbci	r27, 0x43	; 67
    1780:	61 f4       	brne	.+24     	; 0x179a <MS_Device_USBTask+0x8a>
    1782:	f8 01       	movw	r30, r16
    1784:	91 8d       	ldd	r25, Z+25	; 0x19
    1786:	83 85       	ldd	r24, Z+11	; 0x0b
    1788:	98 17       	cp	r25, r24
    178a:	38 f4       	brcc	.+14     	; 0x179a <MS_Device_USBTask+0x8a>
    178c:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    178e:	8f 71       	andi	r24, 0x1F	; 31
    1790:	21 f4       	brne	.+8      	; 0x179a <MS_Device_USBTask+0x8a>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1792:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1794:	81 50       	subi	r24, 0x01	; 1
    1796:	80 31       	cpi	r24, 0x10	; 16
    1798:	80 f0       	brcs	.+32     	; 0x17ba <MS_Device_USBTask+0xaa>
    179a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    179e:	80 62       	ori	r24, 0x20	; 32
    17a0:	80 93 eb 00 	sts	0x00EB, r24
    17a4:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17a6:	81 81       	ldd	r24, Z+1	; 0x01
    17a8:	8f 70       	andi	r24, 0x0F	; 15
    17aa:	80 93 e9 00 	sts	0x00E9, r24
    17ae:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17b2:	80 62       	ori	r24, 0x20	; 32
    17b4:	80 93 eb 00 	sts	0x00EB, r24
    17b8:	80 c0       	rjmp	.+256    	; 0x18ba <MS_Device_USBTask+0x1aa>
    17ba:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	78 01       	movw	r14, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    17c0:	fb e1       	ldi	r31, 0x1B	; 27
    17c2:	ef 0e       	add	r14, r31
    17c4:	f1 1c       	adc	r15, r1
    17c6:	f8 01       	movw	r30, r16
    17c8:	62 8d       	ldd	r22, Z+26	; 0x1a
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	ae 01       	movw	r20, r28
    17ce:	4f 5f       	subi	r20, 0xFF	; 255
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	c7 01       	movw	r24, r14
    17d4:	9b da       	rcall	.-2762   	; 0xd0c <Endpoint_Read_Stream_LE>
    17d6:	85 30       	cpi	r24, 0x05	; 5
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <MS_Device_USBTask+0xd4>
    17da:	f8 01       	movw	r30, r16
    17dc:	80 ad       	ldd	r24, Z+56	; 0x38
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    17de:	88 23       	and	r24, r24
    17e0:	91 f3       	breq	.-28     	; 0x17c6 <MS_Device_USBTask+0xb6>
    17e2:	6b c0       	rjmp	.+214    	; 0x18ba <MS_Device_USBTask+0x1aa>
    17e4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17e8:	8b 77       	andi	r24, 0x7B	; 123
    17ea:	80 93 e8 00 	sts	0x00E8, r24
    17ee:	f8 01       	movw	r30, r16
    17f0:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    17f2:	87 ff       	sbrs	r24, 7
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <MS_Device_USBTask+0xee>
    17f6:	81 81       	ldd	r24, Z+1	; 0x01
    17f8:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17fa:	80 93 e9 00 	sts	0x00E9, r24
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 02 01 	call	0x204	; 0x204 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	98 27       	eor	r25, r24

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1808:	f8 01       	movw	r30, r16
    180a:	97 ab       	std	Z+55, r25	; 0x37
    180c:	45 e5       	ldi	r20, 0x55	; 85
    180e:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1810:	62 e4       	ldi	r22, 0x42	; 66
    1812:	73 e5       	ldi	r23, 0x53	; 83
    1814:	43 a7       	std	Z+43, r20	; 0x2b
    1816:	54 a7       	std	Z+44, r21	; 0x2c
    1818:	65 a7       	std	Z+45, r22	; 0x2d
    181a:	76 a7       	std	Z+46, r23	; 0x2e
    181c:	40 89       	ldd	r20, Z+16	; 0x10
    181e:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1820:	62 89       	ldd	r22, Z+18	; 0x12
    1822:	73 89       	ldd	r23, Z+19	; 0x13
    1824:	47 a7       	std	Z+47, r20	; 0x2f
    1826:	50 ab       	std	Z+48, r21	; 0x30
    1828:	61 ab       	std	Z+49, r22	; 0x31
    182a:	72 ab       	std	Z+50, r23	; 0x32
    182c:	44 89       	ldd	r20, Z+20	; 0x14
    182e:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1830:	66 89       	ldd	r22, Z+22	; 0x16
    1832:	77 89       	ldd	r23, Z+23	; 0x17
    1834:	43 ab       	std	Z+51, r20	; 0x33
    1836:	54 ab       	std	Z+52, r21	; 0x34
    1838:	65 ab       	std	Z+53, r22	; 0x35
    183a:	76 ab       	std	Z+54, r23	; 0x36
    183c:	81 11       	cpse	r24, r1
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <MS_Device_USBTask+0x142>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1840:	45 2b       	or	r20, r21
    1842:	46 2b       	or	r20, r22
    1844:	47 2b       	or	r20, r23
    1846:	29 f0       	breq	.+10     	; 0x1852 <MS_Device_USBTask+0x142>
    1848:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    184c:	80 62       	ori	r24, 0x20	; 32
    184e:	80 93 eb 00 	sts	0x00EB, r24
    1852:	f8 01       	movw	r30, r16
    1854:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1856:	8f 70       	andi	r24, 0x0F	; 15
    1858:	80 93 e9 00 	sts	0x00E9, r24
    185c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1860:	f8 01       	movw	r30, r16
    1862:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1864:	04 c0       	rjmp	.+8      	; 0x186e <MS_Device_USBTask+0x15e>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1866:	80 ad       	ldd	r24, Z+56	; 0x38
    1868:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    186a:	c1 f3       	breq	.-16     	; 0x185c <MS_Device_USBTask+0x14c>
    186c:	26 c0       	rjmp	.+76     	; 0x18ba <MS_Device_USBTask+0x1aa>
    186e:	81 81       	ldd	r24, Z+1	; 0x01
    1870:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1872:	80 93 e9 00 	sts	0x00E9, r24
    1876:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    187a:	85 ff       	sbrs	r24, 5
    187c:	05 c0       	rjmp	.+10     	; 0x1888 <MS_Device_USBTask+0x178>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    187e:	f8 01       	movw	r30, r16
    1880:	80 ad       	ldd	r24, Z+56	; 0x38
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1882:	88 23       	and	r24, r24
    1884:	c1 f3       	breq	.-16     	; 0x1876 <MS_Device_USBTask+0x166>
    1886:	19 c0       	rjmp	.+50     	; 0x18ba <MS_Device_USBTask+0x1aa>
    1888:	1a 82       	std	Y+2, r1	; 0x02
    188a:	19 82       	std	Y+1, r1	; 0x01
		  return;
	}

	uint16_t BytesProcessed = 0;
    188c:	78 01       	movw	r14, r16
    188e:	fb e2       	ldi	r31, 0x2B	; 43
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1890:	ef 0e       	add	r14, r31
    1892:	f1 1c       	adc	r15, r1
    1894:	ae 01       	movw	r20, r28
    1896:	4f 5f       	subi	r20, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	6d e0       	ldi	r22, 0x0D	; 13
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	c7 01       	movw	r24, r14
    18a0:	a0 d9       	rcall	.-3264   	; 0xbe2 <Endpoint_Write_Stream_LE>
    18a2:	85 30       	cpi	r24, 0x05	; 5
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <MS_Device_USBTask+0x1a0>
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 ad       	ldd	r24, Z+56	; 0x38
    18aa:	88 23       	and	r24, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    18ac:	99 f3       	breq	.-26     	; 0x1894 <MS_Device_USBTask+0x184>
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <MS_Device_USBTask+0x1aa>
    18b0:	80 91 e8 00 	lds	r24, 0x00E8
    18b4:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18b6:	80 93 e8 00 	sts	0x00E8, r24
    18ba:	f8 01       	movw	r30, r16
    18bc:	80 ad       	ldd	r24, Z+56	; 0x38
    18be:	88 23       	and	r24, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    18c0:	b1 f1       	breq	.+108    	; 0x192e <MS_Device_USBTask+0x21e>
    18c2:	26 81       	ldd	r18, Z+6	; 0x06
    18c4:	2f 70       	andi	r18, 0x0F	; 15
    18c6:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	ac 01       	movw	r20, r24
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <MS_Device_USBTask+0x1c2>
    18ce:	44 0f       	add	r20, r20
    18d0:	55 1f       	adc	r21, r21
    18d2:	2a 95       	dec	r18
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <MS_Device_USBTask+0x1be>
    18d6:	40 93 ea 00 	sts	0x00EA, r20
    18da:	10 92 ea 00 	sts	0x00EA, r1
    18de:	21 81       	ldd	r18, Z+1	; 0x01
				UERST = 0;
    18e0:	2f 70       	andi	r18, 0x0F	; 15
    18e2:	02 2e       	mov	r0, r18
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <MS_Device_USBTask+0x1d8>
    18e6:	88 0f       	add	r24, r24
    18e8:	0a 94       	dec	r0
    18ea:	ea f7       	brpl	.-6      	; 0x18e6 <MS_Device_USBTask+0x1d6>
    18ec:	80 93 ea 00 	sts	0x00EA, r24
    18f0:	10 92 ea 00 	sts	0x00EA, r1
    18f4:	86 81       	ldd	r24, Z+6	; 0x06
				UERST = 0;
    18f6:	8f 70       	andi	r24, 0x0F	; 15
    18f8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18fc:	80 91 eb 00 	lds	r24, 0x00EB
    1900:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1902:	80 93 eb 00 	sts	0x00EB, r24
    1906:	80 91 eb 00 	lds	r24, 0x00EB
    190a:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    190c:	80 93 eb 00 	sts	0x00EB, r24
    1910:	81 81       	ldd	r24, Z+1	; 0x01
    1912:	8f 70       	andi	r24, 0x0F	; 15
    1914:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1918:	80 91 eb 00 	lds	r24, 0x00EB
    191c:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    191e:	80 93 eb 00 	sts	0x00EB, r24
    1922:	80 91 eb 00 	lds	r24, 0x00EB
    1926:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1928:	80 93 eb 00 	sts	0x00EB, r24
    192c:	10 ae       	std	Z+56, r1	; 0x38
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1932:	df 91       	pop	r29
	}
}
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	08 95       	ret

00001940 <_exit>:
    1940:	f8 94       	cli

00001942 <__stop_program>:
    1942:	ff cf       	rjmp	.-2      	; 0x1942 <__stop_program>

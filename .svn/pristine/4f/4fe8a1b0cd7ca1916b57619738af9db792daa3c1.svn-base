
SerialToLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000e34  00000ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  0080011c  0080011c  00000ee4  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000670  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a9fa  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c52  00000000  00000000  0000cb66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e5c  00000000  00000000  0000f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f40  00000000  00000000  00013614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003e54  00000000  00000000  00014554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006927  00000000  00000000  000183a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a0  00000000  00000000  0001eccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
   6:	00 00       	nop
   8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
   a:	00 00       	nop
   c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
   e:	00 00       	nop
  10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
  12:	00 00       	nop
  14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
  16:	00 00       	nop
  18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
  1e:	00 00       	nop
  20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
  26:	00 00       	nop
  28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	76 c3       	rjmp	.+1772   	; 0x71a <__vector_11>
  2e:	00 00       	nop
  30:	1a c4       	rjmp	.+2100   	; 0x866 <__vector_12>
  32:	00 00       	nop
  34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
  36:	00 00       	nop
  38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
  46:	00 00       	nop
  48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
  4e:	00 00       	nop
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
  56:	00 00       	nop
  58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  5e:	00 00       	nop
  60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
  62:	00 00       	nop
  64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
  66:	00 00       	nop
  68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
  6a:	00 00       	nop
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
  6e:	00 00       	nop
  70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	28 03 55 00 53 00 42 00 2d 00 48 00 44 00 34 00     (.U.S.B.-.H.D.4.

	ParserData->TotalDeviceReports = 1;
  84:	34 00 37 00 38 00 30 00 20 00 41 00 64 00 61 00     4.7.8.0. .A.d.a.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  94:	70 00 74 00 65 00 72 00 00 00                       p.t.e.r...

0000009e <ManufacturerString>:
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  9e:	1a 03 53 00 69 00 6d 00 6f 00 6e 00 20 00 46 00     ..S.i.m.o.n. .F.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  ae:	6f 00 73 00 74 00 65 00 72 00 00 00                 o.s.t.e.r...

000000ba <LanguageString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
  be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <DeviceDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  fc:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
 10c:	dc 01                                               ..

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d2 e0       	ldi	r29, 0x02	; 2
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
		ReportSize--;
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e4 e3       	ldi	r30, 0x34	; 52
 122:	fe e0       	ldi	r31, 0x0E	; 14
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	ac 31       	cpi	r26, 0x1C	; 28
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	ac e1       	ldi	r26, 0x1C	; 28
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	a5 3b       	cpi	r26, 0xB5	; 181
 13c:	b1 07       	cpc	r27, r17
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	1d d0       	rcall	.+58     	; 0x17c <main>
 142:	76 c6       	rjmp	.+3308   	; 0xe30 <_exit>

00000144 <__bad_interrupt>:
 144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <SetupHardware>:
 146:	84 b7       	in	r24, 0x34	; 52
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	84 bf       	out	0x34, r24	; 52
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	80 93 60 00 	sts	0x0060, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 156:	10 92 60 00 	sts	0x0060, r1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 15a:	0f be       	out	0x3f, r0	; 63
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	80 93 61 00 	sts	0x0061, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 168:	90 93 61 00 	sts	0x0061, r25
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	c6 d2       	rcall	.+1420   	; 0x6fc <USB_Init>
 170:	d9 d0       	rcall	.+434    	; 0x324 <HD44780_Initialize>
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	07 d1       	rcall	.+526    	; 0x384 <HD44780_WriteCommand>
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	85 bd       	out	0x25, r24	; 37
 17a:	08 95       	ret

0000017c <main>:
 17c:	e4 df       	rcall	.-56     	; 0x146 <SetupHardware>
 17e:	ed e9       	ldi	r30, 0x9D	; 157
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	2f b7       	in	r18, 0x3f	; 63
 184:	f8 94       	cli
				ReportData     += 4;
 186:	8d e1       	ldi	r24, 0x1D	; 29
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	91 83       	std	Z+1, r25	; 0x01
				break;
 18c:	80 83       	st	Z, r24

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 18e:	93 83       	std	Z+3, r25	; 0x03
 190:	82 83       	std	Z+2, r24	; 0x02
 192:	95 83       	std	Z+5, r25	; 0x05
 194:	84 83       	std	Z+4, r24	; 0x04
 196:	8d e9       	ldi	r24, 0x9D	; 157
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	97 83       	std	Z+7, r25	; 0x07
 19c:	86 83       	std	Z+6, r24	; 0x06
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	91 87       	std	Z+9, r25	; 0x09
 1a4:	80 87       	std	Z+8, r24	; 0x08
				ReportSize     -= 2;
 1a6:	13 86       	std	Z+11, r1	; 0x0b
 1a8:	12 86       	std	Z+10, r1	; 0x0a
 1aa:	2f bf       	out	0x3f, r18	; 63
 1ac:	78 94       	sei
 1ae:	cd e9       	ldi	r28, 0x9D	; 157
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
 1b2:	11 e0       	ldi	r17, 0x01	; 1
 1b4:	8f b7       	in	r24, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	20 91 a7 01 	lds	r18, 0x01A7
				ReportData     += 2;
 1bc:	30 91 a8 01 	lds	r19, 0x01A8
				break;
 1c0:	8f bf       	out	0x3f, r24	; 63

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 1c2:	80 91 a5 01 	lds	r24, 0x01A5
 1c6:	90 91 a6 01 	lds	r25, 0x01A6
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
				ReportSize     -= 1;
 1ce:	f9 f0       	breq	.+62     	; 0x20e <main+0x92>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	51 d5       	rcall	.+2722   	; 0xc78 <CDC_Device_ReceiveByte>
 1d6:	97 fd       	sbrc	r25, 7
 1d8:	1a c0       	rjmp	.+52     	; 0x20e <main+0x92>
 1da:	fe 01       	movw	r30, r28
 1dc:	a0 81       	ld	r26, Z
 1de:	b1 81       	ldd	r27, Z+1	; 0x01
 1e0:	8c 93       	st	X, r24
				ReportData     += 1;
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	01 96       	adiw	r24, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1e8:	91 83       	std	Z+1, r25	; 0x01
 1ea:	80 83       	st	Z, r24
 1ec:	26 81       	ldd	r18, Z+6	; 0x06
 1ee:	37 81       	ldd	r19, Z+7	; 0x07
 1f0:	82 17       	cp	r24, r18
 1f2:	93 07       	cpc	r25, r19
 1f4:	21 f4       	brne	.+8      	; 0x1fe <main+0x82>
 1f6:	84 81       	ldd	r24, Z+4	; 0x04
 1f8:	95 81       	ldd	r25, Z+5	; 0x05
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
 1fe:	2f b7       	in	r18, 0x3f	; 63
 200:	f8 94       	cli
 202:	82 85       	ldd	r24, Z+10	; 0x0a
 204:	93 85       	ldd	r25, Z+11	; 0x0b
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	93 87       	std	Z+11, r25	; 0x0b
 20a:	82 87       	std	Z+10, r24	; 0x0a
 20c:	2f bf       	out	0x3f, r18	; 63

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 20e:	2f b7       	in	r18, 0x3f	; 63
 210:	f8 94       	cli
 212:	80 91 a7 01 	lds	r24, 0x01A7
 216:	90 91 a8 01 	lds	r25, 0x01A8
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 21a:	2f bf       	out	0x3f, r18	; 63
 21c:	89 2b       	or	r24, r25
 21e:	59 f1       	breq	.+86     	; 0x276 <main+0xfa>
 220:	fe 01       	movw	r30, r28
 222:	a2 81       	ldd	r26, Z+2	; 0x02
 224:	b3 81       	ldd	r27, Z+3	; 0x03
 226:	8d 91       	ld	r24, X+
 228:	b3 83       	std	Z+3, r27	; 0x03
 22a:	a2 83       	std	Z+2, r26	; 0x02
 22c:	26 81       	ldd	r18, Z+6	; 0x06
 22e:	37 81       	ldd	r19, Z+7	; 0x07
 230:	a2 17       	cp	r26, r18
 232:	b3 07       	cpc	r27, r19
 234:	21 f4       	brne	.+8      	; 0x23e <main+0xc2>
 236:	24 81       	ldd	r18, Z+4	; 0x04
 238:	35 81       	ldd	r19, Z+5	; 0x05
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 23a:	33 83       	std	Z+3, r19	; 0x03
 23c:	22 83       	std	Z+2, r18	; 0x02
 23e:	9f b7       	in	r25, 0x3f	; 63
 240:	f8 94       	cli
 242:	22 85       	ldd	r18, Z+10	; 0x0a
 244:	33 85       	ldd	r19, Z+11	; 0x0b
 246:	21 50       	subi	r18, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 248:	31 09       	sbc	r19, r1
 24a:	33 87       	std	Z+11, r19	; 0x0b
 24c:	22 87       	std	Z+10, r18	; 0x0a
 24e:	9f bf       	out	0x3f, r25	; 63
 250:	90 91 1c 01 	lds	r25, 0x011C
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 254:	8b 31       	cpi	r24, 0x1B	; 27
 256:	39 f4       	brne	.+14     	; 0x266 <main+0xea>
				break;
 258:	99 23       	and	r25, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 25a:	11 f0       	breq	.+4      	; 0x260 <main+0xe4>
 25c:	a4 d0       	rcall	.+328    	; 0x3a6 <HD44780_WriteData>
 25e:	06 c0       	rjmp	.+12     	; 0x26c <main+0xf0>
 260:	10 93 1c 01 	sts	0x011C, r17
 264:	d4 cf       	rjmp	.-88     	; 0x20e <main+0x92>
 266:	99 23       	and	r25, r25
 268:	21 f0       	breq	.+8      	; 0x272 <main+0xf6>
 26a:	8c d0       	rcall	.+280    	; 0x384 <HD44780_WriteCommand>
 26c:	10 92 1c 01 	sts	0x011C, r1
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 270:	ce cf       	rjmp	.-100    	; 0x20e <main+0x92>
				break;
 272:	99 d0       	rcall	.+306    	; 0x3a6 <HD44780_WriteData>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 274:	cc cf       	rjmp	.-104    	; 0x20e <main+0x92>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	e9 d4       	rcall	.+2514   	; 0xc4e <CDC_Device_USBTask>
 27c:	7f d4       	rcall	.+2302   	; 0xb7c <USB_USBTask>
 27e:	9a cf       	rjmp	.-204    	; 0x1b4 <main+0x38>

00000280 <EVENT_USB_Device_ConfigurationChanged>:
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	96 c4       	rjmp	.+2348   	; 0xbb2 <CDC_Device_ConfigureEndpoints>

00000286 <EVENT_USB_Device_ControlRequest>:
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	23 c5       	rjmp	.+2630   	; 0xcd2 <CDC_Device_ProcessControlRequest>

0000028c <CALLBACK_USB_GetDescriptor>:
 28c:	29 2f       	mov	r18, r25
 28e:	33 27       	eor	r19, r19
 290:	22 30       	cpi	r18, 0x02	; 2
 292:	31 05       	cpc	r19, r1
 294:	59 f0       	breq	.+22     	; 0x2ac <CALLBACK_USB_GetDescriptor+0x20>
 296:	23 30       	cpi	r18, 0x03	; 3
 298:	31 05       	cpc	r19, r1
 29a:	69 f0       	breq	.+26     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x2a>
 29c:	21 30       	cpi	r18, 0x01	; 1
 29e:	31 05       	cpc	r19, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 2a0:	f9 f4       	brne	.+62     	; 0x2e0 <CALLBACK_USB_GetDescriptor+0x54>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 2a2:	82 e1       	ldi	r24, 0x12	; 18
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	2c ef       	ldi	r18, 0xFC	; 252
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	1e c0       	rjmp	.+60     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x5c>
 2ac:	8e e3       	ldi	r24, 0x3E	; 62
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	2e eb       	ldi	r18, 0xBE	; 190
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	19 c0       	rjmp	.+50     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x5c>
 2b6:	99 27       	eor	r25, r25
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	91 05       	cpc	r25, r1
 2bc:	41 f0       	breq	.+16     	; 0x2ce <CALLBACK_USB_GetDescriptor+0x42>
 2be:	82 30       	cpi	r24, 0x02	; 2
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 2c0:	91 05       	cpc	r25, r1
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <CALLBACK_USB_GetDescriptor+0x48>
 2c4:	89 2b       	or	r24, r25
 2c6:	61 f4       	brne	.+24     	; 0x2e0 <CALLBACK_USB_GetDescriptor+0x54>
 2c8:	ea eb       	ldi	r30, 0xBA	; 186
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <CALLBACK_USB_GetDescriptor+0x4c>
 2ce:	ee e9       	ldi	r30, 0x9E	; 158
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <CALLBACK_USB_GetDescriptor+0x4c>
 2d4:	e4 e7       	ldi	r30, 0x74	; 116
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	84 91       	lpm	r24, Z
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9f 01       	movw	r18, r30
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x5c>
				break;
 2e0:	80 e0       	ldi	r24, 0x00	; 0

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	fa 01       	movw	r30, r20
 2ea:	31 83       	std	Z+1, r19	; 0x01
 2ec:	20 83       	st	Z, r18
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 2ee:	08 95       	ret

000002f0 <HD44780_WriteNibble>:
 2f0:	9b b1       	in	r25, 0x0b	; 11
				break;
 2f2:	8f 70       	andi	r24, 0x0F	; 15

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 2f4:	90 77       	andi	r25, 0x70	; 112
 2f6:	89 2b       	or	r24, r25
 2f8:	8b b9       	out	0x0b, r24	; 11
 2fa:	00 00       	nop
 2fc:	00 00       	nop
				break;
 2fe:	5f 9a       	sbi	0x0b, 7	; 11

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 300:	00 00       	nop
 302:	00 00       	nop
 304:	00 00       	nop
 306:	00 00       	nop
 308:	00 00       	nop
 30a:	00 00       	nop
 30c:	00 00       	nop
				break;
 30e:	00 00       	nop

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 310:	5f 98       	cbi	0x0b, 7	; 11
 312:	00 00       	nop
 314:	00 00       	nop
 316:	00 00       	nop
 318:	00 00       	nop
				break;
 31a:	00 00       	nop

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 31c:	00 00       	nop
 31e:	00 00       	nop
 320:	00 00       	nop
 322:	08 95       	ret

00000324 <HD44780_Initialize>:
 324:	8b b1       	in	r24, 0x0b	; 11
 326:	80 76       	andi	r24, 0x60	; 96
 328:	8b b9       	out	0x0b, r24	; 11
				break;
 32a:	8a b1       	in	r24, 0x0a	; 10
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 32c:	8f 69       	ori	r24, 0x9F	; 159
 32e:	8a b9       	out	0x0a, r24	; 10
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	83 ef       	ldi	r24, 0xF3	; 243
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
				break;
 33a:	90 40       	sbci	r25, 0x00	; 0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 33c:	e1 f7       	brne	.-8      	; 0x336 <HD44780_Initialize+0x12>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <HD44780_Initialize+0x1c>
 340:	00 00       	nop
				break;
 342:	83 e0       	ldi	r24, 0x03	; 3

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 344:	d5 df       	rcall	.-86     	; 0x2f0 <HD44780_WriteNibble>
 346:	8f e1       	ldi	r24, 0x1F	; 31
 348:	9e e4       	ldi	r25, 0x4E	; 78

				if (ParserData->UsingReportIDs)
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <HD44780_Initialize+0x26>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <HD44780_Initialize+0x2c>
 350:	00 00       	nop
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	cd df       	rcall	.-102    	; 0x2f0 <HD44780_WriteNibble>
 356:	8f e8       	ldi	r24, 0x8F	; 143
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <HD44780_Initialize+0x36>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 35e:	00 c0       	rjmp	.+0      	; 0x360 <HD44780_Initialize+0x3c>
 360:	00 00       	nop
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	c5 df       	rcall	.-118    	; 0x2f0 <HD44780_WriteNibble>
 366:	87 ec       	ldi	r24, 0xC7	; 199
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <HD44780_Initialize+0x46>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <HD44780_Initialize+0x4c>
 370:	00 00       	nop
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	bd df       	rcall	.-134    	; 0x2f0 <HD44780_WriteNibble>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 376:	87 ec       	ldi	r24, 0xC7	; 199
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <HD44780_Initialize+0x56>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <HD44780_Initialize+0x5c>
 380:	00 00       	nop
 382:	08 95       	ret

00000384 <HD44780_WriteCommand>:
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24
 388:	5c 98       	cbi	0x0b, 4	; 11
 38a:	82 95       	swap	r24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 38c:	8f 70       	andi	r24, 0x0F	; 15
 38e:	b0 df       	rcall	.-160    	; 0x2f0 <HD44780_WriteNibble>
 390:	8c 2f       	mov	r24, r28
 392:	8f 70       	andi	r24, 0x0F	; 15
 394:	ad df       	rcall	.-166    	; 0x2f0 <HD44780_WriteNibble>
 396:	87 ec       	ldi	r24, 0xC7	; 199
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <HD44780_WriteCommand+0x16>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <HD44780_WriteCommand+0x1c>
 3a0:	00 00       	nop
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <HD44780_WriteData>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
 3aa:	5c 9a       	sbi	0x0b, 4	; 11
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 3ac:	82 95       	swap	r24
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	9f df       	rcall	.-194    	; 0x2f0 <HD44780_WriteNibble>
 3b2:	8c 2f       	mov	r24, r28
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	9c df       	rcall	.-200    	; 0x2f0 <HD44780_WriteNibble>
 3b8:	5c 98       	cbi	0x0b, 4	; 11
 3ba:	87 ec       	ldi	r24, 0xC7	; 199
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <HD44780_WriteData+0x18>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <HD44780_WriteData+0x1e>
 3c4:	00 00       	nop
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <Endpoint_Write_Control_Stream_LE>:
 3ca:	20 91 b3 01 	lds	r18, 0x01B3
 3ce:	30 91 b4 01 	lds	r19, 0x01B4
 3d2:	26 17       	cp	r18, r22
 3d4:	37 07       	cpc	r19, r23
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 3d6:	48 f0       	brcs	.+18     	; 0x3ea <Endpoint_Write_Control_Stream_LE+0x20>
 3d8:	61 15       	cp	r22, r1
 3da:	71 05       	cpc	r23, r1
 3dc:	39 f4       	brne	.+14     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x22>
 3de:	20 91 e8 00 	lds	r18, 0x00E8
 3e2:	2e 77       	andi	r18, 0x7E	; 126
 3e4:	20 93 e8 00 	sts	0x00E8, r18
					}
				}

				ParserData->UsingReportIDs = true;
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x22>
 3ea:	b9 01       	movw	r22, r18
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	61 15       	cp	r22, r1
 3f0:	71 05       	cpc	r23, r1
 3f2:	c9 f1       	breq	.+114    	; 0x466 <Endpoint_Write_Control_Stream_LE+0x9c>
 3f4:	3e b3       	in	r19, 0x1e	; 30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 3f6:	33 23       	and	r19, r19
 3f8:	09 f4       	brne	.+2      	; 0x3fc <Endpoint_Write_Control_Stream_LE+0x32>
 3fa:	42 c0       	rjmp	.+132    	; 0x480 <Endpoint_Write_Control_Stream_LE+0xb6>
 3fc:	35 30       	cpi	r19, 0x05	; 5
 3fe:	09 f4       	brne	.+2      	; 0x402 <Endpoint_Write_Control_Stream_LE+0x38>
 400:	41 c0       	rjmp	.+130    	; 0x484 <Endpoint_Write_Control_Stream_LE+0xba>
 402:	30 91 e8 00 	lds	r19, 0x00E8
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 406:	33 fd       	sbrc	r19, 3
 408:	3f c0       	rjmp	.+126    	; 0x488 <Endpoint_Write_Control_Stream_LE+0xbe>
 40a:	30 91 e8 00 	lds	r19, 0x00E8
 40e:	32 ff       	sbrs	r19, 2
 410:	06 c0       	rjmp	.+12     	; 0x41e <Endpoint_Write_Control_Stream_LE+0x54>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 412:	80 91 e8 00 	lds	r24, 0x00E8
 416:	82 ff       	sbrs	r24, 2
 418:	29 c0       	rjmp	.+82     	; 0x46c <Endpoint_Write_Control_Stream_LE+0xa2>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret
 41e:	30 91 e8 00 	lds	r19, 0x00E8
 422:	30 ff       	sbrs	r19, 0
 424:	e4 cf       	rjmp	.-56     	; 0x3ee <Endpoint_Write_Control_Stream_LE+0x24>
 426:	20 91 f2 00 	lds	r18, 0x00F2
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	28 1b       	sub	r18, r24
 430:	39 0b       	sbc	r19, r25
				break;
 432:	cf 01       	movw	r24, r30
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 434:	82 0f       	add	r24, r18
 436:	93 1f       	adc	r25, r19
 438:	61 15       	cp	r22, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 43a:	71 05       	cpc	r23, r1
 43c:	49 f0       	breq	.+18     	; 0x450 <Endpoint_Write_Control_Stream_LE+0x86>
 43e:	88 30       	cpi	r24, 0x08	; 8
 440:	91 05       	cpc	r25, r1
 442:	30 f4       	brcc	.+12     	; 0x450 <Endpoint_Write_Control_Stream_LE+0x86>
 444:	81 91       	ld	r24, Z+
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 446:	80 93 f1 00 	sts	0x00F1, r24
 44a:	61 50       	subi	r22, 0x01	; 1

					while (CurrCollectionPath->Parent != NULL)
 44c:	71 09       	sbc	r23, r1
 44e:	f1 cf       	rjmp	.-30     	; 0x432 <Endpoint_Write_Control_Stream_LE+0x68>
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	08 97       	sbiw	r24, 0x08	; 8
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 454:	09 f0       	breq	.+2      	; 0x458 <Endpoint_Write_Control_Stream_LE+0x8e>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	80 91 e8 00 	lds	r24, 0x00E8
 45c:	8e 77       	andi	r24, 0x7E	; 126
 45e:	80 93 e8 00 	sts	0x00E8, r24
 462:	cf 01       	movw	r24, r30
 464:	c4 cf       	rjmp	.-120    	; 0x3ee <Endpoint_Write_Control_Stream_LE+0x24>
 466:	21 11       	cpse	r18, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 468:	c5 cf       	rjmp	.-118    	; 0x3f4 <Endpoint_Write_Control_Stream_LE+0x2a>
 46a:	d3 cf       	rjmp	.-90     	; 0x412 <Endpoint_Write_Control_Stream_LE+0x48>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 46c:	8e b3       	in	r24, 0x1e	; 30
 46e:	88 23       	and	r24, r24
 470:	39 f0       	breq	.+14     	; 0x480 <Endpoint_Write_Control_Stream_LE+0xb6>
				}

				CurrCollectionPath->Type       = ReportItemData;
 472:	85 30       	cpi	r24, 0x05	; 5
 474:	39 f0       	breq	.+14     	; 0x484 <Endpoint_Write_Control_Stream_LE+0xba>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 476:	80 91 e8 00 	lds	r24, 0x00E8
 47a:	83 ff       	sbrs	r24, 3
 47c:	ca cf       	rjmp	.-108    	; 0x412 <Endpoint_Write_Control_Stream_LE+0x48>
 47e:	04 c0       	rjmp	.+8      	; 0x488 <Endpoint_Write_Control_Stream_LE+0xbe>
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	08 95       	ret

				if (UsageListSize)
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	08 95       	ret
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret

0000048c <Endpoint_Write_Control_PStream_LE>:
 48c:	20 91 b3 01 	lds	r18, 0x01B3
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 490:	30 91 b4 01 	lds	r19, 0x01B4
 494:	26 17       	cp	r18, r22
 496:	37 07       	cpc	r19, r23
 498:	48 f0       	brcs	.+18     	; 0x4ac <Endpoint_Write_Control_PStream_LE+0x20>
 49a:	61 15       	cp	r22, r1
 49c:	71 05       	cpc	r23, r1
 49e:	39 f4       	brne	.+14     	; 0x4ae <Endpoint_Write_Control_PStream_LE+0x22>
 4a0:	20 91 e8 00 	lds	r18, 0x00E8

					for (uint8_t i = 1; i < UsageListSize; i++)
 4a4:	2e 77       	andi	r18, 0x7E	; 126
 4a6:	20 93 e8 00 	sts	0x00E8, r18
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <Endpoint_Write_Control_PStream_LE+0x22>
 4ac:	b9 01       	movw	r22, r18
 4ae:	20 e0       	ldi	r18, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
 4b0:	61 15       	cp	r22, r1
 4b2:	71 05       	cpc	r23, r1
 4b4:	d1 f1       	breq	.+116    	; 0x52a <Endpoint_Write_Control_PStream_LE+0x9e>
 4b6:	3e b3       	in	r19, 0x1e	; 30

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 4b8:	33 23       	and	r19, r19
 4ba:	09 f4       	brne	.+2      	; 0x4be <Endpoint_Write_Control_PStream_LE+0x32>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 4bc:	43 c0       	rjmp	.+134    	; 0x544 <Endpoint_Write_Control_PStream_LE+0xb8>
 4be:	35 30       	cpi	r19, 0x05	; 5
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <Endpoint_Write_Control_PStream_LE+0x38>
 4c2:	42 c0       	rjmp	.+132    	; 0x548 <Endpoint_Write_Control_PStream_LE+0xbc>
 4c4:	30 91 e8 00 	lds	r19, 0x00E8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 4c8:	33 fd       	sbrc	r19, 3
 4ca:	40 c0       	rjmp	.+128    	; 0x54c <Endpoint_Write_Control_PStream_LE+0xc0>
 4cc:	30 91 e8 00 	lds	r19, 0x00E8
 4d0:	32 ff       	sbrs	r19, 2
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0x54>
 4d4:	80 91 e8 00 	lds	r24, 0x00E8
 4d8:	82 ff       	sbrs	r24, 2
 4da:	2a c0       	rjmp	.+84     	; 0x530 <Endpoint_Write_Control_PStream_LE+0xa4>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 4de:	08 95       	ret
 4e0:	30 91 e8 00 	lds	r19, 0x00E8
 4e4:	30 ff       	sbrs	r19, 0
 4e6:	e4 cf       	rjmp	.-56     	; 0x4b0 <Endpoint_Write_Control_PStream_LE+0x24>
 4e8:	20 91 f2 00 	lds	r18, 0x00F2
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	fc 01       	movw	r30, r24
 4f0:	28 1b       	sub	r18, r24
 4f2:	39 0b       	sbc	r19, r25
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 4f4:	c9 01       	movw	r24, r18
 4f6:	8e 0f       	add	r24, r30
 4f8:	9f 1f       	adc	r25, r31
 4fa:	61 15       	cp	r22, r1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 4fc:	71 05       	cpc	r23, r1
 4fe:	51 f0       	breq	.+20     	; 0x514 <Endpoint_Write_Control_PStream_LE+0x88>
 500:	88 30       	cpi	r24, 0x08	; 8
				break;
 502:	91 05       	cpc	r25, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 504:	38 f4       	brcc	.+14     	; 0x514 <Endpoint_Write_Control_PStream_LE+0x88>
 506:	84 91       	lpm	r24, Z
 508:	80 93 f1 00 	sts	0x00F1, r24
 50c:	31 96       	adiw	r30, 0x01	; 1
 50e:	61 50       	subi	r22, 0x01	; 1
 510:	71 09       	sbc	r23, r1
 512:	f0 cf       	rjmp	.-32     	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x68>
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	08 97       	sbiw	r24, 0x08	; 8
 518:	09 f0       	breq	.+2      	; 0x51c <Endpoint_Write_Control_PStream_LE+0x90>
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	80 91 e8 00 	lds	r24, 0x00E8
 520:	8e 77       	andi	r24, 0x7E	; 126
 522:	80 93 e8 00 	sts	0x00E8, r24
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 526:	cf 01       	movw	r24, r30
 528:	c3 cf       	rjmp	.-122    	; 0x4b0 <Endpoint_Write_Control_PStream_LE+0x24>
 52a:	21 11       	cpse	r18, r1
 52c:	c4 cf       	rjmp	.-120    	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x2a>
 52e:	d2 cf       	rjmp	.-92     	; 0x4d4 <Endpoint_Write_Control_PStream_LE+0x48>
 530:	8e b3       	in	r24, 0x1e	; 30
 532:	88 23       	and	r24, r24
 534:	39 f0       	breq	.+14     	; 0x544 <Endpoint_Write_Control_PStream_LE+0xb8>
 536:	85 30       	cpi	r24, 0x05	; 5
 538:	39 f0       	breq	.+14     	; 0x548 <Endpoint_Write_Control_PStream_LE+0xbc>
 53a:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 53e:	83 ff       	sbrs	r24, 3
 540:	c9 cf       	rjmp	.-110    	; 0x4d4 <Endpoint_Write_Control_PStream_LE+0x48>
 542:	04 c0       	rjmp	.+8      	; 0x54c <Endpoint_Write_Control_PStream_LE+0xc0>
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	08 95       	ret
 548:	83 e0       	ldi	r24, 0x03	; 3
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 54a:	08 95       	ret
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	08 95       	ret

00000550 <Endpoint_ConfigureEndpoint_Prv>:
 550:	8f 70       	andi	r24, 0x0F	; 15
 552:	80 93 e9 00 	sts	0x00E9, r24
 556:	eb ee       	ldi	r30, 0xEB	; 235
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 55c:	81 60       	ori	r24, 0x01	; 1
 55e:	80 83       	st	Z, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
 560:	ed ee       	ldi	r30, 0xED	; 237
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	10 82       	st	Z, r1
 566:	60 93 ec 00 	sts	0x00EC, r22
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 56a:	40 83       	st	Z, r20
 56c:	80 91 ee 00 	lds	r24, 0x00EE

					if (UsageListSize)
 570:	88 1f       	adc	r24, r24
 572:	88 27       	eor	r24, r24
 574:	88 1f       	adc	r24, r24
 576:	08 95       	ret

00000578 <Endpoint_ConfigureEndpointTable>:
 578:	0f 93       	push	r16
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	06 2f       	mov	r16, r22
 582:	ec 01       	movw	r28, r24
 584:	10 e0       	ldi	r17, 0x00	; 0
 586:	10 17       	cp	r17, r16
 588:	69 f1       	breq	.+90     	; 0x5e4 <Endpoint_ConfigureEndpointTable+0x6c>
 58a:	98 81       	ld	r25, Y
 58c:	99 23       	and	r25, r25
 58e:	39 f1       	breq	.+78     	; 0x5de <Endpoint_ConfigureEndpointTable+0x66>

						for (uint8_t i = 1; i < UsageListSize; i++)
 590:	2c 81       	ldd	r18, Y+4	; 0x04
 592:	e9 81       	ldd	r30, Y+1	; 0x01
 594:	fa 81       	ldd	r31, Y+2	; 0x02
 596:	6b 81       	ldd	r22, Y+3	; 0x03
 598:	89 2f       	mov	r24, r25
 59a:	8f 70       	andi	r24, 0x0F	; 15
						  UsageList[i - 1] = UsageList[i];
 59c:	85 30       	cpi	r24, 0x05	; 5
 59e:	10 f0       	brcs	.+4      	; 0x5a4 <Endpoint_ConfigureEndpointTable+0x2c>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	21 c0       	rjmp	.+66     	; 0x5e6 <Endpoint_ConfigureEndpointTable+0x6e>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 5a4:	22 30       	cpi	r18, 0x02	; 2
 5a6:	10 f0       	brcs	.+4      	; 0x5ac <Endpoint_ConfigureEndpointTable+0x34>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 5a8:	56 e0       	ldi	r21, 0x06	; 6
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <Endpoint_ConfigureEndpointTable+0x36>
 5ac:	52 e0       	ldi	r21, 0x02	; 2
 5ae:	28 e0       	ldi	r18, 0x08	; 8
 5b0:	30 e0       	ldi	r19, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	2e 17       	cp	r18, r30
 5b6:	3f 07       	cpc	r19, r31
 5b8:	20 f4       	brcc	.+8      	; 0x5c2 <Endpoint_ConfigureEndpointTable+0x4a>
 5ba:	4f 5f       	subi	r20, 0xFF	; 255
 5bc:	22 0f       	add	r18, r18
 5be:	33 1f       	adc	r19, r19
 5c0:	f9 cf       	rjmp	.-14     	; 0x5b4 <Endpoint_ConfigureEndpointTable+0x3c>
 5c2:	42 95       	swap	r20
 5c4:	40 7f       	andi	r20, 0xF0	; 240
 5c6:	45 2b       	or	r20, r21
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 5c8:	99 1f       	adc	r25, r25
 5ca:	99 27       	eor	r25, r25
 5cc:	99 1f       	adc	r25, r25
 5ce:	62 95       	swap	r22
 5d0:	66 0f       	add	r22, r22
 5d2:	66 0f       	add	r22, r22
 5d4:	60 7c       	andi	r22, 0xC0	; 192
 5d6:	69 2b       	or	r22, r25
 5d8:	bb df       	rcall	.-138    	; 0x550 <Endpoint_ConfigureEndpoint_Prv>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 5da:	88 23       	and	r24, r24
 5dc:	09 f3       	breq	.-62     	; 0x5a0 <Endpoint_ConfigureEndpointTable+0x28>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 5de:	1f 5f       	subi	r17, 0xFF	; 255
 5e0:	25 96       	adiw	r28, 0x05	; 5
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 5e2:	d1 cf       	rjmp	.-94     	; 0x586 <Endpoint_ConfigureEndpointTable+0xe>
 5e4:	81 e0       	ldi	r24, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <Endpoint_ClearStatusStage>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 5f0:	80 91 ad 01 	lds	r24, 0x01AD
 5f4:	87 fd       	sbrc	r24, 7
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <Endpoint_ClearStatusStage+0x12>
 5f8:	80 91 e8 00 	lds	r24, 0x00E8
 5fc:	80 ff       	sbrs	r24, 0
 5fe:	0d c0       	rjmp	.+26     	; 0x61a <Endpoint_ClearStatusStage+0x2a>
 600:	10 c0       	rjmp	.+32     	; 0x622 <Endpoint_ClearStatusStage+0x32>
 602:	80 91 e8 00 	lds	r24, 0x00E8
 606:	82 fd       	sbrc	r24, 2
 608:	04 c0       	rjmp	.+8      	; 0x612 <Endpoint_ClearStatusStage+0x22>
 60a:	8e b3       	in	r24, 0x1e	; 30

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 60c:	81 11       	cpse	r24, r1
 60e:	f9 cf       	rjmp	.-14     	; 0x602 <Endpoint_ClearStatusStage+0x12>
 610:	08 95       	ret
 612:	80 91 e8 00 	lds	r24, 0x00E8
 616:	8b 77       	andi	r24, 0x7B	; 123
 618:	07 c0       	rjmp	.+14     	; 0x628 <Endpoint_ClearStatusStage+0x38>
 61a:	8e b3       	in	r24, 0x1e	; 30

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 61c:	81 11       	cpse	r24, r1
 61e:	ec cf       	rjmp	.-40     	; 0x5f8 <Endpoint_ClearStatusStage+0x8>
 620:	08 95       	ret
 622:	80 91 e8 00 	lds	r24, 0x00E8
 626:	8e 77       	andi	r24, 0x7E	; 126
 628:	80 93 e8 00 	sts	0x00E8, r24
 62c:	08 95       	ret

0000062e <Endpoint_WaitUntilReady>:
 62e:	80 91 e4 00 	lds	r24, 0x00E4
 632:	90 91 e5 00 	lds	r25, 0x00E5
 636:	45 e6       	ldi	r20, 0x65	; 101
 638:	20 91 ec 00 	lds	r18, 0x00EC
 63c:	20 ff       	sbrs	r18, 0
 63e:	20 c0       	rjmp	.+64     	; 0x680 <Endpoint_WaitUntilReady+0x52>
 640:	20 91 e8 00 	lds	r18, 0x00E8
 644:	20 fd       	sbrc	r18, 0
 646:	20 c0       	rjmp	.+64     	; 0x688 <Endpoint_WaitUntilReady+0x5a>
 648:	2e b3       	in	r18, 0x1e	; 30
 64a:	22 23       	and	r18, r18
 64c:	89 f0       	breq	.+34     	; 0x670 <Endpoint_WaitUntilReady+0x42>
 64e:	25 30       	cpi	r18, 0x05	; 5
 650:	89 f0       	breq	.+34     	; 0x674 <Endpoint_WaitUntilReady+0x46>
 652:	20 91 eb 00 	lds	r18, 0x00EB
 656:	25 fd       	sbrc	r18, 5
 658:	0f c0       	rjmp	.+30     	; 0x678 <Endpoint_WaitUntilReady+0x4a>
 65a:	20 91 e4 00 	lds	r18, 0x00E4

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 65e:	30 91 e5 00 	lds	r19, 0x00E5
 662:	28 17       	cp	r18, r24
 664:	39 07       	cpc	r19, r25
					  return HID_PARSE_InsufficientReportItems;
 666:	41 f3       	breq	.-48     	; 0x638 <Endpoint_WaitUntilReady+0xa>
 668:	41 50       	subi	r20, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 66a:	41 f0       	breq	.+16     	; 0x67c <Endpoint_WaitUntilReady+0x4e>
 66c:	c9 01       	movw	r24, r18
 66e:	e4 cf       	rjmp	.-56     	; 0x638 <Endpoint_WaitUntilReady+0xa>
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	08 95       	ret
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	08 95       	ret
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	08 95       	ret
 67c:	84 e0       	ldi	r24, 0x04	; 4
 67e:	08 95       	ret
 680:	20 91 e8 00 	lds	r18, 0x00E8
 684:	22 ff       	sbrs	r18, 2
 686:	e0 cf       	rjmp	.-64     	; 0x648 <Endpoint_WaitUntilReady+0x1a>
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	08 95       	ret

0000068c <USB_ResetInterface>:
 68c:	40 d0       	rcall	.+128    	; 0x70e <USB_INT_DisableAllInterrupts>
 68e:	42 d0       	rcall	.+132    	; 0x714 <USB_INT_ClearAllInterrupts>
 690:	80 91 d8 00 	lds	r24, 0x00D8
 694:	8f 77       	andi	r24, 0x7F	; 127
 696:	80 93 d8 00 	sts	0x00D8, r24
 69a:	80 91 d8 00 	lds	r24, 0x00D8
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	80 93 d8 00 	sts	0x00D8, r24
 6a4:	80 91 d8 00 	lds	r24, 0x00D8
 6a8:	8f 7d       	andi	r24, 0xDF	; 223
 6aa:	80 93 d8 00 	sts	0x00D8, r24
 6ae:	84 e0       	ldi	r24, 0x04	; 4
 6b0:	89 bd       	out	0x29, r24	; 41
 6b2:	86 e0       	ldi	r24, 0x06	; 6
					  ParserData->TotalReportItems++;
 6b4:	89 bd       	out	0x29, r24	; 41
 6b6:	09 b4       	in	r0, 0x29	; 41
 6b8:	00 fe       	sbrs	r0, 0
 6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <USB_ResetInterface+0x2a>
 6bc:	1e ba       	out	0x1e, r1	; 30

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 6be:	10 92 a9 01 	sts	0x01A9, r1
 6c2:	10 92 ab 01 	sts	0x01AB, r1
 6c6:	10 92 aa 01 	sts	0x01AA, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 6ca:	42 e0       	ldi	r20, 0x02	; 2
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	3f df       	rcall	.-386    	; 0x550 <Endpoint_ConfigureEndpoint_Prv>
 6d2:	80 91 e1 00 	lds	r24, 0x00E1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6d6:	8e 7f       	andi	r24, 0xFE	; 254
 6d8:	80 93 e1 00 	sts	0x00E1, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6dc:	80 91 e2 00 	lds	r24, 0x00E2
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	80 93 e2 00 	sts	0x00E2, r24
		}
	}

	if (!(ParserData->TotalReportItems))
 6e6:	80 91 e2 00 	lds	r24, 0x00E2
 6ea:	88 60       	ori	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
 6ec:	80 93 e2 00 	sts	0x00E2, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6f0:	80 91 e0 00 	lds	r24, 0x00E0
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	80 93 e0 00 	sts	0x00E0, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6fa:	08 95       	ret

000006fc <USB_Init>:
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6fc:	e3 e6       	ldi	r30, 0x63	; 99
 6fe:	f0 e0       	ldi	r31, 0x00	; 0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 700:	80 81       	ld	r24, Z
 702:	8e 7f       	andi	r24, 0xFE	; 254
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 704:	80 83       	st	Z, r24
 706:	81 e0       	ldi	r24, 0x01	; 1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 708:	80 93 ac 01 	sts	0x01AC, r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 70c:	bf cf       	rjmp	.-130    	; 0x68c <USB_ResetInterface>

0000070e <USB_INT_DisableAllInterrupts>:
 70e:	10 92 e2 00 	sts	0x00E2, r1
 712:	08 95       	ret

00000714 <USB_INT_ClearAllInterrupts>:
 714:	10 92 e1 00 	sts	0x00E1, r1
 718:	08 95       	ret

0000071a <__vector_11>:
 71a:	1f 92       	push	r1
 71c:	0f 92       	push	r0
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	0f 92       	push	r0
 722:	11 24       	eor	r1, r1
 724:	2f 93       	push	r18
 726:	3f 93       	push	r19
 728:	4f 93       	push	r20
 72a:	5f 93       	push	r21
 72c:	6f 93       	push	r22
 72e:	7f 93       	push	r23
 730:	8f 93       	push	r24
 732:	9f 93       	push	r25
 734:	af 93       	push	r26
 736:	bf 93       	push	r27
 738:	ef 93       	push	r30
 73a:	ff 93       	push	r31
 73c:	80 91 e1 00 	lds	r24, 0x00E1

ISR(USB_GEN_vect, ISR_BLOCK)
{
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 740:	82 ff       	sbrs	r24, 2
 742:	0a c0       	rjmp	.+20     	; 0x758 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 744:	80 91 e2 00 	lds	r24, 0x00E2
 748:	82 ff       	sbrs	r24, 2
 74a:	06 c0       	rjmp	.+12     	; 0x758 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 74c:	80 91 e1 00 	lds	r24, 0x00E1
 750:	8b 7f       	andi	r24, 0xFB	; 251
 752:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 756:	11 d2       	rcall	.+1058   	; 0xb7a <USB_Event_Stub>
 758:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 75c:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 75e:	16 c0       	rjmp	.+44     	; 0x78c <__vector_11+0x72>
 760:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 764:	80 ff       	sbrs	r24, 0
 766:	12 c0       	rjmp	.+36     	; 0x78c <__vector_11+0x72>
 768:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 76c:	8e 7f       	andi	r24, 0xFE	; 254
 76e:	80 93 e2 00 	sts	0x00E2, r24
 772:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 776:	80 61       	ori	r24, 0x10	; 16
 778:	80 93 e2 00 	sts	0x00E2, r24
 77c:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 780:	80 62       	ori	r24, 0x20	; 32
 782:	80 93 d8 00 	sts	0x00D8, r24
 786:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 788:	1e ba       	out	0x1e, r1	; 30

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 78a:	f7 d1       	rcall	.+1006   	; 0xb7a <USB_Event_Stub>
		EVENT_USB_Device_Disconnect();
 78c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 790:	84 ff       	sbrs	r24, 4
 792:	2e c0       	rjmp	.+92     	; 0x7f0 <__vector_11+0xd6>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 794:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 798:	84 ff       	sbrs	r24, 4
 79a:	2a c0       	rjmp	.+84     	; 0x7f0 <__vector_11+0xd6>
 79c:	84 e0       	ldi	r24, 0x04	; 4
 79e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7a0:	86 e0       	ldi	r24, 0x06	; 6
 7a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7a4:	09 b4       	in	r0, 0x29	; 41
 7a6:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <__vector_11+0x8a>
 7aa:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7ae:	8f 7d       	andi	r24, 0xDF	; 223
 7b0:	80 93 d8 00 	sts	0x00D8, r24
 7b4:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 7b8:	8f 7e       	andi	r24, 0xEF	; 239
 7ba:	80 93 e1 00 	sts	0x00E1, r24
 7be:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 7c2:	8f 7e       	andi	r24, 0xEF	; 239
 7c4:	80 93 e2 00 	sts	0x00E2, r24
 7c8:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7cc:	81 60       	ori	r24, 0x01	; 1
 7ce:	80 93 e2 00 	sts	0x00E2, r24
 7d2:	80 91 a9 01 	lds	r24, 0x01A9
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7d6:	88 23       	and	r24, r24
 7d8:	11 f0       	breq	.+4      	; 0x7de <__vector_11+0xc4>
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <__vector_11+0xd2>
		  USB_DeviceState = DEVICE_STATE_Configured;
 7de:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7e2:	87 ff       	sbrs	r24, 7
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <__vector_11+0xd0>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 7e6:	83 e0       	ldi	r24, 0x03	; 3
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <__vector_11+0xd2>
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	8e bb       	out	0x1e, r24	; 30
 7ee:	c5 d1       	rcall	.+906    	; 0xb7a <USB_Event_Stub>
 7f0:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 7f4:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7f6:	26 c0       	rjmp	.+76     	; 0x844 <__vector_11+0x12a>
 7f8:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7fc:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7fe:	22 c0       	rjmp	.+68     	; 0x844 <__vector_11+0x12a>
 800:	80 91 e1 00 	lds	r24, 0x00E1
 804:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 806:	80 93 e1 00 	sts	0x00E1, r24
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	8e bb       	out	0x1e, r24	; 30
 80e:	10 92 a9 01 	sts	0x01A9, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 812:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
 816:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 818:	80 93 e1 00 	sts	0x00E1, r24
 81c:	80 91 e2 00 	lds	r24, 0x00E2
 820:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 822:	80 93 e2 00 	sts	0x00E2, r24
 826:	80 91 e2 00 	lds	r24, 0x00E2
 82a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 82c:	80 93 e2 00 	sts	0x00E2, r24
 830:	42 e0       	ldi	r20, 0x02	; 2
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 836:	8c de       	rcall	.-744    	; 0x550 <Endpoint_ConfigureEndpoint_Prv>
 838:	80 91 f0 00 	lds	r24, 0x00F0
 83c:	88 60       	ori	r24, 0x08	; 8
 83e:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 842:	9b d1       	rcall	.+822    	; 0xb7a <USB_Event_Stub>
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <__vector_12>:
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 870:	2f 93       	push	r18
 872:	3f 93       	push	r19
 874:	4f 93       	push	r20
 876:	5f 93       	push	r21
 878:	6f 93       	push	r22
 87a:	7f 93       	push	r23
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	af 93       	push	r26
 882:	bf 93       	push	r27
 884:	cf 93       	push	r28
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 88a:	c0 91 e9 00 	lds	r28, 0x00E9
 88e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 890:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 894:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 898:	80 91 f0 00 	lds	r24, 0x00F0
 89c:	87 7f       	andi	r24, 0xF7	; 247
 89e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 8a2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 8a4:	1b d0       	rcall	.+54     	; 0x8dc <USB_Device_ProcessControlRequest>
 8a6:	10 92 e9 00 	sts	0x00E9, r1
 8aa:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 8ae:	88 60       	ori	r24, 0x08	; 8
 8b0:	80 93 f0 00 	sts	0x00F0, r24
 8b4:	c0 93 e9 00 	sts	0x00E9, r28
 8b8:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 8ba:	ef 91       	pop	r30
 8bc:	cf 91       	pop	r28
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	7f 91       	pop	r23
 8c8:	6f 91       	pop	r22
 8ca:	5f 91       	pop	r21
 8cc:	4f 91       	pop	r20
 8ce:	3f 91       	pop	r19
 8d0:	2f 91       	pop	r18
 8d2:	0f 90       	pop	r0
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	0f 90       	pop	r0
 8d8:	1f 90       	pop	r1
 8da:	18 95       	reti

000008dc <USB_Device_ProcessControlRequest>:
 8dc:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
 8e6:	aa 97       	sbiw	r28, 0x2a	; 42
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	f8 94       	cli
 8ec:	de bf       	out	0x3e, r29	; 62
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	cd bf       	out	0x3d, r28	; 61
 8f2:	ed ea       	ldi	r30, 0xAD	; 173
 8f4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8f6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8fa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8fc:	21 e0       	ldi	r18, 0x01	; 1
 8fe:	e5 3b       	cpi	r30, 0xB5	; 181
 900:	f2 07       	cpc	r31, r18
 902:	c9 f7       	brne	.-14     	; 0x8f6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 904:	c0 dc       	rcall	.-1664   	; 0x286 <EVENT_USB_Device_ControlRequest>
 906:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 90a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 90c:	1e c1       	rjmp	.+572    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 90e:	90 91 ad 01 	lds	r25, 0x01AD
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 912:	80 91 ae 01 	lds	r24, 0x01AE

		switch (USB_ControlRequest.bRequest)
 916:	85 30       	cpi	r24, 0x05	; 5
 918:	09 f4       	brne	.+2      	; 0x91c <USB_Device_ProcessControlRequest+0x40>
 91a:	77 c0       	rjmp	.+238    	; 0xa0a <USB_Device_ProcessControlRequest+0x12e>
 91c:	30 f4       	brcc	.+12     	; 0x92a <USB_Device_ProcessControlRequest+0x4e>
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	81 f1       	breq	.+96     	; 0x982 <USB_Device_ProcessControlRequest+0xa6>
 922:	68 f0       	brcs	.+26     	; 0x93e <USB_Device_ProcessControlRequest+0x62>
 924:	83 30       	cpi	r24, 0x03	; 3
 926:	69 f1       	breq	.+90     	; 0x982 <USB_Device_ProcessControlRequest+0xa6>
 928:	10 c1       	rjmp	.+544    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 92a:	88 30       	cpi	r24, 0x08	; 8
 92c:	09 f4       	brne	.+2      	; 0x930 <USB_Device_ProcessControlRequest+0x54>
 92e:	e0 c0       	rjmp	.+448    	; 0xaf0 <USB_Device_ProcessControlRequest+0x214>
 930:	89 30       	cpi	r24, 0x09	; 9
 932:	09 f4       	brne	.+2      	; 0x936 <USB_Device_ProcessControlRequest+0x5a>
 934:	ef c0       	rjmp	.+478    	; 0xb14 <USB_Device_ProcessControlRequest+0x238>
 936:	86 30       	cpi	r24, 0x06	; 6
 938:	09 f0       	breq	.+2      	; 0x93c <USB_Device_ProcessControlRequest+0x60>
 93a:	07 c1       	rjmp	.+526    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 93c:	87 c0       	rjmp	.+270    	; 0xa4c <USB_Device_ProcessControlRequest+0x170>
 93e:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 940:	81 f0       	breq	.+32     	; 0x962 <USB_Device_ProcessControlRequest+0x86>
 942:	92 38       	cpi	r25, 0x82	; 130
 944:	09 f0       	breq	.+2      	; 0x948 <USB_Device_ProcessControlRequest+0x6c>
 946:	01 c1       	rjmp	.+514    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 948:	80 91 b1 01 	lds	r24, 0x01B1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 94c:	8f 70       	andi	r24, 0x0F	; 15
 94e:	80 93 e9 00 	sts	0x00E9, r24
 952:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 956:	85 fb       	bst	r24, 5
 958:	88 27       	eor	r24, r24
 95a:	80 f9       	bld	r24, 0
 95c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 960:	06 c0       	rjmp	.+12     	; 0x96e <USB_Device_ProcessControlRequest+0x92>
 962:	80 91 aa 01 	lds	r24, 0x01AA
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 966:	90 91 ab 01 	lds	r25, 0x01AB
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 96a:	91 11       	cpse	r25, r1
 96c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 96e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 972:	97 7f       	andi	r25, 0xF7	; 247
 974:	90 93 e8 00 	sts	0x00E8, r25
 978:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 97c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 980:	c2 c0       	rjmp	.+388    	; 0xb06 <USB_Device_ProcessControlRequest+0x22a>
 982:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 984:	2d 7f       	andi	r18, 0xFD	; 253
 986:	09 f0       	breq	.+2      	; 0x98a <USB_Device_ProcessControlRequest+0xae>
 988:	e0 c0       	rjmp	.+448    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 98a:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 98c:	19 f0       	breq	.+6      	; 0x994 <USB_Device_ProcessControlRequest+0xb8>
 98e:	92 30       	cpi	r25, 0x02	; 2
 990:	61 f0       	breq	.+24     	; 0x9aa <USB_Device_ProcessControlRequest+0xce>
 992:	db c0       	rjmp	.+438    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 994:	90 91 af 01 	lds	r25, 0x01AF
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 998:	91 30       	cpi	r25, 0x01	; 1
 99a:	09 f0       	breq	.+2      	; 0x99e <USB_Device_ProcessControlRequest+0xc2>
 99c:	d6 c0       	rjmp	.+428    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 99e:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <USB_Device_ProcessControlRequest+0xc8>
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	90 93 ab 01 	sts	0x01AB, r25
 9a8:	2a c0       	rjmp	.+84     	; 0x9fe <USB_Device_ProcessControlRequest+0x122>
 9aa:	90 91 af 01 	lds	r25, 0x01AF

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9ae:	91 11       	cpse	r25, r1
 9b0:	26 c0       	rjmp	.+76     	; 0x9fe <USB_Device_ProcessControlRequest+0x122>
 9b2:	20 91 b1 01 	lds	r18, 0x01B1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9b6:	2f 70       	andi	r18, 0x0F	; 15
 9b8:	09 f4       	brne	.+2      	; 0x9bc <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9ba:	c7 c0       	rjmp	.+398    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 9bc:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9c0:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9c4:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9c6:	1b c0       	rjmp	.+54     	; 0x9fe <USB_Device_ProcessControlRequest+0x122>
 9c8:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <USB_Device_ProcessControlRequest+0xf8>
 9cc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9d0:	80 62       	ori	r24, 0x20	; 32
 9d2:	13 c0       	rjmp	.+38     	; 0x9fa <USB_Device_ProcessControlRequest+0x11e>
 9d4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9d8:	80 61       	ori	r24, 0x10	; 16
 9da:	80 93 eb 00 	sts	0x00EB, r24
 9de:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	02 2e       	mov	r0, r18
 9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <USB_Device_ProcessControlRequest+0x10c>
 9e6:	88 0f       	add	r24, r24
 9e8:	0a 94       	dec	r0
 9ea:	ea f7       	brpl	.-6      	; 0x9e6 <USB_Device_ProcessControlRequest+0x10a>
 9ec:	80 93 ea 00 	sts	0x00EA, r24
 9f0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 9f4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9f8:	88 60       	ori	r24, 0x08	; 8
 9fa:	80 93 eb 00 	sts	0x00EB, r24
 9fe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a02:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a06:	87 7f       	andi	r24, 0xF7	; 247
 a08:	81 c0       	rjmp	.+258    	; 0xb0c <USB_Device_ProcessControlRequest+0x230>
 a0a:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a0c:	9e c0       	rjmp	.+316    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 a0e:	10 91 af 01 	lds	r17, 0x01AF
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a12:	1f 77       	andi	r17, 0x7F	; 127
 a14:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a18:	80 78       	andi	r24, 0x80	; 128
 a1a:	81 2b       	or	r24, r17
 a1c:	80 93 e3 00 	sts	0x00E3, r24
 a20:	80 91 e8 00 	lds	r24, 0x00E8
 a24:	87 7f       	andi	r24, 0xF7	; 247
 a26:	80 93 e8 00 	sts	0x00E8, r24
 a2a:	e2 dd       	rcall	.-1084   	; 0x5f0 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a2c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a30:	80 ff       	sbrs	r24, 0
 a32:	fc cf       	rjmp	.-8      	; 0xa2c <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 a34:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 a38:	80 68       	ori	r24, 0x80	; 128
 a3a:	80 93 e3 00 	sts	0x00E3, r24
 a3e:	11 23       	and	r17, r17
 a40:	11 f0       	breq	.+4      	; 0xa46 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a42:	83 e0       	ldi	r24, 0x03	; 3
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0x16c>
 a46:	82 e0       	ldi	r24, 0x02	; 2
 a48:	8e bb       	out	0x1e, r24	; 30
 a4a:	7f c0       	rjmp	.+254    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 a4c:	90 58       	subi	r25, 0x80	; 128
 a4e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a50:	08 f0       	brcs	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x178>
 a52:	7b c0       	rjmp	.+246    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 a54:	80 91 af 01 	lds	r24, 0x01AF
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a58:	90 91 b0 01 	lds	r25, 0x01B0
 a5c:	8c 3d       	cpi	r24, 0xDC	; 220
 a5e:	23 e0       	ldi	r18, 0x03	; 3
 a60:	92 07       	cpc	r25, r18
 a62:	71 f5       	brne	.+92     	; 0xac0 <USB_Device_ProcessControlRequest+0x1e4>
 a64:	83 e0       	ldi	r24, 0x03	; 3
 a66:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a68:	8a e2       	ldi	r24, 0x2A	; 42
 a6a:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a6c:	4f b7       	in	r20, 0x3f	; 63
 a6e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a70:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a72:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a74:	20 e0       	ldi	r18, 0x00	; 0
 a76:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a78:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a7a:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	50 93 57 00 	sts	0x0057, r21
 a82:	e4 91       	lpm	r30, Z
 a84:	20 ff       	sbrs	r18, 0
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
 a88:	e2 95       	swap	r30
 a8a:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 a8c:	3f 5f       	subi	r19, 0xFF	; 255
 a8e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a90:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	ea 30       	cpi	r30, 0x0A	; 10
 a96:	10 f0       	brcs	.+4      	; 0xa9c <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a98:	c7 96       	adiw	r24, 0x37	; 55
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x1c2>
 a9c:	c0 96       	adiw	r24, 0x30	; 48
 a9e:	8d 93       	st	X+, r24
 aa0:	9d 93       	st	X+, r25
 aa2:	2f 5f       	subi	r18, 0xFF	; 255
 aa4:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aa6:	49 f7       	brne	.-46     	; 0xa7a <USB_Device_ProcessControlRequest+0x19e>
 aa8:	4f bf       	out	0x3f, r20	; 63
 aaa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aae:	87 7f       	andi	r24, 0xF7	; 247
 ab0:	80 93 e8 00 	sts	0x00E8, r24
 ab4:	6a e2       	ldi	r22, 0x2A	; 42
 ab6:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 ab8:	ce 01       	movw	r24, r28
 aba:	01 96       	adiw	r24, 0x01	; 1
 abc:	86 dc       	rcall	.-1780   	; 0x3ca <Endpoint_Write_Control_Stream_LE>
 abe:	12 c0       	rjmp	.+36     	; 0xae4 <USB_Device_ProcessControlRequest+0x208>
 ac0:	ae 01       	movw	r20, r28
 ac2:	4f 5f       	subi	r20, 0xFF	; 255
 ac4:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ac6:	60 91 b1 01 	lds	r22, 0x01B1
 aca:	e0 db       	rcall	.-2112   	; 0x28c <CALLBACK_USB_GetDescriptor>
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	09 f4       	brne	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0x1f6>
 ad0:	3c c0       	rjmp	.+120    	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 ad2:	20 91 e8 00 	lds	r18, 0x00E8
 ad6:	27 7f       	andi	r18, 0xF7	; 247
 ad8:	20 93 e8 00 	sts	0x00E8, r18
 adc:	bc 01       	movw	r22, r24
 ade:	89 81       	ldd	r24, Y+1	; 0x01
 ae0:	9a 81       	ldd	r25, Y+2	; 0x02
 ae2:	d4 dc       	rcall	.-1624   	; 0x48c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ae4:	80 91 e8 00 	lds	r24, 0x00E8
 ae8:	8b 77       	andi	r24, 0x7B	; 123
 aea:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 aee:	2d c0       	rjmp	.+90     	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 af0:	90 38       	cpi	r25, 0x80	; 128
 af2:	59 f5       	brne	.+86     	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 af4:	80 91 e8 00 	lds	r24, 0x00E8
 af8:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 afa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 afe:	80 91 a9 01 	lds	r24, 0x01A9
 b02:	80 93 f1 00 	sts	0x00F1, r24
 b06:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b0a:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b0c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b10:	6f dd       	rcall	.-1314   	; 0x5f0 <Endpoint_ClearStatusStage>
 b12:	1b c0       	rjmp	.+54     	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 b14:	91 11       	cpse	r25, r1
 b16:	19 c0       	rjmp	.+50     	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
 b18:	90 91 af 01 	lds	r25, 0x01AF
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b1c:	92 30       	cpi	r25, 0x02	; 2
 b1e:	a8 f4       	brcc	.+42     	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b20:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b24:	87 7f       	andi	r24, 0xF7	; 247
 b26:	80 93 e8 00 	sts	0x00E8, r24
 b2a:	90 93 a9 01 	sts	0x01A9, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b2e:	60 dd       	rcall	.-1344   	; 0x5f0 <Endpoint_ClearStatusStage>
 b30:	80 91 a9 01 	lds	r24, 0x01A9
 b34:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b36:	04 c0       	rjmp	.+8      	; 0xb40 <USB_Device_ProcessControlRequest+0x264>
 b38:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 b3c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <USB_Device_ProcessControlRequest+0x268>
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x26a>
 b44:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b46:	8e bb       	out	0x1e, r24	; 30
 b48:	9b db       	rcall	.-2250   	; 0x280 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b4a:	80 91 e8 00 	lds	r24, 0x00E8
 b4e:	83 ff       	sbrs	r24, 3
 b50:	0a c0       	rjmp	.+20     	; 0xb66 <USB_Device_ProcessControlRequest+0x28a>
 b52:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 b56:	87 7f       	andi	r24, 0xF7	; 247
 b58:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b5c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b60:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b62:	80 93 eb 00 	sts	0x00EB, r24
 b66:	aa 96       	adiw	r28, 0x2a	; 42
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b6c:	de bf       	out	0x3e, r29	; 62
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	cd bf       	out	0x3d, r28	; 61
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b76:	1f 91       	pop	r17
 b78:	08 95       	ret

00000b7a <USB_Event_Stub>:
 b7a:	08 95       	ret

00000b7c <USB_USBTask>:
 b7c:	cf 93       	push	r28
 b7e:	8e b3       	in	r24, 0x1e	; 30
 b80:	88 23       	and	r24, r24
 b82:	a9 f0       	breq	.+42     	; 0xbae <USB_USBTask+0x32>
 b84:	80 91 e9 00 	lds	r24, 0x00E9
 b88:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b8a:	90 91 ec 00 	lds	r25, 0x00EC
 b8e:	90 ff       	sbrs	r25, 0
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <USB_USBTask+0x1a>
 b92:	90 e8       	ldi	r25, 0x80	; 128
 b94:	01 c0       	rjmp	.+2      	; 0xb98 <USB_USBTask+0x1c>
 b96:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b98:	c9 2f       	mov	r28, r25
 b9a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b9c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba0:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ba4:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 ba6:	9a de       	rcall	.-716    	; 0x8dc <USB_Device_ProcessControlRequest>
 ba8:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 baa:	c0 93 e9 00 	sts	0x00E9, r28
 bae:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 bb0:	08 95       	ret

00000bb2 <CDC_Device_ConfigureEndpoints>:
 bb2:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 bb4:	df 93       	push	r29
 bb6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 bb8:	fc 01       	movw	r30, r24
 bba:	70 96       	adiw	r30, 0x10	; 16
 bbc:	8b e0       	ldi	r24, 0x0B	; 11
 bbe:	df 01       	movw	r26, r30
 bc0:	1d 92       	st	X+, r1
 bc2:	8a 95       	dec	r24
 bc4:	e9 f7       	brne	.-6      	; 0xbc0 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 bc6:	82 e0       	ldi	r24, 0x02	; 2
 bc8:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 bca:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 bcc:	83 e0       	ldi	r24, 0x03	; 3
 bce:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 bd0:	61 e0       	ldi	r22, 0x01	; 1
 bd2:	ce 01       	movw	r24, r28
 bd4:	01 96       	adiw	r24, 0x01	; 1
 bd6:	d0 dc       	rcall	.-1632   	; 0x578 <Endpoint_ConfigureEndpointTable>
 bd8:	88 23       	and	r24, r24
 bda:	61 f0       	breq	.+24     	; 0xbf4 <CDC_Device_ConfigureEndpoints+0x42>
 bdc:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 bde:	ce 01       	movw	r24, r28
 be0:	06 96       	adiw	r24, 0x06	; 6
 be2:	ca dc       	rcall	.-1644   	; 0x578 <Endpoint_ConfigureEndpointTable>
 be4:	88 23       	and	r24, r24
 be6:	31 f0       	breq	.+12     	; 0xbf4 <CDC_Device_ConfigureEndpoints+0x42>
 be8:	61 e0       	ldi	r22, 0x01	; 1
 bea:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 bec:	0b 96       	adiw	r24, 0x0b	; 11
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
	  return false;

	return true;
}
 bf2:	c2 cc       	rjmp	.-1660   	; 0x578 <Endpoint_ConfigureEndpointTable>
 bf4:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 bf6:	df 91       	pop	r29
 bf8:	cf 91       	pop	r28
	  return false;

	return true;
}
 bfa:	08 95       	ret

00000bfc <CDC_Device_Flush>:
 bfc:	2e b3       	in	r18, 0x1e	; 30
 bfe:	24 30       	cpi	r18, 0x04	; 4
 c00:	21 f5       	brne	.+72     	; 0xc4a <CDC_Device_Flush+0x4e>
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c02:	fc 01       	movw	r30, r24
 c04:	44 89       	ldd	r20, Z+20	; 0x14
 c06:	55 89       	ldd	r21, Z+21	; 0x15
 c08:	66 89       	ldd	r22, Z+22	; 0x16
 c0a:	77 89       	ldd	r23, Z+23	; 0x17
 c0c:	45 2b       	or	r20, r21
 c0e:	46 2b       	or	r20, r22
 c10:	47 2b       	or	r20, r23
 c12:	d9 f0       	breq	.+54     	; 0xc4a <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c14:	81 81       	ldd	r24, Z+1	; 0x01
 c16:	8f 70       	andi	r24, 0x0F	; 15
 c18:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 c1c:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 c20:	88 23       	and	r24, r24
 c22:	89 f0       	breq	.+34     	; 0xc46 <CDC_Device_Flush+0x4a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c24:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c28:	80 91 e8 00 	lds	r24, 0x00E8
 c2c:	8e 77       	andi	r24, 0x7E	; 126
 c2e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 c32:	95 fd       	sbrc	r25, 5
 c34:	08 c0       	rjmp	.+16     	; 0xc46 <CDC_Device_Flush+0x4a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c36:	fb dc       	rcall	.-1546   	; 0x62e <Endpoint_WaitUntilReady>
 c38:	81 11       	cpse	r24, r1
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <CDC_Device_Flush+0x50>
 c3c:	80 91 e8 00 	lds	r24, 0x00E8
 c40:	8e 77       	andi	r24, 0x7E	; 126
 c42:	80 93 e8 00 	sts	0x00E8, r24
 c46:	80 e0       	ldi	r24, 0x00	; 0
 c48:	08 95       	ret
 c4a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 c4c:	08 95       	ret

00000c4e <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 c4e:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c50:	24 30       	cpi	r18, 0x04	; 4
 c52:	89 f4       	brne	.+34     	; 0xc76 <CDC_Device_USBTask+0x28>
 c54:	fc 01       	movw	r30, r24
 c56:	44 89       	ldd	r20, Z+20	; 0x14
 c58:	55 89       	ldd	r21, Z+21	; 0x15
 c5a:	66 89       	ldd	r22, Z+22	; 0x16
 c5c:	77 89       	ldd	r23, Z+23	; 0x17
 c5e:	45 2b       	or	r20, r21
 c60:	46 2b       	or	r20, r22
 c62:	47 2b       	or	r20, r23
 c64:	41 f0       	breq	.+16     	; 0xc76 <CDC_Device_USBTask+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c66:	21 81       	ldd	r18, Z+1	; 0x01
 c68:	2f 70       	andi	r18, 0x0F	; 15
 c6a:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c6e:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 c72:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
 c74:	c3 cf       	rjmp	.-122    	; 0xbfc <CDC_Device_Flush>
 c76:	08 95       	ret

00000c78 <CDC_Device_ReceiveByte>:
 c78:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c7a:	24 30       	cpi	r18, 0x04	; 4
 c7c:	19 f0       	breq	.+6      	; 0xc84 <CDC_Device_ReceiveByte+0xc>
	  return -1;
 c7e:	8f ef       	ldi	r24, 0xFF	; 255
 c80:	9f ef       	ldi	r25, 0xFF	; 255
 c82:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c84:	fc 01       	movw	r30, r24
 c86:	44 89       	ldd	r20, Z+20	; 0x14
 c88:	55 89       	ldd	r21, Z+21	; 0x15
 c8a:	66 89       	ldd	r22, Z+22	; 0x16
 c8c:	77 89       	ldd	r23, Z+23	; 0x17
 c8e:	45 2b       	or	r20, r21
 c90:	46 2b       	or	r20, r22
 c92:	47 2b       	or	r20, r23
 c94:	a1 f3       	breq	.-24     	; 0xc7e <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c96:	86 81       	ldd	r24, Z+6	; 0x06
 c98:	8f 70       	andi	r24, 0x0F	; 15
 c9a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c9e:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 ca2:	82 ff       	sbrs	r24, 2
 ca4:	ec cf       	rjmp	.-40     	; 0xc7e <CDC_Device_ReceiveByte+0x6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 ca6:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 caa:	88 23       	and	r24, r24
 cac:	21 f0       	breq	.+8      	; 0xcb6 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cae:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 cb6:	2f ef       	ldi	r18, 0xFF	; 255
 cb8:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 cba:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 cbe:	81 11       	cpse	r24, r1
 cc0:	05 c0       	rjmp	.+10     	; 0xccc <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cc2:	80 91 e8 00 	lds	r24, 0x00E8
 cc6:	8b 77       	andi	r24, 0x7B	; 123
 cc8:	80 93 e8 00 	sts	0x00E8, r24
 ccc:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 cce:	08 95       	ret

00000cd0 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 cd0:	08 95       	ret

00000cd2 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cd2:	cf 93       	push	r28
 cd4:	df 93       	push	r29
 cd6:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cd8:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 cdc:	83 ff       	sbrs	r24, 3
 cde:	a5 c0       	rjmp	.+330    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 ce0:	88 81       	ld	r24, Y
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	20 91 b1 01 	lds	r18, 0x01B1
 ce8:	30 91 b2 01 	lds	r19, 0x01B2
 cec:	28 17       	cp	r18, r24
 cee:	39 07       	cpc	r19, r25
 cf0:	09 f0       	breq	.+2      	; 0xcf4 <CDC_Device_ProcessControlRequest+0x22>
 cf2:	9b c0       	rjmp	.+310    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
	  return;

	switch (USB_ControlRequest.bRequest)
 cf4:	80 91 ae 01 	lds	r24, 0x01AE
 cf8:	81 32       	cpi	r24, 0x21	; 33
 cfa:	61 f0       	breq	.+24     	; 0xd14 <CDC_Device_ProcessControlRequest+0x42>
 cfc:	20 f4       	brcc	.+8      	; 0xd06 <CDC_Device_ProcessControlRequest+0x34>
 cfe:	80 32       	cpi	r24, 0x20	; 32
 d00:	09 f4       	brne	.+2      	; 0xd04 <CDC_Device_ProcessControlRequest+0x32>
 d02:	3e c0       	rjmp	.+124    	; 0xd80 <CDC_Device_ProcessControlRequest+0xae>
 d04:	92 c0       	rjmp	.+292    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
 d06:	82 32       	cpi	r24, 0x22	; 34
 d08:	09 f4       	brne	.+2      	; 0xd0c <CDC_Device_ProcessControlRequest+0x3a>
 d0a:	6b c0       	rjmp	.+214    	; 0xde2 <CDC_Device_ProcessControlRequest+0x110>
 d0c:	83 32       	cpi	r24, 0x23	; 35
 d0e:	09 f4       	brne	.+2      	; 0xd12 <CDC_Device_ProcessControlRequest+0x40>
 d10:	7c c0       	rjmp	.+248    	; 0xe0a <CDC_Device_ProcessControlRequest+0x138>
 d12:	8b c0       	rjmp	.+278    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d14:	80 91 ad 01 	lds	r24, 0x01AD
 d18:	81 3a       	cpi	r24, 0xA1	; 161
 d1a:	09 f0       	breq	.+2      	; 0xd1e <CDC_Device_ProcessControlRequest+0x4c>
 d1c:	86 c0       	rjmp	.+268    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	87 7f       	andi	r24, 0xF7	; 247
 d24:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d28:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 d2c:	80 ff       	sbrs	r24, 0
 d2e:	fc cf       	rjmp	.-8      	; 0xd28 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 d30:	4c 89       	ldd	r20, Y+20	; 0x14
 d32:	5d 89       	ldd	r21, Y+21	; 0x15
 d34:	6e 89       	ldd	r22, Y+22	; 0x16
 d36:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 d38:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 d3c:	bb 27       	eor	r27, r27
 d3e:	a7 2f       	mov	r26, r23
 d40:	96 2f       	mov	r25, r22
 d42:	85 2f       	mov	r24, r21
 d44:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 d48:	cb 01       	movw	r24, r22
 d4a:	aa 27       	eor	r26, r26
 d4c:	bb 27       	eor	r27, r27
 d4e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 d52:	47 2f       	mov	r20, r23
 d54:	55 27       	eor	r21, r21
 d56:	66 27       	eor	r22, r22
 d58:	77 27       	eor	r23, r23
 d5a:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 d5e:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d60:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 d64:	89 8d       	ldd	r24, Y+25	; 0x19
 d66:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 d6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 d6c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d70:	80 91 e8 00 	lds	r24, 0x00E8
 d74:	8e 77       	andi	r24, 0x7E	; 126
 d76:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 d7a:	df 91       	pop	r29
 d7c:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 d7e:	38 cc       	rjmp	.-1936   	; 0x5f0 <Endpoint_ClearStatusStage>
 d80:	80 91 ad 01 	lds	r24, 0x01AD
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d84:	81 32       	cpi	r24, 0x21	; 33
 d86:	09 f0       	breq	.+2      	; 0xd8a <CDC_Device_ProcessControlRequest+0xb8>
 d88:	50 c0       	rjmp	.+160    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
 d8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d8e:	87 7f       	andi	r24, 0xF7	; 247
 d90:	80 93 e8 00 	sts	0x00E8, r24
 d94:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d98:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 d9a:	04 c0       	rjmp	.+8      	; 0xda4 <CDC_Device_ProcessControlRequest+0xd2>
 d9c:	8e b3       	in	r24, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 d9e:	81 11       	cpse	r24, r1
 da0:	f9 cf       	rjmp	.-14     	; 0xd94 <CDC_Device_ProcessControlRequest+0xc2>
 da2:	43 c0       	rjmp	.+134    	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
 da4:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 da8:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 dac:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 db0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 db4:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 db6:	2d 8b       	std	Y+21, r18	; 0x15
 db8:	9e 8b       	std	Y+22, r25	; 0x16
 dba:	8f 8b       	std	Y+23, r24	; 0x17
 dbc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 dc0:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 dc2:	80 91 f1 00 	lds	r24, 0x00F1
 dc6:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 dc8:	80 91 f1 00 	lds	r24, 0x00F1
 dcc:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 dce:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dd2:	8b 77       	andi	r24, 0x7B	; 123
 dd4:	80 93 e8 00 	sts	0x00E8, r24
 dd8:	0b dc       	rcall	.-2026   	; 0x5f0 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 dda:	ce 01       	movw	r24, r28
 ddc:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 dde:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 de0:	77 cf       	rjmp	.-274    	; 0xcd0 <CDC_Device_Event_Stub>
 de2:	80 91 ad 01 	lds	r24, 0x01AD
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 de6:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 de8:	01 f5       	brne	.+64     	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
 dea:	80 91 e8 00 	lds	r24, 0x00E8
 dee:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 df0:	80 93 e8 00 	sts	0x00E8, r24
 df4:	fd db       	rcall	.-2054   	; 0x5f0 <Endpoint_ClearStatusStage>
 df6:	80 91 af 01 	lds	r24, 0x01AF
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dfa:	90 91 b0 01 	lds	r25, 0x01B0

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 dfe:	99 8b       	std	Y+17, r25	; 0x11
 e00:	88 8b       	std	Y+16, r24	; 0x10
 e02:	ce 01       	movw	r24, r28
 e04:	df 91       	pop	r29
 e06:	cf 91       	pop	r28
 e08:	63 cf       	rjmp	.-314    	; 0xcd0 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e0a:	80 91 ad 01 	lds	r24, 0x01AD
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e0e:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e10:	61 f4       	brne	.+24     	; 0xe2a <CDC_Device_ProcessControlRequest+0x158>
 e12:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e16:	87 7f       	andi	r24, 0xF7	; 247
 e18:	80 93 e8 00 	sts	0x00E8, r24
 e1c:	e9 db       	rcall	.-2094   	; 0x5f0 <Endpoint_ClearStatusStage>
 e1e:	60 91 af 01 	lds	r22, 0x01AF
 e22:	ce 01       	movw	r24, r28
 e24:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e26:	cf 91       	pop	r28
 e28:	53 cf       	rjmp	.-346    	; 0xcd0 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e2a:	df 91       	pop	r29
 e2c:	cf 91       	pop	r28
 e2e:	08 95       	ret

00000e30 <_exit>:
			}

			break;
	}
}
 e30:	f8 94       	cli

00000e32 <__stop_program>:
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <__stop_program>


AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800104  00800104  00000d98  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005713  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015cc  00000000  00000000  00007117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002423  00000000  00000000  000086e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008f0  00000000  00000000  0000ab08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b13  00000000  00000000  0000b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b06  00000000  00000000  0000df0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00011a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
   6:	00 00       	nop
   8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
   a:	00 00       	nop
   c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
   e:	00 00       	nop
  10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
  16:	00 00       	nop
  18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
  1e:	00 00       	nop
  20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
  22:	00 00       	nop
  24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
  26:	00 00       	nop
  28:	0f c4       	rjmp	.+2078   	; 0x848 <__vector_10>
  2a:	00 00       	nop
  2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
  2e:	00 00       	nop
  30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
  32:	00 00       	nop
  34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
  42:	00 00       	nop
  44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
  4e:	00 00       	nop
  50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	9c c1       	rjmp	.+824    	; 0x38e <__vector_21>
  56:	00 00       	nop
  58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
  5e:	00 00       	nop
  60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
  66:	00 00       	nop
  68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
  6e:	00 00       	nop
  70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
  72:	00 00       	nop
  74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
  76:	00 00       	nop
  78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
  82:	00 00       	nop
  84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
  86:	00 00       	nop
  88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
  8e:	00 00       	nop
  90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000c2 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000dc <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  e0:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f0:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
 100:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 110:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
 120:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 130:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 140:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000150 <DeviceDescriptor>:
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	12 01 10 01 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
 160:	00 01                                               ..

00000162 <__ctors_end>:
				ReportSize     -= 2;
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
				ReportData     += 2;
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d0 e2       	ldi	r29, 0x20	; 32
 16a:	de bf       	out	0x3e, r29	; 62
				break;
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e0 e0       	ldi	r30, 0x00	; 0
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	00 e0       	ldi	r16, 0x00	; 0
				ReportSize     -= 1;
 17a:	0b bf       	out	0x3b, r16	; 59
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
				ReportData     += 1;
 17e:	07 90       	elpm	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	a4 30       	cpi	r26, 0x04	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	b1 07       	cpc	r27, r17
 186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	a4 e0       	ldi	r26, 0x04	; 4
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
 190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
 192:	a2 31       	cpi	r26, 0x12	; 18
 194:	b1 07       	cpc	r27, r17
 196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
 198:	22 d0       	rcall	.+68     	; 0x1de <main>
 19a:	b0 c5       	rjmp	.+2912   	; 0xcfc <_exit>

0000019c <__bad_interrupt>:
 19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <LEDs_SetAllLEDs>:
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	98 2b       	or	r25, r24
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	08 95       	ret

000001a8 <SetupHardware>:
 1a8:	84 b7       	in	r24, 0x34	; 52

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	84 bf       	out	0x34, r24	; 52
 1ae:	88 e1       	ldi	r24, 0x18	; 24
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
				break;
 1b4:	80 93 60 00 	sts	0x0060, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b8:	10 92 60 00 	sts	0x0060, r1
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	80 93 61 00 	sts	0x0061, r24
 1ca:	90 93 61 00 	sts	0x0061, r25
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	80 6f       	ori	r24, 0xF0	; 240
 1d4:	8a b9       	out	0x0a, r24	; 10
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	8b b9       	out	0x0b, r24	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	1a c3       	rjmp	.+1588   	; 0x812 <USB_Init>

000001de <main>:
 1de:	e4 df       	rcall	.-56     	; 0x1a8 <SetupHardware>
 1e0:	80 e1       	ldi	r24, 0x10	; 16
 1e2:	dd df       	rcall	.-70     	; 0x19e <LEDs_SetAllLEDs>
 1e4:	78 94       	sei
 1e6:	4c d5       	rcall	.+2712   	; 0xc80 <USB_USBTask>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <main+0x8>

000001ea <EVENT_USB_Device_Connect>:
 1ea:	cf 93       	push	r28
				break;
 1ec:	80 ea       	ldi	r24, 0xA0	; 160
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	d7 df       	rcall	.-82     	; 0x19e <LEDs_SetAllLEDs>
 1f0:	c2 e0       	ldi	r28, 0x02	; 2
 1f2:	c0 93 6e 00 	sts	0x006E, r28
 1f6:	20 91 00 01 	lds	r18, 0x0100
 1fa:	30 91 01 01 	lds	r19, 0x0101
 1fe:	40 91 02 01 	lds	r20, 0x0102
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	50 91 03 01 	lds	r21, 0x0103
				break;
 206:	60 e4       	ldi	r22, 0x40	; 64
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	72 e4       	ldi	r23, 0x42	; 66
 20a:	8f e0       	ldi	r24, 0x0F	; 15
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	54 d5       	rcall	.+2728   	; 0xcb8 <__udivmodsi4>
 210:	21 50       	subi	r18, 0x01	; 1
 212:	27 bd       	out	0x27, r18	; 39
 214:	c4 bd       	out	0x24, r28	; 36
 216:	c5 bd       	out	0x25, r28	; 37
 218:	87 b1       	in	r24, 0x07	; 7
 21a:	80 66       	ori	r24, 0x60	; 96
 21c:	87 b9       	out	0x07, r24	; 7
 21e:	81 ef       	ldi	r24, 0xF1	; 241
 220:	80 93 90 00 	sts	0x0090, r24
 224:	89 e0       	ldi	r24, 0x09	; 9
 226:	80 93 91 00 	sts	0x0091, r24
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <EVENT_USB_Device_Disconnect>:
 22e:	15 bc       	out	0x25, r1	; 37
 230:	10 92 91 00 	sts	0x0091, r1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	87 b1       	in	r24, 0x07	; 7
 236:	8f 79       	andi	r24, 0x9F	; 159
 238:	87 b9       	out	0x07, r24	; 7
 23a:	10 92 04 01 	sts	0x0104, r1
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	ae cf       	rjmp	.-164    	; 0x19e <LEDs_SetAllLEDs>

00000242 <EVENT_USB_Device_ConfigurationChanged>:
 242:	46 e5       	ldi	r20, 0x56	; 86
 244:	60 e4       	ldi	r22, 0x40	; 64
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	49 d2       	rcall	.+1170   	; 0x6dc <Endpoint_ConfigureEndpoint_Prv>
 24a:	88 23       	and	r24, r24
 24c:	11 f0       	breq	.+4      	; 0x252 <EVENT_USB_Device_ConfigurationChanged+0x10>
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	01 c0       	rjmp	.+2      	; 0x254 <EVENT_USB_Device_ConfigurationChanged+0x12>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	80 e9       	ldi	r24, 0x90	; 144
 254:	a4 cf       	rjmp	.-184    	; 0x19e <LEDs_SetAllLEDs>

00000256 <EVENT_USB_Device_ControlRequest>:
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <EVENT_USB_Device_ControlRequest+0x6>
 25c:	1f 92       	push	r1
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	80 91 0b 01 	lds	r24, 0x010B
 266:	8b 30       	cpi	r24, 0x0B	; 11
 268:	51 f0       	breq	.+20     	; 0x27e <EVENT_USB_Device_ControlRequest+0x28>
 26a:	18 f4       	brcc	.+6      	; 0x272 <EVENT_USB_Device_ControlRequest+0x1c>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	51 f1       	breq	.+84     	; 0x2c4 <EVENT_USB_Device_ControlRequest+0x6e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	88 c0       	rjmp	.+272    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
				break;
 272:	81 38       	cpi	r24, 0x81	; 129

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	09 f4       	brne	.+2      	; 0x278 <EVENT_USB_Device_ControlRequest+0x22>
 276:	61 c0       	rjmp	.+194    	; 0x33a <EVENT_USB_Device_ControlRequest+0xe4>
 278:	8f 3f       	cpi	r24, 0xFF	; 255
 27a:	b9 f0       	breq	.+46     	; 0x2aa <EVENT_USB_Device_ControlRequest+0x54>
 27c:	82 c0       	rjmp	.+260    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 27e:	80 91 0a 01 	lds	r24, 0x010A
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 282:	81 30       	cpi	r24, 0x01	; 1
				break;
 284:	09 f0       	breq	.+2      	; 0x288 <EVENT_USB_Device_ControlRequest+0x32>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	7d c0       	rjmp	.+250    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 288:	80 91 e8 00 	lds	r24, 0x00E8
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	80 93 e8 00 	sts	0x00E8, r24
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	59 d2       	rcall	.+1202   	; 0x746 <Endpoint_ClearStatusStage>
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	80 91 0c 01 	lds	r24, 0x010C
 29a:	90 91 0d 01 	lds	r25, 0x010D
 29e:	89 2b       	or	r24, r25
				break;
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <EVENT_USB_Device_ControlRequest+0x4e>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	20 93 04 01 	sts	0x0104, r18
 2a8:	6c c0       	rjmp	.+216    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 2aa:	80 91 0a 01 	lds	r24, 0x010A
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	81 52       	subi	r24, 0x21	; 33
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <EVENT_USB_Device_ControlRequest+0x60>
 2b4:	66 c0       	rjmp	.+204    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 2b6:	80 91 e8 00 	lds	r24, 0x00E8
 2ba:	87 7f       	andi	r24, 0xF7	; 247
				break;
 2bc:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	42 d2       	rcall	.+1156   	; 0x746 <Endpoint_ClearStatusStage>
 2c2:	5f c0       	rjmp	.+190    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 2c4:	80 91 0a 01 	lds	r24, 0x010A
 2c8:	82 32       	cpi	r24, 0x22	; 34
 2ca:	09 f0       	breq	.+2      	; 0x2ce <EVENT_USB_Device_ControlRequest+0x78>
				break;
 2cc:	5a c0       	rjmp	.+180    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	80 91 0d 01 	lds	r24, 0x010D
 2d2:	90 91 0e 01 	lds	r25, 0x010E
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	91 30       	cpi	r25, 0x01	; 1
 2d8:	09 f0       	breq	.+2      	; 0x2dc <EVENT_USB_Device_ControlRequest+0x86>
 2da:	53 c0       	rjmp	.+166    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>

				if (ParserData->UsingReportIDs)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x8c>
 2e0:	50 c0       	rjmp	.+160    	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 2e2:	80 91 e8 00 	lds	r24, 0x00E8
 2e6:	87 7f       	andi	r24, 0xF7	; 247
 2e8:	80 93 e8 00 	sts	0x00E8, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	55 d1       	rcall	.+682    	; 0x5a0 <Endpoint_Read_Control_Stream_LE>
 2f6:	80 91 e8 00 	lds	r24, 0x00E8
 2fa:	8e 77       	andi	r24, 0x7E	; 126
 2fc:	80 93 e8 00 	sts	0x00E8, r24
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	2a 81       	ldd	r18, Y+2	; 0x02
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	42 2f       	mov	r20, r18
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	22 27       	eor	r18, r18
 30e:	34 2f       	mov	r19, r20
 310:	45 2f       	mov	r20, r21
 312:	56 2f       	mov	r21, r22
 314:	48 2b       	or	r20, r24
 316:	89 81       	ldd	r24, Y+1	; 0x01
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	28 2b       	or	r18, r24
 31a:	20 93 00 01 	sts	0x0100, r18
 31e:	30 93 01 01 	sts	0x0101, r19
 322:	40 93 02 01 	sts	0x0102, r20
 326:	50 93 03 01 	sts	0x0103, r21
 32a:	60 e4       	ldi	r22, 0x40	; 64
 32c:	72 e4       	ldi	r23, 0x42	; 66
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	c2 d4       	rcall	.+2436   	; 0xcb8 <__udivmodsi4>
 334:	21 50       	subi	r18, 0x01	; 1
 336:	27 bd       	out	0x27, r18	; 39
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	24 c0       	rjmp	.+72     	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 33a:	80 91 0a 01 	lds	r24, 0x010A
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	82 3a       	cpi	r24, 0xA2	; 162
 340:	01 f5       	brne	.+64     	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 342:	80 91 0d 01 	lds	r24, 0x010D
 346:	90 91 0e 01 	lds	r25, 0x010E
 34a:	91 30       	cpi	r25, 0x01	; 1
 34c:	d1 f4       	brne	.+52     	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	c1 f4       	brne	.+48     	; 0x382 <EVENT_USB_Device_ControlRequest+0x12c>
 352:	80 91 00 01 	lds	r24, 0x0100
 356:	90 91 01 01 	lds	r25, 0x0101
 35a:	20 91 02 01 	lds	r18, 0x0102
 35e:	2b 83       	std	Y+3, r18	; 0x03
 360:	9a 83       	std	Y+2, r25	; 0x02
 362:	89 83       	std	Y+1, r24	; 0x01
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	80 91 e8 00 	lds	r24, 0x00E8
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	80 93 e8 00 	sts	0x00E8, r24
					}
				}

				ParserData->UsingReportIDs = true;
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	b7 d0       	rcall	.+366    	; 0x4e6 <Endpoint_Write_Control_Stream_LE>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	80 91 e8 00 	lds	r24, 0x00E8
 37c:	8b 77       	andi	r24, 0x7B	; 123
 37e:	80 93 e8 00 	sts	0x00E8, r24
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
				break;
 388:	df 91       	pop	r29

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <__vector_21>:
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	11 24       	eor	r1, r1
 398:	0b b6       	in	r0, 0x3b	; 59
 39a:	0f 92       	push	r0
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
				break;
 3b0:	cf 93       	push	r28
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
 3b6:	80 91 e9 00 	lds	r24, 0x00E9
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	90 91 ec 00 	lds	r25, 0x00EC
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3c0:	90 ff       	sbrs	r25, 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <__vector_21+0x3a>
 3c4:	90 e8       	ldi	r25, 0x80	; 128
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <__vector_21+0x3c>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	c9 2f       	mov	r28, r25
 3cc:	c8 2b       	or	r28, r24
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 e9 00 	sts	0x00E9, r24

					while (CurrCollectionPath->Parent != NULL)
 3d4:	80 91 e8 00 	lds	r24, 0x00E8
 3d8:	82 ff       	sbrs	r24, 2
 3da:	3c c0       	rjmp	.+120    	; 0x454 <__vector_21+0xc6>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	80 91 04 01 	lds	r24, 0x0104
 3e0:	88 23       	and	r24, r24
 3e2:	c1 f1       	breq	.+112    	; 0x454 <__vector_21+0xc6>
 3e4:	80 91 f1 00 	lds	r24, 0x00F1
 3e8:	40 91 f1 00 	lds	r20, 0x00F1
 3ec:	80 91 f1 00 	lds	r24, 0x00F1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	20 91 f1 00 	lds	r18, 0x00F1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	55 27       	eor	r21, r21
 3f6:	47 fd       	sbrc	r20, 7
 3f8:	50 95       	com	r21
 3fa:	33 27       	eor	r19, r19
 3fc:	27 fd       	sbrc	r18, 7
 3fe:	30 95       	com	r19
 400:	ca 01       	movw	r24, r20
 402:	82 0f       	add	r24, r18
 404:	93 1f       	adc	r25, r19
 406:	95 95       	asr	r25
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	87 95       	ror	r24
 40a:	90 91 e8 00 	lds	r25, 0x00E8
 40e:	95 fd       	sbrc	r25, 5
 410:	05 c0       	rjmp	.+10     	; 0x41c <__vector_21+0x8e>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	90 91 e8 00 	lds	r25, 0x00E8
 416:	9b 77       	andi	r25, 0x7B	; 123
 418:	90 93 e8 00 	sts	0x00E8, r25
 41c:	40 58       	subi	r20, 0x80	; 128
 41e:	50 93 99 00 	sts	0x0099, r21

				if (UsageListSize)
 422:	40 93 98 00 	sts	0x0098, r20
 426:	20 58       	subi	r18, 0x80	; 128
 428:	30 93 9b 00 	sts	0x009B, r19
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42c:	20 93 9a 00 	sts	0x009A, r18
 430:	81 31       	cpi	r24, 0x11	; 17
 432:	44 f4       	brge	.+16     	; 0x444 <__vector_21+0xb6>
 434:	89 30       	cpi	r24, 0x09	; 9
 436:	44 f4       	brge	.+16     	; 0x448 <__vector_21+0xba>
 438:	85 30       	cpi	r24, 0x05	; 5
 43a:	44 f4       	brge	.+16     	; 0x44c <__vector_21+0xbe>
 43c:	83 30       	cpi	r24, 0x03	; 3
 43e:	44 f4       	brge	.+16     	; 0x450 <__vector_21+0xc2>

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	07 c0       	rjmp	.+14     	; 0x452 <__vector_21+0xc4>
 444:	80 ef       	ldi	r24, 0xF0	; 240
 446:	05 c0       	rjmp	.+10     	; 0x452 <__vector_21+0xc4>
 448:	80 eb       	ldi	r24, 0xB0	; 176
 44a:	03 c0       	rjmp	.+6      	; 0x452 <__vector_21+0xc4>
					  UsageList[i - 1] = UsageList[i];
 44c:	80 e3       	ldi	r24, 0x30	; 48
 44e:	01 c0       	rjmp	.+2      	; 0x452 <__vector_21+0xc4>
 450:	80 e1       	ldi	r24, 0x10	; 16
 452:	a5 de       	rcall	.-694    	; 0x19e <LEDs_SetAllLEDs>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	cf 70       	andi	r28, 0x0F	; 15
 456:	c0 93 e9 00 	sts	0x00E9, r28
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	cf 91       	pop	r28
 460:	bf 91       	pop	r27
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0b be       	out	0x3b, r0	; 59
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <CALLBACK_USB_GetDescriptor>:
 482:	29 2f       	mov	r18, r25
 484:	33 27       	eor	r19, r19
 486:	22 30       	cpi	r18, 0x02	; 2
 488:	31 05       	cpc	r19, r1
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	59 f0       	breq	.+22     	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x20>
 48c:	23 30       	cpi	r18, 0x03	; 3
 48e:	31 05       	cpc	r19, r1
 490:	69 f0       	breq	.+26     	; 0x4ac <CALLBACK_USB_GetDescriptor+0x2a>
 492:	21 30       	cpi	r18, 0x01	; 1
 494:	31 05       	cpc	r19, r1
 496:	f9 f4       	brne	.+62     	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x54>
 498:	82 e1       	ldi	r24, 0x12	; 18
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	20 e5       	ldi	r18, 0x50	; 80
 49e:	31 e0       	ldi	r19, 0x01	; 1
 4a0:	1e c0       	rjmp	.+60     	; 0x4de <CALLBACK_USB_GetDescriptor+0x5c>
 4a2:	80 e7       	ldi	r24, 0x70	; 112
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	20 ee       	ldi	r18, 0xE0	; 224
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	19 c0       	rjmp	.+50     	; 0x4de <CALLBACK_USB_GetDescriptor+0x5c>
				break;
 4ac:	99 27       	eor	r25, r25
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 05       	cpc	r25, r1
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x42>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	91 05       	cpc	r25, r1
 4b8:	41 f0       	breq	.+16     	; 0x4ca <CALLBACK_USB_GetDescriptor+0x48>
 4ba:	89 2b       	or	r24, r25
 4bc:	61 f4       	brne	.+24     	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x54>
 4be:	ec ed       	ldi	r30, 0xDC	; 220
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x4c>
 4c4:	e2 ec       	ldi	r30, 0xC2	; 194
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <CALLBACK_USB_GetDescriptor+0x4c>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	e8 e9       	ldi	r30, 0x98	; 152
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	84 91       	lpm	r24, Z
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	9f 01       	movw	r18, r30
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <CALLBACK_USB_GetDescriptor+0x5c>
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	fa 01       	movw	r30, r20
 4e0:	31 83       	std	Z+1, r19	; 0x01
 4e2:	20 83       	st	Z, r18
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	08 95       	ret

000004e6 <Endpoint_Write_Control_Stream_LE>:
 4e6:	20 91 10 01 	lds	r18, 0x0110
 4ea:	30 91 11 01 	lds	r19, 0x0111
 4ee:	26 17       	cp	r18, r22
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	37 07       	cpc	r19, r23
 4f2:	48 f0       	brcs	.+18     	; 0x506 <Endpoint_Write_Control_Stream_LE+0x20>
 4f4:	61 15       	cp	r22, r1
 4f6:	71 05       	cpc	r23, r1
 4f8:	39 f4       	brne	.+14     	; 0x508 <Endpoint_Write_Control_Stream_LE+0x22>
 4fa:	20 91 e8 00 	lds	r18, 0x00E8
 4fe:	2e 77       	andi	r18, 0x7E	; 126
 500:	20 93 e8 00 	sts	0x00E8, r18
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 504:	01 c0       	rjmp	.+2      	; 0x508 <Endpoint_Write_Control_Stream_LE+0x22>
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	b9 01       	movw	r22, r18
 508:	fc 01       	movw	r30, r24
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	61 15       	cp	r22, r1
 50e:	71 05       	cpc	r23, r1
 510:	99 f1       	breq	.+102    	; 0x578 <Endpoint_Write_Control_Stream_LE+0x92>
 512:	80 91 09 01 	lds	r24, 0x0109
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	88 23       	and	r24, r24
 518:	e9 f1       	breq	.+122    	; 0x594 <Endpoint_Write_Control_Stream_LE+0xae>
 51a:	85 30       	cpi	r24, 0x05	; 5
 51c:	e9 f1       	breq	.+122    	; 0x598 <Endpoint_Write_Control_Stream_LE+0xb2>

					if (UsageListSize)
 51e:	80 91 e8 00 	lds	r24, 0x00E8
 522:	83 fd       	sbrc	r24, 3
 524:	3b c0       	rjmp	.+118    	; 0x59c <Endpoint_Write_Control_Stream_LE+0xb6>
 526:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 52a:	82 ff       	sbrs	r24, 2
 52c:	06 c0       	rjmp	.+12     	; 0x53a <Endpoint_Write_Control_Stream_LE+0x54>
 52e:	80 91 e8 00 	lds	r24, 0x00E8
 532:	82 ff       	sbrs	r24, 2
 534:	24 c0       	rjmp	.+72     	; 0x57e <Endpoint_Write_Control_Stream_LE+0x98>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	08 95       	ret
 53a:	80 91 e8 00 	lds	r24, 0x00E8

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	80 ff       	sbrs	r24, 0
 540:	e5 cf       	rjmp	.-54     	; 0x50c <Endpoint_Write_Control_Stream_LE+0x26>
 542:	80 91 f2 00 	lds	r24, 0x00F2
 546:	90 91 f3 00 	lds	r25, 0x00F3
						  UsageList[i - 1] = UsageList[i];
 54a:	61 15       	cp	r22, r1
 54c:	71 05       	cpc	r23, r1
 54e:	51 f0       	breq	.+20     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x7e>
 550:	88 30       	cpi	r24, 0x08	; 8

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	91 05       	cpc	r25, r1
 554:	38 f4       	brcc	.+14     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x7e>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	21 91       	ld	r18, Z+
 558:	20 93 f1 00 	sts	0x00F1, r18
 55c:	61 50       	subi	r22, 0x01	; 1
 55e:	71 09       	sbc	r23, r1
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	f3 cf       	rjmp	.-26     	; 0x54a <Endpoint_Write_Control_Stream_LE+0x64>
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	08 97       	sbiw	r24, 0x08	; 8
 568:	09 f0       	breq	.+2      	; 0x56c <Endpoint_Write_Control_Stream_LE+0x86>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	80 91 e8 00 	lds	r24, 0x00E8
 570:	8e 77       	andi	r24, 0x7E	; 126
 572:	80 93 e8 00 	sts	0x00E8, r24
 576:	ca cf       	rjmp	.-108    	; 0x50c <Endpoint_Write_Control_Stream_LE+0x26>
 578:	21 11       	cpse	r18, r1
 57a:	cb cf       	rjmp	.-106    	; 0x512 <Endpoint_Write_Control_Stream_LE+0x2c>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	d8 cf       	rjmp	.-80     	; 0x52e <Endpoint_Write_Control_Stream_LE+0x48>
 57e:	80 91 09 01 	lds	r24, 0x0109
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 582:	88 23       	and	r24, r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	39 f0       	breq	.+14     	; 0x594 <Endpoint_Write_Control_Stream_LE+0xae>
 586:	85 30       	cpi	r24, 0x05	; 5
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	39 f0       	breq	.+14     	; 0x598 <Endpoint_Write_Control_Stream_LE+0xb2>
 58a:	80 91 e8 00 	lds	r24, 0x00E8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	83 ff       	sbrs	r24, 3
 590:	ce cf       	rjmp	.-100    	; 0x52e <Endpoint_Write_Control_Stream_LE+0x48>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	04 c0       	rjmp	.+8      	; 0x59c <Endpoint_Write_Control_Stream_LE+0xb6>
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	08 95       	ret
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	08 95       	ret
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	08 95       	ret

000005a0 <Endpoint_Read_Control_Stream_LE>:
 5a0:	61 15       	cp	r22, r1
 5a2:	71 05       	cpc	r23, r1
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x10>
 5a6:	20 91 e8 00 	lds	r18, 0x00E8
 5aa:	2b 77       	andi	r18, 0x7B	; 123

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	20 93 e8 00 	sts	0x00E8, r18
 5b0:	61 15       	cp	r22, r1
 5b2:	71 05       	cpc	r23, r1
 5b4:	31 f1       	breq	.+76     	; 0x602 <Endpoint_Read_Control_Stream_LE+0x62>
 5b6:	20 91 09 01 	lds	r18, 0x0109
 5ba:	22 23       	and	r18, r18

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	59 f1       	breq	.+86     	; 0x614 <Endpoint_Read_Control_Stream_LE+0x74>
 5be:	25 30       	cpi	r18, 0x05	; 5
 5c0:	59 f1       	breq	.+86     	; 0x618 <Endpoint_Read_Control_Stream_LE+0x78>
 5c2:	20 91 e8 00 	lds	r18, 0x00E8
 5c6:	23 fd       	sbrc	r18, 3
 5c8:	21 c0       	rjmp	.+66     	; 0x60c <Endpoint_Read_Control_Stream_LE+0x6c>
 5ca:	20 91 e8 00 	lds	r18, 0x00E8
 5ce:	22 ff       	sbrs	r18, 2
 5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <Endpoint_Read_Control_Stream_LE+0x16>
 5d2:	fc 01       	movw	r30, r24
 5d4:	cf 01       	movw	r24, r30
 5d6:	20 91 f2 00 	lds	r18, 0x00F2
 5da:	30 91 f3 00 	lds	r19, 0x00F3
 5de:	23 2b       	or	r18, r19
 5e0:	11 f3       	breq	.-60     	; 0x5a6 <Endpoint_Read_Control_Stream_LE+0x6>
 5e2:	80 91 f1 00 	lds	r24, 0x00F1
 5e6:	81 93       	st	Z+, r24
 5e8:	cf 01       	movw	r24, r30
 5ea:	61 50       	subi	r22, 0x01	; 1
 5ec:	71 09       	sbc	r23, r1
 5ee:	61 15       	cp	r22, r1
 5f0:	71 05       	cpc	r23, r1
 5f2:	81 f7       	brne	.-32     	; 0x5d4 <Endpoint_Read_Control_Stream_LE+0x34>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	d8 cf       	rjmp	.-80     	; 0x5a6 <Endpoint_Read_Control_Stream_LE+0x6>
 5f6:	80 91 09 01 	lds	r24, 0x0109
 5fa:	88 23       	and	r24, r24
 5fc:	59 f0       	breq	.+22     	; 0x614 <Endpoint_Read_Control_Stream_LE+0x74>
					  return HID_PARSE_InsufficientReportItems;
 5fe:	85 30       	cpi	r24, 0x05	; 5
 600:	59 f0       	breq	.+22     	; 0x618 <Endpoint_Read_Control_Stream_LE+0x78>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	80 91 e8 00 	lds	r24, 0x00E8
 606:	80 ff       	sbrs	r24, 0
 608:	f6 cf       	rjmp	.-20     	; 0x5f6 <Endpoint_Read_Control_Stream_LE+0x56>
 60a:	02 c0       	rjmp	.+4      	; 0x610 <Endpoint_Read_Control_Stream_LE+0x70>
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	08 95       	ret
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	08 95       	ret
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	08 95       	ret
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	08 95       	ret

0000061c <Endpoint_Write_Control_PStream_LE>:
 61c:	20 91 10 01 	lds	r18, 0x0110
 620:	30 91 11 01 	lds	r19, 0x0111
 624:	26 17       	cp	r18, r22
 626:	37 07       	cpc	r19, r23
 628:	48 f0       	brcs	.+18     	; 0x63c <Endpoint_Write_Control_PStream_LE+0x20>
 62a:	61 15       	cp	r22, r1
 62c:	71 05       	cpc	r23, r1
 62e:	39 f4       	brne	.+14     	; 0x63e <Endpoint_Write_Control_PStream_LE+0x22>
 630:	20 91 e8 00 	lds	r18, 0x00E8
 634:	2e 77       	andi	r18, 0x7E	; 126
 636:	20 93 e8 00 	sts	0x00E8, r18
 63a:	01 c0       	rjmp	.+2      	; 0x63e <Endpoint_Write_Control_PStream_LE+0x22>
 63c:	b9 01       	movw	r22, r18
 63e:	fc 01       	movw	r30, r24
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	61 15       	cp	r22, r1
 644:	71 05       	cpc	r23, r1
 646:	b1 f1       	breq	.+108    	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0x98>
 648:	80 91 09 01 	lds	r24, 0x0109
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <Endpoint_Write_Control_PStream_LE+0x36>
 650:	3f c0       	rjmp	.+126    	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0xb4>
 652:	85 30       	cpi	r24, 0x05	; 5
 654:	09 f4       	brne	.+2      	; 0x658 <Endpoint_Write_Control_PStream_LE+0x3c>
 656:	3e c0       	rjmp	.+124    	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0xb8>
 658:	80 91 e8 00 	lds	r24, 0x00E8
 65c:	83 fd       	sbrc	r24, 3
 65e:	3c c0       	rjmp	.+120    	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0xbc>
 660:	80 91 e8 00 	lds	r24, 0x00E8
 664:	82 ff       	sbrs	r24, 2
 666:	06 c0       	rjmp	.+12     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x58>
 668:	80 91 e8 00 	lds	r24, 0x00E8
 66c:	82 ff       	sbrs	r24, 2
 66e:	25 c0       	rjmp	.+74     	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x9e>
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	08 95       	ret
 674:	80 91 e8 00 	lds	r24, 0x00E8
 678:	80 ff       	sbrs	r24, 0
 67a:	e3 cf       	rjmp	.-58     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x26>
 67c:	80 91 f2 00 	lds	r24, 0x00F2
 680:	90 91 f3 00 	lds	r25, 0x00F3
 684:	61 15       	cp	r22, r1
 686:	71 05       	cpc	r23, r1
					  ParserData->TotalReportItems++;
 688:	59 f0       	breq	.+22     	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x84>
 68a:	88 30       	cpi	r24, 0x08	; 8
 68c:	91 05       	cpc	r25, r1
 68e:	40 f4       	brcc	.+16     	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x84>
 690:	24 91       	lpm	r18, Z

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	20 93 f1 00 	sts	0x00F1, r18
 696:	31 96       	adiw	r30, 0x01	; 1
 698:	61 50       	subi	r22, 0x01	; 1
 69a:	71 09       	sbc	r23, r1
 69c:	01 96       	adiw	r24, 0x01	; 1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	f2 cf       	rjmp	.-28     	; 0x684 <Endpoint_Write_Control_PStream_LE+0x68>
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	08 97       	sbiw	r24, 0x08	; 8
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0x8c>
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	80 91 e8 00 	lds	r24, 0x00E8
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6ac:	8e 77       	andi	r24, 0x7E	; 126
 6ae:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	c7 cf       	rjmp	.-114    	; 0x642 <Endpoint_Write_Control_PStream_LE+0x26>
 6b4:	21 11       	cpse	r18, r1
 6b6:	c8 cf       	rjmp	.-112    	; 0x648 <Endpoint_Write_Control_PStream_LE+0x2c>
 6b8:	d7 cf       	rjmp	.-82     	; 0x668 <Endpoint_Write_Control_PStream_LE+0x4c>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	80 91 09 01 	lds	r24, 0x0109

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	88 23       	and	r24, r24
 6c0:	39 f0       	breq	.+14     	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0xb4>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	85 30       	cpi	r24, 0x05	; 5
 6c4:	39 f0       	breq	.+14     	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0xb8>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	80 91 e8 00 	lds	r24, 0x00E8
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	83 ff       	sbrs	r24, 3
 6cc:	cd cf       	rjmp	.-102    	; 0x668 <Endpoint_Write_Control_PStream_LE+0x4c>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0xbc>
 6d0:	82 e0       	ldi	r24, 0x02	; 2
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	08 95       	ret
 6d4:	83 e0       	ldi	r24, 0x03	; 3
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	08 95       	ret

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	08 95       	ret

000006dc <Endpoint_ConfigureEndpoint_Prv>:
 6dc:	98 2f       	mov	r25, r24
 6de:	97 30       	cpi	r25, 0x07	; 7
 6e0:	58 f5       	brcc	.+86     	; 0x738 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 6e2:	90 93 e9 00 	sts	0x00E9, r25
 6e6:	98 17       	cp	r25, r24
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 6ea:	70 91 ec 00 	lds	r23, 0x00EC
 6ee:	20 91 ed 00 	lds	r18, 0x00ED
 6f2:	50 91 f0 00 	lds	r21, 0x00F0
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <Endpoint_ConfigureEndpoint_Prv+0x22>
 6f8:	24 2f       	mov	r18, r20
 6fa:	76 2f       	mov	r23, r22
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	21 ff       	sbrs	r18, 1
 700:	19 c0       	rjmp	.+50     	; 0x734 <Endpoint_ConfigureEndpoint_Prv+0x58>
 702:	30 91 eb 00 	lds	r19, 0x00EB
 706:	3e 7f       	andi	r19, 0xFE	; 254
 708:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 70c:	30 91 ed 00 	lds	r19, 0x00ED
 710:	3d 7f       	andi	r19, 0xFD	; 253
 712:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 716:	30 91 eb 00 	lds	r19, 0x00EB
 71a:	31 60       	ori	r19, 0x01	; 1
 71c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 720:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 724:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 728:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 72c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 730:	27 ff       	sbrs	r18, 7
 732:	07 c0       	rjmp	.+14     	; 0x742 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 734:	9f 5f       	subi	r25, 0xFF	; 255
 736:	d3 cf       	rjmp	.-90     	; 0x6de <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 738:	8f 70       	andi	r24, 0x0F	; 15
 73a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 742:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 744:	08 95       	ret

00000746 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 746:	80 91 0a 01 	lds	r24, 0x010A
 74a:	87 fd       	sbrc	r24, 7
 74c:	05 c0       	rjmp	.+10     	; 0x758 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 74e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 752:	80 ff       	sbrs	r24, 0
 754:	0e c0       	rjmp	.+28     	; 0x772 <Endpoint_ClearStatusStage+0x2c>
 756:	12 c0       	rjmp	.+36     	; 0x77c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 758:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 75c:	82 fd       	sbrc	r24, 2
 75e:	05 c0       	rjmp	.+10     	; 0x76a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 760:	80 91 09 01 	lds	r24, 0x0109
 764:	81 11       	cpse	r24, r1
 766:	f8 cf       	rjmp	.-16     	; 0x758 <Endpoint_ClearStatusStage+0x12>
 768:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 76a:	80 91 e8 00 	lds	r24, 0x00E8
 76e:	8b 77       	andi	r24, 0x7B	; 123
 770:	08 c0       	rjmp	.+16     	; 0x782 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 772:	80 91 09 01 	lds	r24, 0x0109
 776:	81 11       	cpse	r24, r1
 778:	ea cf       	rjmp	.-44     	; 0x74e <Endpoint_ClearStatusStage+0x8>
 77a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 77c:	80 91 e8 00 	lds	r24, 0x00E8
 780:	8e 77       	andi	r24, 0x7E	; 126
 782:	80 93 e8 00 	sts	0x00E8, r24
 786:	08 95       	ret

00000788 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 790:	4e d0       	rcall	.+156    	; 0x82e <USB_INT_DisableAllInterrupts>
 792:	55 d0       	rcall	.+170    	; 0x83e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 794:	c8 ed       	ldi	r28, 0xD8	; 216
 796:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 798:	88 81       	ld	r24, Y
 79a:	8f 77       	andi	r24, 0x7F	; 127
 79c:	88 83       	st	Y, r24
 79e:	88 81       	ld	r24, Y
 7a0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7a2:	88 83       	st	Y, r24
 7a4:	88 81       	ld	r24, Y
 7a6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7a8:	88 83       	st	Y, r24
 7aa:	e7 ed       	ldi	r30, 0xD7	; 215
 7ac:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7ae:	80 81       	ld	r24, Z
 7b0:	80 68       	ori	r24, 0x80	; 128
 7b2:	80 83       	st	Z, r24
 7b4:	19 bc       	out	0x29, r1	; 41
 7b6:	10 92 09 01 	sts	0x0109, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7ba:	10 92 05 01 	sts	0x0105, r1
	USB_Device_ConfigurationNumber  = 0;
 7be:	10 92 07 01 	sts	0x0107, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7c2:	10 92 06 01 	sts	0x0106, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7c6:	00 ee       	ldi	r16, 0xE0	; 224
 7c8:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7ca:	f8 01       	movw	r30, r16
 7cc:	80 81       	ld	r24, Z
 7ce:	8b 7f       	andi	r24, 0xFB	; 251
 7d0:	80 83       	st	Z, r24
 7d2:	88 81       	ld	r24, Y
 7d4:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7d6:	88 83       	st	Y, r24
 7d8:	42 e0       	ldi	r20, 0x02	; 2
 7da:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	7e df       	rcall	.-260    	; 0x6dc <Endpoint_ConfigureEndpoint_Prv>
 7e0:	e1 ee       	ldi	r30, 0xE1	; 225
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7e6:	8e 7f       	andi	r24, 0xFE	; 254
 7e8:	80 83       	st	Z, r24
 7ea:	e2 ee       	ldi	r30, 0xE2	; 226
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	80 83       	st	Z, r24
 7f4:	80 81       	ld	r24, Z
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7fa:	f8 01       	movw	r30, r16
 7fc:	80 81       	ld	r24, Z
 7fe:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 800:	80 83       	st	Z, r24
 802:	88 81       	ld	r24, Y
 804:	80 61       	ori	r24, 0x10	; 16
 806:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 80e:	0f 91       	pop	r16
 810:	08 95       	ret

00000812 <USB_Init>:
 812:	e8 ed       	ldi	r30, 0xD8	; 216
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 818:	8f 7e       	andi	r24, 0xEF	; 239
 81a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 81c:	e7 ed       	ldi	r30, 0xD7	; 215
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	81 60       	ori	r24, 0x01	; 1
 824:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	80 93 08 01 	sts	0x0108, r24

	USB_ResetInterface();
 82c:	ad cf       	rjmp	.-166    	; 0x788 <USB_ResetInterface>

0000082e <USB_INT_DisableAllInterrupts>:
 82e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	8c 7f       	andi	r24, 0xFC	; 252
 836:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 838:	10 92 e2 00 	sts	0x00E2, r1
 83c:	08 95       	ret

0000083e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 83e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 842:	10 92 e1 00 	sts	0x00E1, r1
 846:	08 95       	ret

00000848 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	0b b6       	in	r0, 0x3b	; 59
 854:	0f 92       	push	r0
 856:	2f 93       	push	r18
 858:	3f 93       	push	r19
 85a:	4f 93       	push	r20
 85c:	5f 93       	push	r21
 85e:	6f 93       	push	r22
 860:	7f 93       	push	r23
 862:	8f 93       	push	r24
 864:	9f 93       	push	r25
 866:	af 93       	push	r26
 868:	bf 93       	push	r27
 86a:	ef 93       	push	r30
 86c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 86e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 872:	82 ff       	sbrs	r24, 2
 874:	0a c0       	rjmp	.+20     	; 0x88a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 876:	80 91 e2 00 	lds	r24, 0x00E2
 87a:	82 ff       	sbrs	r24, 2
 87c:	06 c0       	rjmp	.+12     	; 0x88a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 87e:	80 91 e1 00 	lds	r24, 0x00E1
 882:	8b 7f       	andi	r24, 0xFB	; 251
 884:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 888:	fa d1       	rcall	.+1012   	; 0xc7e <USB_Event_Stub>
 88a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 88e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 890:	1d c0       	rjmp	.+58     	; 0x8cc <__vector_10+0x84>
 892:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 896:	80 ff       	sbrs	r24, 0
 898:	19 c0       	rjmp	.+50     	; 0x8cc <__vector_10+0x84>
 89a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 89e:	8e 7f       	andi	r24, 0xFE	; 254
 8a0:	80 93 da 00 	sts	0x00DA, r24
 8a4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8a8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <__vector_10+0x7c>
 8ac:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8ae:	89 bd       	out	0x29, r24	; 41
 8b0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8b2:	89 bd       	out	0x29, r24	; 41
 8b4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8b6:	00 fe       	sbrs	r0, 0
 8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <__vector_10+0x6c>
 8ba:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8bc:	80 93 09 01 	sts	0x0109, r24
 8c0:	94 dc       	rcall	.-1752   	; 0x1ea <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__vector_10+0x84>
 8c4:	19 bc       	out	0x29, r1	; 41
 8c6:	10 92 09 01 	sts	0x0109, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8ca:	b1 dc       	rcall	.-1694   	; 0x22e <EVENT_USB_Device_Disconnect>
 8cc:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8d0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8d2:	18 c0       	rjmp	.+48     	; 0x904 <__vector_10+0xbc>
 8d4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8d8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8da:	14 c0       	rjmp	.+40     	; 0x904 <__vector_10+0xbc>
 8dc:	80 91 e2 00 	lds	r24, 0x00E2
 8e0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8e2:	80 93 e2 00 	sts	0x00E2, r24
 8e6:	80 91 e2 00 	lds	r24, 0x00E2
 8ea:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8ec:	80 93 e2 00 	sts	0x00E2, r24
 8f0:	80 91 d8 00 	lds	r24, 0x00D8
 8f4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8f6:	80 93 d8 00 	sts	0x00D8, r24
 8fa:	19 bc       	out	0x29, r1	; 41
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	80 93 09 01 	sts	0x0109, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 902:	bd d1       	rcall	.+890    	; 0xc7e <USB_Event_Stub>
 904:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 908:	84 ff       	sbrs	r24, 4
 90a:	2f c0       	rjmp	.+94     	; 0x96a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 90c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 910:	84 ff       	sbrs	r24, 4
 912:	2b c0       	rjmp	.+86     	; 0x96a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 914:	8c e0       	ldi	r24, 0x0C	; 12
 916:	89 bd       	out	0x29, r24	; 41
 918:	8e e0       	ldi	r24, 0x0E	; 14
 91a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 91c:	09 b4       	in	r0, 0x29	; 41
 91e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 920:	fd cf       	rjmp	.-6      	; 0x91c <__vector_10+0xd4>
 922:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 926:	8f 7d       	andi	r24, 0xDF	; 223
 928:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 92c:	80 91 e1 00 	lds	r24, 0x00E1
 930:	8f 7e       	andi	r24, 0xEF	; 239
 932:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 936:	80 91 e2 00 	lds	r24, 0x00E2
 93a:	8f 7e       	andi	r24, 0xEF	; 239
 93c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 940:	80 91 e2 00 	lds	r24, 0x00E2
 944:	81 60       	ori	r24, 0x01	; 1
 946:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 94a:	80 91 05 01 	lds	r24, 0x0105
 94e:	88 23       	and	r24, r24
 950:	11 f0       	breq	.+4      	; 0x956 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 952:	84 e0       	ldi	r24, 0x04	; 4
 954:	07 c0       	rjmp	.+14     	; 0x964 <__vector_10+0x11c>
 956:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 95a:	87 ff       	sbrs	r24, 7
 95c:	02 c0       	rjmp	.+4      	; 0x962 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	01 c0       	rjmp	.+2      	; 0x964 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	80 93 09 01 	sts	0x0109, r24
 968:	8a d1       	rcall	.+788    	; 0xc7e <USB_Event_Stub>
 96a:	80 91 e1 00 	lds	r24, 0x00E1
 96e:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 970:	22 c0       	rjmp	.+68     	; 0x9b6 <__vector_10+0x16e>
 972:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 976:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 978:	1e c0       	rjmp	.+60     	; 0x9b6 <__vector_10+0x16e>
 97a:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 97e:	87 7f       	andi	r24, 0xF7	; 247
 980:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	80 93 09 01 	sts	0x0109, r24
 98a:	10 92 05 01 	sts	0x0105, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 98e:	80 91 e1 00 	lds	r24, 0x00E1
 992:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 994:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 998:	80 91 e2 00 	lds	r24, 0x00E2
 99c:	8e 7f       	andi	r24, 0xFE	; 254
 99e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9a2:	80 91 e2 00 	lds	r24, 0x00E2
 9a6:	80 61       	ori	r24, 0x10	; 16
 9a8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9ac:	42 e0       	ldi	r20, 0x02	; 2
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	94 de       	rcall	.-728    	; 0x6dc <Endpoint_ConfigureEndpoint_Prv>
 9b4:	64 d1       	rcall	.+712    	; 0xc7e <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9b6:	ff 91       	pop	r31
 9b8:	ef 91       	pop	r30
 9ba:	bf 91       	pop	r27
 9bc:	af 91       	pop	r26
 9be:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9c0:	8f 91       	pop	r24
 9c2:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9c4:	6f 91       	pop	r22
 9c6:	5f 91       	pop	r21
 9c8:	4f 91       	pop	r20
 9ca:	3f 91       	pop	r19
 9cc:	2f 91       	pop	r18
 9ce:	0f 90       	pop	r0
 9d0:	0b be       	out	0x3b, r0	; 59
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <USB_Device_ProcessControlRequest>:
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62
 9e6:	aa 97       	sbiw	r28, 0x2a	; 42
 9e8:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9ea:	f8 94       	cli
 9ec:	de bf       	out	0x3e, r29	; 62
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	cd bf       	out	0x3d, r28	; 61
 9f2:	ea e0       	ldi	r30, 0x0A	; 10
 9f4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9f6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9fa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9fc:	21 e0       	ldi	r18, 0x01	; 1
 9fe:	e2 31       	cpi	r30, 0x12	; 18
 a00:	f2 07       	cpc	r31, r18
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a04:	28 dc       	rcall	.-1968   	; 0x256 <EVENT_USB_Device_ControlRequest>
 a06:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a0a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a0c:	20 c1       	rjmp	.+576    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a0e:	90 91 0a 01 	lds	r25, 0x010A
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a12:	80 91 0b 01 	lds	r24, 0x010B

		switch (USB_ControlRequest.bRequest)
 a16:	85 30       	cpi	r24, 0x05	; 5
 a18:	09 f4       	brne	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x40>
 a1a:	77 c0       	rjmp	.+238    	; 0xb0a <USB_Device_ProcessControlRequest+0x12e>
 a1c:	30 f4       	brcc	.+12     	; 0xa2a <USB_Device_ProcessControlRequest+0x4e>
 a1e:	81 30       	cpi	r24, 0x01	; 1
 a20:	81 f1       	breq	.+96     	; 0xa82 <USB_Device_ProcessControlRequest+0xa6>
 a22:	68 f0       	brcs	.+26     	; 0xa3e <USB_Device_ProcessControlRequest+0x62>
 a24:	83 30       	cpi	r24, 0x03	; 3
 a26:	69 f1       	breq	.+90     	; 0xa82 <USB_Device_ProcessControlRequest+0xa6>
 a28:	12 c1       	rjmp	.+548    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a2a:	88 30       	cpi	r24, 0x08	; 8
 a2c:	09 f4       	brne	.+2      	; 0xa30 <USB_Device_ProcessControlRequest+0x54>
 a2e:	e1 c0       	rjmp	.+450    	; 0xbf2 <USB_Device_ProcessControlRequest+0x216>
 a30:	89 30       	cpi	r24, 0x09	; 9
 a32:	09 f4       	brne	.+2      	; 0xa36 <USB_Device_ProcessControlRequest+0x5a>
 a34:	f0 c0       	rjmp	.+480    	; 0xc16 <USB_Device_ProcessControlRequest+0x23a>
 a36:	86 30       	cpi	r24, 0x06	; 6
 a38:	09 f0       	breq	.+2      	; 0xa3c <USB_Device_ProcessControlRequest+0x60>
 a3a:	09 c1       	rjmp	.+530    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a3c:	88 c0       	rjmp	.+272    	; 0xb4e <USB_Device_ProcessControlRequest+0x172>
 a3e:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a40:	81 f0       	breq	.+32     	; 0xa62 <USB_Device_ProcessControlRequest+0x86>
 a42:	92 38       	cpi	r25, 0x82	; 130
 a44:	09 f0       	breq	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0x6c>
 a46:	03 c1       	rjmp	.+518    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a48:	80 91 0e 01 	lds	r24, 0x010E
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a4c:	8f 70       	andi	r24, 0x0F	; 15
 a4e:	80 93 e9 00 	sts	0x00E9, r24
 a52:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a56:	85 fb       	bst	r24, 5
 a58:	88 27       	eor	r24, r24
 a5a:	80 f9       	bld	r24, 0
 a5c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <USB_Device_ProcessControlRequest+0x92>
 a62:	80 91 06 01 	lds	r24, 0x0106
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a66:	90 91 07 01 	lds	r25, 0x0107
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a6a:	91 11       	cpse	r25, r1
 a6c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a6e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a72:	97 7f       	andi	r25, 0xF7	; 247
 a74:	90 93 e8 00 	sts	0x00E8, r25
 a78:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a7c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a80:	c3 c0       	rjmp	.+390    	; 0xc08 <USB_Device_ProcessControlRequest+0x22c>
 a82:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a84:	2d 7f       	andi	r18, 0xFD	; 253
 a86:	09 f0       	breq	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0xae>
 a88:	e2 c0       	rjmp	.+452    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a8a:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a8c:	19 f0       	breq	.+6      	; 0xa94 <USB_Device_ProcessControlRequest+0xb8>
 a8e:	92 30       	cpi	r25, 0x02	; 2
 a90:	61 f0       	breq	.+24     	; 0xaaa <USB_Device_ProcessControlRequest+0xce>
 a92:	dd c0       	rjmp	.+442    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a94:	90 91 0c 01 	lds	r25, 0x010C
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a98:	91 30       	cpi	r25, 0x01	; 1
 a9a:	09 f0       	breq	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0xc2>
 a9c:	d8 c0       	rjmp	.+432    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 a9e:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0xc8>
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	90 93 07 01 	sts	0x0107, r25
 aa8:	2a c0       	rjmp	.+84     	; 0xafe <USB_Device_ProcessControlRequest+0x122>
 aaa:	90 91 0c 01 	lds	r25, 0x010C

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 aae:	91 11       	cpse	r25, r1
 ab0:	26 c0       	rjmp	.+76     	; 0xafe <USB_Device_ProcessControlRequest+0x122>
 ab2:	20 91 0e 01 	lds	r18, 0x010E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ab6:	2f 70       	andi	r18, 0x0F	; 15
 ab8:	09 f4       	brne	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 aba:	c9 c0       	rjmp	.+402    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 abc:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ac0:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 ac4:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ac6:	1b c0       	rjmp	.+54     	; 0xafe <USB_Device_ProcessControlRequest+0x122>
 ac8:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 aca:	21 f4       	brne	.+8      	; 0xad4 <USB_Device_ProcessControlRequest+0xf8>
 acc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ad0:	80 62       	ori	r24, 0x20	; 32
 ad2:	13 c0       	rjmp	.+38     	; 0xafa <USB_Device_ProcessControlRequest+0x11e>
 ad4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ad8:	80 61       	ori	r24, 0x10	; 16
 ada:	80 93 eb 00 	sts	0x00EB, r24
 ade:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	02 2e       	mov	r0, r18
 ae4:	01 c0       	rjmp	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0x10c>
 ae6:	88 0f       	add	r24, r24
 ae8:	0a 94       	dec	r0
 aea:	ea f7       	brpl	.-6      	; 0xae6 <USB_Device_ProcessControlRequest+0x10a>
 aec:	80 93 ea 00 	sts	0x00EA, r24
 af0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 af4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 af8:	88 60       	ori	r24, 0x08	; 8
 afa:	80 93 eb 00 	sts	0x00EB, r24
 afe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b02:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b06:	87 7f       	andi	r24, 0xF7	; 247
 b08:	82 c0       	rjmp	.+260    	; 0xc0e <USB_Device_ProcessControlRequest+0x232>
 b0a:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b0c:	a0 c0       	rjmp	.+320    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 b0e:	10 91 0c 01 	lds	r17, 0x010C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b12:	1f 77       	andi	r17, 0x7F	; 127
 b14:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b18:	80 78       	andi	r24, 0x80	; 128
 b1a:	81 2b       	or	r24, r17
 b1c:	80 93 e3 00 	sts	0x00E3, r24
 b20:	80 91 e8 00 	lds	r24, 0x00E8
 b24:	87 7f       	andi	r24, 0xF7	; 247
 b26:	80 93 e8 00 	sts	0x00E8, r24
 b2a:	0d de       	rcall	.-998    	; 0x746 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b2c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b30:	80 ff       	sbrs	r24, 0
 b32:	fc cf       	rjmp	.-8      	; 0xb2c <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b34:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b38:	80 68       	ori	r24, 0x80	; 128
 b3a:	80 93 e3 00 	sts	0x00E3, r24
 b3e:	11 23       	and	r17, r17
 b40:	11 f0       	breq	.+4      	; 0xb46 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b42:	83 e0       	ldi	r24, 0x03	; 3
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <USB_Device_ProcessControlRequest+0x16c>
 b46:	82 e0       	ldi	r24, 0x02	; 2
 b48:	80 93 09 01 	sts	0x0109, r24
 b4c:	80 c0       	rjmp	.+256    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 b4e:	90 58       	subi	r25, 0x80	; 128
 b50:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b52:	08 f0       	brcs	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0x17a>
 b54:	7c c0       	rjmp	.+248    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 b56:	80 91 0c 01 	lds	r24, 0x010C
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b5a:	90 91 0d 01 	lds	r25, 0x010D
 b5e:	8c 3d       	cpi	r24, 0xDC	; 220
 b60:	23 e0       	ldi	r18, 0x03	; 3
 b62:	92 07       	cpc	r25, r18
 b64:	71 f5       	brne	.+92     	; 0xbc2 <USB_Device_ProcessControlRequest+0x1e6>
 b66:	83 e0       	ldi	r24, 0x03	; 3
 b68:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b6a:	8a e2       	ldi	r24, 0x2A	; 42
 b6c:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b6e:	4f b7       	in	r20, 0x3f	; 63
 b70:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b72:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b74:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b76:	20 e0       	ldi	r18, 0x00	; 0
 b78:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b7a:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b7c:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	50 93 57 00 	sts	0x0057, r21
 b84:	e4 91       	lpm	r30, Z
 b86:	20 ff       	sbrs	r18, 0
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 b8a:	e2 95       	swap	r30
 b8c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b8e:	3f 5f       	subi	r19, 0xFF	; 255
 b90:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b92:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	ea 30       	cpi	r30, 0x0A	; 10
 b98:	10 f0       	brcs	.+4      	; 0xb9e <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b9a:	c7 96       	adiw	r24, 0x37	; 55
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <USB_Device_ProcessControlRequest+0x1c4>
 b9e:	c0 96       	adiw	r24, 0x30	; 48
 ba0:	8d 93       	st	X+, r24
 ba2:	9d 93       	st	X+, r25
 ba4:	2f 5f       	subi	r18, 0xFF	; 255
 ba6:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ba8:	49 f7       	brne	.-46     	; 0xb7c <USB_Device_ProcessControlRequest+0x1a0>
 baa:	4f bf       	out	0x3f, r20	; 63
 bac:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb0:	87 7f       	andi	r24, 0xF7	; 247
 bb2:	80 93 e8 00 	sts	0x00E8, r24
 bb6:	6a e2       	ldi	r22, 0x2A	; 42
 bb8:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bba:	ce 01       	movw	r24, r28
 bbc:	01 96       	adiw	r24, 0x01	; 1
 bbe:	93 dc       	rcall	.-1754   	; 0x4e6 <Endpoint_Write_Control_Stream_LE>
 bc0:	12 c0       	rjmp	.+36     	; 0xbe6 <USB_Device_ProcessControlRequest+0x20a>
 bc2:	ae 01       	movw	r20, r28
 bc4:	4f 5f       	subi	r20, 0xFF	; 255
 bc6:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bc8:	60 91 0e 01 	lds	r22, 0x010E
 bcc:	5a dc       	rcall	.-1868   	; 0x482 <CALLBACK_USB_GetDescriptor>
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	09 f4       	brne	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x1f8>
 bd2:	3d c0       	rjmp	.+122    	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 bd4:	20 91 e8 00 	lds	r18, 0x00E8
 bd8:	27 7f       	andi	r18, 0xF7	; 247
 bda:	20 93 e8 00 	sts	0x00E8, r18
 bde:	bc 01       	movw	r22, r24
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	1b dd       	rcall	.-1482   	; 0x61c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 be6:	80 91 e8 00 	lds	r24, 0x00E8
 bea:	8b 77       	andi	r24, 0x7B	; 123
 bec:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bf0:	2e c0       	rjmp	.+92     	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 bf2:	90 38       	cpi	r25, 0x80	; 128
 bf4:	61 f5       	brne	.+88     	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 bf6:	80 91 e8 00 	lds	r24, 0x00E8
 bfa:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bfc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c00:	80 91 05 01 	lds	r24, 0x0105
 c04:	80 93 f1 00 	sts	0x00F1, r24
 c08:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c0c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c0e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c12:	99 dd       	rcall	.-1230   	; 0x746 <Endpoint_ClearStatusStage>
 c14:	1c c0       	rjmp	.+56     	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 c16:	91 11       	cpse	r25, r1
 c18:	1a c0       	rjmp	.+52     	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
 c1a:	90 91 0c 01 	lds	r25, 0x010C
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c1e:	92 30       	cpi	r25, 0x02	; 2
 c20:	b0 f4       	brcc	.+44     	; 0xc4e <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c22:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c26:	87 7f       	andi	r24, 0xF7	; 247
 c28:	80 93 e8 00 	sts	0x00E8, r24
 c2c:	90 93 05 01 	sts	0x0105, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c30:	8a dd       	rcall	.-1260   	; 0x746 <Endpoint_ClearStatusStage>
 c32:	80 91 05 01 	lds	r24, 0x0105
 c36:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c38:	04 c0       	rjmp	.+8      	; 0xc42 <USB_Device_ProcessControlRequest+0x266>
 c3a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c3e:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <USB_Device_ProcessControlRequest+0x26a>
 c42:	84 e0       	ldi	r24, 0x04	; 4
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <USB_Device_ProcessControlRequest+0x26c>
 c46:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c48:	80 93 09 01 	sts	0x0109, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c4c:	fa da       	rcall	.-2572   	; 0x242 <EVENT_USB_Device_ConfigurationChanged>
 c4e:	80 91 e8 00 	lds	r24, 0x00E8
 c52:	83 ff       	sbrs	r24, 3
 c54:	0a c0       	rjmp	.+20     	; 0xc6a <USB_Device_ProcessControlRequest+0x28e>
 c56:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c5a:	87 7f       	andi	r24, 0xF7	; 247
 c5c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c60:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c64:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c66:	80 93 eb 00 	sts	0x00EB, r24
 c6a:	aa 96       	adiw	r28, 0x2a	; 42
 c6c:	0f b6       	in	r0, 0x3f	; 63
 c6e:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c70:	de bf       	out	0x3e, r29	; 62
 c72:	0f be       	out	0x3f, r0	; 63
 c74:	cd bf       	out	0x3d, r28	; 61
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c7a:	1f 91       	pop	r17
 c7c:	08 95       	ret

00000c7e <USB_Event_Stub>:
 c7e:	08 95       	ret

00000c80 <USB_USBTask>:
 c80:	cf 93       	push	r28
 c82:	80 91 09 01 	lds	r24, 0x0109
 c86:	88 23       	and	r24, r24
 c88:	a9 f0       	breq	.+42     	; 0xcb4 <USB_USBTask+0x34>
 c8a:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c8e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c90:	90 91 ec 00 	lds	r25, 0x00EC
 c94:	90 ff       	sbrs	r25, 0
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <USB_USBTask+0x1c>
 c98:	90 e8       	ldi	r25, 0x80	; 128
 c9a:	01 c0       	rjmp	.+2      	; 0xc9e <USB_USBTask+0x1e>
 c9c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c9e:	c9 2f       	mov	r28, r25
 ca0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ca6:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 caa:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 cac:	97 de       	rcall	.-722    	; 0x9dc <USB_Device_ProcessControlRequest>
 cae:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cb0:	c0 93 e9 00 	sts	0x00E9, r28
 cb4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cb6:	08 95       	ret

00000cb8 <__udivmodsi4>:
 cb8:	a1 e2       	ldi	r26, 0x21	; 33
 cba:	1a 2e       	mov	r1, r26
 cbc:	aa 1b       	sub	r26, r26
 cbe:	bb 1b       	sub	r27, r27
 cc0:	fd 01       	movw	r30, r26
 cc2:	0d c0       	rjmp	.+26     	; 0xcde <__udivmodsi4_ep>

00000cc4 <__udivmodsi4_loop>:
 cc4:	aa 1f       	adc	r26, r26
 cc6:	bb 1f       	adc	r27, r27
 cc8:	ee 1f       	adc	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	a2 17       	cp	r26, r18
 cce:	b3 07       	cpc	r27, r19
 cd0:	e4 07       	cpc	r30, r20
 cd2:	f5 07       	cpc	r31, r21
 cd4:	20 f0       	brcs	.+8      	; 0xcde <__udivmodsi4_ep>
 cd6:	a2 1b       	sub	r26, r18
 cd8:	b3 0b       	sbc	r27, r19
 cda:	e4 0b       	sbc	r30, r20
 cdc:	f5 0b       	sbc	r31, r21

00000cde <__udivmodsi4_ep>:
 cde:	66 1f       	adc	r22, r22
 ce0:	77 1f       	adc	r23, r23
 ce2:	88 1f       	adc	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	1a 94       	dec	r1
 ce8:	69 f7       	brne	.-38     	; 0xcc4 <__udivmodsi4_loop>
 cea:	60 95       	com	r22
 cec:	70 95       	com	r23
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	9b 01       	movw	r18, r22
 cf4:	ac 01       	movw	r20, r24
 cf6:	bd 01       	movw	r22, r26
 cf8:	cf 01       	movw	r24, r30
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>

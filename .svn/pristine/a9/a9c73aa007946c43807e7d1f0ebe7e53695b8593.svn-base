
AndroidAccessoryHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001980  00001a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800172  00800172  00001a86  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000535a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000400  00000000  00000000  0000536b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005e66  00000000  00000000  0000576b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c9b  00000000  00000000  0000b5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029a2  00000000  00000000  0000d26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a4c  00000000  00000000  0000fc10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000028c4  00000000  00000000  0001065c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d77  00000000  00000000  00012f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  00016c97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	af c1       	rjmp	.+862    	; 0x360 <__ctors_end>
       2:	00 00       	nop
       4:	cb c1       	rjmp	.+918    	; 0x39c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c1       	rjmp	.+914    	; 0x39c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c1       	rjmp	.+910    	; 0x39c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c1       	rjmp	.+906    	; 0x39c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c1       	rjmp	.+902    	; 0x39c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c1       	rjmp	.+898    	; 0x39c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c1       	rjmp	.+894    	; 0x39c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c1       	rjmp	.+890    	; 0x39c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c1       	rjmp	.+886    	; 0x39c <__bad_interrupt>
      26:	00 00       	nop
      28:	df c6       	rjmp	.+3518   	; 0xde8 <__vector_10>
      2a:	00 00       	nop
      2c:	b7 c1       	rjmp	.+878    	; 0x39c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b5 c1       	rjmp	.+874    	; 0x39c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c1       	rjmp	.+870    	; 0x39c <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	b1 c1       	rjmp	.+866    	; 0x39c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c1       	rjmp	.+862    	; 0x39c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c1       	rjmp	.+858    	; 0x39c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c1       	rjmp	.+854    	; 0x39c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	a9 c1       	rjmp	.+850    	; 0x39c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c1       	rjmp	.+846    	; 0x39c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c1       	rjmp	.+842    	; 0x39c <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	a3 c1       	rjmp	.+838    	; 0x39c <__bad_interrupt>
      56:	00 00       	nop
      58:	a1 c1       	rjmp	.+834    	; 0x39c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c1       	rjmp	.+830    	; 0x39c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c1       	rjmp	.+826    	; 0x39c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	9b c1       	rjmp	.+822    	; 0x39c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c1       	rjmp	.+818    	; 0x39c <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	97 c1       	rjmp	.+814    	; 0x39c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c1       	rjmp	.+810    	; 0x39c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c1       	rjmp	.+806    	; 0x39c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c1       	rjmp	.+802    	; 0x39c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c1       	rjmp	.+798    	; 0x39c <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	8d c1       	rjmp	.+794    	; 0x39c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c1       	rjmp	.+790    	; 0x39c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c1       	rjmp	.+786    	; 0x39c <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	87 c1       	rjmp	.+782    	; 0x39c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c1       	rjmp	.+778    	; 0x39c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	83 c1       	rjmp	.+774    	; 0x39c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4599>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4592>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4587>:
     11d:	41 63 63 65 73 73 6f 72 79 20 4d 6f 64 65 20 41     Accessory Mode A
     12d:	6e 64 72 6f 69 64 20 45 6e 75 6d 65 72 61 74 65     ndroid Enumerate
     13d:	64 2e 0d 0a 00                                      d....

00000142 <__c.4585>:
     142:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     152:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
				ReportSize     -= 2;
     162:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     172:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
				ReportSize     -= 1;
				ReportData     += 1;
     182:	37 6d 00                                            7m.

00000185 <__c.4583>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     185:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     195:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000019f <__c.4581>:
     19f:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1af:	69 63 65 2e 0d 0a 00                                ice....

000001b6 <__c.4579>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c6:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001e0 <__c.4577>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e0:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     1f0:	61 74 61 2e 0d 0a 00                                ata....

000001f7 <__c.4575>:
     1f7:	1b 5b 33 31 6d 41 63 63 65 73 73 6f 72 79 20 4d     .[31mAccessory M
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     207:	6f 64 65 20 4e 6f 74 20 53 75 70 70 6f 72 74 65     ode Not Supporte
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     217:	64 2e 00                                            d..

0000021a <__c.4573>:
     21a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     22a:	6f 72 20 28 47 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Get Protocol
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23a:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     24a:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000258 <__c.4570>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     258:	41 6e 64 72 6f 69 64 20 44 65 76 69 63 65 20 44     Android Device D
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     268:	65 74 65 63 74 65 64 20 2d 20 25 73 41 63 63 65     etected - %sAcce

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     278:	73 73 6f 72 79 20 6d 6f 64 65 2e 0d 0a 00           ssory mode....

00000286 <__c.4568>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     296:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000002a0 <__c.4566>:
				break;
     2a0:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b0:	69 63 65 2e 0d 0a 00                                ice....

000002b7 <__c.4564>:
     2b7:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c7:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 29 2e     or (Get Device).
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d7:	0d 0a 00                                            ...

000002da <__c.4560>:
     2da:	47 65 74 74 69 6e 67 20 44 65 76 69 63 65 20 44     Getting Device D

				if (ParserData->UsingReportIDs)
     2ea:	61 74 61 2e 0d 0a 00                                ata....

000002f1 <__c.4555>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f1:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     301:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     311:	00                                                  .

00000312 <__c.4550>:
     312:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     322:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000032f <__c.4536>:
     32f:	1b 5b 33 36 6d 41 6e 64 72 6f 69 64 20 41 63 63     .[36mAndroid Acc
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33f:	65 73 73 6f 72 79 20 48 6f 73 74 20 44 65 6d 6f     essory Host Demo
     34f:	20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d      running....[37m
     35f:	00                                                  .

00000360 <__ctors_end>:
     360:	11 24       	eor	r1, r1
     362:	1f be       	out	0x3f, r1	; 63
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	cf ef       	ldi	r28, 0xFF	; 255
     366:	d0 e2       	ldi	r29, 0x20	; 32
     368:	de bf       	out	0x3e, r29	; 62
     36a:	cd bf       	out	0x3d, r28	; 61

0000036c <__do_copy_data>:
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	11 e0       	ldi	r17, 0x01	; 1
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b1 e0       	ldi	r27, 0x01	; 1
     372:	e0 e8       	ldi	r30, 0x80	; 128
     374:	f9 e1       	ldi	r31, 0x19	; 25
     376:	00 e0       	ldi	r16, 0x00	; 0

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	a2 37       	cpi	r26, 0x72	; 114
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	11 e0       	ldi	r17, 0x01	; 1
				break;
     388:	a2 e7       	ldi	r26, 0x72	; 114

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	b1 e0       	ldi	r27, 0x01	; 1
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	a4 39       	cpi	r26, 0x94	; 148
     392:	b1 07       	cpc	r27, r17
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	69 d0       	rcall	.+210    	; 0x46a <main>
     398:	0c 94 be 0c 	jmp	0x197c	; 0x197c <_exit>

0000039c <__bad_interrupt>:
     39c:	31 ce       	rjmp	.-926    	; 0x0 <__vectors>

0000039e <LEDs_SetAllLEDs>:
     39e:	9b b1       	in	r25, 0x0b	; 11
     3a0:	9f 70       	andi	r25, 0x0F	; 15
     3a2:	98 2b       	or	r25, r24
     3a4:	9b b9       	out	0x0b, r25	; 11
     3a6:	08 95       	ret

000003a8 <SetupHardware>:
     3a8:	84 b7       	in	r24, 0x34	; 52
     3aa:	87 7f       	andi	r24, 0xF7	; 247
     3ac:	84 bf       	out	0x34, r24	; 52
     3ae:	88 e1       	ldi	r24, 0x18	; 24
				break;
     3b0:	0f b6       	in	r0, 0x3f	; 63
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	f8 94       	cli
     3b4:	80 93 60 00 	sts	0x0060, r24
     3b8:	10 92 60 00 	sts	0x0060, r1
     3bc:	0f be       	out	0x3f, r0	; 63
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 e8       	ldi	r24, 0x80	; 128
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	80 93 61 00 	sts	0x0061, r24
     3ca:	90 93 61 00 	sts	0x0061, r25
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	83 e3       	ldi	r24, 0x33	; 51
     3d2:	90 e0       	ldi	r25, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     3d4:	90 93 cd 00 	sts	0x00CD, r25
     3d8:	80 93 cc 00 	sts	0x00CC, r24
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	80 93 ca 00 	sts	0x00CA, r24
     3e2:	10 92 c8 00 	sts	0x00C8, r1
     3e6:	88 e1       	ldi	r24, 0x18	; 24
     3e8:	80 93 c9 00 	sts	0x00C9, r24
     3ec:	53 9a       	sbi	0x0a, 3	; 10
     3ee:	5a 9a       	sbi	0x0b, 2	; 11
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	8a b1       	in	r24, 0x0a	; 10
     3f2:	80 6f       	ori	r24, 0xF0	; 240
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	8a b9       	out	0x0a, r24	; 10
     3f6:	8b b1       	in	r24, 0x0b	; 11
     3f8:	8f 70       	andi	r24, 0x0F	; 15
     3fa:	8b b9       	out	0x0b, r24	; 11
     3fc:	da d4       	rcall	.+2484   	; 0xdb2 <USB_Init>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	b8 c7       	rjmp	.+3952   	; 0x1374 <Serial_CreateStream>

00000404 <AndroidHost_Task>:
     404:	80 91 7f 01 	lds	r24, 0x017F
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	8b 30       	cpi	r24, 0x0B	; 11
     40a:	71 f5       	brne	.+92     	; 0x468 <AndroidHost_Task+0x64>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 a7 00 	sts	0x00A7, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	80 91 a9 00 	lds	r24, 0x00A9
     416:	8f 7b       	andi	r24, 0xBF	; 191
     418:	80 93 a9 00 	sts	0x00A9, r24
     41c:	80 91 a6 00 	lds	r24, 0x00A6

				if (UsageListSize)
     420:	80 ff       	sbrs	r24, 0
     422:	1d c0       	rjmp	.+58     	; 0x45e <AndroidHost_Task+0x5a>
     424:	80 91 a9 00 	lds	r24, 0x00A9
     428:	80 64       	ori	r24, 0x40	; 64
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	80 93 a9 00 	sts	0x00A9, r24
     42e:	80 91 a6 00 	lds	r24, 0x00A6
     432:	85 ff       	sbrs	r24, 5
     434:	0f c0       	rjmp	.+30     	; 0x454 <AndroidHost_Task+0x50>
     436:	90 91 af 00 	lds	r25, 0x00AF
     43a:	90 fd       	sbrc	r25, 0
     43c:	02 c0       	rjmp	.+4      	; 0x442 <AndroidHost_Task+0x3e>
     43e:	80 e0       	ldi	r24, 0x00	; 0

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	01 c0       	rjmp	.+2      	; 0x444 <AndroidHost_Task+0x40>
     442:	80 e1       	ldi	r24, 0x10	; 16
     444:	91 fd       	sbrc	r25, 1
     446:	80 62       	ori	r24, 0x20	; 32
     448:	92 fd       	sbrc	r25, 2
     44a:	80 68       	ori	r24, 0x80	; 128
					  UsageList[i - 1] = UsageList[i];
     44c:	93 fd       	sbrc	r25, 3
     44e:	80 64       	ori	r24, 0x40	; 64
     450:	a6 df       	rcall	.-180    	; 0x39e <LEDs_SetAllLEDs>
     452:	05 c0       	rjmp	.+10     	; 0x45e <AndroidHost_Task+0x5a>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	80 91 a6 00 	lds	r24, 0x00A6
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	8e 77       	andi	r24, 0x7E	; 126
     45a:	80 93 a6 00 	sts	0x00A6, r24
     45e:	80 91 a9 00 	lds	r24, 0x00A9
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 93 a9 00 	sts	0x00A9, r24
     468:	08 95       	ret

0000046a <main>:
     46a:	9e df       	rcall	.-196    	; 0x3a8 <SetupHardware>
     46c:	8f e2       	ldi	r24, 0x2F	; 47
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	c2 d7       	rcall	.+3972   	; 0x13f6 <puts_P>
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	94 df       	rcall	.-216    	; 0x39e <LEDs_SetAllLEDs>
     476:	78 94       	sei
     478:	c5 df       	rcall	.-118    	; 0x404 <AndroidHost_Task>
     47a:	54 d7       	rcall	.+3752   	; 0x1324 <USB_USBTask>
     47c:	fd cf       	rjmp	.-6      	; 0x478 <main+0xe>

0000047e <EVENT_USB_Host_DeviceAttached>:
     47e:	82 e1       	ldi	r24, 0x12	; 18
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	b9 d7       	rcall	.+3954   	; 0x13f6 <puts_P>
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	8b cf       	rjmp	.-234    	; 0x39e <LEDs_SetAllLEDs>

00000488 <EVENT_USB_Host_DeviceUnattached>:
     488:	81 ef       	ldi	r24, 0xF1	; 241
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	b4 d7       	rcall	.+3944   	; 0x13f6 <puts_P>
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	86 cf       	rjmp	.-244    	; 0x39e <LEDs_SetAllLEDs>

00000492 <EVENT_USB_Host_DeviceEnumerationComplete>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	00 d0       	rcall	.+0      	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0xa>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	8a ed       	ldi	r24, 0xDA	; 218
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	a8 d7       	rcall	.+3920   	; 0x13f6 <puts_P>
     4a6:	57 d1       	rcall	.+686    	; 0x756 <ProcessDeviceDescriptor>
     4a8:	18 2f       	mov	r17, r24
     4aa:	8c ef       	ldi	r24, 0xFC	; 252
				break;
     4ac:	81 0f       	add	r24, r17
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	82 30       	cpi	r24, 0x02	; 2
     4b0:	68 f0       	brcs	.+26     	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     4b2:	11 30       	cpi	r17, 0x01	; 1
     4b4:	19 f4       	brne	.+6      	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
     4b6:	87 eb       	ldi	r24, 0xB7	; 183
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x2e>
     4bc:	80 ea       	ldi	r24, 0xA0	; 160
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	9a d7       	rcall	.+3892   	; 0x13f6 <puts_P>
     4c2:	1f 92       	push	r1
     4c4:	1f 93       	push	r17
     4c6:	86 e8       	ldi	r24, 0x86	; 134
     4c8:	92 e0       	ldi	r25, 0x02	; 2
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	5f c0       	rjmp	.+190    	; 0x58a <EVENT_USB_Host_DeviceEnumerationComplete+0xf8>
     4cc:	01 e0       	ldi	r16, 0x01	; 1
     4ce:	14 30       	cpi	r17, 0x04	; 4
     4d0:	21 f0       	breq	.+8      	; 0x4da <EVENT_USB_Host_DeviceEnumerationComplete+0x48>
     4d2:	00 e0       	ldi	r16, 0x00	; 0
     4d4:	85 e2       	ldi	r24, 0x25	; 37
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4da:	81 e2       	ldi	r24, 0x21	; 33
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	88 e5       	ldi	r24, 0x58	; 88
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	62 d7       	rcall	.+3780   	; 0x13b0 <printf_P>
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	00 23       	and	r16, r16
     4f6:	69 f1       	breq	.+90     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	57 d1       	rcall	.+686    	; 0x7ac <Android_GetAccessoryProtocol>
     4fe:	88 23       	and	r24, r24
     500:	29 f0       	breq	.+10     	; 0x50c <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	1f 92       	push	r1
     504:	8f 93       	push	r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	8a e1       	ldi	r24, 0x1A	; 26
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	3f c0       	rjmp	.+126    	; 0x58a <EVENT_USB_Host_DeviceEnumerationComplete+0xf8>
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	29 f0       	breq	.+10     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     514:	87 ef       	ldi	r24, 0xF7	; 247
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	6e d7       	rcall	.+3804   	; 0x13f6 <puts_P>
     51a:	80 e9       	ldi	r24, 0x90	; 144
     51c:	44 c0       	rjmp	.+136    	; 0x5a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>

					if (UsageListSize)
     51e:	66 e2       	ldi	r22, 0x26	; 38
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	4f d1       	rcall	.+670    	; 0x7c4 <Android_SendString>
     526:	62 e3       	ldi	r22, 0x32	; 50
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	4b d1       	rcall	.+662    	; 0x7c4 <Android_SendString>
     52e:	62 e3       	ldi	r22, 0x32	; 50
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	47 d1       	rcall	.+654    	; 0x7c4 <Android_SendString>
     536:	64 e4       	ldi	r22, 0x44	; 68
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	43 d1       	rcall	.+646    	; 0x7c4 <Android_SendString>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	68 e4       	ldi	r22, 0x48	; 72
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	3f d1       	rcall	.+638    	; 0x7c4 <Android_SendString>
     546:	60 e6       	ldi	r22, 0x60	; 96
     548:	71 e0       	ldi	r23, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];
     54a:	85 e0       	ldi	r24, 0x05	; 5
     54c:	3b d1       	rcall	.+630    	; 0x7c4 <Android_SendString>
     54e:	57 d1       	rcall	.+686    	; 0x7fe <Android_StartAccessoryMode>
     550:	2b c0       	rjmp	.+86     	; 0x5a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x116>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	80 ee       	ldi	r24, 0xE0	; 224
     554:	91 e0       	ldi	r25, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	4f d7       	rcall	.+3742   	; 0x13f6 <puts_P>
     558:	80 d0       	rcall	.+256    	; 0x65a <ProcessConfigurationDescriptor>
     55a:	18 2f       	mov	r17, r24
     55c:	88 23       	and	r24, r24
     55e:	69 f0       	breq	.+26     	; 0x57a <EVENT_USB_Host_DeviceEnumerationComplete+0xe8>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	19 f4       	brne	.+6      	; 0x56a <EVENT_USB_Host_DeviceEnumerationComplete+0xd8>
     564:	86 eb       	ldi	r24, 0xB6	; 182
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	02 c0       	rjmp	.+4      	; 0x56e <EVENT_USB_Host_DeviceEnumerationComplete+0xdc>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	8f e9       	ldi	r24, 0x9F	; 159
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	43 d7       	rcall	.+3718   	; 0x13f6 <puts_P>
     570:	1f 92       	push	r1
     572:	1f 93       	push	r17
     574:	85 e8       	ldi	r24, 0x85	; 133
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	08 c0       	rjmp	.+16     	; 0x58a <EVENT_USB_Host_DeviceEnumerationComplete+0xf8>
     57a:	81 e0       	ldi	r24, 0x01	; 1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	93 d6       	rcall	.+3366   	; 0x12a4 <USB_Host_SetDeviceConfiguration>
     57e:	88 23       	and	r24, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	71 f0       	breq	.+28     	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x10c>
     582:	1f 92       	push	r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	8f 93       	push	r24
     586:	82 e4       	ldi	r24, 0x42	; 66
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	10 d7       	rcall	.+3616   	; 0x13b0 <printf_P>
     590:	80 e9       	ldi	r24, 0x90	; 144

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	05 df       	rcall	.-502    	; 0x39e <LEDs_SetAllLEDs>
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x116>
     59e:	8d e1       	ldi	r24, 0x1D	; 29
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	29 d7       	rcall	.+3666   	; 0x13f6 <puts_P>
     5a4:	80 e6       	ldi	r24, 0x60	; 96
     5a6:	fb de       	rcall	.-522    	; 0x39e <LEDs_SetAllLEDs>
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <EVENT_USB_Host_HostError>:
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	8f d3       	rcall	.+1822   	; 0xce2 <USB_Disable>
     5c4:	1f 92       	push	r1
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	8f 93       	push	r24
     5ca:	8e ee       	ldi	r24, 0xEE	; 238
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9f 93       	push	r25
     5d0:	8f 93       	push	r24
     5d2:	ee d6       	rcall	.+3548   	; 0x13b0 <printf_P>
     5d4:	80 e9       	ldi	r24, 0x90	; 144
     5d6:	e3 de       	rcall	.-570    	; 0x39e <LEDs_SetAllLEDs>
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <EVENT_USB_Host_HostError+0x2a>

000005e2 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5e2:	90 91 7f 01 	lds	r25, 0x017F
     5e6:	1f 92       	push	r1
     5e8:	9f 93       	push	r25
     5ea:	1f 92       	push	r1
     5ec:	6f 93       	push	r22
     5ee:	1f 92       	push	r1
     5f0:	8f 93       	push	r24
     5f2:	88 e9       	ldi	r24, 0x98	; 152

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	da d6       	rcall	.+3508   	; 0x13b0 <printf_P>
     5fc:	8d b7       	in	r24, 0x3d	; 61
					  return HID_PARSE_InsufficientReportItems;
     5fe:	9e b7       	in	r25, 0x3e	; 62
     600:	08 96       	adiw	r24, 0x08	; 8

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	9e bf       	out	0x3e, r25	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	8d bf       	out	0x3d, r24	; 61
     60c:	80 e9       	ldi	r24, 0x90	; 144
     60e:	c7 ce       	rjmp	.-626    	; 0x39e <LEDs_SetAllLEDs>

00000610 <DCOMP_NextAndroidAccessoryInterface>:
     610:	fc 01       	movw	r30, r24
     612:	81 81       	ldd	r24, Z+1	; 0x01
     614:	84 30       	cpi	r24, 0x04	; 4
     616:	51 f4       	brne	.+20     	; 0x62c <DCOMP_NextAndroidAccessoryInterface+0x1c>
     618:	85 81       	ldd	r24, Z+5	; 0x05
     61a:	8f 3f       	cpi	r24, 0xFF	; 255
     61c:	39 f4       	brne	.+14     	; 0x62c <DCOMP_NextAndroidAccessoryInterface+0x1c>
     61e:	86 81       	ldd	r24, Z+6	; 0x06
     620:	8f 3f       	cpi	r24, 0xFF	; 255
     622:	21 f4       	brne	.+8      	; 0x62c <DCOMP_NextAndroidAccessoryInterface+0x1c>
     624:	87 81       	ldd	r24, Z+7	; 0x07
     626:	81 11       	cpse	r24, r1
     628:	01 c0       	rjmp	.+2      	; 0x62c <DCOMP_NextAndroidAccessoryInterface+0x1c>
     62a:	08 95       	ret
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	08 95       	ret

00000630 <DCOMP_NextInterfaceBulkEndpoint>:
     630:	fc 01       	movw	r30, r24
     632:	81 81       	ldd	r24, Z+1	; 0x01
     634:	85 30       	cpi	r24, 0x05	; 5
     636:	49 f4       	brne	.+18     	; 0x64a <DCOMP_NextInterfaceBulkEndpoint+0x1a>
     638:	83 81       	ldd	r24, Z+3	; 0x03
     63a:	83 70       	andi	r24, 0x03	; 3
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	49 f4       	brne	.+18     	; 0x652 <DCOMP_NextInterfaceBulkEndpoint+0x22>
     640:	82 81       	ldd	r24, Z+2	; 0x02
     642:	25 d3       	rcall	.+1610   	; 0xc8e <Pipe_IsEndpointBound>
     644:	81 11       	cpse	r24, r1
     646:	05 c0       	rjmp	.+10     	; 0x652 <DCOMP_NextInterfaceBulkEndpoint+0x22>
     648:	06 c0       	rjmp	.+12     	; 0x656 <DCOMP_NextInterfaceBulkEndpoint+0x26>
     64a:	84 30       	cpi	r24, 0x04	; 4
     64c:	11 f4       	brne	.+4      	; 0x652 <DCOMP_NextInterfaceBulkEndpoint+0x22>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	08 95       	ret
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret

0000065a <ProcessConfigurationDescriptor>:
     65a:	cf 92       	push	r12
     65c:	df 92       	push	r13
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	c4 50       	subi	r28, 0x04	; 4
     670:	d2 40       	sbci	r29, 0x02	; 2
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	ae 01       	movw	r20, r28
     67e:	4f 5f       	subi	r20, 0xFF	; 255
     680:	5f 4f       	sbci	r21, 0xFF	; 255
     682:	cd 5f       	subi	r28, 0xFD	; 253
     684:	dd 4f       	sbci	r29, 0xFD	; 253
     686:	59 83       	std	Y+1, r21	; 0x01
					  ParserData->TotalReportItems++;
     688:	48 83       	st	Y, r20
     68a:	c3 50       	subi	r28, 0x03	; 3
     68c:	d2 40       	sbci	r29, 0x02	; 2
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	32 e0       	ldi	r19, 0x02	; 2

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7d 4f       	sbci	r23, 0xFD	; 253
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	55 d4       	rcall	.+2218   	; 0xf46 <USB_Host_GetDeviceConfigDescriptor>
     69c:	85 30       	cpi	r24, 0x05	; 5
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	09 f4       	brne	.+2      	; 0x6a2 <ProcessConfigurationDescriptor+0x48>
     6a0:	49 c0       	rjmp	.+146    	; 0x734 <ProcessConfigurationDescriptor+0xda>
     6a2:	86 30       	cpi	r24, 0x06	; 6
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	21 f0       	breq	.+8      	; 0x6ae <ProcessConfigurationDescriptor+0x54>
     6a6:	88 23       	and	r24, r24
     6a8:	21 f0       	breq	.+8      	; 0x6b2 <ProcessConfigurationDescriptor+0x58>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	44 c0       	rjmp	.+136    	; 0x736 <ProcessConfigurationDescriptor+0xdc>
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	42 c0       	rjmp	.+132    	; 0x736 <ProcessConfigurationDescriptor+0xdc>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	48 e0       	ldi	r20, 0x08	; 8
     6b4:	53 e0       	ldi	r21, 0x03	; 3
     6b6:	be 01       	movw	r22, r28
     6b8:	6d 5f       	subi	r22, 0xFD	; 253
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	7d 4f       	sbci	r23, 0xFD	; 253
     6bc:	ce 01       	movw	r24, r28

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	8f 5f       	subi	r24, 0xFF	; 255
     6c0:	9d 4f       	sbci	r25, 0xFD	; 253
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	9b d4       	rcall	.+2358   	; 0xffa <USB_GetNextDescriptorComp>
     6c4:	88 23       	and	r24, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	11 f0       	breq	.+4      	; 0x6cc <ProcessConfigurationDescriptor+0x72>
     6c8:	84 e0       	ldi	r24, 0x04	; 4
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	35 c0       	rjmp	.+106    	; 0x736 <ProcessConfigurationDescriptor+0xdc>
     6cc:	00 e0       	ldi	r16, 0x00	; 0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	c1 2c       	mov	r12, r1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	d1 2c       	mov	r13, r1
     6d4:	48 e1       	ldi	r20, 0x18	; 24
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	53 e0       	ldi	r21, 0x03	; 3

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	be 01       	movw	r22, r28
     6da:	6d 5f       	subi	r22, 0xFD	; 253
     6dc:	7d 4f       	sbci	r23, 0xFD	; 253
     6de:	ce 01       	movw	r24, r28
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	9d 4f       	sbci	r25, 0xFD	; 253
     6e4:	8a d4       	rcall	.+2324   	; 0xffa <USB_GetNextDescriptorComp>
     6e6:	81 11       	cpse	r24, r1
     6e8:	ef cf       	rjmp	.-34     	; 0x6c8 <ProcessConfigurationDescriptor+0x6e>
     6ea:	cd 5f       	subi	r28, 0xFD	; 253
     6ec:	dd 4f       	sbci	r29, 0xFD	; 253
     6ee:	e8 80       	ld	r14, Y
     6f0:	f9 80       	ldd	r15, Y+1	; 0x01
     6f2:	c3 50       	subi	r28, 0x03	; 3
     6f4:	d2 40       	sbci	r29, 0x02	; 2
     6f6:	f7 01       	movw	r30, r14
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	87 ff       	sbrs	r24, 7
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <ProcessConfigurationDescriptor+0xa8>
     6fe:	67 01       	movw	r12, r14
     700:	78 01       	movw	r14, r16
     702:	c1 14       	cp	r12, r1
     704:	d1 04       	cpc	r13, r1
     706:	11 f4       	brne	.+4      	; 0x70c <ProcessConfigurationDescriptor+0xb2>
     708:	87 01       	movw	r16, r14
     70a:	e4 cf       	rjmp	.-56     	; 0x6d4 <ProcessConfigurationDescriptor+0x7a>
	                              DCOMP_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return NoCompatibleInterfaceFound;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     70c:	e1 14       	cp	r14, r1
 *  This routine searches for the first interface containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref AndroidHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     70e:	f1 04       	cpc	r15, r1
     710:	d9 f3       	breq	.-10     	; 0x708 <ProcessConfigurationDescriptor+0xae>
	                              DCOMP_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return NoCompatibleInterfaceFound;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     712:	f6 01       	movw	r30, r12
     714:	24 81       	ldd	r18, Z+4	; 0x04
     716:	35 81       	ldd	r19, Z+5	; 0x05
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Android Accessory data IN pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     718:	01 e0       	ldi	r16, 0x01	; 1
     71a:	42 81       	ldd	r20, Z+2	; 0x02
     71c:	62 e0       	ldi	r22, 0x02	; 2
     71e:	81 e8       	ldi	r24, 0x81	; 129
     720:	3a d2       	rcall	.+1140   	; 0xb96 <Pipe_ConfigurePipe>
     722:	f7 01       	movw	r30, r14
     724:	24 81       	ldd	r18, Z+4	; 0x04
     726:	35 81       	ldd	r19, Z+5	; 0x05
     728:	42 81       	ldd	r20, Z+2	; 0x02

	/* Configure the Android Accessory data OUT pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     72a:	62 e0       	ldi	r22, 0x02	; 2
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	33 d2       	rcall	.+1126   	; 0xb96 <Pipe_ConfigurePipe>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	01 c0       	rjmp	.+2      	; 0x736 <ProcessConfigurationDescriptor+0xdc>
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	cc 5f       	subi	r28, 0xFC	; 252
     738:	dd 4f       	sbci	r29, 0xFD	; 253

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     73e:	de bf       	out	0x3e, r29	; 62
	/* Configure the Android Accessory data OUT pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	08 95       	ret

00000756 <ProcessDeviceDescriptor>:
 *  This routine checks to ensure that the attached device's VID and PID matches Google's for Android devices.
 *
 *  \return An error code from the \ref AndroidHost_GetDeviceDescriptorDataCodes_t enum.
 */
uint8_t ProcessDeviceDescriptor(void)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	62 97       	sbiw	r28, 0x12	; 18
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
			 *  \return A value from the \ref USB_Host_SendControlErrorCodes_t enum to indicate the result.
			 */
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr) ATTR_NON_NULL_PTR_ARG(1);
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr)
			{
				return USB_Host_GetDescriptor(DTYPE_Device, 0, DeviceDescriptorPtr, sizeof(USB_Descriptor_Device_t));
     76a:	22 e1       	ldi	r18, 0x12	; 18
     76c:	ae 01       	movw	r20, r28
     76e:	4f 5f       	subi	r20, 0xFF	; 255
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	bd d5       	rcall	.+2938   	; 0x12f2 <USB_Host_GetDescriptor>
     778:	81 11       	cpse	r24, r1
	USB_Descriptor_Device_t DeviceDescriptor;

	/* Send the request to retrieve the device descriptor */
	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
     77a:	0a c0       	rjmp	.+20     	; 0x790 <ProcessDeviceDescriptor+0x3a>
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
	  return DevControlError;

	/* Validate returned data - ensure the returned data is a device descriptor */
	if (DeviceDescriptor.Header.Type != DTYPE_Device)
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	49 f4       	brne	.+18     	; 0x794 <ProcessDeviceDescriptor+0x3e>
     782:	8b 85       	ldd	r24, Y+11	; 0x0b
	  return InvalidDeviceDataReturned;

	/* Check the product ID to determine if the Android device is in accessory mode */
	if ((DeviceDescriptor.ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
     784:	9c 85       	ldd	r25, Y+12	; 0x0c
     786:	9d 52       	subi	r25, 0x2D	; 45
     788:	02 97       	sbiw	r24, 0x02	; 2
     78a:	30 f0       	brcs	.+12     	; 0x798 <ProcessDeviceDescriptor+0x42>
     78c:	84 e0       	ldi	r24, 0x04	; 4
	    (DeviceDescriptor.ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID))
	{
		return NonAccessoryModeAndroidDevice;
     78e:	05 c0       	rjmp	.+10     	; 0x79a <ProcessDeviceDescriptor+0x44>
     790:	81 e0       	ldi	r24, 0x01	; 1
{
	USB_Descriptor_Device_t DeviceDescriptor;

	/* Send the request to retrieve the device descriptor */
	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
	  return DevControlError;
     792:	03 c0       	rjmp	.+6      	; 0x79a <ProcessDeviceDescriptor+0x44>
     794:	82 e0       	ldi	r24, 0x02	; 2

	/* Validate returned data - ensure the returned data is a device descriptor */
	if (DeviceDescriptor.Header.Type != DTYPE_Device)
	  return InvalidDeviceDataReturned;
     796:	01 c0       	rjmp	.+2      	; 0x79a <ProcessDeviceDescriptor+0x44>
     798:	85 e0       	ldi	r24, 0x05	; 5
	    (DeviceDescriptor.ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID))
	{
		return NonAccessoryModeAndroidDevice;
	}

	return AccessoryModeAndroidDevice;
     79a:	62 96       	adiw	r28, 0x12	; 18
}
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <Android_GetAccessoryProtocol>:

#include "AndroidAccessoryCommands.h"

uint8_t Android_GetAccessoryProtocol(uint16_t* const Protocol)
{
	USB_ControlRequest = (USB_Request_Header_t)
     7ac:	28 e0       	ldi	r18, 0x08	; 8
     7ae:	e1 e0       	ldi	r30, 0x01	; 1
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	a7 e7       	ldi	r26, 0x77	; 119
     7b4:	b1 e0       	ldi	r27, 0x01	; 1
     7b6:	01 90       	ld	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	2a 95       	dec	r18
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <Android_GetAccessoryProtocol+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7be:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = sizeof(uint16_t),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Protocol);
     7c2:	75 c4       	rjmp	.+2282   	; 0x10ae <USB_Host_SendControlRequest>

000007c4 <Android_SendString>:
     7c4:	fb 01       	movw	r30, r22
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
     7c6:	01 90       	ld	r0, Z+
     7c8:	00 20       	and	r0, r0
     7ca:	e9 f7       	brne	.-6      	; 0x7c6 <Android_SendString+0x2>
}

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
	USB_ControlRequest = (USB_Request_Header_t)
     7cc:	90 e4       	ldi	r25, 0x40	; 64
     7ce:	90 93 77 01 	sts	0x0177, r25
     7d2:	94 e3       	ldi	r25, 0x34	; 52
     7d4:	90 93 78 01 	sts	0x0178, r25
     7d8:	10 92 7a 01 	sts	0x017A, r1
     7dc:	10 92 79 01 	sts	0x0179, r1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	90 93 7c 01 	sts	0x017C, r25
     7e6:	80 93 7b 01 	sts	0x017B, r24
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
     7ea:	e6 1b       	sub	r30, r22
     7ec:	f7 0b       	sbc	r31, r23
}

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
	USB_ControlRequest = (USB_Request_Header_t)
     7ee:	f0 93 7e 01 	sts	0x017E, r31
     7f2:	e0 93 7d 01 	sts	0x017D, r30
     7f6:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest((char*)String);
     7fa:	cb 01       	movw	r24, r22
     7fc:	58 c4       	rjmp	.+2224   	; 0x10ae <USB_Host_SendControlRequest>

000007fe <Android_StartAccessoryMode>:
     7fe:	88 e0       	ldi	r24, 0x08	; 8
}

uint8_t Android_StartAccessoryMode(void)
{
	USB_ControlRequest = (USB_Request_Header_t)
     800:	e9 e0       	ldi	r30, 0x09	; 9
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	a7 e7       	ldi	r26, 0x77	; 119
     806:	b1 e0       	ldi	r27, 0x01	; 1
     808:	01 90       	ld	r0, Z+
     80a:	0d 92       	st	X+, r0
     80c:	8a 95       	dec	r24
     80e:	e1 f7       	brne	.-8      	; 0x808 <Android_StartAccessoryMode+0xa>
     810:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	4a c4       	rjmp	.+2196   	; 0x10ae <USB_Host_SendControlRequest>

0000081a <USB_Host_ResetDevice>:
     81a:	80 91 9e 00 	lds	r24, 0x009E
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     81e:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     820:	90 91 a0 00 	lds	r25, 0x00A0
     824:	9d 7f       	andi	r25, 0xFD	; 253
     826:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     82a:	90 91 9e 00 	lds	r25, 0x009E
     82e:	92 60       	ori	r25, 0x02	; 2
     830:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     834:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     838:	91 fd       	sbrc	r25, 1
     83a:	fc cf       	rjmp	.-8      	; 0x834 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     83c:	90 91 9e 00 	lds	r25, 0x009E
     840:	91 60       	ori	r25, 0x01	; 1
     842:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     846:	10 92 75 01 	sts	0x0175, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     84a:	90 91 a0 00 	lds	r25, 0x00A0
     84e:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     850:	20 91 a0 00 	lds	r18, 0x00A0
     854:	2f 7d       	andi	r18, 0xDF	; 223
     856:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     85a:	20 91 9f 00 	lds	r18, 0x009F
     85e:	2f 7d       	andi	r18, 0xDF	; 223
     860:	20 93 9f 00 	sts	0x009F, r18
     864:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     866:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     86a:	35 ff       	sbrs	r19, 5
     86c:	0b c0       	rjmp	.+22     	; 0x884 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     86e:	20 91 9f 00 	lds	r18, 0x009F
     872:	2f 7d       	andi	r18, 0xDF	; 223
     874:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     878:	20 91 9f 00 	lds	r18, 0x009F
     87c:	2d 7f       	andi	r18, 0xFD	; 253
     87e:	20 93 9f 00 	sts	0x009F, r18
     882:	08 c0       	rjmp	.+16     	; 0x894 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     884:	ef ec       	ldi	r30, 0xCF	; 207
     886:	f7 e0       	ldi	r31, 0x07	; 7
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <USB_Host_ResetDevice+0x6e>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <USB_Host_ResetDevice+0x74>
     88e:	00 00       	nop
     890:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     892:	49 f7       	brne	.-46     	; 0x866 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     894:	99 23       	and	r25, r25
     896:	29 f0       	breq	.+10     	; 0x8a2 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     898:	90 91 a0 00 	lds	r25, 0x00A0
     89c:	90 62       	ori	r25, 0x20	; 32
     89e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     8a2:	81 11       	cpse	r24, r1
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8a6:	80 91 9e 00 	lds	r24, 0x009E
     8aa:	8e 7f       	andi	r24, 0xFE	; 254
     8ac:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8b0:	80 91 a0 00 	lds	r24, 0x00A0
     8b4:	82 60       	ori	r24, 0x02	; 2
     8b6:	80 93 a0 00 	sts	0x00A0, r24
     8ba:	08 95       	ret

000008bc <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8bc:	20 91 9e 00 	lds	r18, 0x009E
     8c0:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8c2:	90 91 a0 00 	lds	r25, 0x00A0
     8c6:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8c8:	30 91 a0 00 	lds	r19, 0x00A0
     8cc:	3f 7d       	andi	r19, 0xDF	; 223
     8ce:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8d2:	30 91 9f 00 	lds	r19, 0x009F
     8d6:	3f 7d       	andi	r19, 0xDF	; 223
     8d8:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8dc:	30 91 9e 00 	lds	r19, 0x009E
     8e0:	31 60       	ori	r19, 0x01	; 1
     8e2:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8e6:	88 23       	and	r24, r24
     8e8:	39 f1       	breq	.+78     	; 0x938 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8ea:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8ee:	35 ff       	sbrs	r19, 5
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8f2:	30 91 9f 00 	lds	r19, 0x009F
     8f6:	3f 7d       	andi	r19, 0xDF	; 223
     8f8:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     8fc:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     8fe:	30 91 7f 01 	lds	r19, 0x017F
     902:	31 30       	cpi	r19, 0x01	; 1
     904:	c1 f0       	breq	.+48     	; 0x936 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     906:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     90a:	34 ff       	sbrs	r19, 4
     90c:	09 c0       	rjmp	.+18     	; 0x920 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     90e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     912:	80 91 a6 00 	lds	r24, 0x00A6
     916:	8f 7e       	andi	r24, 0xEF	; 239
     918:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     91c:	82 e0       	ldi	r24, 0x02	; 2

			break;
     91e:	0c c0       	rjmp	.+24     	; 0x938 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     920:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     924:	31 ff       	sbrs	r19, 1
     926:	df cf       	rjmp	.-66     	; 0x8e6 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     928:	80 91 a6 00 	lds	r24, 0x00A6
     92c:	8d 7f       	andi	r24, 0xFD	; 253
     92e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     932:	83 e0       	ldi	r24, 0x03	; 3

			break;
     934:	01 c0       	rjmp	.+2      	; 0x938 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     936:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     938:	21 11       	cpse	r18, r1
     93a:	05 c0       	rjmp	.+10     	; 0x946 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     93c:	20 91 9e 00 	lds	r18, 0x009E
     940:	2e 7f       	andi	r18, 0xFE	; 254
     942:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     946:	99 23       	and	r25, r25
     948:	29 f0       	breq	.+10     	; 0x954 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     94a:	90 91 a0 00 	lds	r25, 0x00A0
     94e:	90 62       	ori	r25, 0x20	; 32
     950:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     954:	08 95       	ret

00000956 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	28 97       	sbiw	r28, 0x08	; 8
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     96e:	80 91 7f 01 	lds	r24, 0x017F
     972:	85 30       	cpi	r24, 0x05	; 5
     974:	09 f4       	brne	.+2      	; 0x978 <USB_Host_ProcessNextHostState+0x22>
     976:	9a c0       	rjmp	.+308    	; 0xaac <USB_Host_ProcessNextHostState+0x156>
     978:	68 f4       	brcc	.+26     	; 0x994 <USB_Host_ProcessNextHostState+0x3e>
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	e1 f1       	breq	.+120    	; 0x9f6 <USB_Host_ProcessNextHostState+0xa0>
     97e:	18 f4       	brcc	.+6      	; 0x986 <USB_Host_ProcessNextHostState+0x30>
     980:	88 23       	and	r24, r24
     982:	d9 f0       	breq	.+54     	; 0x9ba <USB_Host_ProcessNextHostState+0x64>
     984:	fd c0       	rjmp	.+506    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	09 f4       	brne	.+2      	; 0x98c <USB_Host_ProcessNextHostState+0x36>
     98a:	3d c0       	rjmp	.+122    	; 0xa06 <USB_Host_ProcessNextHostState+0xb0>
     98c:	84 30       	cpi	r24, 0x04	; 4
     98e:	09 f4       	brne	.+2      	; 0x992 <USB_Host_ProcessNextHostState+0x3c>
     990:	65 c0       	rjmp	.+202    	; 0xa5c <USB_Host_ProcessNextHostState+0x106>
     992:	f6 c0       	rjmp	.+492    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     994:	87 30       	cpi	r24, 0x07	; 7
     996:	09 f4       	brne	.+2      	; 0x99a <USB_Host_ProcessNextHostState+0x44>
     998:	a4 c0       	rjmp	.+328    	; 0xae2 <USB_Host_ProcessNextHostState+0x18c>
     99a:	08 f4       	brcc	.+2      	; 0x99e <USB_Host_ProcessNextHostState+0x48>
     99c:	94 c0       	rjmp	.+296    	; 0xac6 <USB_Host_ProcessNextHostState+0x170>
     99e:	88 30       	cpi	r24, 0x08	; 8
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <USB_Host_ProcessNextHostState+0x4e>
     9a2:	bd c0       	rjmp	.+378    	; 0xb1e <USB_Host_ProcessNextHostState+0x1c8>
     9a4:	89 30       	cpi	r24, 0x09	; 9
     9a6:	09 f0       	breq	.+2      	; 0x9aa <USB_Host_ProcessNextHostState+0x54>
     9a8:	eb c0       	rjmp	.+470    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     9b0:	8a e0       	ldi	r24, 0x0A	; 10
     9b2:	80 93 7f 01 	sts	0x017F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     9b6:	6d dd       	rcall	.-1318   	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete>
     9b8:	e3 c0       	rjmp	.+454    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
			break;
     9ba:	00 91 73 01 	lds	r16, 0x0173
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     9be:	10 91 74 01 	lds	r17, 0x0174
     9c2:	01 15       	cp	r16, r1
     9c4:	11 05       	cpc	r17, r1
     9c6:	09 f4       	brne	.+2      	; 0x9ca <USB_Host_ProcessNextHostState+0x74>
     9c8:	db c0       	rjmp	.+438    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9cc:	77 df       	rcall	.-274    	; 0x8bc <USB_Host_WaitMS>
     9ce:	88 23       	and	r24, r24
     9d0:	31 f0       	breq	.+12     	; 0x9de <USB_Host_ProcessNextHostState+0x88>
     9d2:	90 91 72 01 	lds	r25, 0x0172
				{
					USB_HostState = PostWaitState;
     9d6:	90 93 7f 01 	sts	0x017F, r25
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	c3 c0       	rjmp	.+390    	; 0xb64 <USB_Host_ProcessNextHostState+0x20e>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     9de:	01 50       	subi	r16, 0x01	; 1
					break;
     9e0:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     9e2:	10 93 74 01 	sts	0x0174, r17
     9e6:	00 93 73 01 	sts	0x0173, r16
     9ea:	01 2b       	or	r16, r17
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <USB_Host_ProcessNextHostState+0x9a>
     9ee:	c8 c0       	rjmp	.+400    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     9f0:	80 91 72 01 	lds	r24, 0x0172
				  USB_HostState = PostWaitState;
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <USB_Host_ProcessNextHostState+0xaa>
     9f6:	10 92 74 01 	sts	0x0174, r1
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     9fa:	10 92 73 01 	sts	0x0173, r1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	80 93 7f 01 	sts	0x017F, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a04:	bd c0       	rjmp	.+378    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     a06:	80 91 73 01 	lds	r24, 0x0173
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a0a:	90 91 74 01 	lds	r25, 0x0174
     a0e:	9c 01       	movw	r18, r24
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	31 09       	sbc	r19, r1
     a14:	30 93 74 01 	sts	0x0174, r19
     a18:	20 93 73 01 	sts	0x0173, r18
     a1c:	89 2b       	or	r24, r25
     a1e:	39 f0       	breq	.+14     	; 0xa2e <USB_Host_ProcessNextHostState+0xd8>
     a20:	8f ec       	ldi	r24, 0xCF	; 207
     a22:	97 e0       	ldi	r25, 0x07	; 7
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <USB_Host_ProcessNextHostState+0xce>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <USB_Host_ProcessNextHostState+0xd4>
     a2a:	00 00       	nop
     a2c:	a9 c0       	rjmp	.+338    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     a2e:	77 98       	cbi	0x0e, 7	; 14
     a30:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a34:	80 61       	ori	r24, 0x10	; 16
     a36:	80 93 d8 00 	sts	0x00D8, r24
     a3a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a3e:	8b 7f       	andi	r24, 0xFB	; 251
     a40:	80 93 dd 00 	sts	0x00DD, r24
     a44:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     a48:	80 61       	ori	r24, 0x10	; 16
     a4a:	80 93 d7 00 	sts	0x00D7, r24
     a4e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	80 93 dd 00 	sts	0x00DD, r24
     a58:	84 e0       	ldi	r24, 0x04	; 4
     a5a:	d2 cf       	rjmp	.-92     	; 0xa00 <USB_Host_ProcessNextHostState+0xaa>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a5c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a60:	80 ff       	sbrs	r24, 0
     a62:	8e c0       	rjmp	.+284    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a64:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a68:	8e 7f       	andi	r24, 0xFE	; 254
     a6a:	80 93 9f 00 	sts	0x009F, r24
     a6e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a72:	8d 7f       	andi	r24, 0xFD	; 253
     a74:	80 93 9f 00 	sts	0x009F, r24
     a78:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a7c:	8d 7f       	andi	r24, 0xFD	; 253
     a7e:	80 93 df 00 	sts	0x00DF, r24
     a82:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a86:	82 60       	ori	r24, 0x02	; 2
     a88:	80 93 de 00 	sts	0x00DE, r24
     a8c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	80 93 9e 00 	sts	0x009E, r24
     a96:	e7 d0       	rcall	.+462    	; 0xc66 <Pipe_ClearPipes>
     a98:	10 92 7f 01 	sts	0x017F, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a9c:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 74 01 	sts	0x0174, r25
     aa4:	80 93 73 01 	sts	0x0173, r24
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	0a c0       	rjmp	.+20     	; 0xac0 <USB_Host_ProcessNextHostState+0x16a>
     aac:	b6 de       	rcall	.-660    	; 0x81a <USB_Host_ResetDevice>
     aae:	10 92 7f 01 	sts	0x017F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     ab2:	88 ec       	ldi	r24, 0xC8	; 200
     ab4:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     ab6:	90 93 74 01 	sts	0x0174, r25
     aba:	80 93 73 01 	sts	0x0173, r24
     abe:	86 e0       	ldi	r24, 0x06	; 6
     ac0:	80 93 72 01 	sts	0x0172, r24
     ac4:	5d c0       	rjmp	.+186    	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     ac6:	01 e0       	ldi	r16, 0x01	; 1
     ac8:	20 e4       	ldi	r18, 0x40	; 64
     aca:	30 e0       	ldi	r19, 0x00	; 0
			break;
     acc:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	61 d0       	rcall	.+194    	; 0xb96 <Pipe_ConfigurePipe>
     ad4:	81 11       	cpse	r24, r1
     ad6:	03 c0       	rjmp	.+6      	; 0xade <USB_Host_ProcessNextHostState+0x188>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <USB_Host_ProcessNextHostState+0x20e>
     ade:	87 e0       	ldi	r24, 0x07	; 7
     ae0:	8f cf       	rjmp	.-226    	; 0xa00 <USB_Host_ProcessNextHostState+0xaa>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     ae2:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     ae4:	e1 e1       	ldi	r30, 0x11	; 17
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     ae8:	a7 e7       	ldi	r26, 0x77	; 119
     aea:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     aec:	01 90       	ld	r0, Z+
     aee:	0d 92       	st	X+, r0
     af0:	8a 95       	dec	r24
     af2:	e1 f7       	brne	.-8      	; 0xaec <USB_Host_ProcessNextHostState+0x196>
     af4:	10 92 a7 00 	sts	0x00A7, r1
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	d8 d2       	rcall	.+1456   	; 0x10ae <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     afe:	81 11       	cpse	r24, r1
     b00:	30 c0       	rjmp	.+96     	; 0xb62 <USB_Host_ProcessNextHostState+0x20c>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b02:	88 85       	ldd	r24, Y+8	; 0x08
     b04:	80 93 00 01 	sts	0x0100, r24
     b08:	88 de       	rcall	.-752    	; 0x81a <USB_Host_ResetDevice>
     b0a:	10 92 7f 01 	sts	0x017F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 74 01 	sts	0x0174, r25

			USB_Host_ResetDevice();
     b16:	80 93 73 01 	sts	0x0173, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b1a:	88 e0       	ldi	r24, 0x08	; 8
     b1c:	d1 cf       	rjmp	.-94     	; 0xac0 <USB_Host_ProcessNextHostState+0x16a>
     b1e:	20 91 00 01 	lds	r18, 0x0100
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	01 e0       	ldi	r16, 0x01	; 1
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     b2c:	34 d0       	rcall	.+104    	; 0xb96 <Pipe_ConfigurePipe>
     b2e:	88 23       	and	r24, r24
     b30:	99 f2       	breq	.-90     	; 0xad8 <USB_Host_ProcessNextHostState+0x182>
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	e9 e1       	ldi	r30, 0x19	; 25
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	a7 e7       	ldi	r26, 0x77	; 119
     b3a:	b1 e0       	ldi	r27, 0x01	; 1
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b42:	e1 f7       	brne	.-8      	; 0xb3c <USB_Host_ProcessNextHostState+0x1e6>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	b2 d2       	rcall	.+1380   	; 0x10ae <USB_Host_SendControlRequest>
     b4a:	81 11       	cpse	r24, r1
     b4c:	0a c0       	rjmp	.+20     	; 0xb62 <USB_Host_ProcessNextHostState+0x20c>
     b4e:	10 92 7f 01 	sts	0x017F, r1
     b52:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	90 93 74 01 	sts	0x0174, r25
     b5a:	80 93 73 01 	sts	0x0173, r24
     b5e:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b60:	af cf       	rjmp	.-162    	; 0xac0 <USB_Host_ProcessNextHostState+0x16a>
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	20 91 7f 01 	lds	r18, 0x017F
     b68:	21 30       	cpi	r18, 0x01	; 1
     b6a:	51 f0       	breq	.+20     	; 0xb80 <USB_Host_ProcessNextHostState+0x22a>
     b6c:	68 2f       	mov	r22, r24
     b6e:	89 2f       	mov	r24, r25
     b70:	38 dd       	rcall	.-1424   	; 0x5e2 <EVENT_USB_Host_DeviceEnumerationFailed>
     b72:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	80 93 dd 00 	sts	0x00DD, r24
     b7c:	85 dc       	rcall	.-1782   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b7e:	c9 d0       	rcall	.+402    	; 0xd12 <USB_ResetInterface>
     b80:	28 96       	adiw	r28, 0x08	; 8
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16

		USB_ResetInterface();
     b94:	08 95       	ret

00000b96 <Pipe_ConfigurePipe>:
     b96:	0f 93       	push	r16
	}
}
     b98:	e8 2f       	mov	r30, r24
     b9a:	ef 70       	andi	r30, 0x0F	; 15
     b9c:	87 ff       	sbrs	r24, 7
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <Pipe_ConfigurePipe+0xe>
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <Pipe_ConfigurePipe+0x10>
     ba4:	80 e2       	ldi	r24, 0x20	; 32
     ba6:	e7 30       	cpi	r30, 0x07	; 7
     ba8:	10 f0       	brcs	.+4      	; 0xbae <Pipe_ConfigurePipe+0x18>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	5a c0       	rjmp	.+180    	; 0xc62 <Pipe_ConfigurePipe+0xcc>
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;

	if (Number >= PIPE_TOTAL_PIPES)
	  return false;

	if (Type == EP_TYPE_CONTROL)
     bae:	61 11       	cpse	r22, r1
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     bb2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bb4:	90 e4       	ldi	r25, 0x40	; 64
     bb6:	69 9f       	mul	r22, r25
     bb8:	b0 01       	movw	r22, r0
     bba:	11 24       	eor	r1, r1
     bbc:	4f 70       	andi	r20, 0x0F	; 15
     bbe:	46 2b       	or	r20, r22
     bc0:	48 2b       	or	r20, r24
     bc2:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bc4:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bc8:	5e 13       	cpse	r21, r30
     bca:	19 c0       	rjmp	.+50     	; 0xbfe <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     bcc:	02 30       	cpi	r16, 0x02	; 2
     bce:	10 f0       	brcs	.+4      	; 0xbd4 <Pipe_ConfigurePipe+0x3e>
     bd0:	76 e0       	ldi	r23, 0x06	; 6
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <Pipe_ConfigurePipe+0x40>
     bd4:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     bda:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bdc:	82 17       	cp	r24, r18
     bde:	93 07       	cpc	r25, r19
     be0:	40 f0       	brcs	.+16     	; 0xbf2 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     be2:	86 2f       	mov	r24, r22
     be4:	82 95       	swap	r24
     be6:	80 7f       	andi	r24, 0xF0	; 240
     be8:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bea:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     bec:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bf2:	65 30       	cpi	r22, 0x05	; 5
     bf4:	b1 f3       	breq	.-20     	; 0xbe2 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	ef cf       	rjmp	.-34     	; 0xbdc <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     bfe:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c02:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c06:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     c0a:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c0e:	81 fd       	sbrc	r24, 1
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c12:	5f 5f       	subi	r21, 0xFF	; 255
     c14:	57 30       	cpi	r21, 0x07	; 7
     c16:	b1 f6       	brne	.-84     	; 0xbc4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c18:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	21 c0       	rjmp	.+66     	; 0xc62 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c20:	90 91 a9 00 	lds	r25, 0x00A9
     c24:	9e 7f       	andi	r25, 0xFE	; 254
     c26:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c2a:	90 91 ab 00 	lds	r25, 0x00AB
     c2e:	9d 7f       	andi	r25, 0xFD	; 253
     c30:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c34:	90 91 a9 00 	lds	r25, 0x00A9
     c38:	91 60       	ori	r25, 0x01	; 1
     c3a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c3e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c42:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c46:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     c4a:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c4e:	80 91 a9 00 	lds	r24, 0x00A9
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c58:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c5c:	87 fd       	sbrc	r24, 7
     c5e:	d9 cf       	rjmp	.-78     	; 0xc12 <Pipe_ConfigurePipe+0x7c>
     c60:	a4 cf       	rjmp	.-184    	; 0xbaa <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c66:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c6a:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c6c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c70:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c74:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c78:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c7c:	90 91 a9 00 	lds	r25, 0x00A9
     c80:	9e 7f       	andi	r25, 0xFE	; 254
     c82:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	87 30       	cpi	r24, 0x07	; 7
     c8a:	81 f7       	brne	.-32     	; 0xc6c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c8c:	08 95       	ret

00000c8e <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     c8e:	90 91 a7 00 	lds	r25, 0x00A7
     c92:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     c94:	20 91 aa 00 	lds	r18, 0x00AA
     c98:	20 ff       	sbrs	r18, 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <Pipe_IsEndpointBound+0x12>
     c9c:	20 e8       	ldi	r18, 0x80	; 128
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <Pipe_IsEndpointBound+0x14>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     ca2:	42 2f       	mov	r20, r18
     ca4:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ca6:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ca8:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     cac:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     cb0:	27 ff       	sbrs	r18, 7
     cb2:	0c c0       	rjmp	.+24     	; 0xccc <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     cb4:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     cb8:	53 2f       	mov	r21, r19
     cba:	5f 70       	andi	r21, 0x0F	; 15
     cbc:	35 ff       	sbrs	r19, 5
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <Pipe_IsEndpointBound+0x36>
     cc0:	20 e8       	ldi	r18, 0x80	; 128
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <Pipe_IsEndpointBound+0x38>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     cc8:	28 17       	cp	r18, r24
     cca:	49 f0       	breq	.+18     	; 0xcde <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ccc:	9f 5f       	subi	r25, 0xFF	; 255
     cce:	97 30       	cpi	r25, 0x07	; 7
     cd0:	59 f7       	brne	.-42     	; 0xca8 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cd2:	94 2f       	mov	r25, r20
     cd4:	9f 70       	andi	r25, 0x0F	; 15
     cd6:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     cde:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ce0:	08 95       	ret

00000ce2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ce2:	75 d0       	rcall	.+234    	; 0xdce <USB_INT_DisableAllInterrupts>
     ce4:	7c d0       	rcall	.+248    	; 0xdde <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ce6:	e0 ee       	ldi	r30, 0xE0	; 224
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cea:	80 81       	ld	r24, Z
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	80 83       	st	Z, r24
     cf0:	e8 ed       	ldi	r30, 0xD8	; 216
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	80 83       	st	Z, r24
     cfa:	19 bc       	out	0x29, r1	; 41
     cfc:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cfe:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d00:	8c 91       	ld	r24, X
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	8c 93       	st	X, r24
     d06:	80 81       	ld	r24, Z
     d08:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d0a:	80 83       	st	Z, r24
     d0c:	10 92 76 01 	sts	0x0176, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d10:	08 95       	ret

00000d12 <USB_ResetInterface>:
     d12:	5d d0       	rcall	.+186    	; 0xdce <USB_INT_DisableAllInterrupts>
     d14:	64 d0       	rcall	.+200    	; 0xdde <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d16:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d1a:	8f 77       	andi	r24, 0x7F	; 127
     d1c:	80 93 d8 00 	sts	0x00D8, r24
     d20:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	80 93 d8 00 	sts	0x00D8, r24
     d2a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	80 93 d8 00 	sts	0x00D8, r24
     d34:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d38:	8f 77       	andi	r24, 0x7F	; 127
     d3a:	80 93 d7 00 	sts	0x00D7, r24
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d42:	8e e0       	ldi	r24, 0x0E	; 14
     d44:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d46:	09 b4       	in	r0, 0x29	; 41
     d48:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <USB_ResetInterface+0x34>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 7f 01 	sts	0x017F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d52:	10 92 75 01 	sts	0x0175, r1
	USB_Host_ConfigurationNumber = 0;
     d56:	80 e4       	ldi	r24, 0x40	; 64
     d58:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d5c:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d60:	80 64       	ori	r24, 0x40	; 64
     d62:	80 93 d8 00 	sts	0x00D8, r24
     d66:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	80 93 dd 00 	sts	0x00DD, r24
     d70:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d74:	84 60       	ori	r24, 0x04	; 4
     d76:	80 93 dd 00 	sts	0x00DD, r24
     d7a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d7e:	8f 7e       	andi	r24, 0xEF	; 239
     d80:	80 93 d7 00 	sts	0x00D7, r24
     d84:	6f 9a       	sbi	0x0d, 7	; 13
     d86:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d88:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	80 93 de 00 	sts	0x00DE, r24
     d92:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d96:	84 60       	ori	r24, 0x04	; 4
     d98:	80 93 de 00 	sts	0x00DE, r24
     d9c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	80 93 e0 00 	sts	0x00E0, r24
     da6:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	80 93 d8 00 	sts	0x00D8, r24
     db0:	08 95       	ret

00000db2 <USB_Init>:
     db2:	e8 ed       	ldi	r30, 0xD8	; 216
     db4:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     db6:	80 81       	ld	r24, Z
     db8:	8f 7e       	andi	r24, 0xEF	; 239
     dba:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     dbc:	e7 ed       	ldi	r30, 0xD7	; 215
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 76 01 	sts	0x0176, r24

	USB_ResetInterface();
     dcc:	a2 cf       	rjmp	.-188    	; 0xd12 <USB_ResetInterface>

00000dce <USB_INT_DisableAllInterrupts>:
     dce:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8c 7f       	andi	r24, 0xFC	; 252
     dd6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     dd8:	10 92 a0 00 	sts	0x00A0, r1
     ddc:	08 95       	ret

00000dde <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     dde:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     de2:	10 92 9f 00 	sts	0x009F, r1
     de6:	08 95       	ret

00000de8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	0b b6       	in	r0, 0x3b	; 59
     df4:	0f 92       	push	r0
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e0e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e12:	85 ff       	sbrs	r24, 5
     e14:	0a c0       	rjmp	.+20     	; 0xe2a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e16:	80 91 a0 00 	lds	r24, 0x00A0
     e1a:	85 ff       	sbrs	r24, 5
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e1e:	80 91 9f 00 	lds	r24, 0x009F
     e22:	8f 7d       	andi	r24, 0xDF	; 223
     e24:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e28:	1a d1       	rcall	.+564    	; 0x105e <USB_Event_Stub>
     e2a:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e2e:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e30:	15 c0       	rjmp	.+42     	; 0xe5c <__vector_10+0x74>
     e32:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e36:	81 ff       	sbrs	r24, 1
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <__vector_10+0x74>
     e3a:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e3e:	8d 7f       	andi	r24, 0xFD	; 253
     e40:	80 93 9f 00 	sts	0x009F, r24
     e44:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e48:	8e 7f       	andi	r24, 0xFE	; 254
     e4a:	80 93 9f 00 	sts	0x009F, r24
     e4e:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e52:	8d 7f       	andi	r24, 0xFD	; 253
     e54:	80 93 a0 00 	sts	0x00A0, r24
     e58:	17 db       	rcall	.-2514   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e5a:	5b df       	rcall	.-330    	; 0xd12 <USB_ResetInterface>
     e5c:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e60:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e62:	15 c0       	rjmp	.+42     	; 0xe8e <__vector_10+0xa6>
     e64:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e68:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e6a:	11 c0       	rjmp	.+34     	; 0xe8e <__vector_10+0xa6>
     e6c:	80 91 df 00 	lds	r24, 0x00DF
     e70:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e72:	80 93 df 00 	sts	0x00DF, r24
     e76:	77 98       	cbi	0x0e, 7	; 14
     e78:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e7c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e7e:	80 93 dd 00 	sts	0x00DD, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	98 db       	rcall	.-2256   	; 0x5b6 <EVENT_USB_Host_HostError>
     e86:	00 db       	rcall	.-2560   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 7f 01 	sts	0x017F, r24
		EVENT_USB_Host_DeviceUnattached();
     e8e:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e92:	80 ff       	sbrs	r24, 0
     e94:	17 c0       	rjmp	.+46     	; 0xec4 <__vector_10+0xdc>
     e96:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e9a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e9c:	13 c0       	rjmp	.+38     	; 0xec4 <__vector_10+0xdc>
     e9e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ea8:	80 91 de 00 	lds	r24, 0x00DE
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     eb2:	e5 da       	rcall	.-2614   	; 0x47e <EVENT_USB_Host_DeviceAttached>
     eb4:	80 91 a0 00 	lds	r24, 0x00A0
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ebe:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ec0:	80 93 7f 01 	sts	0x017F, r24
     ec4:	80 91 df 00 	lds	r24, 0x00DF
     ec8:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     eca:	0e c0       	rjmp	.+28     	; 0xee8 <__vector_10+0x100>
     ecc:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ed0:	82 ff       	sbrs	r24, 2
     ed2:	0a c0       	rjmp	.+20     	; 0xee8 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ed4:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ed8:	8b 7f       	andi	r24, 0xFB	; 251
     eda:	80 93 df 00 	sts	0x00DF, r24
     ede:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	7f db       	rcall	.-2306   	; 0x5e2 <EVENT_USB_Host_DeviceEnumerationFailed>
     ee4:	d1 da       	rcall	.-2654   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
     ee6:	15 df       	rcall	.-470    	; 0xd12 <USB_ResetInterface>
     ee8:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23

		USB_ResetInterface();
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0b be       	out	0x3b, r0	; 59
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <USB_GetNextDescriptor>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	fc 01       	movw	r30, r24
     f14:	eb 01       	movw	r28, r22
     f16:	a8 81       	ld	r26, Y
     f18:	b9 81       	ldd	r27, Y+1	; 0x01
     f1a:	8c 91       	ld	r24, X
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     f20:	31 81       	ldd	r19, Z+1	; 0x01
     f22:	82 17       	cp	r24, r18
     f24:	93 07       	cpc	r25, r19
     f26:	08 f4       	brcc	.+2      	; 0xf2a <USB_GetNextDescriptor+0x1c>
     f28:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f2a:	a2 0f       	add	r26, r18
     f2c:	b3 1f       	adc	r27, r19
     f2e:	eb 01       	movw	r28, r22
     f30:	b9 83       	std	Y+1, r27	; 0x01
     f32:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     f34:	80 81       	ld	r24, Z
     f36:	91 81       	ldd	r25, Z+1	; 0x01
     f38:	82 1b       	sub	r24, r18
     f3a:	93 0b       	sbc	r25, r19
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
			}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	29 97       	sbiw	r28, 0x09	; 9
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	7b 01       	movw	r14, r22
     f68:	8a 01       	movw	r16, r20
     f6a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f6c:	90 e8       	ldi	r25, 0x80	; 128
     f6e:	90 93 77 01 	sts	0x0177, r25
     f72:	96 e0       	ldi	r25, 0x06	; 6
     f74:	90 93 78 01 	sts	0x0178, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f78:	e8 2f       	mov	r30, r24
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	31 97       	sbiw	r30, 0x01	; 1
     f7e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f80:	f0 93 7a 01 	sts	0x017A, r31
     f84:	e0 93 79 01 	sts	0x0179, r30
     f88:	10 92 7c 01 	sts	0x017C, r1
     f8c:	10 92 7b 01 	sts	0x017B, r1
     f90:	89 e0       	ldi	r24, 0x09	; 9
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 7e 01 	sts	0x017E, r25
     f98:	80 93 7d 01 	sts	0x017D, r24
     f9c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fa0:	ce 01       	movw	r24, r28
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	84 d0       	rcall	.+264    	; 0x10ae <USB_Host_SendControlRequest>
     fa6:	81 11       	cpse	r24, r1
     fa8:	19 c0       	rjmp	.+50     	; 0xfdc <USB_Host_GetDeviceConfigDescriptor+0x96>
     faa:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fac:	fc 81       	ldd	r31, Y+4	; 0x04
     fae:	d7 01       	movw	r26, r14
     fb0:	ed 93       	st	X+, r30
     fb2:	fc 93       	st	X, r31
     fb4:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     fb6:	df 06       	cpc	r13, r31
     fb8:	70 f0       	brcs	.+28     	; 0xfd6 <USB_Host_GetDeviceConfigDescriptor+0x90>
     fba:	f0 93 7e 01 	sts	0x017E, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fbe:	e0 93 7d 01 	sts	0x017D, r30
     fc2:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fc4:	74 d0       	rcall	.+232    	; 0x10ae <USB_Host_SendControlRequest>
     fc6:	81 11       	cpse	r24, r1
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <USB_Host_GetDeviceConfigDescriptor+0x96>
     fca:	f8 01       	movw	r30, r16
     fcc:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	21 f0       	breq	.+8      	; 0xfda <USB_Host_GetDeviceConfigDescriptor+0x94>
     fd2:	86 e0       	ldi	r24, 0x06	; 6
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     fd6:	85 e0       	ldi	r24, 0x05	; 5
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     fde:	0f b6       	in	r0, 0x3f	; 63
}
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	08 95       	ret

00000ffa <USB_GetNextDescriptorComp>:
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	8c 01       	movw	r16, r24
    1010:	eb 01       	movw	r28, r22
    1012:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1014:	f8 01       	movw	r30, r16
    1016:	e0 80       	ld	r14, Z
    1018:	f1 80       	ldd	r15, Z+1	; 0x01
    101a:	e1 14       	cp	r14, r1
    101c:	f1 04       	cpc	r15, r1
    101e:	99 f0       	breq	.+38     	; 0x1046 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1020:	a8 80       	ld	r10, Y
    1022:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1024:	be 01       	movw	r22, r28
    1026:	c8 01       	movw	r24, r16
    1028:	72 df       	rcall	.-284    	; 0xf0e <USB_GetNextDescriptor>
    102a:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    102c:	99 81       	ldd	r25, Y+1	; 0x01
    102e:	f6 01       	movw	r30, r12
    1030:	09 95       	icall
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	79 f3       	breq	.-34     	; 0x1014 <USB_GetNextDescriptorComp+0x1a>
    1036:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1038:	39 f4       	brne	.+14     	; 0x1048 <USB_GetNextDescriptorComp+0x4e>
    103a:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    103c:	a8 82       	st	Y, r10
    103e:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1040:	f1 82       	std	Z+1, r15	; 0x01
    1042:	e0 82       	st	Z, r14
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <USB_GetNextDescriptorComp+0x4e>
    1046:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1048:	df 91       	pop	r29
}
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	08 95       	ret

0000105e <USB_Event_Stub>:
    105e:	08 95       	ret

00001060 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1068:	c9 ee       	ldi	r28, 0xE9	; 233
    106a:	d3 e0       	ldi	r29, 0x03	; 3
    106c:	11 11       	cpse	r17, r1
    106e:	0d c0       	rjmp	.+26     	; 0x108a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1070:	80 91 a6 00 	lds	r24, 0x00A6
    1074:	83 fd       	sbrc	r24, 3
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	20 dc       	rcall	.-1984   	; 0x8bc <USB_Host_WaitMS>
    107c:	81 11       	cpse	r24, r1
    107e:	13 c0       	rjmp	.+38     	; 0x10a6 <USB_Host_WaitForIOS+0x46>
    1080:	21 97       	sbiw	r28, 0x01	; 1
    1082:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1084:	99 f7       	brne	.-26     	; 0x106c <USB_Host_WaitForIOS+0xc>
    1086:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <USB_Host_WaitForIOS+0x46>
    108a:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    108c:	29 f4       	brne	.+10     	; 0x1098 <USB_Host_WaitForIOS+0x38>
    108e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1092:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1094:	f1 cf       	rjmp	.-30     	; 0x1078 <USB_Host_WaitForIOS+0x18>
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <USB_Host_WaitForIOS+0x44>
    1098:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    109a:	71 f7       	brne	.-36     	; 0x1078 <USB_Host_WaitForIOS+0x18>
    109c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10a0:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    10a2:	ea cf       	rjmp	.-44     	; 0x1078 <USB_Host_WaitForIOS+0x18>
    10a4:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    10a6:	df 91       	pop	r29
}
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	08 95       	ret

000010ae <USB_Host_SendControlRequest>:
    10ae:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10ba:	f0 90 9e 00 	lds	r15, 0x009E
    10be:	8f 2d       	mov	r24, r15
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10c4:	c0 91 7d 01 	lds	r28, 0x017D
    10c8:	d0 91 7e 01 	lds	r29, 0x017E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10cc:	80 91 9e 00 	lds	r24, 0x009E
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	f1 db       	rcall	.-2078   	; 0x8bc <USB_Host_WaitMS>
    10da:	81 11       	cpse	r24, r1
    10dc:	cc c0       	rjmp	.+408    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    10de:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e2:	8f 7c       	andi	r24, 0xCF	; 207
    10e4:	80 93 aa 00 	sts	0x00AA, r24
    10e8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10ec:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    10f0:	8f 7e       	andi	r24, 0xEF	; 239
    10f2:	80 93 a6 00 	sts	0x00A6, r24
    10f6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10fa:	8f 7b       	andi	r24, 0xBF	; 191
    10fc:	80 93 a9 00 	sts	0x00A9, r24
    1100:	e7 e7       	ldi	r30, 0x77	; 119
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1106:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    110a:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    110c:	ef 37       	cpi	r30, 0x7F	; 127
    110e:	f8 07       	cpc	r31, r24
    1110:	c9 f7       	brne	.-14     	; 0x1104 <USB_Host_SendControlRequest+0x56>
    1112:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1116:	87 77       	andi	r24, 0x77	; 119
    1118:	80 93 a6 00 	sts	0x00A6, r24
    111c:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    111e:	a0 df       	rcall	.-192    	; 0x1060 <USB_Host_WaitForIOS>
    1120:	81 11       	cpse	r24, r1
    1122:	a9 c0       	rjmp	.+338    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    1124:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	80 93 a9 00 	sts	0x00A9, r24
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	c5 db       	rcall	.-2166   	; 0x8bc <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1132:	81 11       	cpse	r24, r1
    1134:	a0 c0       	rjmp	.+320    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    1136:	80 91 77 01 	lds	r24, 0x0177
    113a:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    113c:	4e c0       	rjmp	.+156    	; 0x11da <USB_Host_SendControlRequest+0x12c>
    113e:	80 91 aa 00 	lds	r24, 0x00AA
    1142:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1144:	80 61       	ori	r24, 0x10	; 16
    1146:	80 93 aa 00 	sts	0x00AA, r24
    114a:	01 15       	cp	r16, r1
    114c:	11 05       	cpc	r17, r1
    114e:	09 f0       	breq	.+2      	; 0x1152 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1150:	3a c0       	rjmp	.+116    	; 0x11c6 <USB_Host_SendControlRequest+0x118>
    1152:	80 91 aa 00 	lds	r24, 0x00AA
    1156:	8f 7c       	andi	r24, 0xCF	; 207
    1158:	80 62       	ori	r24, 0x20	; 32
    115a:	80 93 aa 00 	sts	0x00AA, r24
    115e:	80 91 a9 00 	lds	r24, 0x00A9
    1162:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1164:	80 93 a9 00 	sts	0x00A9, r24
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	7a df       	rcall	.-268    	; 0x1060 <USB_Host_WaitForIOS>
    116c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116e:	83 c0       	rjmp	.+262    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    1170:	80 91 a6 00 	lds	r24, 0x00A6
    1174:	8b 77       	andi	r24, 0x7B	; 123
    1176:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	71 df       	rcall	.-286    	; 0x1060 <USB_Host_WaitForIOS>
    117e:	7b c0       	rjmp	.+246    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    1180:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	69 df       	rcall	.-302    	; 0x1060 <USB_Host_WaitForIOS>
    118e:	81 11       	cpse	r24, r1
    1190:	72 c0       	rjmp	.+228    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    1192:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1196:	90 91 f7 00 	lds	r25, 0x00F7
    119a:	89 2b       	or	r24, r25
    119c:	11 f4       	brne	.+4      	; 0x11a2 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    119e:	c0 e0       	ldi	r28, 0x00	; 0
    11a0:	d0 e0       	ldi	r29, 0x00	; 0
    11a2:	f8 01       	movw	r30, r16
    11a4:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11a6:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    11aa:	90 91 f7 00 	lds	r25, 0x00F7
    11ae:	89 2b       	or	r24, r25
    11b0:	69 f4       	brne	.+26     	; 0x11cc <USB_Host_SendControlRequest+0x11e>
    11b2:	80 91 a9 00 	lds	r24, 0x00A9
    11b6:	80 64       	ori	r24, 0x40	; 64
    11b8:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    11bc:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11c0:	8e 77       	andi	r24, 0x7E	; 126
    11c2:	80 93 a6 00 	sts	0x00A6, r24
    11c6:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11c8:	d9 f6       	brne	.-74     	; 0x1180 <USB_Host_SendControlRequest+0xd2>
    11ca:	c3 cf       	rjmp	.-122    	; 0x1152 <USB_Host_SendControlRequest+0xa4>
    11cc:	20 97       	sbiw	r28, 0x00	; 0
    11ce:	89 f3       	breq	.-30     	; 0x11b2 <USB_Host_SendControlRequest+0x104>
    11d0:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    11d4:	81 93       	st	Z+, r24
    11d6:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11d8:	e5 cf       	rjmp	.-54     	; 0x11a4 <USB_Host_SendControlRequest+0xf6>
    11da:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11dc:	11 05       	cpc	r17, r1
    11de:	b1 f1       	breq	.+108    	; 0x124c <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    11e0:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    11e4:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    11e6:	80 62       	ori	r24, 0x20	; 32
    11e8:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ec:	80 91 a9 00 	lds	r24, 0x00A9
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	80 93 a9 00 	sts	0x00A9, r24
    11f6:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11f8:	20 97       	sbiw	r28, 0x00	; 0
    11fa:	01 f1       	breq	.+64     	; 0x123c <USB_Host_SendControlRequest+0x18e>
    11fc:	31 df       	rcall	.-414    	; 0x1060 <USB_Host_WaitForIOS>
    11fe:	81 11       	cpse	r24, r1
    1200:	3a c0       	rjmp	.+116    	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1202:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1204:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1208:	30 91 f7 00 	lds	r19, 0x00F7
    120c:	80 91 00 01 	lds	r24, 0x0100
    1210:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1212:	28 17       	cp	r18, r24
    1214:	39 07       	cpc	r19, r25
    1216:	58 f4       	brcc	.+22     	; 0x122e <USB_Host_SendControlRequest+0x180>
    1218:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	8c 01       	movw	r16, r24
    121e:	20 81       	ld	r18, Z
    1220:	20 93 af 00 	sts	0x00AF, r18
    1224:	21 97       	sbiw	r28, 0x01	; 1
    1226:	20 97       	sbiw	r28, 0x00	; 0
    1228:	19 f0       	breq	.+6      	; 0x1230 <USB_Host_SendControlRequest+0x182>
    122a:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    122c:	eb cf       	rjmp	.-42     	; 0x1204 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    122e:	8f 01       	movw	r16, r30
    1230:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1234:	8b 77       	andi	r24, 0x7B	; 123
    1236:	80 93 a6 00 	sts	0x00A6, r24
    123a:	dd cf       	rjmp	.-70     	; 0x11f6 <USB_Host_SendControlRequest+0x148>
    123c:	11 df       	rcall	.-478    	; 0x1060 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    123e:	81 11       	cpse	r24, r1
    1240:	1a c0       	rjmp	.+52     	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    1242:	80 91 a9 00 	lds	r24, 0x00A9
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    124c:	80 91 aa 00 	lds	r24, 0x00AA
    1250:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1252:	80 61       	ori	r24, 0x10	; 16
    1254:	80 93 aa 00 	sts	0x00AA, r24
    1258:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    125c:	8f 7b       	andi	r24, 0xBF	; 191
    125e:	80 93 a9 00 	sts	0x00A9, r24
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	fd de       	rcall	.-518    	; 0x1060 <USB_Host_WaitForIOS>
    1266:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <USB_Host_SendControlRequest+0x1c8>
    126a:	80 91 a6 00 	lds	r24, 0x00A6
    126e:	8e 77       	andi	r24, 0x7E	; 126
    1270:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 91 a9 00 	lds	r25, 0x00A9
    127a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    127c:	90 93 a9 00 	sts	0x00A9, r25
    1280:	f1 10       	cpse	r15, r1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <USB_Host_SendControlRequest+0x1e0>
    1284:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1288:	9e 7f       	andi	r25, 0xFE	; 254
    128a:	90 93 9e 00 	sts	0x009E, r25
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1294:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    12a0:	ff 90       	pop	r15
    12a2:	08 95       	ret

000012a4 <USB_Host_SetDeviceConfiguration>:
    12a4:	cf 93       	push	r28
				UPRST = 0;
    12a6:	c8 2f       	mov	r28, r24
    12a8:	10 92 77 01 	sts	0x0177, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    12ac:	89 e0       	ldi	r24, 0x09	; 9
    12ae:	80 93 78 01 	sts	0x0178, r24
    12b2:	2c 2f       	mov	r18, r28
    12b4:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12b6:	30 93 7a 01 	sts	0x017A, r19
    12ba:	20 93 79 01 	sts	0x0179, r18
    12be:	10 92 7c 01 	sts	0x017C, r1
    12c2:	10 92 7b 01 	sts	0x017B, r1
    12c6:	10 92 7e 01 	sts	0x017E, r1
    12ca:	10 92 7d 01 	sts	0x017D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12ce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	eb de       	rcall	.-554    	; 0x10ae <USB_Host_SendControlRequest>
    12d8:	81 11       	cpse	r24, r1
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <USB_Host_SetDeviceConfiguration+0x4a>
    12dc:	c0 93 75 01 	sts	0x0175, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12e0:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <USB_Host_SetDeviceConfiguration+0x44>
    12e4:	9b e0       	ldi	r25, 0x0B	; 11
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <USB_Host_SetDeviceConfiguration+0x46>
    12e8:	9a e0       	ldi	r25, 0x0A	; 10
    12ea:	90 93 7f 01 	sts	0x017F, r25
    12ee:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    12f0:	08 95       	ret

000012f2 <USB_Host_GetDescriptor>:
    12f2:	90 e8       	ldi	r25, 0x80	; 128
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12f4:	90 93 77 01 	sts	0x0177, r25
    12f8:	96 e0       	ldi	r25, 0x06	; 6
    12fa:	90 93 78 01 	sts	0x0178, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = (((uint16_t)Type << 8) | Index),
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	78 2b       	or	r23, r24
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1302:	70 93 7a 01 	sts	0x017A, r23
    1306:	60 93 79 01 	sts	0x0179, r22
    130a:	10 92 7c 01 	sts	0x017C, r1
    130e:	10 92 7b 01 	sts	0x017B, r1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	30 93 7e 01 	sts	0x017E, r19
    1318:	20 93 7d 01 	sts	0x017D, r18
    131c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = BufferLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    1320:	ca 01       	movw	r24, r20
    1322:	c5 ce       	rjmp	.-630    	; 0x10ae <USB_Host_SendControlRequest>

00001324 <USB_USBTask>:
    1324:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1326:	c0 91 a7 00 	lds	r28, 0x00A7
    132a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    132c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1330:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1334:	10 db       	rcall	.-2528   	; 0x956 <USB_Host_ProcessNextHostState>
    1336:	c0 93 a7 00 	sts	0x00A7, r28
    133a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    133c:	08 95       	ret

0000133e <Serial_putchar>:
    133e:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1342:	95 ff       	sbrs	r25, 5
    1344:	fc cf       	rjmp	.-8      	; 0x133e <Serial_putchar>
				UDR1 = DataByte;
    1346:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	08 95       	ret

00001350 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1350:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1354:	87 ff       	sbrs	r24, 7
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <Serial_getchar+0x18>
    1358:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    135c:	87 ff       	sbrs	r24, 7
    135e:	07 c0       	rjmp	.+14     	; 0x136e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1360:	80 91 ce 00 	lds	r24, 0x00CE
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	08 95       	ret
	  return _FDEV_EOF;
    1368:	8e ef       	ldi	r24, 0xFE	; 254
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1372:	08 95       	ret

00001374 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1374:	fc 01       	movw	r30, r24
	if (!(Stream))
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	59 f4       	brne	.+22     	; 0x1390 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    137a:	80 e8       	ldi	r24, 0x80	; 128
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	90 93 8f 01 	sts	0x018F, r25
    1382:	80 93 8e 01 	sts	0x018E, r24
		stdout = Stream;
    1386:	90 93 91 01 	sts	0x0191, r25
    138a:	80 93 90 01 	sts	0x0190, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    138e:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1390:	8e e0       	ldi	r24, 0x0E	; 14
    1392:	df 01       	movw	r26, r30
    1394:	1d 92       	st	X+, r1
    1396:	8a 95       	dec	r24
    1398:	e9 f7       	brne	.-6      	; 0x1394 <Serial_CreateStream+0x20>
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	83 83       	std	Z+3, r24	; 0x03
    139e:	8f e9       	ldi	r24, 0x9F	; 159
    13a0:	99 e0       	ldi	r25, 0x09	; 9
    13a2:	91 87       	std	Z+9, r25	; 0x09
    13a4:	80 87       	std	Z+8, r24	; 0x08
    13a6:	88 ea       	ldi	r24, 0xA8	; 168
    13a8:	99 e0       	ldi	r25, 0x09	; 9
    13aa:	93 87       	std	Z+11, r25	; 0x0b
    13ac:	82 87       	std	Z+10, r24	; 0x0a
    13ae:	08 95       	ret

000013b0 <printf_P>:
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	fe 01       	movw	r30, r28
    13be:	37 96       	adiw	r30, 0x07	; 7
    13c0:	61 91       	ld	r22, Z+
    13c2:	71 91       	ld	r23, Z+
    13c4:	00 e9       	ldi	r16, 0x90	; 144
    13c6:	11 e0       	ldi	r17, 0x01	; 1
    13c8:	d8 01       	movw	r26, r16
    13ca:	8d 91       	ld	r24, X+
    13cc:	9c 91       	ld	r25, X
    13ce:	dc 01       	movw	r26, r24
    13d0:	13 96       	adiw	r26, 0x03	; 3
    13d2:	2c 91       	ld	r18, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	28 60       	ori	r18, 0x08	; 8
    13d8:	13 96       	adiw	r26, 0x03	; 3
    13da:	2c 93       	st	X, r18
    13dc:	af 01       	movw	r20, r30
    13de:	3a d0       	rcall	.+116    	; 0x1454 <vfprintf>
    13e0:	d8 01       	movw	r26, r16
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	23 81       	ldd	r18, Z+3	; 0x03
    13e8:	27 7f       	andi	r18, 0xF7	; 247
    13ea:	23 83       	std	Z+3, r18	; 0x03
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <puts_P>:
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
    1400:	e0 91 90 01 	lds	r30, 0x0190
    1404:	f0 91 91 01 	lds	r31, 0x0191
    1408:	83 81       	ldd	r24, Z+3	; 0x03
    140a:	81 ff       	sbrs	r24, 1
    140c:	1c c0       	rjmp	.+56     	; 0x1446 <puts_P+0x50>
    140e:	00 e0       	ldi	r16, 0x00	; 0
    1410:	10 e0       	ldi	r17, 0x00	; 0
    1412:	fe 01       	movw	r30, r28
    1414:	84 91       	lpm	r24, Z
    1416:	60 91 90 01 	lds	r22, 0x0190
    141a:	70 91 91 01 	lds	r23, 0x0191
    141e:	db 01       	movw	r26, r22
    1420:	18 96       	adiw	r26, 0x08	; 8
    1422:	ed 91       	ld	r30, X+
    1424:	fc 91       	ld	r31, X
    1426:	19 97       	sbiw	r26, 0x09	; 9
    1428:	88 23       	and	r24, r24
    142a:	39 f0       	breq	.+14     	; 0x143a <puts_P+0x44>
    142c:	09 95       	icall
    142e:	89 2b       	or	r24, r25
    1430:	11 f0       	breq	.+4      	; 0x1436 <puts_P+0x40>
    1432:	0f ef       	ldi	r16, 0xFF	; 255
    1434:	1f ef       	ldi	r17, 0xFF	; 255
    1436:	21 96       	adiw	r28, 0x01	; 1
    1438:	ec cf       	rjmp	.-40     	; 0x1412 <puts_P+0x1c>
    143a:	8a e0       	ldi	r24, 0x0A	; 10
    143c:	09 95       	icall
    143e:	89 2b       	or	r24, r25
    1440:	11 f4       	brne	.+4      	; 0x1446 <puts_P+0x50>
    1442:	c8 01       	movw	r24, r16
    1444:	02 c0       	rjmp	.+4      	; 0x144a <puts_P+0x54>
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	08 95       	ret

00001454 <vfprintf>:
    1454:	2f 92       	push	r2
    1456:	3f 92       	push	r3
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	2c 97       	sbiw	r28, 0x0c	; 12
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	7c 01       	movw	r14, r24
    148a:	6b 01       	movw	r12, r22
    148c:	8a 01       	movw	r16, r20
    148e:	fc 01       	movw	r30, r24
    1490:	17 82       	std	Z+7, r1	; 0x07
    1492:	16 82       	std	Z+6, r1	; 0x06
    1494:	83 81       	ldd	r24, Z+3	; 0x03
    1496:	81 ff       	sbrs	r24, 1
    1498:	b0 c1       	rjmp	.+864    	; 0x17fa <vfprintf+0x3a6>
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	4c 01       	movw	r8, r24
    14a0:	f7 01       	movw	r30, r14
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	f6 01       	movw	r30, r12
    14a6:	93 fd       	sbrc	r25, 3
    14a8:	85 91       	lpm	r24, Z+
    14aa:	93 ff       	sbrs	r25, 3
    14ac:	81 91       	ld	r24, Z+
    14ae:	6f 01       	movw	r12, r30
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <vfprintf+0x62>
    14b4:	9e c1       	rjmp	.+828    	; 0x17f2 <vfprintf+0x39e>
    14b6:	85 32       	cpi	r24, 0x25	; 37
    14b8:	39 f4       	brne	.+14     	; 0x14c8 <vfprintf+0x74>
    14ba:	93 fd       	sbrc	r25, 3
    14bc:	85 91       	lpm	r24, Z+
    14be:	93 ff       	sbrs	r25, 3
    14c0:	81 91       	ld	r24, Z+
    14c2:	6f 01       	movw	r12, r30
    14c4:	85 32       	cpi	r24, 0x25	; 37
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <vfprintf+0x7c>
    14c8:	b7 01       	movw	r22, r14
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	c7 d1       	rcall	.+910    	; 0x185c <fputc>
    14ce:	e8 cf       	rjmp	.-48     	; 0x14a0 <vfprintf+0x4c>
    14d0:	51 2c       	mov	r5, r1
    14d2:	31 2c       	mov	r3, r1
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	20 32       	cpi	r18, 0x20	; 32
    14d8:	a0 f4       	brcc	.+40     	; 0x1502 <vfprintf+0xae>
    14da:	8b 32       	cpi	r24, 0x2B	; 43
    14dc:	69 f0       	breq	.+26     	; 0x14f8 <vfprintf+0xa4>
    14de:	30 f4       	brcc	.+12     	; 0x14ec <vfprintf+0x98>
    14e0:	80 32       	cpi	r24, 0x20	; 32
    14e2:	59 f0       	breq	.+22     	; 0x14fa <vfprintf+0xa6>
    14e4:	83 32       	cpi	r24, 0x23	; 35
    14e6:	69 f4       	brne	.+26     	; 0x1502 <vfprintf+0xae>
    14e8:	20 61       	ori	r18, 0x10	; 16
    14ea:	2c c0       	rjmp	.+88     	; 0x1544 <vfprintf+0xf0>
    14ec:	8d 32       	cpi	r24, 0x2D	; 45
    14ee:	39 f0       	breq	.+14     	; 0x14fe <vfprintf+0xaa>
    14f0:	80 33       	cpi	r24, 0x30	; 48
    14f2:	39 f4       	brne	.+14     	; 0x1502 <vfprintf+0xae>
    14f4:	21 60       	ori	r18, 0x01	; 1
    14f6:	26 c0       	rjmp	.+76     	; 0x1544 <vfprintf+0xf0>
    14f8:	22 60       	ori	r18, 0x02	; 2
    14fa:	24 60       	ori	r18, 0x04	; 4
    14fc:	23 c0       	rjmp	.+70     	; 0x1544 <vfprintf+0xf0>
    14fe:	28 60       	ori	r18, 0x08	; 8
    1500:	21 c0       	rjmp	.+66     	; 0x1544 <vfprintf+0xf0>
    1502:	27 fd       	sbrc	r18, 7
    1504:	27 c0       	rjmp	.+78     	; 0x1554 <vfprintf+0x100>
    1506:	30 ed       	ldi	r19, 0xD0	; 208
    1508:	38 0f       	add	r19, r24
    150a:	3a 30       	cpi	r19, 0x0A	; 10
    150c:	78 f4       	brcc	.+30     	; 0x152c <vfprintf+0xd8>
    150e:	26 ff       	sbrs	r18, 6
    1510:	06 c0       	rjmp	.+12     	; 0x151e <vfprintf+0xca>
    1512:	fa e0       	ldi	r31, 0x0A	; 10
    1514:	5f 9e       	mul	r5, r31
    1516:	30 0d       	add	r19, r0
    1518:	11 24       	eor	r1, r1
    151a:	53 2e       	mov	r5, r19
    151c:	13 c0       	rjmp	.+38     	; 0x1544 <vfprintf+0xf0>
    151e:	8a e0       	ldi	r24, 0x0A	; 10
    1520:	38 9e       	mul	r3, r24
    1522:	30 0d       	add	r19, r0
    1524:	11 24       	eor	r1, r1
    1526:	33 2e       	mov	r3, r19
    1528:	20 62       	ori	r18, 0x20	; 32
    152a:	0c c0       	rjmp	.+24     	; 0x1544 <vfprintf+0xf0>
    152c:	8e 32       	cpi	r24, 0x2E	; 46
    152e:	21 f4       	brne	.+8      	; 0x1538 <vfprintf+0xe4>
    1530:	26 fd       	sbrc	r18, 6
    1532:	5f c1       	rjmp	.+702    	; 0x17f2 <vfprintf+0x39e>
    1534:	20 64       	ori	r18, 0x40	; 64
    1536:	06 c0       	rjmp	.+12     	; 0x1544 <vfprintf+0xf0>
    1538:	8c 36       	cpi	r24, 0x6C	; 108
    153a:	11 f4       	brne	.+4      	; 0x1540 <vfprintf+0xec>
    153c:	20 68       	ori	r18, 0x80	; 128
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0xf0>
    1540:	88 36       	cpi	r24, 0x68	; 104
    1542:	41 f4       	brne	.+16     	; 0x1554 <vfprintf+0x100>
    1544:	f6 01       	movw	r30, r12
    1546:	93 fd       	sbrc	r25, 3
    1548:	85 91       	lpm	r24, Z+
    154a:	93 ff       	sbrs	r25, 3
    154c:	81 91       	ld	r24, Z+
    154e:	6f 01       	movw	r12, r30
    1550:	81 11       	cpse	r24, r1
    1552:	c1 cf       	rjmp	.-126    	; 0x14d6 <vfprintf+0x82>
    1554:	98 2f       	mov	r25, r24
    1556:	9f 7d       	andi	r25, 0xDF	; 223
    1558:	95 54       	subi	r25, 0x45	; 69
    155a:	93 30       	cpi	r25, 0x03	; 3
    155c:	28 f4       	brcc	.+10     	; 0x1568 <vfprintf+0x114>
    155e:	0c 5f       	subi	r16, 0xFC	; 252
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	ff e3       	ldi	r31, 0x3F	; 63
    1564:	f9 83       	std	Y+1, r31	; 0x01
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <vfprintf+0x12e>
    1568:	83 36       	cpi	r24, 0x63	; 99
    156a:	31 f0       	breq	.+12     	; 0x1578 <vfprintf+0x124>
    156c:	83 37       	cpi	r24, 0x73	; 115
    156e:	71 f0       	breq	.+28     	; 0x158c <vfprintf+0x138>
    1570:	83 35       	cpi	r24, 0x53	; 83
    1572:	09 f0       	breq	.+2      	; 0x1576 <vfprintf+0x122>
    1574:	57 c0       	rjmp	.+174    	; 0x1624 <vfprintf+0x1d0>
    1576:	21 c0       	rjmp	.+66     	; 0x15ba <vfprintf+0x166>
    1578:	f8 01       	movw	r30, r16
    157a:	80 81       	ld	r24, Z
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	0e 5f       	subi	r16, 0xFE	; 254
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	44 24       	eor	r4, r4
    1584:	43 94       	inc	r4
    1586:	51 2c       	mov	r5, r1
    1588:	54 01       	movw	r10, r8
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <vfprintf+0x160>
    158c:	38 01       	movw	r6, r16
    158e:	f2 e0       	ldi	r31, 0x02	; 2
    1590:	6f 0e       	add	r6, r31
    1592:	71 1c       	adc	r7, r1
    1594:	f8 01       	movw	r30, r16
    1596:	a0 80       	ld	r10, Z
    1598:	b1 80       	ldd	r11, Z+1	; 0x01
    159a:	26 ff       	sbrs	r18, 6
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <vfprintf+0x150>
    159e:	65 2d       	mov	r22, r5
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <vfprintf+0x154>
    15a4:	6f ef       	ldi	r22, 0xFF	; 255
    15a6:	7f ef       	ldi	r23, 0xFF	; 255
    15a8:	c5 01       	movw	r24, r10
    15aa:	2c 87       	std	Y+12, r18	; 0x0c
    15ac:	4c d1       	rcall	.+664    	; 0x1846 <strnlen>
    15ae:	2c 01       	movw	r4, r24
    15b0:	83 01       	movw	r16, r6
    15b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b4:	2f 77       	andi	r18, 0x7F	; 127
    15b6:	22 2e       	mov	r2, r18
    15b8:	16 c0       	rjmp	.+44     	; 0x15e6 <vfprintf+0x192>
    15ba:	38 01       	movw	r6, r16
    15bc:	f2 e0       	ldi	r31, 0x02	; 2
    15be:	6f 0e       	add	r6, r31
    15c0:	71 1c       	adc	r7, r1
    15c2:	f8 01       	movw	r30, r16
    15c4:	a0 80       	ld	r10, Z
    15c6:	b1 80       	ldd	r11, Z+1	; 0x01
    15c8:	26 ff       	sbrs	r18, 6
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <vfprintf+0x17e>
    15cc:	65 2d       	mov	r22, r5
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x182>
    15d2:	6f ef       	ldi	r22, 0xFF	; 255
    15d4:	7f ef       	ldi	r23, 0xFF	; 255
    15d6:	c5 01       	movw	r24, r10
    15d8:	2c 87       	std	Y+12, r18	; 0x0c
    15da:	2a d1       	rcall	.+596    	; 0x1830 <strnlen_P>
    15dc:	2c 01       	movw	r4, r24
    15de:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e0:	20 68       	ori	r18, 0x80	; 128
    15e2:	22 2e       	mov	r2, r18
    15e4:	83 01       	movw	r16, r6
    15e6:	23 fc       	sbrc	r2, 3
    15e8:	19 c0       	rjmp	.+50     	; 0x161c <vfprintf+0x1c8>
    15ea:	83 2d       	mov	r24, r3
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	48 16       	cp	r4, r24
    15f0:	59 06       	cpc	r5, r25
    15f2:	a0 f4       	brcc	.+40     	; 0x161c <vfprintf+0x1c8>
    15f4:	b7 01       	movw	r22, r14
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	30 d1       	rcall	.+608    	; 0x185c <fputc>
    15fc:	3a 94       	dec	r3
    15fe:	f5 cf       	rjmp	.-22     	; 0x15ea <vfprintf+0x196>
    1600:	f5 01       	movw	r30, r10
    1602:	27 fc       	sbrc	r2, 7
    1604:	85 91       	lpm	r24, Z+
    1606:	27 fe       	sbrs	r2, 7
    1608:	81 91       	ld	r24, Z+
    160a:	5f 01       	movw	r10, r30
    160c:	b7 01       	movw	r22, r14
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	25 d1       	rcall	.+586    	; 0x185c <fputc>
    1612:	31 10       	cpse	r3, r1
    1614:	3a 94       	dec	r3
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	4f 1a       	sub	r4, r31
    161a:	51 08       	sbc	r5, r1
    161c:	41 14       	cp	r4, r1
    161e:	51 04       	cpc	r5, r1
    1620:	79 f7       	brne	.-34     	; 0x1600 <vfprintf+0x1ac>
    1622:	de c0       	rjmp	.+444    	; 0x17e0 <vfprintf+0x38c>
    1624:	84 36       	cpi	r24, 0x64	; 100
    1626:	11 f0       	breq	.+4      	; 0x162c <vfprintf+0x1d8>
    1628:	89 36       	cpi	r24, 0x69	; 105
    162a:	31 f5       	brne	.+76     	; 0x1678 <vfprintf+0x224>
    162c:	f8 01       	movw	r30, r16
    162e:	27 ff       	sbrs	r18, 7
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <vfprintf+0x1ec>
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	0c 5f       	subi	r16, 0xFC	; 252
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <vfprintf+0x1fc>
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	88 27       	eor	r24, r24
    1646:	77 fd       	sbrc	r23, 7
    1648:	80 95       	com	r24
    164a:	98 2f       	mov	r25, r24
    164c:	0e 5f       	subi	r16, 0xFE	; 254
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	2f 76       	andi	r18, 0x6F	; 111
    1652:	b2 2e       	mov	r11, r18
    1654:	97 ff       	sbrs	r25, 7
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x216>
    1658:	90 95       	com	r25
    165a:	80 95       	com	r24
    165c:	70 95       	com	r23
    165e:	61 95       	neg	r22
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	8f 4f       	sbci	r24, 0xFF	; 255
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	20 68       	ori	r18, 0x80	; 128
    1668:	b2 2e       	mov	r11, r18
    166a:	2a e0       	ldi	r18, 0x0A	; 10
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	a4 01       	movw	r20, r8
    1670:	27 d1       	rcall	.+590    	; 0x18c0 <__ultoa_invert>
    1672:	a8 2e       	mov	r10, r24
    1674:	a8 18       	sub	r10, r8
    1676:	43 c0       	rjmp	.+134    	; 0x16fe <vfprintf+0x2aa>
    1678:	85 37       	cpi	r24, 0x75	; 117
    167a:	29 f4       	brne	.+10     	; 0x1686 <vfprintf+0x232>
    167c:	2f 7e       	andi	r18, 0xEF	; 239
    167e:	b2 2e       	mov	r11, r18
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	25 c0       	rjmp	.+74     	; 0x16d0 <vfprintf+0x27c>
    1686:	f2 2f       	mov	r31, r18
    1688:	f9 7f       	andi	r31, 0xF9	; 249
    168a:	bf 2e       	mov	r11, r31
    168c:	8f 36       	cpi	r24, 0x6F	; 111
    168e:	c1 f0       	breq	.+48     	; 0x16c0 <vfprintf+0x26c>
    1690:	18 f4       	brcc	.+6      	; 0x1698 <vfprintf+0x244>
    1692:	88 35       	cpi	r24, 0x58	; 88
    1694:	79 f0       	breq	.+30     	; 0x16b4 <vfprintf+0x260>
    1696:	ad c0       	rjmp	.+346    	; 0x17f2 <vfprintf+0x39e>
    1698:	80 37       	cpi	r24, 0x70	; 112
    169a:	19 f0       	breq	.+6      	; 0x16a2 <vfprintf+0x24e>
    169c:	88 37       	cpi	r24, 0x78	; 120
    169e:	21 f0       	breq	.+8      	; 0x16a8 <vfprintf+0x254>
    16a0:	a8 c0       	rjmp	.+336    	; 0x17f2 <vfprintf+0x39e>
    16a2:	2f 2f       	mov	r18, r31
    16a4:	20 61       	ori	r18, 0x10	; 16
    16a6:	b2 2e       	mov	r11, r18
    16a8:	b4 fe       	sbrs	r11, 4
    16aa:	0d c0       	rjmp	.+26     	; 0x16c6 <vfprintf+0x272>
    16ac:	8b 2d       	mov	r24, r11
    16ae:	84 60       	ori	r24, 0x04	; 4
    16b0:	b8 2e       	mov	r11, r24
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <vfprintf+0x272>
    16b4:	24 ff       	sbrs	r18, 4
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <vfprintf+0x278>
    16b8:	9f 2f       	mov	r25, r31
    16ba:	96 60       	ori	r25, 0x06	; 6
    16bc:	b9 2e       	mov	r11, r25
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <vfprintf+0x278>
    16c0:	28 e0       	ldi	r18, 0x08	; 8
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <vfprintf+0x27c>
    16c6:	20 e1       	ldi	r18, 0x10	; 16
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x27c>
    16cc:	20 e1       	ldi	r18, 0x10	; 16
    16ce:	32 e0       	ldi	r19, 0x02	; 2
    16d0:	f8 01       	movw	r30, r16
    16d2:	b7 fe       	sbrs	r11, 7
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <vfprintf+0x290>
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	0c 5f       	subi	r16, 0xFC	; 252
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <vfprintf+0x29c>
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 5f       	subi	r16, 0xFE	; 254
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	a4 01       	movw	r20, r8
    16f2:	e6 d0       	rcall	.+460    	; 0x18c0 <__ultoa_invert>
    16f4:	a8 2e       	mov	r10, r24
    16f6:	a8 18       	sub	r10, r8
    16f8:	fb 2d       	mov	r31, r11
    16fa:	ff 77       	andi	r31, 0x7F	; 127
    16fc:	bf 2e       	mov	r11, r31
    16fe:	b6 fe       	sbrs	r11, 6
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <vfprintf+0x2c4>
    1702:	2b 2d       	mov	r18, r11
    1704:	2e 7f       	andi	r18, 0xFE	; 254
    1706:	a5 14       	cp	r10, r5
    1708:	50 f4       	brcc	.+20     	; 0x171e <vfprintf+0x2ca>
    170a:	b4 fe       	sbrs	r11, 4
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <vfprintf+0x2ce>
    170e:	b2 fc       	sbrc	r11, 2
    1710:	08 c0       	rjmp	.+16     	; 0x1722 <vfprintf+0x2ce>
    1712:	2b 2d       	mov	r18, r11
    1714:	2e 7e       	andi	r18, 0xEE	; 238
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <vfprintf+0x2ce>
    1718:	7a 2c       	mov	r7, r10
    171a:	2b 2d       	mov	r18, r11
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <vfprintf+0x2d0>
    171e:	7a 2c       	mov	r7, r10
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <vfprintf+0x2d0>
    1722:	75 2c       	mov	r7, r5
    1724:	24 ff       	sbrs	r18, 4
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <vfprintf+0x2ee>
    1728:	fe 01       	movw	r30, r28
    172a:	ea 0d       	add	r30, r10
    172c:	f1 1d       	adc	r31, r1
    172e:	80 81       	ld	r24, Z
    1730:	80 33       	cpi	r24, 0x30	; 48
    1732:	11 f4       	brne	.+4      	; 0x1738 <vfprintf+0x2e4>
    1734:	29 7e       	andi	r18, 0xE9	; 233
    1736:	09 c0       	rjmp	.+18     	; 0x174a <vfprintf+0x2f6>
    1738:	22 ff       	sbrs	r18, 2
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <vfprintf+0x2f4>
    173c:	73 94       	inc	r7
    173e:	73 94       	inc	r7
    1740:	04 c0       	rjmp	.+8      	; 0x174a <vfprintf+0x2f6>
    1742:	82 2f       	mov	r24, r18
    1744:	86 78       	andi	r24, 0x86	; 134
    1746:	09 f0       	breq	.+2      	; 0x174a <vfprintf+0x2f6>
    1748:	73 94       	inc	r7
    174a:	23 fd       	sbrc	r18, 3
    174c:	12 c0       	rjmp	.+36     	; 0x1772 <vfprintf+0x31e>
    174e:	20 ff       	sbrs	r18, 0
    1750:	06 c0       	rjmp	.+12     	; 0x175e <vfprintf+0x30a>
    1752:	5a 2c       	mov	r5, r10
    1754:	73 14       	cp	r7, r3
    1756:	18 f4       	brcc	.+6      	; 0x175e <vfprintf+0x30a>
    1758:	53 0c       	add	r5, r3
    175a:	57 18       	sub	r5, r7
    175c:	73 2c       	mov	r7, r3
    175e:	73 14       	cp	r7, r3
    1760:	60 f4       	brcc	.+24     	; 0x177a <vfprintf+0x326>
    1762:	b7 01       	movw	r22, r14
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	2c 87       	std	Y+12, r18	; 0x0c
    176a:	78 d0       	rcall	.+240    	; 0x185c <fputc>
    176c:	73 94       	inc	r7
    176e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1770:	f6 cf       	rjmp	.-20     	; 0x175e <vfprintf+0x30a>
    1772:	73 14       	cp	r7, r3
    1774:	10 f4       	brcc	.+4      	; 0x177a <vfprintf+0x326>
    1776:	37 18       	sub	r3, r7
    1778:	01 c0       	rjmp	.+2      	; 0x177c <vfprintf+0x328>
    177a:	31 2c       	mov	r3, r1
    177c:	24 ff       	sbrs	r18, 4
    177e:	11 c0       	rjmp	.+34     	; 0x17a2 <vfprintf+0x34e>
    1780:	b7 01       	movw	r22, r14
    1782:	80 e3       	ldi	r24, 0x30	; 48
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	2c 87       	std	Y+12, r18	; 0x0c
    1788:	69 d0       	rcall	.+210    	; 0x185c <fputc>
    178a:	2c 85       	ldd	r18, Y+12	; 0x0c
    178c:	22 ff       	sbrs	r18, 2
    178e:	16 c0       	rjmp	.+44     	; 0x17bc <vfprintf+0x368>
    1790:	21 ff       	sbrs	r18, 1
    1792:	03 c0       	rjmp	.+6      	; 0x179a <vfprintf+0x346>
    1794:	88 e5       	ldi	r24, 0x58	; 88
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x34a>
    179a:	88 e7       	ldi	r24, 0x78	; 120
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	b7 01       	movw	r22, r14
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <vfprintf+0x366>
    17a2:	82 2f       	mov	r24, r18
    17a4:	86 78       	andi	r24, 0x86	; 134
    17a6:	51 f0       	breq	.+20     	; 0x17bc <vfprintf+0x368>
    17a8:	21 fd       	sbrc	r18, 1
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0x35c>
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <vfprintf+0x35e>
    17b0:	8b e2       	ldi	r24, 0x2B	; 43
    17b2:	27 fd       	sbrc	r18, 7
    17b4:	8d e2       	ldi	r24, 0x2D	; 45
    17b6:	b7 01       	movw	r22, r14
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	50 d0       	rcall	.+160    	; 0x185c <fputc>
    17bc:	a5 14       	cp	r10, r5
    17be:	30 f4       	brcc	.+12     	; 0x17cc <vfprintf+0x378>
    17c0:	b7 01       	movw	r22, r14
    17c2:	80 e3       	ldi	r24, 0x30	; 48
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	4a d0       	rcall	.+148    	; 0x185c <fputc>
    17c8:	5a 94       	dec	r5
    17ca:	f8 cf       	rjmp	.-16     	; 0x17bc <vfprintf+0x368>
    17cc:	aa 94       	dec	r10
    17ce:	f4 01       	movw	r30, r8
    17d0:	ea 0d       	add	r30, r10
    17d2:	f1 1d       	adc	r31, r1
    17d4:	80 81       	ld	r24, Z
    17d6:	b7 01       	movw	r22, r14
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	40 d0       	rcall	.+128    	; 0x185c <fputc>
    17dc:	a1 10       	cpse	r10, r1
    17de:	f6 cf       	rjmp	.-20     	; 0x17cc <vfprintf+0x378>
    17e0:	33 20       	and	r3, r3
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <vfprintf+0x392>
    17e4:	5d ce       	rjmp	.-838    	; 0x14a0 <vfprintf+0x4c>
    17e6:	b7 01       	movw	r22, r14
    17e8:	80 e2       	ldi	r24, 0x20	; 32
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	37 d0       	rcall	.+110    	; 0x185c <fputc>
    17ee:	3a 94       	dec	r3
    17f0:	f7 cf       	rjmp	.-18     	; 0x17e0 <vfprintf+0x38c>
    17f2:	f7 01       	movw	r30, r14
    17f4:	86 81       	ldd	r24, Z+6	; 0x06
    17f6:	97 81       	ldd	r25, Z+7	; 0x07
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <vfprintf+0x3aa>
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
    17fe:	2c 96       	adiw	r28, 0x0c	; 12
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	9f 90       	pop	r9
    1820:	8f 90       	pop	r8
    1822:	7f 90       	pop	r7
    1824:	6f 90       	pop	r6
    1826:	5f 90       	pop	r5
    1828:	4f 90       	pop	r4
    182a:	3f 90       	pop	r3
    182c:	2f 90       	pop	r2
    182e:	08 95       	ret

00001830 <strnlen_P>:
    1830:	fc 01       	movw	r30, r24
    1832:	05 90       	lpm	r0, Z+
    1834:	61 50       	subi	r22, 0x01	; 1
    1836:	70 40       	sbci	r23, 0x00	; 0
    1838:	01 10       	cpse	r0, r1
    183a:	d8 f7       	brcc	.-10     	; 0x1832 <strnlen_P+0x2>
    183c:	80 95       	com	r24
    183e:	90 95       	com	r25
    1840:	8e 0f       	add	r24, r30
    1842:	9f 1f       	adc	r25, r31
    1844:	08 95       	ret

00001846 <strnlen>:
    1846:	fc 01       	movw	r30, r24
    1848:	61 50       	subi	r22, 0x01	; 1
    184a:	70 40       	sbci	r23, 0x00	; 0
    184c:	01 90       	ld	r0, Z+
    184e:	01 10       	cpse	r0, r1
    1850:	d8 f7       	brcc	.-10     	; 0x1848 <strnlen+0x2>
    1852:	80 95       	com	r24
    1854:	90 95       	com	r25
    1856:	8e 0f       	add	r24, r30
    1858:	9f 1f       	adc	r25, r31
    185a:	08 95       	ret

0000185c <fputc>:
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	18 2f       	mov	r17, r24
    1866:	09 2f       	mov	r16, r25
    1868:	eb 01       	movw	r28, r22
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	81 fd       	sbrc	r24, 1
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <fputc+0x1a>
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	9f ef       	ldi	r25, 0xFF	; 255
    1874:	20 c0       	rjmp	.+64     	; 0x18b6 <fputc+0x5a>
    1876:	82 ff       	sbrs	r24, 2
    1878:	10 c0       	rjmp	.+32     	; 0x189a <fputc+0x3e>
    187a:	4e 81       	ldd	r20, Y+6	; 0x06
    187c:	5f 81       	ldd	r21, Y+7	; 0x07
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	42 17       	cp	r20, r18
    1884:	53 07       	cpc	r21, r19
    1886:	7c f4       	brge	.+30     	; 0x18a6 <fputc+0x4a>
    1888:	e8 81       	ld	r30, Y
    188a:	f9 81       	ldd	r31, Y+1	; 0x01
    188c:	9f 01       	movw	r18, r30
    188e:	2f 5f       	subi	r18, 0xFF	; 255
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	39 83       	std	Y+1, r19	; 0x01
    1894:	28 83       	st	Y, r18
    1896:	10 83       	st	Z, r17
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <fputc+0x4a>
    189a:	e8 85       	ldd	r30, Y+8	; 0x08
    189c:	f9 85       	ldd	r31, Y+9	; 0x09
    189e:	81 2f       	mov	r24, r17
    18a0:	09 95       	icall
    18a2:	89 2b       	or	r24, r25
    18a4:	29 f7       	brne	.-54     	; 0x1870 <fputc+0x14>
    18a6:	2e 81       	ldd	r18, Y+6	; 0x06
    18a8:	3f 81       	ldd	r19, Y+7	; 0x07
    18aa:	2f 5f       	subi	r18, 0xFF	; 255
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	3f 83       	std	Y+7, r19	; 0x07
    18b0:	2e 83       	std	Y+6, r18	; 0x06
    18b2:	81 2f       	mov	r24, r17
    18b4:	90 2f       	mov	r25, r16
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <__ultoa_invert>:
    18c0:	fa 01       	movw	r30, r20
    18c2:	aa 27       	eor	r26, r26
    18c4:	28 30       	cpi	r18, 0x08	; 8
    18c6:	51 f1       	breq	.+84     	; 0x191c <__ultoa_invert+0x5c>
    18c8:	20 31       	cpi	r18, 0x10	; 16
    18ca:	81 f1       	breq	.+96     	; 0x192c <__ultoa_invert+0x6c>
    18cc:	e8 94       	clt
    18ce:	6f 93       	push	r22
    18d0:	6e 7f       	andi	r22, 0xFE	; 254
    18d2:	6e 5f       	subi	r22, 0xFE	; 254
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	8f 4f       	sbci	r24, 0xFF	; 255
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	af 4f       	sbci	r26, 0xFF	; 255
    18dc:	b1 e0       	ldi	r27, 0x01	; 1
    18de:	3e d0       	rcall	.+124    	; 0x195c <__ultoa_invert+0x9c>
    18e0:	b4 e0       	ldi	r27, 0x04	; 4
    18e2:	3c d0       	rcall	.+120    	; 0x195c <__ultoa_invert+0x9c>
    18e4:	67 0f       	add	r22, r23
    18e6:	78 1f       	adc	r23, r24
    18e8:	89 1f       	adc	r24, r25
    18ea:	9a 1f       	adc	r25, r26
    18ec:	a1 1d       	adc	r26, r1
    18ee:	68 0f       	add	r22, r24
    18f0:	79 1f       	adc	r23, r25
    18f2:	8a 1f       	adc	r24, r26
    18f4:	91 1d       	adc	r25, r1
    18f6:	a1 1d       	adc	r26, r1
    18f8:	6a 0f       	add	r22, r26
    18fa:	71 1d       	adc	r23, r1
    18fc:	81 1d       	adc	r24, r1
    18fe:	91 1d       	adc	r25, r1
    1900:	a1 1d       	adc	r26, r1
    1902:	20 d0       	rcall	.+64     	; 0x1944 <__ultoa_invert+0x84>
    1904:	09 f4       	brne	.+2      	; 0x1908 <__ultoa_invert+0x48>
    1906:	68 94       	set
    1908:	3f 91       	pop	r19
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	26 9f       	mul	r18, r22
    190e:	11 24       	eor	r1, r1
    1910:	30 19       	sub	r19, r0
    1912:	30 5d       	subi	r19, 0xD0	; 208
    1914:	31 93       	st	Z+, r19
    1916:	de f6       	brtc	.-74     	; 0x18ce <__ultoa_invert+0xe>
    1918:	cf 01       	movw	r24, r30
    191a:	08 95       	ret
    191c:	46 2f       	mov	r20, r22
    191e:	47 70       	andi	r20, 0x07	; 7
    1920:	40 5d       	subi	r20, 0xD0	; 208
    1922:	41 93       	st	Z+, r20
    1924:	b3 e0       	ldi	r27, 0x03	; 3
    1926:	0f d0       	rcall	.+30     	; 0x1946 <__ultoa_invert+0x86>
    1928:	c9 f7       	brne	.-14     	; 0x191c <__ultoa_invert+0x5c>
    192a:	f6 cf       	rjmp	.-20     	; 0x1918 <__ultoa_invert+0x58>
    192c:	46 2f       	mov	r20, r22
    192e:	4f 70       	andi	r20, 0x0F	; 15
    1930:	40 5d       	subi	r20, 0xD0	; 208
    1932:	4a 33       	cpi	r20, 0x3A	; 58
    1934:	18 f0       	brcs	.+6      	; 0x193c <__ultoa_invert+0x7c>
    1936:	49 5d       	subi	r20, 0xD9	; 217
    1938:	31 fd       	sbrc	r19, 1
    193a:	40 52       	subi	r20, 0x20	; 32
    193c:	41 93       	st	Z+, r20
    193e:	02 d0       	rcall	.+4      	; 0x1944 <__ultoa_invert+0x84>
    1940:	a9 f7       	brne	.-22     	; 0x192c <__ultoa_invert+0x6c>
    1942:	ea cf       	rjmp	.-44     	; 0x1918 <__ultoa_invert+0x58>
    1944:	b4 e0       	ldi	r27, 0x04	; 4
    1946:	a6 95       	lsr	r26
    1948:	97 95       	ror	r25
    194a:	87 95       	ror	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	ba 95       	dec	r27
    1952:	c9 f7       	brne	.-14     	; 0x1946 <__ultoa_invert+0x86>
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 05       	cpc	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	08 95       	ret
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	0a 2e       	mov	r0, r26
    1962:	06 94       	lsr	r0
    1964:	57 95       	ror	r21
    1966:	47 95       	ror	r20
    1968:	37 95       	ror	r19
    196a:	27 95       	ror	r18
    196c:	ba 95       	dec	r27
    196e:	c9 f7       	brne	.-14     	; 0x1962 <__ultoa_invert+0xa2>
    1970:	62 0f       	add	r22, r18
    1972:	73 1f       	adc	r23, r19
    1974:	84 1f       	adc	r24, r20
    1976:	95 1f       	adc	r25, r21
    1978:	a0 1d       	adc	r26, r0
    197a:	08 95       	ret

0000197c <_exit>:
    197c:	f8 94       	cli

0000197e <__stop_program>:
    197e:	ff cf       	rjmp	.-2      	; 0x197e <__stop_program>
